[
    {
        "doc_status": "0",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Login Required",
        "component": "function LoginComponent({ currentState, onStateChange }) { const { useState } = React; const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [loading, setLoading] = useState(false); const [error, setError] = useState(''); const handleLogin = async (e) => { e.preventDefault(); setLoading(true); setError(''); try { const authData = await pb.collection('users').authWithPassword(email, password); localStorage.setItem('pb_auth', JSON.stringify(authData)); await onStateChange('Authenticated', { user: authData.record, loginTime: new Date().toISOString() }); } catch (err) { setError('Invalid credentials. Please try again.'); } finally { setLoading(false); } }; return React.createElement('div', { style: { maxWidth: '400px', margin: '50px auto', padding: '30px', border: '1px solid #ddd', borderRadius: '8px', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' } }, React.createElement('h2', { style: { textAlign: 'center', marginBottom: '30px', color: '#333' } }, 'Login Required'), React.createElement('form', { onSubmit: handleLogin }, React.createElement('div', { style: { marginBottom: '20px' } }, React.createElement('label', { style: { display: 'block', marginBottom: '5px', fontWeight: 'bold' } }, 'Email:'), React.createElement('input', { type: 'email', value: email, onChange: (e) => setEmail(e.target.value), required: true, style: { width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '16px' } })), React.createElement('div', { style: { marginBottom: '20px' } }, React.createElement('label', { style: { display: 'block', marginBottom: '5px', fontWeight: 'bold' } }, 'Password:'), React.createElement('input', { type: 'password', value: password, onChange: (e) => setPassword(e.target.value), required: true, style: { width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '16px' } })), error && React.createElement('div', { style: { color: 'red', marginBottom: '20px', textAlign: 'center' } }, error), React.createElement('button', { type: 'submit', disabled: loading, style: { width: '100%', padding: '12px', backgroundColor: loading ? '#ccc' : '#007bff', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: loading ? 'not-allowed' : 'pointer' } }, loading ? 'Logging in...' : 'Login')), React.createElement('p', { style: { fontSize: '12px', color: '#666', textAlign: 'center', marginTop: '20px' } }, `Current State: ${currentState}`)); }"
    },
    {
        "doc_status": "1",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Authenticated",
        "component": "function DashboardComponent({ currentState, onStateChange, userData }) { const { useState, useEffect } = React; const [user, setUser] = useState(null); const [documents, setDocuments] = useState([]); const [loading, setLoading] = useState(true); useEffect(() => { loadUserData(); }, []); const loadUserData = async () => { try { const authData = JSON.parse(localStorage.getItem('pb_auth') || '{}'); if (authData.record) { setUser(authData.record); const userDocs = await pb.collection(window.MAIN_COLLECTION).getList(1, 50, { filter: `created_by = '${authData.record.id}'`, sort: '-created' }); setDocuments(userDocs.items); } } catch (err) { console.error('Failed to load user data:', err); await handleLogout(); } finally { setLoading(false); } }; const handleLogout = async () => { pb.authStore.clear(); localStorage.removeItem('pb_auth'); await onStateChange('Login Required', { logoutTime: new Date().toISOString() }); }; const createNewDocument = async () => { try { await onStateChange('Creating Document', { action: 'create_new', timestamp: new Date().toISOString() }); } catch (err) { console.error('Failed to create document:', err); } }; if (loading) { return React.createElement('div', { style: { textAlign: 'center', padding: '50px' } }, React.createElement('p', null, 'Loading dashboard...')); } return React.createElement('div', { style: { maxWidth: '800px', margin: '20px auto', padding: '20px' } }, React.createElement('div', { style: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px', padding: '20px', backgroundColor: '#f8f9fa', borderRadius: '8px' } }, React.createElement('div', null, React.createElement('h2', { style: { margin: '0', color: '#333' } }, `Welcome, ${user?.name || user?.email}`), React.createElement('p', { style: { margin: '5px 0', color: '#666' } }, `State: ${currentState}`)), React.createElement('button', { onClick: handleLogout, style: { padding: '10px 20px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' } }, 'Logout')), React.createElement('div', { style: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px', marginBottom: '30px' } }, React.createElement('div', { style: { padding: '20px', border: '1px solid #ddd', borderRadius: '8px', textAlign: 'center' } }, React.createElement('h3', { style: { color: '#007bff' } }, documents.length), React.createElement('p', null, 'Total Documents')), React.createElement('div', { style: { padding: '20px', border: '1px solid #ddd', borderRadius: '8px', textAlign: 'center' } }, React.createElement('h3', { style: { color: '#28a745' } }, documents.filter(d => d.data?.status === 'Approved').length), React.createElement('p', null, 'Approved')), React.createElement('div', { style: { padding: '20px', border: '1px solid #ddd', borderRadius: '8px', textAlign: 'center' } }, React.createElement('h3', { style: { color: '#ffc107' } }, documents.filter(d => d.data?.status === 'Pending').length), React.createElement('p', null, 'Pending'))), React.createElement('button', { onClick: createNewDocument, style: { width: '100%', padding: '15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', cursor: 'pointer', marginBottom: '20px' } }, '+ Create New Document'), React.createElement('div', null, React.createElement('h3', null, 'Recent Documents'), documents.length === 0 ? React.createElement('p', { style: { color: '#666', fontStyle: 'italic' } }, 'No documents found') : documents.slice(0, 5).map(doc => React.createElement('div', { key: doc.id, style: { padding: '15px', border: '1px solid #eee', borderRadius: '6px', marginBottom: '10px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' } }, React.createElement('div', null, React.createElement('strong', null, doc.name), React.createElement('br', null), React.createElement('small', { style: { color: '#666' } }, `${doc.doctype} • ${doc.data?.status || 'Draft'}`)), React.createElement('small', { style: { color: '#999' } }, new Date(doc.created).toLocaleDateString()))))); }"
    },
    {
        "doc_status": "1",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Creating Document",
        "component": "function DocumentCreatorComponent({ currentState, onStateChange, userData }) { const { useState } = React; const [docType, setDocType] = useState('Invoice'); const [title, setTitle] = useState(''); const [description, setDescription] = useState(''); const [loading, setLoading] = useState(false); const [error, setError] = useState(''); const docTypes = ['Invoice', 'Purchase Order', 'Quotation', 'Delivery Note']; const handleSubmit = async (e) => { e.preventDefault(); setLoading(true); setError(''); try { const authData = JSON.parse(localStorage.getItem('pb_auth') || '{}'); const newDoc = { name: `${docType}-${Date.now()}`, doctype: docType, data: { title, description, status: 'Draft', workflow_state: 'Draft', created_by: authData.record?.id, created_at: new Date().toISOString(), docstatus: 0 } }; const createdDoc = await pb.collection(window.MAIN_COLLECTION).create(newDoc); await onStateChange('Document Created', { documentId: createdDoc.id, documentName: createdDoc.name, action: 'document_created' }); } catch (err) { setError('Failed to create document. Please try again.'); console.error('Document creation error:', err); } finally { setLoading(false); } }; const handleCancel = async () => { await onStateChange('Authenticated', { action: 'cancelled_creation' }); }; return React.createElement('div', { style: { maxWidth: '600px', margin: '50px auto', padding: '30px', border: '1px solid #ddd', borderRadius: '8px' } }, React.createElement('div', { style: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px' } }, React.createElement('h2', { style: { color: '#333' } }, 'Create New Document'), React.createElement('small', { style: { color: '#666' } }, `State: ${currentState}`)), React.createElement('form', { onSubmit: handleSubmit }, React.createElement('div', { style: { marginBottom: '20px' } }, React.createElement('label', { style: { display: 'block', marginBottom: '5px', fontWeight: 'bold' } }, 'Document Type:'), React.createElement('select', { value: docType, onChange: (e) => setDocType(e.target.value), style: { width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '16px' } }, docTypes.map(type => React.createElement('option', { key: type, value: type }, type)))), React.createElement('div', { style: { marginBottom: '20px' } }, React.createElement('label', { style: { display: 'block', marginBottom: '5px', fontWeight: 'bold' } }, 'Title:'), React.createElement('input', { type: 'text', value: title, onChange: (e) => setTitle(e.target.value), required: true, placeholder: 'Enter document title', style: { width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '16px' } })), React.createElement('div', { style: { marginBottom: '30px' } }, React.createElement('label', { style: { display: 'block', marginBottom: '5px', fontWeight: 'bold' } }, 'Description:'), React.createElement('textarea', { value: description, onChange: (e) => setDescription(e.target.value), rows: 4, placeholder: 'Enter document description...', style: { width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '4px', fontSize: '16px', resize: 'vertical' } })), error && React.createElement('div', { style: { color: 'red', marginBottom: '20px', textAlign: 'center' } }, error), React.createElement('div', { style: { display: 'flex', gap: '10px' } }, React.createElement('button', { type: 'button', onClick: handleCancel, style: { flex: 1, padding: '12px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Cancel'), React.createElement('button', { type: 'submit', disabled: loading, style: { flex: 1, padding: '12px', backgroundColor: loading ? '#ccc' : '#007bff', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: loading ? 'not-allowed' : 'pointer' } }, loading ? 'Creating...' : 'Create Document')))); }"
    },
    {
        "doc_status": "1",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Document Created",
        "component": "function DocumentSuccessComponent({ currentState, onStateChange, userData }) { const { useState, useEffect } = React; const [documentInfo, setDocumentInfo] = useState(null); const [nextActions, setNextActions] = useState([]); const [loading, setLoading] = useState(true); useEffect(() => { loadDocumentInfo(); }, []); const loadDocumentInfo = async () => { try { if (userData?.documentId) { const doc = await pb.collection(window.MAIN_COLLECTION).getOne(userData.documentId); setDocumentInfo(doc); const transitions = await pb.getAvailableTransitions(doc.doctype, doc.data?.workflow_state || 'Draft'); setNextActions(transitions); } } catch (err) { console.error('Failed to load document info:', err); } finally { setLoading(false); } }; const handleAction = async (action) => { try { if (documentInfo) { await pb.executeWorkflowTransition(documentInfo.name, action, 'Action executed from UI'); await onStateChange('Action Executed', { action, documentId: documentInfo.id, timestamp: new Date().toISOString() }); } } catch (err) { console.error('Action failed:', err); } }; const goToDashboard = async () => { await onStateChange('Authenticated', { source: 'document_success' }); }; const editDocument = async () => { await onStateChange('Editing Document', { documentId: documentInfo?.id, action: 'edit' }); }; if (loading) { return React.createElement('div', { style: { textAlign: 'center', padding: '50px' } }, React.createElement('p', null, 'Loading document info...')); } return React.createElement('div', { style: { maxWidth: '600px', margin: '50px auto', padding: '30px', border: '1px solid #ddd', borderRadius: '8px' } }, React.createElement('div', { style: { textAlign: 'center', marginBottom: '30px' } }, React.createElement('div', { style: { fontSize: '48px', color: '#28a745', marginBottom: '10px' } }, '✓'), React.createElement('h2', { style: { color: '#28a745', margin: '0' } }, 'Document Created Successfully!'), React.createElement('small', { style: { color: '#666' } }, `State: ${currentState}`)), documentInfo && React.createElement('div', { style: { backgroundColor: '#f8f9fa', padding: '20px', borderRadius: '6px', marginBottom: '30px' } }, React.createElement('h4', { style: { margin: '0 0 15px 0', color: '#333' } }, 'Document Details'), React.createElement('p', { style: { margin: '5px 0' } }, React.createElement('strong', null, 'Name: '), documentInfo.name), React.createElement('p', { style: { margin: '5px 0' } }, React.createElement('strong', null, 'Type: '), documentInfo.doctype), React.createElement('p', { style: { margin: '5px 0' } }, React.createElement('strong', null, 'Title: '), documentInfo.data?.title), React.createElement('p', { style: { margin: '5px 0' } }, React.createElement('strong', null, 'Status: '), documentInfo.data?.workflow_state || 'Draft'), React.createElement('p', { style: { margin: '5px 0' } }, React.createElement('strong', null, 'Created: '), new Date(documentInfo.created).toLocaleString())), nextActions.length > 0 && React.createElement('div', { style: { marginBottom: '30px' } }, React.createElement('h4', { style: { marginBottom: '15px', color: '#333' } }, 'Available Actions'), React.createElement('div', { style: { display: 'flex', flexWrap: 'wrap', gap: '10px' } }, nextActions.map(action => React.createElement('button', { key: action.action, onClick: () => handleAction(action.action), style: { padding: '10px 20px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '14px' } }, action.action)))), React.createElement('div', { style: { display: 'flex', gap: '10px' } }, React.createElement('button', { onClick: goToDashboard, style: { flex: 1, padding: '12px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Back to Dashboard'), React.createElement('button', { onClick: editDocument, style: { flex: 1, padding: '12px', backgroundColor: '#ffc107', color: 'black', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Edit Document'))); }"
    },
    {
        "doc_status": "2",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Access Denied",
        "component": "function AccessDeniedComponent({ currentState, onStateChange }) { const { useState, useEffect } = React; const [countdown, setCountdown] = useState(10); useEffect(() => { const timer = setInterval(() => { setCountdown(prev => { if (prev <= 1) { clearInterval(timer); redirectToLogin(); return 0; } return prev - 1; }); }, 1000); return () => clearInterval(timer); }, []); const redirectToLogin = async () => { pb.authStore.clear(); localStorage.removeItem('pb_auth'); await onStateChange('Login Required', { reason: 'access_denied_timeout' }); }; const manualLogin = async () => { await onStateChange('Login Required', { reason: 'manual_redirect' }); }; return React.createElement('div', { style: { maxWidth: '500px', margin: '100px auto', padding: '40px', border: '2px solid #dc3545', borderRadius: '8px', textAlign: 'center', backgroundColor: '#f8f9fa' } }, React.createElement('div', { style: { fontSize: '64px', color: '#dc3545', marginBottom: '20px' } }, '🚫'), React.createElement('h2', { style: { color: '#dc3545', marginBottom: '20px' } }, 'Access Denied'), React.createElement('p', { style: { fontSize: '18px', marginBottom: '30px', color: '#333' } }, 'You do not have permission to access this resource.'), React.createElement('div', { style: { backgroundColor: '#fff', padding: '20px', borderRadius: '6px', marginBottom: '30px' } }, React.createElement('p', { style: { margin: '0', color: '#666' } }, React.createElement('strong', null, 'Current State: '), currentState), React.createElement('p', { style: { margin: '10px 0 0 0', color: '#666' } }, `Redirecting to login in ${countdown} seconds...`)), React.createElement('button', { onClick: manualLogin, style: { padding: '12px 30px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Login Now')); }"
    },
    {
        "doc_status": "1",
        "parent": "Workflow-auth-flow",
        "parentfield": "states",
        "parenttype": "Workflow",
        "state": "Session Expired",
        "component": "function SessionExpiredComponent({ currentState, onStateChange }) { const handleRelogin = async () => { pb.authStore.clear(); localStorage.removeItem('pb_auth'); await onStateChange('Login Required', { reason: 'session_expired' }); }; const refreshSession = async () => { try { const authData = JSON.parse(localStorage.getItem('pb_auth') || '{}'); if (authData.token) { pb.authStore.save(authData.token, authData.record); await pb.collection('users').authRefresh(); const newAuthData = { token: pb.authStore.token, record: pb.authStore.model }; localStorage.setItem('pb_auth', JSON.stringify(newAuthData)); await onStateChange('Authenticated', { reason: 'session_refreshed', timestamp: new Date().toISOString() }); } else { throw new Error('No valid token found'); } } catch (err) { console.error('Session refresh failed:', err); await handleRelogin(); } }; return React.createElement('div', { style: { maxWidth: '500px', margin: '100px auto', padding: '40px', border: '2px solid #ffc107', borderRadius: '8px', textAlign: 'center', backgroundColor: '#fff3cd' } }, React.createElement('div', { style: { fontSize: '64px', marginBottom: '20px' } }, '⏰'), React.createElement('h2', { style: { color: '#856404', marginBottom: '20px' } }, 'Session Expired'), React.createElement('p', { style: { fontSize: '16px', marginBottom: '30px', color: '#856404' } }, 'Your session has expired for security reasons. Please refresh your session or log in again.'), React.createElement('div', { style: { backgroundColor: '#fff', padding: '15px', borderRadius: '6px', marginBottom: '30px', border: '1px solid #ffeaa7' } }, React.createElement('p', { style: { margin: '0', color: '#666', fontSize: '14px' } }, React.createElement('strong', null, 'Current State: '), currentState)), React.createElement('div', { style: { display: 'flex', gap: '15px', justifyContent: 'center' } }, React.createElement('button', { onClick: refreshSession, style: { padding: '12px 25px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Refresh Session'), React.createElement('button', { onClick: handleRelogin, style: { padding: '12px 25px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', fontSize: '16px', cursor: 'pointer' } }, 'Login Again'))); }"
    }
]