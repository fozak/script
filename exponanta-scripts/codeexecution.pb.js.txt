console.log("Hook file loaded successfully");

onRecordAfterCreateSuccess((e) => {
    try {
        const collection = e.record.collection().name;
        const recordId = e.record.id;

        console.log("‚úì Record saved successfully!");
        console.log("Collection:", collection);
        console.log("Record ID:", recordId);

        if (collection === "items") {
            console.log("‚úì Items record detected");

            const codeField = e.record.getString("code");
            console.log("‚úì Raw code field value:", codeField);

            if (codeField) {
                console.log("‚úì Code field found, length:", codeField.length);

                // üß† Function defined **inside** the hook to avoid Goja scoping issue
                const executeStoredCode = (record) => {
                    try {
                        const jsCode = record.getString("code");

                        if (!jsCode) {
                            console.warn("‚ö†Ô∏è No code to execute.");
                            return;
                        }

                        console.log("üß† Preparing to eval code...");
                        console.log("üîç Code content:", jsCode);

                        eval(jsCode);  // ‚úÖ eval will work now

                        console.log("‚úÖ Code executed successfully with eval.");
                    } catch (error) {
                        console.error("‚úó Code execution error (eval):", error.message);
                    }
                };

                executeStoredCode(e.record);
            } else {
                console.warn("‚ö†Ô∏è No code field found on record.");
            }
        }
    } catch (err) {
        console.error("‚úó Uncaught error in onRecordAfterCreateSuccess hook:", err.message);
    }
});



