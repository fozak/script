manifest.json:
{
  "manifest_version": 3,
  "name": "AI Chat with Code Execution",
  "version": "1.0",
  "description": "Chat interface with code execution capabilities",
  "permissions": [
    "activeTab",
    "scripting",
    "storage"
  ],
  "action": {
    "default_popup": "popup.html"
  },
  "content_scripts": [{
    "matches": ["<all_urls>"],
    "js": ["contentScript.js"]
  }]
}

popup.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat</title>
    <style>
        body {
            width: 400px;
            height: 600px;
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .chat-container {
            height: 100%;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        .chat-box {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        .message {
            padding: 10px;
            border-radius: 5px;
            margin: 5px 0;
            position: relative;
        }
        .user-message {
            background-color: white;
            color: black;
        }
        .ai-message {
            background-color: white;
            color: black;
        }
        .separator {
            height: 1px;
            background-color: #ccc;
            margin: 5px 0;
        }
        .input-container {
            padding: 10px;
            display: flex;
            gap: 5px;
        }
        .user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        .code-container {
            position: relative;
            margin: 10px 0;
            background: #f8f9fa;
            border-radius: 4px;
            padding: 10px;
        }
        .code-output {
            margin-top: 10px;
            padding: 10px;
            background: #2d2d2d;
            color: #fff;
            border-radius: 4px;
            white-space: pre-wrap;
            display: none;
        }
        .run-button {
            position: absolute;
            top: 5px;
            right: 5px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/2.1.3/marked.min.js"></script>
</head>
<body>
    <div class="chat-container">
        <div id="chat-box" class="chat-box"></div>
        <div class="input-container">
            <textarea id="user-input" class="user-input" placeholder="Type your message here..."></textarea>
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="popup.js"></script>
</body>
</html>

popup.js:
let conversationHistory = [];

const renderer = new marked.Renderer();
renderer.code = function(code, language) {
    const id = 'code-' + Math.random().toString(36).substr(2, 9);
    return `
        <div class="code-container">
            <pre><code class="language-${language}">${code}</code></pre>
            <button class="run-button" onclick="executeCodeFromButton('${id}', this)">Run Code</button>
            <div id="${id}" class="code-output"></div>
        </div>
    `;
};

marked.setOptions({ renderer });

async function executeCodeInTab(code, outputId) {
    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        const results = await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: (code) => {
                try {
                    return { result: eval.call(window, code), error: null };
                } catch (error) {
                    return { result: null, error: error.toString() };
                }
            },
            args: [code]
        });

        return results[0].result;
    } catch (error) {
        console.error('Error executing code:', error);
        const outputElement = document.getElementById(outputId);
        if (outputElement) {
            outputElement.textContent = `Error: ${error.message}`;
            outputElement.style.display = 'block';
        }
    }
}

async function executeCodeFromButton(outputId, button) {
    const codeElement = button.parentElement.querySelector('code');
    const outputElement = document.getElementById(outputId);
    const code = codeElement.textContent;

    outputElement.style.display = 'block';
    outputElement.textContent = '';

    const result = await executeCodeInTab(code, outputId);
    if (result !== undefined) {
        outputElement.textContent += JSON.stringify(result, null, 2);
    }
}

async function callOpenAI(prompt) {
    const apiKey = await chrome.storage.local.get('openai_api_key');
    const model = await chrome.storage.local.get('openai_model');

    if (!apiKey.openai_api_key || !model.openai_model) {
        alert("API key and model must be set before making requests.");
        setApiKeyAndModel();
        return;
    }

    const recentMessages = conversationHistory.slice(-4);
    
    const messages = [
        ...recentMessages,
        { role: 'user', content: prompt }
    ];

    const url = 'https://api.openai.com/v1/chat/completions';
    const requestBody = {
        model: model.openai_model,
        messages: messages,
        max_tokens: 2000,
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey.openai_api_key}`,
            },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        const assistantResponse = data.choices[0].message.content;
        
        conversationHistory.push({ role: 'user', content: prompt });
        conversationHistory.push({ role: 'assistant', content: assistantResponse });
        
        if (conversationHistory.length > 10) {
            conversationHistory = conversationHistory.slice(-10);
        }

        return assistantResponse;
    } catch (error) {
        console.error('Error calling OpenAI API:', error);
        return "Sorry, I couldn't get a response.";
    }
}

async function setApiKeyAndModel() {
    const apiKey = prompt("Please enter your OpenAI API Key:");
    const model = prompt("Please enter the model you want to use (e.g., gpt-4):");

    if (apiKey && model) {
        await chrome.storage.local.set({
            openai_api_key: apiKey,
            openai_model: model
        });
        alert("API Key and model have been saved!");
    } else {
        alert("Both API Key and model are required!");
        setApiKeyAndModel();
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    const storage = await chrome.storage.local.get(['openai_api_key', 'openai_model']);
    if (!storage.openai_api_key || !storage.openai_model) {
        setApiKeyAndModel();
    }

    document.getElementById('send-button').addEventListener('click', async () => {
        const userInput = document.getElementById('user-input');
        const userMessage = userInput.value;

        if (userMessage.trim() === '') return;

        const chatBox = document.getElementById('chat-box');
        const userMessageDiv = document.createElement('div');
        userMessageDiv.className = 'message user-message';
        userMessageDiv.innerText = userMessage;
        chatBox.appendChild(userMessageDiv);

        const userSeparator = document.createElement('div');
        userSeparator.className = 'separator';
        chatBox.appendChild(userSeparator);

        userInput.value = '';

        const aiResponse = await callOpenAI(userMessage);

        const aiMessageDiv = document.createElement('div');
        aiMessageDiv.className = 'message ai-message';
        aiMessageDiv.innerHTML = marked.parse(aiResponse);
        chatBox.appendChild(aiMessageDiv);

        const aiSeparator = document.createElement('div');
        aiSeparator.className = 'separator';
        chatBox.appendChild(aiSeparator);

        chatBox.scrollTop = chatBox.scrollHeight;
    });
});

contentScript.js:
// This file is intentionally empty as we don't need a persistent content script
// Code execution is handled through chrome.scripting.executeScript
