\lms/lms/doctype/lms_enrollment/lms_enrollment.json
{
 "actions": [],
 "allow_import": 1,
 "creation": "2022-02-07 12:01:40.929633",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "progress",
  "payment",
  "current_lesson",
  "column_break_3",
  "member",
  "member_name",
  "member_username",
  "certification_section",
  "purchased_certificate",
  "certificate",
  "section_break_8",
  "cohort",
  "subgroup",
  "batch_old",
  "column_break_12",
  "member_type",
  "role"
 ],
 "fields": [
  {
   "fieldname": "batch_old",
   "fieldtype": "Link",
   "label": "Batch Old",
   "options": "LMS Batch Old"
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1,
   "search_index": 1
  },
  {
   "default": "Student",
   "fieldname": "member_type",
   "fieldtype": "Select",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member Type",
   "options": "\nStudent\nMentor\nStaff"
  },
  {
   "default": "Member",
   "fieldname": "role",
   "fieldtype": "Select",
   "label": "Role",
   "options": "\nMember\nAdmin"
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Member Name",
   "read_only": 1
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "batch.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1,
   "search_index": 1
  },
  {
   "fieldname": "current_lesson",
   "fieldtype": "Link",
   "label": "Current Lesson",
   "options": "Course Lesson"
  },
  {
   "fetch_from": "member.username",
   "fieldname": "member_username",
   "fieldtype": "Data",
   "label": "Memeber Username",
   "read_only": 1
  },
  {
   "fieldname": "progress",
   "fieldtype": "Float",
   "label": "Progress",
   "read_only": 1
  },
  {
   "fieldname": "cohort",
   "fieldtype": "Link",
   "label": "Cohort",
   "options": "Cohort"
  },
  {
   "fieldname": "subgroup",
   "fieldtype": "Link",
   "label": "Subgroup",
   "options": "Cohort Subgroup"
  },
  {
   "fieldname": "column_break_12",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_8",
   "fieldtype": "Section Break",
   "hidden": 1
  },
  {
   "fieldname": "payment",
   "fieldtype": "Link",
   "label": "Payment",
   "options": "LMS Payment"
  },
  {
   "fieldname": "certification_section",
   "fieldtype": "Section Break",
   "label": "Certification"
  },
  {
   "default": "0",
   "fieldname": "purchased_certificate",
   "fieldtype": "Check",
   "label": "Purchased Certificate"
  },
  {
   "fieldname": "certificate",
   "fieldtype": "Link",
   "label": "Certificate",
   "options": "LMS Certificate"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-02-21 17:11:37.986157",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Enrollment",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "select": 1,
   "share": 1,
   "write": 1
  }
 ],
 "quick_entry": 1,
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "member_name",
 "track_changes": 1
}

\lms/lms/doctype/lms_program_member/lms_program_member.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSProgramMember(Document):
	pass


\lms/lms/doctype/chapter_reference/chapter_reference.json
{
 "actions": [],
 "autoname": "hash",
 "creation": "2021-07-27 16:25:02.903245",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "chapter"
 ],
 "fields": [
  {
   "fieldname": "chapter",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Chapter",
   "options": "Course Chapter",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-03-15 09:39:41.937565",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Chapter Reference",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/exercise_submission/__init__.py


\lms/lms/doctype/lms_category/lms_category.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:category",
 "creation": "2023-06-15 12:40:36.484165",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "category"
 ],
 "fields": [
  {
   "fieldname": "category",
   "fieldtype": "Data",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Category",
   "reqd": 1,
   "unique": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-09-23 19:33:49.593950",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Category",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "category",
 "track_changes": 1
}

\lms/lms/doctype/lms_course_progress/__init__.py


\lms/lms/doctype/lms_mentor_request/lms_mentor_request.json
{
 "actions": [],
 "creation": "2021-04-18 11:48:02.635688",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "member",
  "course",
  "reviewed_by",
  "column_break_3",
  "member_name",
  "status",
  "comments"
 ],
 "fields": [
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User"
  },
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course"
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Member Name"
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Status",
   "options": "Pending\nApproved\nRejected\nWithdrawn"
  },
  {
   "fieldname": "reviewed_by",
   "fieldtype": "Link",
   "label": "Reviewed By",
   "options": "User"
  },
  {
   "fieldname": "comments",
   "fieldtype": "Small Text",
   "label": "Comments"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-05-21 11:49:12.543502",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Mentor Request",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/lms_batch_old/lms_batch_old.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document

from lms.lms.doctype.lms_enrollment.lms_enrollment import create_membership
from lms.lms.utils import is_mentor


class LMSBatchOld(Document):
	def validate(self):
		pass
		# self.validate_if_mentor()

	def validate_if_mentor(self):
		if not is_mentor(self.course, frappe.session.user):
			course_title = frappe.db.get_value("LMS Course", self.course, "title")
			frappe.throw(_("You are not a mentor of the course {0}").format(course_title))

	def after_insert(self):
		create_membership(batch=self.name, course=self.course, member_type="Mentor")

	def is_member(self, email, member_type=None):
		"""Checks if a person is part of a batch.

		If member_type is specified, checks if the person is a Student/Mentor.
		"""

		filters = {"batch_old": self.name, "member": email}
		if member_type:
			filters["member_type"] = member_type
		return frappe.db.exists("LMS Enrollment", filters)

	def get_membership(self, email):
		"""Returns the membership document of given user."""
		name = frappe.get_value(
			doctype="LMS Enrollment",
			filters={"batch_old": self.name, "member": email},
			fieldname="name",
		)
		return frappe.get_doc("LMS Enrollment", name)

	def get_current_lesson(self, user):
		"""Returns the name of the current lesson for the given user."""
		membership = self.get_membership(user)
		return membership and membership.current_lesson


@frappe.whitelist()
def save_message(message, batch):
	doc = frappe.get_doc(
		{
			"doctype": "LMS Message",
			"batch_old": batch,
			"author": frappe.session.user,
			"message": message,
		}
	)
	doc.save(ignore_permissions=True)


def switch_batch(course_name, email, batch_name):
	"""Switches the user from the current batch of the course to a new batch."""
	membership = frappe.get_last_doc(
		"LMS Enrollment", filters={"course": course_name, "member": email}
	)

	batch = frappe.get_doc("LMS Batch Old", batch_name)
	if not batch:
		raise ValueError(f"Invalid Batch: {batch_name}")

	if batch.course != course_name:
		raise ValueError("Can not switch batches across courses")

	if batch.is_member(email):
		print(f"{email} is already a member of {batch.title}")
		return

	old_batch = frappe.get_doc("LMS Batch Old", membership.batch_old)

	membership.batch_old = batch_name
	membership.save()

	# update exercise submissions
	filters = {"owner": email, "batch_old": old_batch.name}
	for name in frappe.db.get_all("Exercise Submission", filters=filters, pluck="name"):
		doc = frappe.get_doc("Exercise Submission", name)
		print("updating exercise submission", name)
		doc.batch_old = batch_name
		doc.save()


\lms/lms/doctype/lms_quiz/lms_quiz.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Quiz", {
	// refresh: function(frm) {
	// }
});

frappe.ui.form.on("LMS Quiz Question", {
	marks: function (frm) {
		total_marks = 0;
		frm.doc.questions.forEach((question) => {
			total_marks += question.marks;
		});
		frm.doc.total_marks = total_marks;
	},
});


\lms/lms/doctype/lms_program_course/lms_program_course.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2024-11-18 12:27:37.030302",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "course_title"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fetch_from": "course.title",
   "fieldname": "course_title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Course Title",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2024-11-18 12:43:46.800199",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Program Course",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/exercise_submission/exercise_submission.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Exercise Submission", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_category/lms_category.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSCategory(Document):
	pass


\lms/lms/doctype/lms_settings/__init__.py


\lms/lms/doctype/lms_enrollment/lms_enrollment.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils import ceil


class LMSEnrollment(Document):
	def validate(self):
		self.validate_membership_in_same_batch()
		self.validate_membership_in_different_batch_same_course()

	def on_update(self):
		self.update_program_progress()

	def validate_membership_in_same_batch(self):
		filters = {"member": self.member, "course": self.course, "name": ["!=", self.name]}
		if self.batch_old:
			filters["batch_old"] = self.batch_old
		previous_membership = frappe.db.get_value(
			"LMS Enrollment", filters, fieldname=["member_type", "member"], as_dict=1
		)

		if previous_membership:
			member_name = frappe.db.get_value("User", self.member, "full_name")
			course_title = frappe.db.get_value("LMS Course", self.course, "title")
			frappe.throw(
				_("{0} is already a {1} of the course {2}").format(
					member_name, previous_membership.member_type, course_title
				)
			)

	def validate_membership_in_different_batch_same_course(self):
		"""Ensures that a studnet is only part of one batch."""
		# nothing to worry if the member is not a student
		if self.member_type != "Student":
			return

		course = frappe.db.get_value("LMS Batch Old", self.batch_old, "course")
		memberships = frappe.get_all(
			"LMS Enrollment",
			filters={
				"member": self.member,
				"name": ["!=", self.name],
				"member_type": "Student",
				"course": self.course,
			},
			fields=["batch_old", "member_type", "name"],
		)

		if memberships:
			membership = memberships[0]
			member_name = frappe.db.get_value("User", self.member, "full_name")
			frappe.throw(
				_("{0} is already a Student of {1} course through {2} batch").format(
					member_name, course, membership.batch_old
				)
			)

	def update_program_progress(self):
		programs = frappe.get_all(
			"LMS Program Member", {"member": self.member}, ["parent", "name"]
		)

		for program in programs:
			total_progress = 0
			courses = frappe.get_all(
				"LMS Program Course", {"parent": program.parent}, pluck="course"
			)
			for course in courses:
				progress = frappe.db.get_value(
					"LMS Enrollment", {"course": course, "member": self.member}, "progress"
				)
				progress = progress or 0
				total_progress += progress

			average_progress = ceil(total_progress / len(courses))
			frappe.db.set_value("LMS Program Member", program.name, "progress", average_progress)


@frappe.whitelist()
def create_membership(
	course, batch=None, member=None, member_type="Student", role="Member"
):
	frappe.get_doc(
		{
			"doctype": "LMS Enrollment",
			"batch_old": batch,
			"course": course,
			"role": role,
			"member_type": member_type,
			"member": member or frappe.session.user,
		}
	).save(ignore_permissions=True)
	return "OK"


@frappe.whitelist()
def update_current_membership(batch, course, member):
	all_memberships = frappe.get_all(
		"LMS Enrollment", {"member": member, "course": course}
	)
	for membership in all_memberships:
		frappe.db.set_value("LMS Enrollment", membership.name, "is_current", 0)

	current_membership = frappe.get_all(
		"LMS Enrollment", {"batch_old": batch, "member": member}
	)
	if len(current_membership):
		frappe.db.set_value("LMS Enrollment", current_membership[0].name, "is_current", 1)


\lms/lms/doctype/chapter_reference/chapter_reference.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class ChapterReference(Document):
	pass


\lms/lms/doctype/lms_batch_old/test_lms_batch_old.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSBatchOld(unittest.TestCase):
	pass


\lms/lms/doctype/lms_course_progress/lms_course_progress.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Course Progress", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_mentor_request/lms_mentor_request.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document


class LMSMentorRequest(Document):
	def on_update(self):
		if self.has_value_changed("status"):

			if self.status == "Approved":
				self.create_course_mentor_mapping()

			if self.status != "Pending":
				self.send_status_change_email()

	def create_course_mentor_mapping(self):
		mapping = frappe.get_doc(
			{
				"doctype": "LMS Course Mentor Mapping",
				"mentor": self.member,
				"course": self.course,
			}
		)
		mapping.save()

	def send_creation_email(self):
		email_template = self.get_email_template("mentor_request_creation")
		if not email_template:
			return

		course_details = frappe.db.get_value(
			"LMS Course", self.course, ["owner", "slug", "title"], as_dict=True
		)
		message = frappe.render_template(
			email_template.response,
			{
				"member_name": frappe.db.get_value("User", frappe.session.user, "full_name"),
				"course_url": "/lms/courses/" + course_details.slug,
				"course": course_details.title,
			},
		)

		email_args = {
			"recipients": [frappe.session.user, course_details.owner],
			"subject": email_template.subject,
			"header": email_template.subject,
			"message": message,
		}
		frappe.enqueue(
			method=frappe.sendmail, queue="short", timeout=300, is_async=True, **email_args
		)

	def send_status_change_email(self):
		email_template = self.get_email_template("mentor_request_status_update")
		if not email_template:
			return

		course_details = frappe.db.get_value(
			"LMS Course", self.course, ["owner", "title"], as_dict=True
		)
		message = frappe.render_template(
			email_template.response,
			{
				"member_name": self.member_name,
				"status": self.status,
				"course": course_details.title,
			},
		)

		if self.status == "Approved" or self.status == "Rejected":
			email_args = {
				"recipients": self.member,
				"cc": [course_details.owner, self.reviewed_by],
				"subject": email_template.subject,
				"header": email_template.subject,
				"message": message,
			}
			frappe.enqueue(
				method=frappe.sendmail, queue="short", timeout=300, is_async=True, **email_args
			)

		elif self.status == "Withdrawn":
			email_args = {
				"recipients": [self.member, course_details.owner],
				"subject": email_template.subject,
				"header": email_template.subject,
				"message": message,
			}
			frappe.enqueue(
				method=frappe.sendmail, queue="short", timeout=300, is_async=True, **email_args
			)

	def get_email_template(self, template_name):
		template = frappe.db.get_single_value("LMS Settings", template_name)
		if template:
			return frappe.get_doc("Email Template", template)


@frappe.whitelist()
def has_requested(course):
	return frappe.db.count(
		"LMS Mentor Request",
		filters={
			"member": frappe.session.user,
			"course": course,
			"status": ["in", ("Pending", "Approved")],
		},
	)


@frappe.whitelist()
def create_request(course):
	if not has_requested(course):
		request = frappe.get_doc(
			{
				"doctype": "LMS Mentor Request",
				"member": frappe.session.user,
				"course": course,
				"status": "Pending",
			}
		)
		request.save(ignore_permissions=True)
		request.send_creation_email()
		return "OK"

	else:
		return "Already Applied"


@frappe.whitelist()
def cancel_request(course):
	request = frappe.get_doc(
		"LMS Mentor Request",
		{
			"member": frappe.session.user,
			"course": course,
			"status": ["in", ("Pending", "Approved")],
		},
	)
	request.status = "Withdrawn"
	request.save(ignore_permissions=True)
	return "OK"


\lms/lms/doctype/lms_quiz/lms_quiz.json
{
 "actions": [],
 "allow_import": 1,
 "allow_rename": 1,
 "creation": "2021-06-07 10:50:17.893625",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "max_attempts",
  "show_answers",
  "show_submission_history",
  "column_break_gaac",
  "total_marks",
  "passing_percentage",
  "duration",
  "section_break_tzbu",
  "shuffle_questions",
  "column_break_clsh",
  "limit_questions_to",
  "section_break_sbjx",
  "questions",
  "section_break_3",
  "lesson",
  "column_break_5",
  "course"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1,
   "unique": 1
  },
  {
   "fieldname": "questions",
   "fieldtype": "Table",
   "label": "Questions",
   "options": "LMS Quiz Question"
  },
  {
   "fieldname": "lesson",
   "fieldtype": "Link",
   "label": "Lesson",
   "options": "Course Lesson",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "max_attempts",
   "fieldtype": "Int",
   "label": "Max Attempts"
  },
  {
   "fetch_from": "lesson.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fieldname": "column_break_5",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_3",
   "fieldtype": "Section Break"
  },
  {
   "default": "1",
   "fieldname": "show_answers",
   "fieldtype": "Check",
   "in_standard_filter": 1,
   "label": "Show Answers"
  },
  {
   "fieldname": "column_break_gaac",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_sbjx",
   "fieldtype": "Section Break"
  },
  {
   "default": "0",
   "fieldname": "show_submission_history",
   "fieldtype": "Check",
   "label": "Show Submission History"
  },
  {
   "fieldname": "passing_percentage",
   "fieldtype": "Int",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Passing Percentage",
   "non_negative": 1,
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "total_marks",
   "fieldtype": "Int",
   "in_list_view": 1,
   "label": "Total Marks",
   "non_negative": 1,
   "read_only": 1,
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "shuffle_questions",
   "fieldtype": "Check",
   "label": "Shuffle Questions"
  },
  {
   "depends_on": "shuffle_questions",
   "fieldname": "limit_questions_to",
   "fieldtype": "Int",
   "label": "Limit Questions To"
  },
  {
   "fieldname": "section_break_tzbu",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_clsh",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "duration",
   "fieldtype": "Data",
   "label": "Duration (in minutes)"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-01-06 11:02:09.749207",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Quiz",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Course Creator",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/lms_program_course/lms_program_course.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSProgramCourse(Document):
	pass


\lms/lms/doctype/course_instructor/__init__.py


\lms/lms/doctype/lms_enrollment/test_lms_enrollment.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

import unittest

import frappe

from lms.lms.doctype.lms_course.test_lms_course import new_course, new_user


class TestLMSEnrollment(unittest.TestCase):
	def setUp(self):
		frappe.db.delete("LMS Enrollment")
		frappe.db.delete("LMS Batch Old")
		frappe.db.delete("LMS Course Mentor Mapping")
		frappe.db.delete("User", {"email": ("like", "%@test.com")})

	def new_course_batch(self):
		course = new_course("Test Course")

		new_user("Test Mentor", "mentor@test.com")
		# without this, the creating batch will fail
		course.add_mentor("mentor@test.com")

		frappe.session.user = "mentor@test.com"

		batch = frappe.get_doc(
			{
				"doctype": "LMS Batch Old",
				"name": "test-batch",
				"title": "Test Batch",
				"course": course.name,
			}
		)
		batch.insert(ignore_permissions=True)

		frappe.session.user = "Administrator"
		return course, batch

	def add_membership(self, batch_name, member_name, course, member_type="Student"):
		doc = frappe.get_doc(
			{
				"doctype": "LMS Enrollment",
				"batch_old": batch_name,
				"member": member_name,
				"member_type": member_type,
				"course": course,
			}
		)
		doc.insert()
		return doc

	def test_membership(self):
		course, batch = self.new_course_batch()
		member = new_user("Test", "test01@test.com")
		membership = self.add_membership(batch.name, member.name, course.name)

		assert membership.course == course.name
		assert membership.member_name == member.full_name

	def test_membership_change_role(self):
		course, batch = self.new_course_batch()
		member = new_user("Test", "test01@test.com")
		membership = self.add_membership(batch.name, member.name, course.name)

		# it should be possible to change role
		membership.role = "Admin"
		membership.save()


\lms/lms/doctype/exercise_submission/exercise_submission.json
{
 "actions": [],
 "creation": "2021-05-19 11:41:18.108316",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "exercise",
  "status",
  "batch_old",
  "column_break_4",
  "exercise_title",
  "course",
  "lesson",
  "section_break_8",
  "solution",
  "image",
  "test_results",
  "comments",
  "member"
 ],
 "fields": [
  {
   "fieldname": "exercise",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Exercise",
   "options": "LMS Exercise"
  },
  {
   "fetch_from": "exercise.title",
   "fieldname": "exercise_title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Exercise Title",
   "read_only": 1
  },
  {
   "fetch_from": "exercise.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fieldname": "batch_old",
   "fieldtype": "Link",
   "label": "Batch Old",
   "options": "LMS Batch Old"
  },
  {
   "fetch_from": "exercise.lesson",
   "fieldname": "lesson",
   "fieldtype": "Link",
   "label": "Lesson",
   "options": "Course Lesson"
  },
  {
   "fieldname": "image",
   "fieldtype": "Code",
   "label": "Image",
   "read_only": 1
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "label": "Status",
   "options": "Correct\nIncorrect"
  },
  {
   "fieldname": "test_results",
   "fieldtype": "Small Text",
   "label": "Test Results"
  },
  {
   "fieldname": "comments",
   "fieldtype": "Small Text",
   "label": "Comments"
  },
  {
   "fieldname": "solution",
   "fieldtype": "Code",
   "in_list_view": 1,
   "label": "Solution"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_8",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "label": "Member",
   "options": "LMS Enrollment"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-12-08 22:25:05.809377",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Exercise Submission",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}


\lms/lms/doctype/lms_sidebar_item/__init__.py


\lms/lms/doctype/lms_category/test_lms_category.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSCategory(UnitTestCase):
	pass


\lms/lms/doctype/lms_mentor_request/test_lms_mentor_request.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSMentorRequest(unittest.TestCase):
	pass


\lms/lms/doctype/lms_settings/lms_settings.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Settings", {
	setup: function (frm) {
		frappe.call({
			method: "lms.lms.doctype.lms_settings.lms_settings.check_payments_app",
			callback: (data) => {
				if (!data.message) {
					frm.set_df_property("payment_section", "hidden", 1);
					frm.trigger("set_no_payments_app_html");
				} else {
					frm.set_df_property("no_payments_app", "hidden", 1);
				}
			},
		});
	},

	set_no_payments_app_html(frm) {
		frm.get_field("payments_app_is_not_installed").html(`
				<div class="alert alert-warning">
					Please install the
					<a target="_blank" style="color: var(--alert-text-warning); background: var(--alert-bg-warning);" href="https://frappecloud.com/marketplace/apps/payments">
						Payments app
					</a>
					 to enable payment gateway.
			`);
	},
});


\lms/lms/doctype/lms_course_progress/lms_course_progress.json
{
 "actions": [],
 "creation": "2021-05-31 17:20:13.388453",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "member",
  "member_name",
  "status",
  "column_break_3",
  "lesson",
  "chapter",
  "course"
 ],
 "fields": [
  {
   "fetch_from": "chapter.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1,
   "search_index": 1
  },
  {
   "fetch_from": "lesson.chapter",
   "fieldname": "chapter",
   "fieldtype": "Link",
   "label": "Chapter",
   "options": "Course Chapter",
   "read_only": 1,
   "search_index": 1
  },
  {
   "fieldname": "lesson",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Lesson",
   "options": "Course Lesson",
   "search_index": 1
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Status",
   "options": "Complete\nPartially Complete\nIncomplete",
   "search_index": 1
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "label": "Member",
   "options": "User",
   "search_index": 1
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "label": "Member Name",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-01-17 15:54:34.040621",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Course Progress",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "member_name",
 "track_changes": 1
}

\lms/lms/doctype/lms_quiz_question/__init__.py


\lms/lms/doctype/lms_quiz/lms_quiz.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import json
import frappe
import re
from frappe import _, safe_decode
from frappe.model.document import Document
from frappe.utils import cstr, comma_and, cint
from fuzzywuzzy import fuzz
from lms.lms.doctype.course_lesson.course_lesson import save_progress
from lms.lms.utils import (
	generate_slug,
	has_course_moderator_role,
	has_course_instructor_role,
)
from binascii import Error as BinasciiError
from frappe.utils.file_manager import safe_b64decode
from frappe.core.doctype.file.utils import get_random_filename


class LMSQuiz(Document):
	def validate(self):
		self.validate_duplicate_questions()
		self.validate_limit()
		self.calculate_total_marks()
		self.validate_open_ended_questions()

	def validate_duplicate_questions(self):
		questions = [row.question for row in self.questions]
		rows = [i + 1 for i, x in enumerate(questions) if questions.count(x) > 1]
		if len(rows):
			frappe.throw(
				_("Rows {0} have the duplicate questions.").format(frappe.bold(comma_and(rows)))
			)

	def validate_limit(self):
		if self.limit_questions_to and cint(self.limit_questions_to) >= len(self.questions):
			frappe.throw(
				_("Limit cannot be greater than or equal to the number of questions in the quiz.")
			)

		if self.limit_questions_to and cint(self.limit_questions_to) < len(self.questions):
			marks = [question.marks for question in self.questions]
			if len(set(marks)) > 1:
				frappe.throw(_("All questions should have the same marks if the limit is set."))

	def calculate_total_marks(self):
		if self.limit_questions_to:
			self.total_marks = sum(
				question.marks for question in self.questions[: cint(self.limit_questions_to)]
			)
		else:
			self.total_marks = sum(cint(question.marks) for question in self.questions)

	def validate_open_ended_questions(self):
		types = [question.type for question in self.questions]
		types = set(types)

		if "Open Ended" in types:
			if len(types) > 1:
				frappe.throw(
					_(
						"If you want open ended questions then make sure each question in the quiz is of open ended type."
					)
				)
			else:
				self.show_answers = 0

	def autoname(self):
		if not self.name:
			self.name = generate_slug(self.title, "LMS Quiz")

	def get_last_submission_details(self):
		"""Returns the latest submission for this user."""
		user = frappe.session.user
		if not user or user == "Guest":
			return

		result = frappe.get_all(
			"LMS Quiz Submission",
			fields="*",
			filters={"owner": user, "quiz": self.name},
			order_by="creation desc",
			page_length=1,
		)

		if result:
			return result[0]


def set_total_marks(questions):
	marks = 0
	for question in questions:
		marks += question.get("marks")
	return marks


@frappe.whitelist()
def quiz_summary(quiz, results):
	score = 0
	results = results and json.loads(results)
	is_open_ended = False
	percentage = 0

	quiz_details = frappe.db.get_value(
		"LMS Quiz",
		quiz,
		["total_marks", "passing_percentage", "lesson", "course"],
		as_dict=1,
	)

	score_out_of = quiz_details.total_marks

	for result in results:
		question_details = frappe.db.get_value(
			"LMS Quiz Question",
			{"parent": quiz, "question": result["question_name"]},
			["question", "marks", "question_detail", "type"],
			as_dict=1,
		)

		result["question_name"] = question_details.question
		result["question"] = question_details.question_detail
		result["marks_out_of"] = question_details.marks

		if question_details.type != "Open Ended":
			correct = result["is_correct"][0]
			for point in result["is_correct"]:
				correct = correct and point
			result["is_correct"] = correct

			marks = question_details.marks if correct else 0
			result["marks"] = marks
			score += marks

		else:
			result["is_correct"] = 0
			is_open_ended = True

		percentage = (score / score_out_of) * 100
		result["answer"] = re.sub(
			r'<img[^>]*src\s*=\s*["\'](?=data:)(.*?)["\']', _save_file, result["answer"]
		)

	submission = frappe.new_doc("LMS Quiz Submission")
	# Score and percentage are calculated by the controller function
	submission.update(
		{
			"doctype": "LMS Quiz Submission",
			"quiz": quiz,
			"result": results,
			"score": 0,
			"score_out_of": score_out_of,
			"member": frappe.session.user,
			"percentage": 0,
			"passing_percentage": quiz_details.passing_percentage,
		}
	)
	submission.save(ignore_permissions=True)

	if (
		percentage >= quiz_details.passing_percentage
		and quiz_details.lesson
		and quiz_details.course
	):
		save_progress(quiz_details.lesson, quiz_details.course)
	elif not quiz_details.passing_percentage:
		save_progress(quiz_details.lesson, quiz_details.course)

	return {
		"score": score,
		"score_out_of": score_out_of,
		"submission": submission.name,
		"pass": percentage == quiz_details.passing_percentage,
		"percentage": percentage,
		"is_open_ended": is_open_ended,
	}


def _save_file(match):
	data = match.group(1).split("data:")[1]
	headers, content = data.split(",")
	mtype = headers.split(";", 1)[0]

	if isinstance(content, str):
		content = content.encode("utf-8")
	if b"," in content:
		content = content.split(b",")[1]

	try:
		content = safe_b64decode(content)
	except BinasciiError:
		frappe.flags.has_dataurl = True
		return f'<img src="#broken-image" alt="{get_corrupted_image_msg()}"'

	if "filename=" in headers:
		filename = headers.split("filename=")[-1]
		filename = safe_decode(filename).split(";", 1)[0]

	else:
		filename = get_random_filename(content_type=mtype)

	_file = frappe.get_doc(
		{
			"doctype": "File",
			"file_name": filename,
			"content": content,
			"decode": False,
			"is_private": False,
		}
	)
	_file.save(ignore_permissions=True)
	file_url = _file.unique_url
	frappe.flags.has_dataurl = True

	return f'<img src="{file_url}"'


def get_corrupted_image_msg():
	return _("Image: Corrupted Data Stream")


@frappe.whitelist()
def get_question_details(question):
	if frappe.db.exists("LMS Quiz Question", question):
		fields = ["name", "question", "type"]
		for num in range(1, 5):
			fields.append(f"option_{cstr(num)}")
			fields.append(f"is_correct_{cstr(num)}")
			fields.append(f"explanation_{cstr(num)}")
			fields.append(f"possibility_{cstr(num)}")

		return frappe.db.get_value("LMS Quiz Question", question, fields, as_dict=1)
	return


@frappe.whitelist()
def check_answer(question, type, answers):
	answers = json.loads(answers)
	if type == "Choices":
		return check_choice_answers(question, answers)
	else:
		return check_input_answers(question, answers[0])


def check_choice_answers(question, answers):
	fields = ["multiple"]
	is_correct = []
	for num in range(1, 5):
		fields.append(f"option_{cstr(num)}")
		fields.append(f"is_correct_{cstr(num)}")

	question_details = frappe.db.get_value("LMS Question", question, fields, as_dict=1)

	for num in range(1, 5):
		if question_details[f"option_{num}"] in answers:
			is_correct.append(question_details[f"is_correct_{num}"])
		elif question_details[f"is_correct_{num}"]:
			is_correct.append(2)
		else:
			is_correct.append(0)

	return is_correct


def check_input_answers(question, answer):
	fields = []
	for num in range(1, 5):
		fields.append(f"possibility_{cstr(num)}")

	question_details = frappe.db.get_value("LMS Question", question, fields, as_dict=1)
	for num in range(1, 5):
		current_possibility = question_details[f"possibility_{num}"]
		if current_possibility and fuzz.token_sort_ratio(current_possibility, answer) > 85:
			return 1

	return 0


\lms/lms/doctype/course_instructor/course_instructor.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2022-02-07 11:39:59.998762",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "instructor"
 ],
 "fields": [
  {
   "fieldname": "instructor",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Instructor",
   "options": "User"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-02-07 11:41:42.943250",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Course Instructor",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/cohort_web_page/__init__.py


\lms/lms/doctype/exercise_submission/exercise_submission.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class ExerciseSubmission(Document):
	def on_update(self):
		self.update_latest_submission()

	def update_latest_submission(self):
		names = frappe.get_all(
			"Exercise Latest Submission", {"exercise": self.exercise, "member": self.member}
		)
		if names:
			doc = frappe.get_doc("Exercise Latest Submission", names[0])
			doc.latest_submission = self.name
			doc.save(ignore_permissions=True)
		else:
			doc = frappe.get_doc(
				{
					"doctype": "Exercise Latest Submission",
					"exercise": self.exercise,
					"member": self.member,
					"latest_submission": self.name,
				}
			)
			doc.insert(ignore_permissions=True)


\lms/lms/doctype/lms_sidebar_item/lms_sidebar_item.js
// Copyright (c) 2024, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Sidebar Item", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/lms_settings/lms_settings.json
{
 "actions": [],
 "creation": "2021-03-09 14:30:15.807410",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "general_tab",
  "default_home",
  "send_calendar_invite_for_evaluations",
  "is_onboarding_complete",
  "column_break_zdel",
  "allow_guest_access",
  "enable_learning_paths",
  "unsplash_access_key",
  "livecode_url",
  "section_break_szgq",
  "show_day_view",
  "column_break_2",
  "show_dashboard",
  "show_courses",
  "show_students",
  "show_assessments",
  "show_live_class",
  "show_discussions",
  "show_emails",
  "signup_settings_tab",
  "signup_settings_section",
  "column_break_9",
  "custom_signup_content",
  "user_category",
  "sidebar_tab",
  "items_in_sidebar_section",
  "courses",
  "batches",
  "certified_participants",
  "column_break_exdz",
  "jobs",
  "statistics",
  "notifications",
  "section_break_qlss",
  "sidebar_items",
  "mentor_request_section",
  "mentor_request_creation",
  "mentor_request_status_update",
  "payment_settings_tab",
  "payment_section",
  "payment_gateway",
  "default_currency",
  "exception_country",
  "column_break_cfcv",
  "apply_gst",
  "show_usd_equivalent",
  "apply_rounding",
  "no_payments_app",
  "payments_app_is_not_installed",
  "email_templates_tab",
  "certification_template",
  "batch_confirmation_template",
  "column_break_uwsp",
  "assignment_submission_template",
  "payment_reminder_template"
 ],
 "fields": [
  {
   "default": "https://livecode.dev.fossunited.org",
   "fieldname": "livecode_url",
   "fieldtype": "Data",
   "hidden": 1,
   "label": "LiveCode URL"
  },
  {
   "fieldname": "mentor_request_creation",
   "fieldtype": "Link",
   "label": "Mentor Request Creation Template",
   "options": "Email Template"
  },
  {
   "fieldname": "mentor_request_status_update",
   "fieldtype": "Link",
   "label": "Mentor Request Status Update Template",
   "options": "Email Template"
  },
  {
   "fieldname": "mentor_request_section",
   "fieldtype": "Section Break",
   "hidden": 1,
   "label": "Mentor Request"
  },
  {
   "fieldname": "column_break_2",
   "fieldtype": "Column Break",
   "label": "Show Tab in Batch"
  },
  {
   "fieldname": "signup_settings_section",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_9",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "user_category",
   "fieldtype": "Check",
   "label": "Ask User Category during Signup"
  },
  {
   "default": "0",
   "fieldname": "is_onboarding_complete",
   "fieldtype": "Check",
   "label": "Is Onboarding Complete",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "default_home",
   "fieldtype": "Check",
   "label": "Make LMS the default home"
  },
  {
   "fieldname": "column_break_zdel",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "send_calendar_invite_for_evaluations",
   "fieldtype": "Check",
   "label": "Send calendar invite for evaluations"
  },
  {
   "fieldname": "section_break_szgq",
   "fieldtype": "Section Break",
   "hidden": 1,
   "label": "Batch Settings"
  },
  {
   "fieldname": "signup_settings_tab",
   "fieldtype": "Tab Break",
   "label": "Signup Settings"
  },
  {
   "fieldname": "payment_section",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "default_currency",
   "fieldtype": "Link",
   "label": "Default Currency",
   "options": "Currency"
  },
  {
   "fieldname": "column_break_cfcv",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "apply_gst",
   "fieldtype": "Check",
   "label": "Apply GST for India"
  },
  {
   "default": "0",
   "fieldname": "show_usd_equivalent",
   "fieldtype": "Check",
   "label": "Show USD Equivalent"
  },
  {
   "depends_on": "show_usd_equivalent",
   "fieldname": "exception_country",
   "fieldtype": "Table MultiSelect",
   "label": "Primary Countries",
   "options": "Payment Country"
  },
  {
   "default": "0",
   "fieldname": "apply_rounding",
   "fieldtype": "Check",
   "label": "Apply Rounding on Equivalent"
  },
  {
   "fieldname": "batch_confirmation_template",
   "fieldtype": "Link",
   "label": "Batch Confirmation Template",
   "options": "Email Template"
  },
  {
   "default": "1",
   "fieldname": "show_courses",
   "fieldtype": "Check",
   "label": "Courses"
  },
  {
   "default": "1",
   "fieldname": "show_students",
   "fieldtype": "Check",
   "label": "Students"
  },
  {
   "default": "1",
   "fieldname": "show_assessments",
   "fieldtype": "Check",
   "label": "Assessments"
  },
  {
   "default": "1",
   "fieldname": "show_live_class",
   "fieldtype": "Check",
   "label": "Live Class"
  },
  {
   "default": "1",
   "fieldname": "show_discussions",
   "fieldtype": "Check",
   "label": "Discussions"
  },
  {
   "default": "1",
   "fieldname": "show_emails",
   "fieldtype": "Check",
   "label": "Emails"
  },
  {
   "fieldname": "payment_settings_tab",
   "fieldtype": "Tab Break",
   "label": "Payment Settings"
  },
  {
   "default": "1",
   "fieldname": "show_dashboard",
   "fieldtype": "Check",
   "label": "Dashboard"
  },
  {
   "fieldname": "certification_template",
   "fieldtype": "Link",
   "label": "Certificate Email Template",
   "options": "Email Template"
  },
  {
   "fieldname": "email_templates_tab",
   "fieldtype": "Tab Break",
   "label": "Email Templates"
  },
  {
   "fieldname": "assignment_submission_template",
   "fieldtype": "Link",
   "label": "Assignment Submission Template",
   "options": "Email Template"
  },
  {
   "fieldname": "column_break_uwsp",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "show_day_view",
   "fieldtype": "Check",
   "label": "Show day view in timetable"
  },
  {
   "fieldname": "unsplash_access_key",
   "fieldtype": "Data",
   "label": "Unsplash Access Key"
  },
  {
   "fieldname": "sidebar_tab",
   "fieldtype": "Tab Break",
   "label": "Sidebar"
  },
  {
   "default": "1",
   "fieldname": "courses",
   "fieldtype": "Check",
   "label": "Courses"
  },
  {
   "default": "1",
   "fieldname": "batches",
   "fieldtype": "Check",
   "label": "Batches"
  },
  {
   "default": "1",
   "fieldname": "certified_participants",
   "fieldtype": "Check",
   "label": "Certified Participants"
  },
  {
   "default": "1",
   "fieldname": "jobs",
   "fieldtype": "Check",
   "label": "Jobs"
  },
  {
   "default": "1",
   "fieldname": "statistics",
   "fieldtype": "Check",
   "label": "Statistics"
  },
  {
   "default": "1",
   "fieldname": "notifications",
   "fieldtype": "Check",
   "label": "Notifications"
  },
  {
   "fieldname": "items_in_sidebar_section",
   "fieldtype": "Section Break",
   "label": "Items in Sidebar"
  },
  {
   "fieldname": "column_break_exdz",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_qlss",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "sidebar_items",
   "fieldtype": "Table",
   "label": "Sidebar Items",
   "options": "LMS Sidebar Item"
  },
  {
   "fieldname": "custom_signup_content",
   "fieldtype": "HTML Editor",
   "label": "Custom Signup Content"
  },
  {
   "fieldname": "payment_gateway",
   "fieldtype": "Data",
   "label": "Payment Gateway"
  },
  {
   "fieldname": "no_payments_app",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "payments_app_is_not_installed",
   "fieldtype": "HTML",
   "label": "Payments app is not installed"
  },
  {
   "default": "0",
   "fieldname": "enable_learning_paths",
   "fieldtype": "Check",
   "label": "Enable Learning Paths"
  },
  {
   "fieldname": "general_tab",
   "fieldtype": "Tab Break",
   "label": "General"
  },
  {
   "default": "1",
   "fieldname": "allow_guest_access",
   "fieldtype": "Check",
   "label": "Allow Guest Access"
  },
  {
   "fieldname": "payment_reminder_template",
   "fieldtype": "Link",
   "label": "Payment Reminder Template",
   "options": "Email Template"
  }
 ],
 "index_web_pages_for_search": 1,
 "issingle": 1,
 "links": [],
 "modified": "2025-02-11 11:29:43.412897",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Settings",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "print": 1,
   "read": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "print": 1,
   "read": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/cohort_subgroup/__init__.py


\lms/lms/doctype/lms_badge_assignment/__init__.py


\lms/lms/doctype/lms_course_progress/lms_course_progress.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from lms.lms.utils import get_course_progress


class LMSCourseProgress(Document):
	def after_delete(self):
		progress = get_course_progress(self.course, self.member)
		membership = frappe.db.get_value(
			"LMS Enrollment",
			{
				"member": self.member,
				"course": self.course,
			},
			"name",
		)
		frappe.db.set_value("LMS Enrollment", membership, "progress", progress)


\lms/lms/doctype/lms_quiz_question/lms_quiz_question.json
{
 "actions": [],
 "creation": "2021-06-07 10:48:57.994714",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "question",
  "column_break_qcpo",
  "marks",
  "section_break_huup",
  "question_detail",
  "type"
 ],
 "fields": [
  {
   "fieldname": "question",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Question",
   "options": "LMS Question",
   "reqd": 1
  },
  {
   "default": "1",
   "fieldname": "marks",
   "fieldtype": "Int",
   "in_list_view": 1,
   "label": "Marks",
   "non_negative": 1,
   "reqd": 1
  },
  {
   "fetch_from": "question.question",
   "fieldname": "question_detail",
   "fieldtype": "Text",
   "in_list_view": 1,
   "label": "Question Detail",
   "read_only": 1
  },
  {
   "fieldname": "column_break_qcpo",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_huup",
   "fieldtype": "Section Break"
  },
  {
   "fetch_from": "question.type",
   "fieldname": "type",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Type",
   "options": "Choices\nUser Input\nOpen Ended",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2024-10-07 15:01:38.800906",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Quiz Question",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/course_instructor/course_instructor.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class CourseInstructor(Document):
	pass


\lms/lms/doctype/lms_quiz/test_lms_quiz.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest

import frappe


class TestLMSQuiz(unittest.TestCase):
	@classmethod
	def setUpClass(cls) -> None:
		frappe.get_doc(
			{"doctype": "LMS Quiz", "title": "Test Quiz", "passing_percentage": 90}
		).save(ignore_permissions=True)

	def test_with_multiple_options(self):
		question = frappe.new_doc("LMS Question")
		question.question = "Question Multiple"
		question.type = "Choices"
		question.option_1 = "Option 1"
		question.is_correct_1 = 1
		question.option_2 = "Option 2"
		question.is_correct_2 = 1
		question.save()
		self.assertTrue(question.multiple)

	def test_with_no_correct_option(self):
		question = frappe.new_doc("LMS Question")
		question.question = "Question Multiple"
		question.type = "Choices"
		question.option_1 = "Option 1"
		question.option_2 = "Option 2"
		self.assertRaises(frappe.ValidationError, question.save)

	def test_with_no_possible_answers(self):
		question = frappe.new_doc("LMS Question")
		question.question = "Question Multiple"
		question.type = "User Input"
		self.assertRaises(frappe.ValidationError, question.save)

	@classmethod
	def tearDownClass(cls) -> None:
		frappe.db.delete("LMS Quiz", "test-quiz")
		frappe.db.delete("LMS Question")


\lms/lms/doctype/exercise_submission/test_exercise_submission.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestExerciseSubmission(unittest.TestCase):
	pass


\lms/lms/doctype/cohort_web_page/cohort_web_page.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2021-12-04 23:28:40.429867",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "slug",
  "title",
  "template",
  "scope",
  "required_role"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "template",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Template",
   "options": "Web Template",
   "reqd": 1
  },
  {
   "default": "Cohort",
   "fieldname": "scope",
   "fieldtype": "Select",
   "label": "Scope",
   "options": "Cohort\nSubgroup"
  },
  {
   "default": "Public",
   "fieldname": "required_role",
   "fieldtype": "Select",
   "label": "Required Role",
   "options": "Public\nStudent\nMentor\nAdmin"
  },
  {
   "fieldname": "slug",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Slug",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2021-12-04 23:33:03.954128",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort Web Page",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC"
}

\lms/lms/doctype/lms_settings/lms_settings.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils import get_url_to_list


class LMSSettings(Document):
	def validate(self):
		self.validate_google_settings()

	def validate_google_settings(self):
		if self.send_calendar_invite_for_evaluations:
			google_settings = frappe.get_single("Google Settings")

			if not google_settings.enable:
				frappe.throw(
					_("Enable Google API in Google Settings to send calendar invites for evaluations.")
				)

			if not google_settings.client_id or not google_settings.client_secret:
				frappe.throw(
					_(
						"Enter Client Id and Client Secret in Google Settings to send calendar invites for evaluations."
					)
				)

			calendars = frappe.db.count("Google Calendar")
			if not calendars:
				frappe.throw(
					_(
						"Please add <a href='{0}'>{1}</a> for <a href='{2}'>{3}</a> to send calendar invites for evaluations."
					).format(
						get_url_to_list("Google Calendar"),
						frappe.bold("Google Calendar"),
						get_url_to_list("Course Evaluator"),
						frappe.bold("Course Evaluator"),
					)
				)


@frappe.whitelist()
def check_payments_app():
	installed_apps = frappe.get_installed_apps()
	if "payments" not in installed_apps:
		return False
	else:
		filters = {
			"doctype_or_field": "DocField",
			"doc_type": "LMS Settings",
			"field_name": "payment_gateway",
		}
		if frappe.db.exists("Property Setter", filters):
			return True

		link_property = frappe.new_doc("Property Setter")
		link_property.update(filters)
		link_property.property = "fieldtype"
		link_property.value = "Link"
		link_property.save()

		options_property = frappe.new_doc("Property Setter")
		options_property.update(filters)
		options_property.property = "options"
		options_property.value = "Payment Gateway"
		options_property.save()

		return True


\lms/lms/doctype/lms_sidebar_item/lms_sidebar_item.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2024-05-29 16:44:43.778291",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "web_page",
  "title",
  "column_break_glmh",
  "icon",
  "route"
 ],
 "fields": [
  {
   "fieldname": "column_break_glmh",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "icon",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Icon",
   "read_only": 1,
   "reqd": 1
  },
  {
   "fieldname": "web_page",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Web Page",
   "options": "Web Page",
   "reqd": 1
  },
  {
   "fetch_from": "web_page.route",
   "fieldname": "route",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Route"
  },
  {
   "fetch_from": "web_page.title",
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2024-05-31 20:19:14.629097",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Sidebar Item",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/cohort_subgroup/cohort_subgroup.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Cohort Subgroup", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_badge_assignment/lms_badge_assignment.js
// Copyright (c) 2024, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Badge Assignment", {
	refresh(frm) {
		frm.set_query("member", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});

		if (frm.doc.name)
			frm.add_web_link(
				`/badges/${frm.doc.badge}/${frm.doc.member}`,
				"See on Website"
			);
	},
});


\lms/lms/doctype/skills/__init__.py


\lms/lms/doctype/exercise_latest_submission/__init__.py


\lms/lms/doctype/lms_quiz_question/lms_quiz_question.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSQuizQuestion(Document):
	pass


\lms/lms/doctype/cohort_subgroup/cohort_subgroup.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "format:{title} ({cohort})",
 "creation": "2021-11-19 11:50:27.312434",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "cohort",
  "slug",
  "title",
  "column_break_4",
  "invite_code",
  "course",
  "section_break_7",
  "description"
 ],
 "fields": [
  {
   "fieldname": "cohort",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_preview": 1,
   "in_standard_filter": 1,
   "label": "Cohort",
   "options": "Cohort",
   "reqd": 1
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "in_preview": 1,
   "in_standard_filter": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "description",
   "fieldtype": "Markdown Editor",
   "label": "Description"
  },
  {
   "fieldname": "invite_code",
   "fieldtype": "Data",
   "label": "Invite Code",
   "read_only": 1
  },
  {
   "fieldname": "slug",
   "fieldtype": "Data",
   "label": "Slug",
   "reqd": 1
  },
  {
   "fetch_from": "cohort.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_7",
   "fieldtype": "Section Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "group": "Links",
   "link_doctype": "Cohort Join Request",
   "link_fieldname": "subgroup"
  }
 ],
 "modified": "2021-12-16 15:12:42.504883",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort Subgroup",
 "naming_rule": "Expression",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/lms_course_progress/test_lms_course_progress.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSCourseProgress(unittest.TestCase):
	pass


\lms/lms/doctype/lms_batch_enrollment/__init__.py


\lms/lms/doctype/cohort_web_page/cohort_web_page.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class CohortWebPage(Document):
	def get_template_html(self):
		return frappe.get_doc("Web Template", self.template).template


\lms/lms/doctype/cohort_join_request/__init__.py


\lms/lms/doctype/lms_sidebar_item/lms_sidebar_item.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSSidebarItem(Document):
	pass


\lms/lms/doctype/lms_settings/test_lms_settings.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSSettings(unittest.TestCase):
	pass


\lms/lms/doctype/user_skill/__init__.py


\lms/lms/doctype/lms_badge_assignment/lms_badge_assignment.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2024-04-30 11:58:44.096879",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "member",
  "member_name",
  "issued_on",
  "column_break_ugix",
  "badge",
  "badge_image",
  "badge_description"
 ],
 "fields": [
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "badge",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Badge",
   "options": "LMS Badge",
   "reqd": 1
  },
  {
   "fieldname": "issued_on",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "Issued On",
   "options": "Today",
   "reqd": 1
  },
  {
   "fetch_from": "badge.image",
   "fieldname": "badge_image",
   "fieldtype": "Attach",
   "label": "Badge Image",
   "read_only": 1,
   "reqd": 1
  },
  {
   "fieldname": "column_break_ugix",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "badge.description",
   "fieldname": "badge_description",
   "fieldtype": "Small Text",
   "label": "Badge Description",
   "read_only": 1,
   "reqd": 1
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "label": "Member Name",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-01-06 12:32:28.450028",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Badge Assignment",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "if_owner": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": [],
 "title_field": "member"
}

\lms/lms/doctype/skills/skills.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Skills", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/exercise_latest_submission/exercise_latest_submission.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Exercise Latest Submission", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/cohort_subgroup/cohort_subgroup.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from frappe.utils import random_string


class CohortSubgroup(Document):
	def before_save(self):
		if not self.invite_code:
			self.invite_code = random_string(8)

	def get_url(self):
		cohort = frappe.get_doc("Cohort", self.cohort)
		return f"{frappe.utils.get_url()}/lms/courses/{self.course}/subgroups/{cohort.slug}/{self.slug}"

	def get_invite_link(self):
		cohort = frappe.get_doc("Cohort", self.cohort)
		return f"{frappe.utils.get_url()}/lms/courses/{self.course}/join/{cohort.slug}/{self.slug}/{self.invite_code}"

	def has_student(self, email):
		"""Check if given user is a student of this subgroup."""
		q = {"doctype": "LMS Enrollment", "subgroup": self.name, "member": email}
		return frappe.db.exists(q)

	def has_join_request(self, email):
		"""Check if given user is a student of this subgroup."""
		q = {"doctype": "Cohort Join Request", "subgroup": self.name, "email": email}
		return frappe.db.exists(q)

	def get_join_requests(self, status="Pending"):
		q = {"subgroup": self.name, "status": status}
		return frappe.get_all(
			"Cohort Join Request", filters=q, fields=["*"], order_by="creation desc"
		)

	def get_mentors(self):
		emails = frappe.get_all(
			"Cohort Mentor", filters={"subgroup": self.name}, fields=["email"], pluck="email"
		)
		return self._get_users(emails)

	def get_students(self):
		emails = frappe.get_all(
			"LMS Enrollment",
			filters={"subgroup": self.name},
			fields=["member"],
			pluck="member",
			page_length=1000,
		)
		return self._get_users(emails)

	def _get_users(self, emails):
		users = [frappe.get_cached_doc("User", email) for email in emails]
		return sorted(users, key=lambda user: user.full_name)

	def is_mentor(self, email):
		q = {"doctype": "Cohort Mentor", "subgroup": self.name, "email": email}
		return frappe.db.exists(q)

	def is_manager(self, email):
		"""Returns True if the given user is a manager of this subgroup.

		Mentors of the subgroup, admins of the Cohort are considered as managers.
		"""
		return self.is_mentor(email) or self.get_cohort().is_admin(email)

	def get_cohort(self):
		return frappe.get_doc("Cohort", self.cohort)

	def add_mentor(self, email):
		d = {
			"doctype": "Cohort Mentor",
			"subgroup": self.name,
			"cohort": self.cohort,
			"email": email,
		}
		if frappe.db.exists(d):
			return
		doc = frappe.get_doc(d)
		doc.insert(ignore_permissions=True)


# def after_doctype_insert():
#    frappe.db.add_unique("Cohort Subgroup", ("cohort", "slug"))


\lms/lms/doctype/cohort/cohort.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "format:{course}/{slug}",
 "creation": "2021-11-19 11:45:31.016097",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "title",
  "slug",
  "section_break_2",
  "instructor",
  "status",
  "column_break_4",
  "begin_date",
  "end_date",
  "duration",
  "section_break_8",
  "description",
  "pages"
 ],
 "fields": [
  {
   "fieldname": "description",
   "fieldtype": "Markdown Editor",
   "label": "Description"
  },
  {
   "fieldname": "instructor",
   "fieldtype": "Link",
   "label": "Instructor",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "label": "Status",
   "options": "Upcoming\nLive\nCompleted\nCancelled",
   "reqd": 1
  },
  {
   "fieldname": "begin_date",
   "fieldtype": "Date",
   "label": "Begin Date"
  },
  {
   "fieldname": "end_date",
   "fieldtype": "Date",
   "label": "End Date"
  },
  {
   "fieldname": "duration",
   "fieldtype": "Data",
   "label": "Duration"
  },
  {
   "fieldname": "slug",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Slug",
   "reqd": 1,
   "unique": 1
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_8",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "section_break_2",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "pages",
   "fieldtype": "Table",
   "label": "Pages",
   "options": "Cohort Web Page"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "group": "Links",
   "link_doctype": "Cohort Subgroup",
   "link_fieldname": "cohort"
  }
 ],
 "modified": "2022-10-13 15:46:32.322926",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort",
 "naming_rule": "Expression",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/function/__init__.py


\lms/lms/doctype/cohort_join_request/cohort_join_request.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Cohort Join Request", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_course_review/__init__.py


\lms/lms/doctype/lms_sidebar_item/test_lms_sidebar_item.py
# Copyright (c) 2024, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSSidebarItem(UnitTestCase):
	pass


\lms/lms/doctype/lms_batch_enrollment/lms_batch_enrollment.js
// Copyright (c) 2025, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Batch Enrollment", {
	refresh(frm) {
		if (!frm.doc.confirmation_email_sent) {
			frm.add_custom_button(__("Send Confirmation Email"), function () {
				frappe.call({
					method: "lms.lms.doctype.lms_batch_enrollment.lms_batch_enrollment.send_confirmation_email",
					args: {
						doc: frm.doc,
					},
					callback: function (r) {
						frm.refresh();
					},
				});
			});
		}
	},
});


\lms/lms/doctype/lms_badge_assignment/lms_badge_assignment.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSBadgeAssignment(Document):
	pass


\lms/lms/doctype/user_skill/test_user_skill.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestUserSkill(unittest.TestCase):
	pass


\lms/lms/doctype/skills/skills.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2021-12-07 12:22:44.139341",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "skill_name"
 ],
 "fields": [
  {
   "fieldname": "skill_name",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Skill Name",
   "options": "User Skill",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-12-01 11:28:53.518929",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Skills",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}


\lms/lms/doctype/cohort_subgroup/test_cohort_subgroup.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCohortSubgroup(unittest.TestCase):
	pass


\lms/lms/doctype/exercise_latest_submission/exercise_latest_submission.json
{
 "actions": [],
 "creation": "2021-12-08 17:56:26.049675",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "exercise",
  "status",
  "batch_old",
  "column_break_4",
  "exercise_title",
  "course",
  "lesson",
  "section_break_8",
  "solution",
  "image",
  "test_results",
  "comments",
  "latest_submission",
  "member",
  "member_email",
  "member_cohort",
  "member_subgroup"
 ],
 "fields": [
  {
   "fieldname": "exercise",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Exercise",
   "options": "LMS Exercise",
   "search_index": 1
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "label": "Status",
   "options": "Correct\nIncorrect"
  },
  {
   "fieldname": "batch_old",
   "fieldtype": "Link",
   "label": "Batch Old",
   "options": "LMS Batch Old"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "exercise.title",
   "fieldname": "exercise_title",
   "fieldtype": "Data",
   "label": "Exercise Title",
   "read_only": 1
  },
  {
   "fetch_from": "exercise.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fetch_from": "exercise.lesson",
   "fieldname": "lesson",
   "fieldtype": "Link",
   "label": "Lesson",
   "options": "Course Lesson"
  },
  {
   "fieldname": "section_break_8",
   "fieldtype": "Section Break"
  },
  {
   "fetch_from": "latest_submission.solution",
   "fieldname": "solution",
   "fieldtype": "Code",
   "label": "Solution"
  },
  {
   "fetch_from": "latest_submission.image",
   "fieldname": "image",
   "fieldtype": "Code",
   "label": "Image",
   "read_only": 1
  },
  {
   "fetch_from": "latest_submission.test_results",
   "fieldname": "test_results",
   "fieldtype": "Small Text",
   "label": "Test Results"
  },
  {
   "fieldname": "comments",
   "fieldtype": "Small Text",
   "label": "Comments"
  },
  {
   "fieldname": "latest_submission",
   "fieldtype": "Link",
   "label": "Latest Submission",
   "options": "Exercise Submission"
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "label": "Member",
   "options": "LMS Enrollment"
  },
  {
   "fetch_from": "member.member",
   "fieldname": "member_email",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member Email",
   "options": "User",
   "search_index": 1
  },
  {
   "fetch_from": "member.cohort",
   "fieldname": "member_cohort",
   "fieldtype": "Link",
   "label": "Member Cohort",
   "options": "Cohort",
   "search_index": 1
  },
  {
   "fetch_from": "member.subgroup",
   "fieldname": "member_subgroup",
   "fieldtype": "Link",
   "label": "Member Subgroup",
   "options": "Cohort Subgroup",
   "search_index": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-12-08 22:58:46.312863",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Exercise Latest Submission",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}


\lms/lms/doctype/lms_course_review/lms_course_review.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Course Review", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/cohort/cohort.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class Cohort(Document):
	def get_url(self):
		return f"{frappe.utils.get_url()}/lms/courses/{self.course}/cohorts/{self.slug}"

	def get_subgroups(self, include_counts=False, sort_by=None):
		names = frappe.get_all("Cohort Subgroup", filters={"cohort": self.name}, pluck="name")
		subgroups = [frappe.get_cached_doc("Cohort Subgroup", name) for name in names]
		subgroups = sorted(subgroups, key=lambda sg: sg.title)

		if include_counts:
			mentors = self._get_subgroup_counts("Cohort Mentor")
			students = self._get_subgroup_counts("LMS Enrollment")
			join_requests = self._get_subgroup_counts("Cohort Join Request", status="Pending")
			for s in subgroups:
				s.num_mentors = mentors.get(s.name, 0)
				s.num_students = students.get(s.name, 0)
				s.num_join_requests = join_requests.get(s.name, 0)

		if sort_by:
			subgroups.sort(key=lambda sg: getattr(sg, sort_by), reverse=True)
		return subgroups

	def _get_subgroup_counts(self, doctype, **kw):
		rows = frappe.get_all(
			doctype,
			filters={"cohort": self.name, **kw},
			fields=["subgroup", "count(*) as count"],
			group_by="subgroup",
		)
		return {row["subgroup"]: row["count"] for row in rows}

	def _get_count(self, doctype, **kw):
		filters = {"cohort": self.name, **kw}
		return frappe.db.count(doctype, filters=filters)

	def get_page_template(self, slug, scope=None):
		p = self.get_page(slug, scope=scope)
		return p and p.get_template_html()

	def get_page(self, slug, scope=None):
		for p in self.pages:
			if p.slug == slug and scope in [p.scope, None]:
				return p

	def get_pages(self, scope=None):
		return [p for p in self.pages if scope in [p.scope, None]]

	def get_stats(self):
		return {
			"subgroups": self._get_count("Cohort Subgroup"),
			"mentors": self._get_count("Cohort Mentor"),
			"students": self._get_count("LMS Enrollment"),
			"join_requests": self._get_count("Cohort Join Request", status="Pending"),
		}

	def get_subgroup(self, slug):
		q = dict(cohort=self.name, slug=slug)
		name = frappe.db.get_value("Cohort Subgroup", q, "name")
		return name and frappe.get_doc("Cohort Subgroup", name)

	def get_mentor(self, email):
		q = dict(cohort=self.name, email=email)
		name = frappe.db.get_value("Cohort Mentor", q, "name")
		return name and frappe.get_doc("Cohort Mentor", name)

	def is_mentor(self, email):
		q = {"doctype": "Cohort Mentor", "cohort": self.name, "email": email}
		return frappe.db.exists(q)

	def is_admin(self, email):
		q = {"doctype": "Cohort Staff", "cohort": self.name, "email": email, "role": "Admin"}
		return frappe.db.exists(q)


\lms/lms/doctype/lms_assessment/__init__.py


\lms/lms/doctype/cohort_join_request/cohort_join_request.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2021-11-19 16:27:41.716509",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "cohort",
  "email",
  "column_break_3",
  "subgroup",
  "status"
 ],
 "fields": [
  {
   "fieldname": "cohort",
   "fieldtype": "Link",
   "label": "Cohort",
   "options": "Cohort",
   "reqd": 1
  },
  {
   "fieldname": "subgroup",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Subgroup",
   "options": "Cohort Subgroup",
   "reqd": 1
  },
  {
   "fieldname": "email",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "E-Mail",
   "options": "User",
   "reqd": 1
  },
  {
   "default": "Pending",
   "fieldname": "status",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Status",
   "options": "Pending\nAccepted\nRejected"
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2023-09-29 17:08:18.950560",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort Join Request",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/lms_batch_enrollment/lms_batch_enrollment.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2025-02-10 11:17:12.462368",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "member",
  "member_name",
  "member_username",
  "column_break_sjzm",
  "batch",
  "payment",
  "source",
  "confirmation_email_sent"
 ],
 "fields": [
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Member Name"
  },
  {
   "fetch_from": "member.username",
   "fieldname": "member_username",
   "fieldtype": "Data",
   "label": "Member Username"
  },
  {
   "fieldname": "payment",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Payment",
   "options": "LMS Payment"
  },
  {
   "fieldname": "source",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Source",
   "options": "LMS Source"
  },
  {
   "default": "0",
   "fieldname": "confirmation_email_sent",
   "fieldtype": "Check",
   "label": "Confirmation Email Sent"
  },
  {
   "fieldname": "column_break_sjzm",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "batch",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Batch",
   "options": "LMS Batch",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-02-11 10:39:57.259526",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Batch Enrollment",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "if_owner": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": [],
 "title_field": "member_name"
}

\lms/lms/doctype/lms_badge_assignment/test_lms_badge_assignment.py
# Copyright (c) 2024, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSBadgeAssignment(UnitTestCase):
	pass


\lms/lms/doctype/function/function.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Function", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/user_skill/user_skill.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("User Skill", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/skills/skills.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class Skills(Document):
	pass


\lms/lms/doctype/exercise_latest_submission/exercise_latest_submission.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class ExerciseLatestSubmission(Document):
	pass


\lms/lms/doctype/cohort/test_cohort.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCohort(unittest.TestCase):
	pass


\lms/lms/doctype/lms_course_interest/__init__.py


\lms/lms/doctype/cohort_join_request/cohort_join_request.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class CohortJoinRequest(Document):
	def on_update(self):
		if self.status == "Accepted":
			self.ensure_student()

	def ensure_student(self):
		# case 1 - user is already a member
		q = {
			"doctype": "LMS Enrollment",
			"cohort": self.cohort,
			"subgroup": self.subgroup,
			"member": self.email,
			"member_type": "Student",
		}
		if frappe.db.exists(q):
			return

		# case 2 - user has signed up for this course, possibly not this cohort
		cohort = frappe.get_doc("Cohort", self.cohort)

		q = {
			"doctype": "LMS Enrollment",
			"course": cohort.course,
			"member": self.email,
			"member_type": "Student",
		}
		name = frappe.db.exists(q)
		if name:
			doc = frappe.get_doc("LMS Enrollment", name)
			doc.cohort = self.cohort
			doc.subgroup = self.subgroup
			doc.save(ignore_permissions=True)
		else:
			# case 3 - user has not signed up for this course yet
			data = {
				"doctype": "LMS Enrollment",
				"course": cohort.course,
				"cohort": self.cohort,
				"subgroup": self.subgroup,
				"member": self.email,
				"member_type": "Student",
				"role": "Member",
			}
			doc = frappe.get_doc(data)
			doc.insert(ignore_permissions=True)


\lms/lms/doctype/lms_course_review/lms_course_review.json
{
 "actions": [],
 "creation": "2021-06-28 13:36:36.146718",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "rating",
  "course",
  "column_break_lrtk",
  "review"
 ],
 "fields": [
  {
   "fieldname": "review",
   "fieldtype": "Small Text",
   "in_list_view": 1,
   "label": "Review"
  },
  {
   "fieldname": "rating",
   "fieldtype": "Rating",
   "in_list_view": 1,
   "label": "Rating",
   "reqd": 1
  },
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "column_break_lrtk",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2023-12-21 15:25:16.744558",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Course Review",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1,
   "write": 1
  }
 ],
 "search_fields": "course",
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "course",
 "track_changes": 1
}

\lms/lms/doctype/zoom_settings/__init__.py


\lms/lms/doctype/lms_assessment/lms_assessment.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2023-05-29 14:50:07.910319",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "assessment_type",
  "assessment_name"
 ],
 "fields": [
  {
   "fieldname": "assessment_type",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Assessment Type",
   "options": "DocType",
   "reqd": 1
  },
  {
   "fieldname": "assessment_name",
   "fieldtype": "Dynamic Link",
   "in_list_view": 1,
   "label": "Assessment Name",
   "options": "assessment_type",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2024-10-11 19:16:01.630524",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Assessment",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/function/function.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:function",
 "creation": "2021-12-14 14:02:35.435916",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "function"
 ],
 "fields": [
  {
   "fieldname": "function",
   "fieldtype": "Data",
   "label": "Function",
   "unique": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2023-09-29 17:04:58.167481",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Function",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/lms_batch_enrollment/lms_batch_enrollment.py
# Copyright (c) 2025, Frappe and contributors
# For license information, please see license.txt

import frappe
import json
from frappe import _
from frappe.model.document import Document
from frappe.email.doctype.email_template.email_template import get_email_template


class LMSBatchEnrollment(Document):
	def after_insert(self):
		send_confirmation_email(self)
		self.add_member_to_live_class()

	def validate(self):
		self.validate_duplicate_members()
		self.validate_course_enrollment()

	def validate_duplicate_members(self):
		if frappe.db.exists(
			"LMS Batch Enrollment",
			{"batch": self.batch, "member": self.member, "name": ["!=", self.name]},
		):
			frappe.throw(_("Member already enrolled in this batch"))

	def validate_course_enrollment(self):
		courses = frappe.get_all(
			"Batch Course", filters={"parent": self.batch}, fields=["course"]
		)

		for course in courses:
			if not frappe.db.exists(
				"LMS Enrollment",
				{"course": course.course, "member": self.member},
			):
				enrollment = frappe.new_doc("LMS Enrollment")
				enrollment.course = course.course
				enrollment.member = self.member
				enrollment.save()

	def add_member_to_live_class(self):
		live_classes = frappe.get_all(
			"LMS Live Class", {"batch_name": self.batch}, ["name", "event"]
		)

		for live_class in live_classes:
			if live_class.event:
				frappe.get_doc(
					{
						"doctype": "Event Participants",
						"reference_doctype": "User",
						"reference_docname": self.member,
						"email": self.member,
						"parent": live_class.event,
						"parenttype": "Event",
						"parentfield": "event_participants",
					}
				).save()


@frappe.whitelist()
def send_confirmation_email(doc):
	if isinstance(doc, str):
		doc = frappe._dict(json.loads(doc))

	if not doc.confirmation_email_sent:
		outgoing_email_account = frappe.get_cached_value(
			"Email Account", {"default_outgoing": 1, "enable_outgoing": 1}, "name"
		)
		if not doc.confirmation_email_sent and (
			outgoing_email_account or frappe.conf.get("mail_login")
		):
			send_mail(doc)
			frappe.db.set_value(doc.doctype, doc.name, "confirmation_email_sent", 1)


def send_mail(doc):
	batch = frappe.db.get_value(
		"LMS Batch",
		doc.batch,
		[
			"name",
			"title",
			"start_date",
			"start_time",
			"medium",
			"confirmation_email_template",
		],
		as_dict=1,
	)

	subject = _("Enrollment Confirmation for {0}").format(batch.title)
	template = "batch_confirmation"
	custom_template = batch.confirmation_email_template or frappe.db.get_single_value(
		"LMS Settings", "batch_confirmation_template"
	)

	args = {
		"title": batch.title,
		"student_name": doc.member_name,
		"start_time": batch.start_time,
		"start_date": batch.start_date,
		"medium": batch.medium,
		"name": batch.name,
	}

	if custom_template:
		email_template = get_email_template(custom_template, args)
		subject = email_template.get("subject")
		content = email_template.get("message")

	frappe.sendmail(
		recipients=doc.member,
		subject=subject,
		template=template if not custom_template else None,
		content=content if custom_template else None,
		args=args,
		header=[_(batch.title), "green"],
		retry=3,
	)


\lms/lms/doctype/user_skill/user_skill.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:skill",
 "creation": "2021-12-08 15:31:29.292544",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "skill"
 ],
 "fields": [
  {
   "fieldname": "skill",
   "fieldtype": "Data",
   "label": "Skill",
   "unique": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2023-09-29 17:05:50.502696",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "User Skill",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/skills/test_skills.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestSkills(unittest.TestCase):
	pass


\lms/lms/doctype/chapter_reference/__init__.py


\lms/lms/doctype/exercise_latest_submission/test_exercise_latest_submission.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestExerciseLatestSubmission(unittest.TestCase):
	pass


\lms/lms/doctype/cohort_join_request/test_cohort_join_request.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCohortJoinRequest(unittest.TestCase):
	pass


\lms/lms/doctype/function/function.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class Function(Document):
	pass


\lms/lms/doctype/lms_course_interest/lms_course_interest.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Course Interest", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_course_review/lms_course_review.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from frappe.utils import cint


class LMSCourseReview(Document):
	def validate(self):
		self.validate_if_already_reviewed()

	def validate_if_already_reviewed(self):
		if frappe.db.exists(
			"LMS Course Review", {"course": self.course, "owner": self.owner}
		):
			frappe.throw(frappe._("You have already reviewed this course"))


@frappe.whitelist()
def submit_review(rating, review, course):
	out_of_ratings = frappe.db.get_all(
		"DocField", {"parent": "LMS Course Review", "fieldtype": "Rating"}, ["options"]
	)
	out_of_ratings = (len(out_of_ratings) and out_of_ratings[0].options) or 5
	rating = cint(rating) / out_of_ratings
	frappe.get_doc(
		{"doctype": "LMS Course Review", "rating": rating, "review": review, "course": course}
	).save(ignore_permissions=True)
	return "OK"


\lms/lms/doctype/lms_assessment/lms_assessment.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSAssessment(Document):
	pass


\lms/lms/doctype/zoom_settings/test_zoom_settings.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestZoomSettings(UnitTestCase):
	pass


\lms/lms/doctype/lms_live_class/__init__.py


\lms/lms/doctype/lms_batch_enrollment/test_lms_batch_enrollment.py
# Copyright (c) 2025, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import IntegrationTestCase, UnitTestCase


# On IntegrationTestCase, the doctype test records and all
# link-field test record dependencies are recursively loaded
# Use these module variables to add/remove to/from that list
EXTRA_TEST_RECORD_DEPENDENCIES = []  # eg. ["User"]
IGNORE_TEST_RECORD_DEPENDENCIES = []  # eg. ["User"]


class UnitTestLMSBatchEnrollment(UnitTestCase):
	"""
	Unit tests for LMSBatchEnrollment.
	Use this class for testing individual functions and methods.
	"""

	pass


class IntegrationTestLMSBatchEnrollment(IntegrationTestCase):
	"""
	Integration tests for LMSBatchEnrollment.
	Use this class for testing interactions between multiple components.
	"""

	pass


\lms/lms/doctype/user_skill/user_skill.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class UserSkill(Document):
	pass


\lms/lms/doctype/certification/__init__.py


\lms/lms/doctype/industry/__init__.py


\lms/lms/doctype/lms_course_interest/lms_course_interest.json
{
 "actions": [],
 "creation": "2021-08-06 17:37:20.184849",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "user",
  "email_sent"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course"
  },
  {
   "fieldname": "user",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "User",
   "options": "User"
  },
  {
   "default": "0",
   "fieldname": "email_sent",
   "fieldtype": "Check",
   "label": "Email Sent",
   "options": "email_sent"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-08-06 18:06:21.370741",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Course Interest",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/lesson_reference/__init__.py


\lms/lms/doctype/lms_course_mentor_mapping/__init__.py


\lms/lms/doctype/function/test_function.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestFunction(unittest.TestCase):
	pass


\lms/lms/doctype/work_experience/__init__.py


\lms/lms/doctype/lms_course_review/test_lms_course_review.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSCourseReview(unittest.TestCase):
	pass


\lms/lms/doctype/zoom_settings/zoom_settings.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("Zoom Settings", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/certification/certification.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Certification", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_live_class/lms_live_class.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Live Class", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/course_chapter/__init__.py


\lms/lms/doctype/lms_course_interest/lms_course_interest.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class LMSCourseInterest(Document):
	pass


@frappe.whitelist()
def capture_interest(course):
	data = {
		"doctype": "LMS Course Interest",
		"course": course,
		"user": frappe.session.user,
	}
	if not frappe.db.exists(data):
		frappe.get_doc(data).save(ignore_permissions=True)
	return "OK"


\lms/lms/doctype/education_detail/__init__.py


\lms/lms/doctype/lesson_reference/lesson_reference.json
{
 "actions": [],
 "autoname": "hash",
 "creation": "2021-07-27 16:25:48.269536",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "lesson"
 ],
 "fields": [
  {
   "fieldname": "lesson",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Lesson",
   "options": "Course Lesson",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-03-15 09:39:29.495991",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Lesson Reference",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/industry/industry.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Industry", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_course_mentor_mapping/lms_course_mentor_mapping.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Course Mentor Mapping", {
	onload: function (frm) {
		frm.set_query("mentor", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/zoom_settings/zoom_settings.json
{
 "actions": [],
 "creation": "2023-02-27 14:30:28.696814",
 "default_view": "List",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "enable",
  "sb_00",
  "account_id",
  "client_id",
  "client_secret"
 ],
 "fields": [
  {
   "default": "0",
   "fieldname": "enable",
   "fieldtype": "Check",
   "label": "Enable"
  },
  {
   "depends_on": "enable",
   "fieldname": "sb_00",
   "fieldtype": "Section Break",
   "label": "OAuth Client ID"
  },
  {
   "fieldname": "client_id",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Client ID"
  },
  {
   "fieldname": "client_secret",
   "fieldtype": "Password",
   "in_list_view": 1,
   "label": "Client Secret"
  },
  {
   "fieldname": "account_id",
   "fieldtype": "Data",
   "label": "Account ID"
  }
 ],
 "issingle": 1,
 "links": [],
 "modified": "2024-04-22 21:04:30.488799",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Zoom Settings",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "print": 1,
   "read": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "quick_entry": 1,
 "sort_field": "modified",
 "sort_order": "ASC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/work_experience/work_experience.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2021-12-07 12:17:49.571045",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "company",
  "location",
  "description",
  "column_break_4",
  "current",
  "from_date",
  "to_date"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "company",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Company",
   "reqd": 1
  },
  {
   "fieldname": "location",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Location",
   "reqd": 1
  },
  {
   "fieldname": "from_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "From Date",
   "reqd": 1
  },
  {
   "depends_on": "eval: !doc.current",
   "fieldname": "to_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "To Date",
   "mandatory_depends_on": "eval: !doc.current"
  },
  {
   "fieldname": "description",
   "fieldtype": "Small Text",
   "label": "Description"
  },
  {
   "default": "0",
   "fieldname": "current",
   "fieldtype": "Check",
   "in_list_view": 1,
   "label": "I am currently working here"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2023-06-19 10:47:42.739249",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Work Experience",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/certification/certification.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2021-12-07 12:20:37.143096",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "certification_name",
  "organization",
  "description",
  "column_break_4",
  "expire",
  "issue_date",
  "expiration_date"
 ],
 "fields": [
  {
   "fieldname": "certification_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Certification Name",
   "reqd": 1
  },
  {
   "fieldname": "organization",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Organization",
   "reqd": 1
  },
  {
   "fieldname": "issue_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "Issue Date",
   "reqd": 1
  },
  {
   "fieldname": "description",
   "fieldtype": "Small Text",
   "label": "Description"
  },
  {
   "depends_on": "eval: !doc.expire",
   "fieldname": "expiration_date",
   "fieldtype": "Data",
   "label": "Expiration Date"
  },
  {
   "default": "0",
   "fieldname": "expire",
   "fieldtype": "Check",
   "label": "This certificate does no expire"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2021-12-21 10:05:43.377876",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Certification",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC"
}

\lms/lms/doctype/lms_live_class/lms_live_class.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2023-03-02 10:59:01.741349",
 "default_view": "List",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "host",
  "batch_name",
  "event",
  "column_break_astv",
  "description",
  "section_break_glxh",
  "date",
  "duration",
  "column_break_spvt",
  "time",
  "timezone",
  "section_break_yrpq",
  "password",
  "start_url",
  "column_break_yokr",
  "auto_recording",
  "join_url"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "description",
   "fieldtype": "Text",
   "label": "Description"
  },
  {
   "fieldname": "date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "Date",
   "reqd": 1
  },
  {
   "fieldname": "duration",
   "fieldtype": "Int",
   "label": "Duration",
   "reqd": 1
  },
  {
   "fieldname": "timezone",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Timezone",
   "reqd": 1
  },
  {
   "fieldname": "host",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Host",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "column_break_astv",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_glxh",
   "fieldtype": "Section Break",
   "label": "Date and Time"
  },
  {
   "fieldname": "column_break_spvt",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_yrpq",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "start_url",
   "fieldtype": "Small Text",
   "label": "Start URL",
   "read_only": 1
  },
  {
   "fieldname": "column_break_yokr",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "join_url",
   "fieldtype": "Small Text",
   "label": "Join URL",
   "read_only": 1
  },
  {
   "fieldname": "password",
   "fieldtype": "Password",
   "label": "Password"
  },
  {
   "fieldname": "time",
   "fieldtype": "Time",
   "label": "Time",
   "reqd": 1
  },
  {
   "fieldname": "batch_name",
   "fieldtype": "Link",
   "label": "Batch",
   "options": "LMS Batch"
  },
  {
   "default": "No Recording",
   "fieldname": "auto_recording",
   "fieldtype": "Select",
   "label": "Auto Recording",
   "options": "No Recording\nLocal\nCloud"
  },
  {
   "fieldname": "event",
   "fieldtype": "Link",
   "label": "Event",
   "options": "Event",
   "read_only": 1
  }
 ],
 "in_create": 1,
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-11-11 18:59:26.396111",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Live Class",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/lms_course_interest/test_lms_course_interest.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSCourseInterest(unittest.TestCase):
	pass


\lms/lms/doctype/industry/industry.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:industry",
 "creation": "2021-12-14 14:37:47.183595",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "industry"
 ],
 "fields": [
  {
   "fieldname": "industry",
   "fieldtype": "Data",
   "label": "Industry",
   "unique": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2023-09-29 17:05:27.231982",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Industry",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/education_detail/education_detail.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2021-12-07 12:15:46.078717",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "institution_name",
  "location",
  "degree_type",
  "major",
  "column_break_5",
  "grade_type",
  "grade",
  "start_date",
  "end_date"
 ],
 "fields": [
  {
   "fieldname": "institution_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Institution Name",
   "reqd": 1
  },
  {
   "fieldname": "location",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Location",
   "reqd": 1
  },
  {
   "fieldname": "degree_type",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Degree Type",
   "reqd": 1
  },
  {
   "fieldname": "grade_type",
   "fieldtype": "Select",
   "label": "Grade Type",
   "options": "Percentage (e.g. 70%)\nPoint of Score (e.g. 70)\nLetter Grade (e.g. A, B-)\nUK Grading  (e.g. 1st, 2:2)\nFrench (e.g. Distinction)\nCGPA/4"
  },
  {
   "fieldname": "grade",
   "fieldtype": "Data",
   "label": "Grade"
  },
  {
   "fieldname": "major",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Field of Major/Study",
   "reqd": 1
  },
  {
   "fieldname": "start_date",
   "fieldtype": "Date",
   "label": "Start Date"
  },
  {
   "fieldname": "end_date",
   "fieldtype": "Date",
   "label": "End Date (or expected)"
  },
  {
   "fieldname": "column_break_5",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2021-12-21 09:58:42.343823",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Education Detail",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC"
}

\lms/lms/doctype/lesson_reference/lesson_reference.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LessonReference(Document):
	pass


\lms/lms/doctype/lms_course_mentor_mapping/lms_course_mentor_mapping.json
{
 "actions": [],
 "creation": "2021-04-20 12:45:33.369767",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "mentor",
  "mentor_name"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course"
  },
  {
   "fieldname": "mentor",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Mentor",
   "options": "User"
  },
  {
   "fetch_from": "mentor.full_name",
   "fieldname": "mentor_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Mentor Name",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-05-21 11:48:43.340315",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Course Mentor Mapping",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/course_chapter/course_chapter.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Course Chapter", {
	onload: function (frm) {
		frm.set_query("lesson", "lessons", function () {
			return {
				filters: {
					chapter: frm.doc.name,
				},
			};
		});
	},
});


\lms/lms/doctype/zoom_settings/zoom_settings.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class ZoomSettings(Document):
	pass


\lms/lms/doctype/lms_live_class/lms_live_class.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from datetime import timedelta
from frappe.utils import cint, get_datetime, format_date, nowdate, format_time


class LMSLiveClass(Document):
	def after_insert(self):
		calendar = frappe.db.get_value(
			"Google Calendar", {"user": frappe.session.user, "enable": 1}, "name"
		)

		if calendar:
			event = self.create_event()
			self.add_event_participants(event, calendar)
			frappe.db.set_value(self.doctype, self.name, "event", event.name)

	def create_event(self):
		start = f"{self.date} {self.time}"

		event = frappe.get_doc(
			{
				"doctype": "Event",
				"subject": f"Live Class on {self.title}",
				"starts_on": start,
				"ends_on": get_datetime(start) + timedelta(minutes=cint(self.duration)),
			}
		)
		event.save()
		return event

	def add_event_participants(self, event, calendar):
		participants = frappe.get_all(
			"LMS Batch Enrollment", {"batch": self.batch_name}, pluck="member"
		)

		participants.append(frappe.session.user)
		for participant in participants:
			frappe.get_doc(
				{
					"doctype": "Event Participants",
					"reference_doctype": "User",
					"reference_docname": participant,
					"email": participant,
					"parent": event.name,
					"parenttype": "Event",
					"parentfield": "event_participants",
				}
			).save()

		event.reload()
		event.update(
			{
				"sync_with_google_calendar": 1,
				"google_calendar": calendar,
				"description": f"A Live Class has been scheduled on {format_date(self.date, 'medium')} at {format_time(self.time, 'hh:mm a')}. Click on this link to join. {self.join_url}. {self.description}",
			}
		)

		event.save()


def send_live_class_reminder():
	classes = frappe.get_all(
		"LMS Live Class",
		{
			"date": nowdate(),
		},
		["name", "batch_name", "title", "date", "time"],
	)

	for live_class in classes:
		students = frappe.get_all(
			"LMS Batch Enrollment",
			{"batch": live_class.batch_name},
			["member", "member_name"],
		)
		for student in students:
			send_mail(live_class, student)


def send_mail(live_class, student):
	subject = f"Your class on {live_class.title} is tomorrow"
	template = "live_class_reminder"

	args = {
		"student_name": student.member_name,
		"title": live_class.title,
		"date": live_class.date,
		"time": live_class.time,
		"batch_name": live_class.batch_name,
	}

	frappe.sendmail(
		recipients=student.member,
		subject=subject,
		template=template,
		args=args,
		header=[_(f"Class Reminder: {live_class.title}"), "orange"],
	)


\lms/lms/doctype/industry/industry.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class Industry(Document):
	pass


\lms/lms/doctype/work_experience/work_experience.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class WorkExperience(Document):
	pass


\lms/lms/doctype/certification/certification.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class Certification(Document):
	pass


\lms/lms/doctype/evaluator_schedule/__init__.py


\lms/lms/doctype/education_detail/education_detail.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class EducationDetail(Document):
	pass


\lms/lms/doctype/payment_country/__init__.py


\lms/lms/doctype/course_chapter/course_chapter.json
{
 "actions": [],
 "allow_import": 1,
 "allow_rename": 1,
 "autoname": "format:{####} {title}",
 "creation": "2021-05-03 05:49:08.383058",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "column_break_3",
  "course",
  "course_title",
  "scorm_section",
  "is_scorm_package",
  "scorm_package",
  "scorm_package_path",
  "column_break_dlnw",
  "manifest_file",
  "launch_file",
  "section_break_5",
  "lessons"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_5",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "lessons",
   "fieldtype": "Table",
   "label": "Lessons",
   "options": "Lesson Reference"
  },
  {
   "default": "0",
   "fieldname": "is_scorm_package",
   "fieldtype": "Check",
   "label": "Is SCORM Package"
  },
  {
   "depends_on": "is_scorm_package",
   "fieldname": "manifest_file",
   "fieldtype": "Code",
   "label": "Manifest File",
   "read_only": 1
  },
  {
   "depends_on": "is_scorm_package",
   "fieldname": "launch_file",
   "fieldtype": "Code",
   "label": "Launch File",
   "read_only": 1
  },
  {
   "fieldname": "scorm_section",
   "fieldtype": "Section Break",
   "label": "SCORM"
  },
  {
   "fieldname": "scorm_package",
   "fieldtype": "Link",
   "label": "SCORM Package",
   "options": "File",
   "read_only": 1
  },
  {
   "fieldname": "column_break_dlnw",
   "fieldtype": "Column Break"
  },
  {
   "depends_on": "is_scorm_package",
   "fieldname": "scorm_package_path",
   "fieldtype": "Code",
   "label": "SCORM Package Path",
   "read_only": 1
  },
  {
   "fetch_from": "course.title",
   "fieldname": "course_title",
   "fieldtype": "Data",
   "label": "Course Title",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "group": "Lessons",
   "link_doctype": "Course Lesson",
   "link_fieldname": "chapter"
  }
 ],
 "modified": "2025-02-03 15:23:17.125617",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Course Chapter",
 "naming_rule": "Expression",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Course Creator",
   "share": 1,
   "write": 1
  }
 ],
 "search_fields": "title",
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/lms_badge/__init__.py


\lms/lms/doctype/preferred_function/__init__.py


\lms/lms/doctype/lms_course_mentor_mapping/lms_course_mentor_mapping.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document


class LMSCourseMentorMapping(Document):
	def validate(self):
		duplicate_mapping = frappe.get_all(
			"LMS Course Mentor Mapping", filters={"course": self.course, "mentor": self.mentor}
		)
		if len(duplicate_mapping):
			frappe.throw(
				_("{0} is already a mentor for course {1}").format(self.mentor_name, self.course)
			)


\lms/lms/doctype/lms_live_class/test_lms_live_class.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSLiveClass(UnitTestCase):
	pass


\lms/lms/doctype/certification/test_certification.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestCertification(unittest.TestCase):
	pass


\lms/lms/doctype/invite_request/__init__.py


\lms/lms/doctype/evaluator_schedule/evaluator_schedule.json
{
 "actions": [],
 "autoname": "autoincrement",
 "creation": "2022-03-29 11:09:47.726629",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "day",
  "start_time",
  "end_time"
 ],
 "fields": [
  {
   "fieldname": "day",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Day",
   "options": "Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday",
   "reqd": 1
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "Start Time",
   "reqd": 1
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "End Time",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-03-29 12:58:22.229033",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Evaluator Schedule",
 "naming_rule": "Autoincrement",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/course_chapter/course_chapter.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from lms.lms.utils import get_course_progress
from lms.lms.api import update_course_statistics


class CourseChapter(Document):
	def on_update(self):
		self.recalculate_course_progress()
		update_course_statistics()

	def recalculate_course_progress(self):
		previous_lessons = (
			self.get_doc_before_save() and self.get_doc_before_save().as_dict().lessons
		)
		current_lessons = self.lessons

		if previous_lessons and previous_lessons != current_lessons:
			enrolled_members = frappe.get_all(
				"LMS Enrollment", {"course": self.course}, ["member", "name"]
			)
			for enrollment in enrolled_members:
				new_progress = get_course_progress(self.course, enrollment.member)
				frappe.db.set_value("LMS Enrollment", enrollment.name, "progress", new_progress)


\lms/lms/doctype/lms_badge/lms_badge.js
// Copyright (c) 2024, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Badge", {
	refresh: (frm) => {
		frm.events.set_field_options(frm);

		if (frm.doc.event == "Auto Assign") {
			add_assign_button(frm);
		}
	},
	reference_doctype: (frm) => {
		frm.events.set_field_options(frm);
	},

	set_field_options: (frm) => {
		const reference_doctype = frm.doc.reference_doctype;
		if (!reference_doctype) return;

		frappe.model.with_doctype(reference_doctype, () => {
			const map_for_options = (df) => ({
				label: df.label,
				value: df.fieldname,
			});
			const fields = frappe.meta
				.get_docfields(frm.doc.reference_doctype)
				.filter(frappe.model.is_value_type);

			const fields_to_check = fields.map(map_for_options);

			const user_fields = fields
				.filter(
					(df) =>
						(df.fieldtype === "Link" && df.options === "User") ||
						df.fieldtype === "Data"
				)
				.map(map_for_options)
				.concat([
					{ label: __("Owner"), value: "owner" },
					{ label: __("Modified By"), value: "modified_by" },
				]);

			frm.set_df_property("field_to_check", "options", fields_to_check);
			frm.set_df_property("user_field", "options", user_fields);
		});
	},
});

const add_assign_button = (frm) => {
	frm.add_custom_button(__("Assign"), function () {
		frappe.call({
			method: "lms.lms.doctype.lms_badge.lms_badge.assign_badge",
			args: {
				badge: frm.doc,
			},
			callback: function (r) {
				if (r.message) {
					frappe.msgprint(r.message);
				}
			},
		});
	});
};


\lms/lms/doctype/industry/test_industry.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestIndustry(unittest.TestCase):
	pass


\lms/lms/doctype/payment_country/payment_country.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("Payment Country", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/lms_course_mentor_mapping/test_lms_course_mentor_mapping.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSCourseMentorMapping(unittest.TestCase):
	pass


\lms/lms/doctype/course_evaluator/__init__.py


\lms/lms/doctype/preferred_function/preferred_function.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2021-12-14 14:42:48.823215",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "function"
 ],
 "fields": [
  {
   "fieldname": "function",
   "fieldtype": "Link",
   "ignore_user_permissions": 1,
   "in_list_view": 1,
   "label": "Function",
   "options": "Function"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2021-12-21 10:07:01.448239",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Preferred Function",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC"
}

\lms/lms/doctype/course_lesson/__init__.py


\lms/lms/doctype/evaluator_schedule/evaluator_schedule.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class EvaluatorSchedule(Document):
	pass


\lms/lms/doctype/invite_request/invite_request.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Invite Request", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_certificate_request/__init__.py


\lms/lms/doctype/course_chapter/test_course_chapter.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCourseChapter(unittest.TestCase):
	pass


\lms/lms/doctype/lms_badge/lms_badge.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:title",
 "creation": "2024-04-30 11:29:53.548647",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "enabled",
  "title",
  "description",
  "image",
  "column_break_wgum",
  "grant_only_once",
  "event",
  "reference_doctype",
  "user_field",
  "field_to_check",
  "condition"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1,
   "unique": 1
  },
  {
   "fieldname": "image",
   "fieldtype": "Attach Image",
   "label": "Image",
   "reqd": 1
  },
  {
   "fieldname": "column_break_wgum",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "reference_doctype",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Reference Document Type",
   "options": "DocType",
   "reqd": 1
  },
  {
   "fieldname": "event",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Event",
   "options": "New\nValue Change\nAuto Assign",
   "reqd": 1
  },
  {
   "fieldname": "condition",
   "fieldtype": "Code",
   "label": "Condition",
   "mandatory_depends_on": "eval:doc.event == \"Auto Assign\""
  },
  {
   "depends_on": "eval:doc.event == 'Value Change'",
   "fieldname": "field_to_check",
   "fieldtype": "Select",
   "label": "Field To Check"
  },
  {
   "default": "0",
   "fieldname": "grant_only_once",
   "fieldtype": "Check",
   "label": "Grant only once"
  },
  {
   "default": "1",
   "fieldname": "enabled",
   "fieldtype": "Check",
   "label": "Enabled"
  },
  {
   "fieldname": "description",
   "fieldtype": "Small Text",
   "label": "Description",
   "reqd": 1
  },
  {
   "fieldname": "user_field",
   "fieldtype": "Select",
   "label": "User Field",
   "reqd": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "link_doctype": "LMS Badge Assignment",
   "link_fieldname": "badge"
  }
 ],
 "modified": "2024-05-27 17:25:55.399830",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Badge",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "All",
   "share": 1
  }
 ],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/payment_country/payment_country.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2023-09-11 11:53:16.253740",
 "default_view": "List",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "country"
 ],
 "fields": [
  {
   "fieldname": "country",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Country",
   "options": "Country"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2023-09-11 12:04:56.048632",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Payment Country",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/preferred_function/preferred_function.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class PreferredFunction(Document):
	pass


\lms/lms/doctype/cohort_staff/__init__.py


\lms/lms/doctype/course_evaluator/course_evaluator.js
// Copyright (c) 2022, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Course Evaluator", {
	onload: (frm) => {
		frm.set_query("evaluator", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/batch_course/batch_course.json
{
 "actions": [],
 "autoname": "autoincrement",
 "creation": "2022-11-09 16:23:26.454527",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "title",
  "evaluator"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fetch_from": "course.title",
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Course Title",
   "read_only": 1
  },
  {
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Evaluator",
   "options": "Course Evaluator"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2023-08-28 10:03:02.960844",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Batch Course",
 "naming_rule": "Autoincrement",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/course_lesson/course_lesson.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Course Lesson", {});


\lms/lms/doctype/invite_request/invite_request.json
{
 "actions": [],
 "creation": "2021-04-29 16:29:56.857914",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "invite_email",
  "signup_email",
  "column_break_4",
  "status",
  "full_name",
  "username",
  "invite_code"
 ],
 "fields": [
  {
   "allow_in_quick_entry": 1,
   "fieldname": "invite_email",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Invite Email",
   "options": "Email",
   "unique": 1
  },
  {
   "fieldname": "full_name",
   "fieldtype": "Data",
   "label": "Full Name"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "signup_email",
   "fieldtype": "Data",
   "label": "Signup Email",
   "options": "Email"
  },
  {
   "fieldname": "username",
   "fieldtype": "Data",
   "label": "Username"
  },
  {
   "fieldname": "invite_code",
   "fieldtype": "Data",
   "label": "Invite Code"
  },
  {
   "default": "Pending",
   "fieldname": "status",
   "fieldtype": "Select",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Status",
   "options": "Pending\nApproved\nRejected\nRegistered"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-05-03 09:22:20.954921",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Invite Request",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "quick_entry": 1,
 "search_fields": "invite_email, signup_email",
 "sort_field": "modified",
 "sort_order": "DESC",
 "title_field": "invite_email",
 "track_changes": 1
}


\lms/lms/doctype/lms_program/__init__.py


\lms/lms/doctype/related_courses/__init__.py


\lms/lms/doctype/lms_certificate_request/lms_certificate_request.js
// Copyright (c) 2022, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Certificate Request", {
	refresh: function (frm) {
		if (!frm.is_new()) {
			frm.add_custom_button(
				__("Create LMS Certificate Evaluation"),
				() => {
					frappe.model.open_mapped_doc({
						method: "lms.lms.doctype.lms_certificate_request.lms_certificate_request.create_lms_certificate_evaluation",
						frm: frm,
					});
				}
			);
		}
		if (!frm.doc.google_meet_link) {
			frm.add_custom_button(__("Generate Google Meet Link"), () => {
				frappe.call({
					method: "lms.lms.doctype.lms_certificate_request.lms_certificate_request.setup_calendar_event",
					args: {
						eval: frm.doc,
					},
				});
			});
		}
	},

	onload: function (frm) {
		frm.set_query("member", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/lms_badge/lms_badge.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

import frappe
import json
from frappe.model.document import Document
from frappe import _


class LMSBadge(Document):
	def on_update(self):
		if self.event == "Auto Assign" and self.condition:
			try:
				json.loads(self.condition)
			except ValueError:
				frappe.throw(_("Condition must be in valid JSON format."))
		elif self.condition:
			try:
				compile(self.condition, "<string>", "eval")
			except Exception:
				frappe.throw(_("Condition must be valid python code."))

	def apply(self, doc):
		if self.rule_condition_satisfied(doc):
			award(self, doc.get(self.user_field))

	def rule_condition_satisfied(self, doc):
		doc_before_save = doc.get_doc_before_save()

		if self.event == "Manual Assignment":
			return False

		if self.event == "New" and doc_before_save != None:
			return False

		if self.event == "Value Change":
			field_to_check = self.field_to_check
			if not field_to_check:
				return False

		if self.condition:
			return eval_condition(doc, self.condition)

		return False


def award(doc, member):
	if doc.grant_only_once:
		if frappe.db.exists(
			"LMS Badge Assignment",
			{"badge": doc.name, "member": member},
		):
			return

	assignment = frappe.new_doc("LMS Badge Assignment")
	assignment.update(
		{
			"badge": doc.name,
			"member": member,
			"issued_on": frappe.utils.now(),
		}
	)
	assignment.save()


def eval_condition(doc, condition):
	return condition and frappe.safe_eval(condition, None, {"doc": doc.as_dict()})


@frappe.whitelist()
def assign_badge(badge):
	badge = frappe._dict(json.loads(badge))
	if not badge.event == "Auto Assign":
		return

	fields = ["name"]
	fields.append(badge.user_field)
	list = frappe.get_all(badge.reference_doctype, filters=badge.condition, fields=fields)
	for doc in list:
		award(badge, doc.get(badge.user_field))


def process_badges(doc, state):
	if (
		frappe.flags.in_patch
		or frappe.flags.in_install
		or frappe.flags.in_migrate
		or frappe.flags.in_import
		or frappe.flags.in_setup_wizard
	):
		return

	for d in frappe.cache_manager.get_doctype_map(
		"LMS Badge", doc.doctype, dict(reference_doctype=doc.doctype, enabled=1)
	):
		frappe.get_doc("LMS Badge", d.get("name")).apply(doc)


\lms/lms/doctype/payment_country/payment_country.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class PaymentCountry(Document):
	pass


\lms/lms/doctype/course_evaluator/course_evaluator.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:evaluator",
 "creation": "2022-03-29 10:51:47.667284",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "evaluator",
  "schedule",
  "unavailability_section",
  "unavailable_from",
  "column_break_ahzi",
  "unavailable_to"
 ],
 "fields": [
  {
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "label": "Evaluator",
   "options": "User",
   "unique": 1
  },
  {
   "fieldname": "schedule",
   "fieldtype": "Table",
   "label": "Schedule",
   "options": "Evaluator Schedule"
  },
  {
   "fieldname": "unavailability_section",
   "fieldtype": "Section Break",
   "label": "Unavailability"
  },
  {
   "fieldname": "column_break_ahzi",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "unavailable_from",
   "fieldtype": "Date",
   "label": "From"
  },
  {
   "fieldname": "unavailable_to",
   "fieldtype": "Date",
   "label": "To"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-02-24 12:17:08.436659",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Course Evaluator",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Batch Evaluator",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/course_lesson/course_lesson.json
{
 "actions": [],
 "allow_events_in_timeline": 1,
 "allow_rename": 1,
 "autoname": "format:{####} {title}",
 "creation": "2021-05-03 06:21:12.995984",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "include_in_preview",
  "column_break_4",
  "chapter",
  "is_scorm_package",
  "course",
  "section_break_11",
  "content",
  "body",
  "column_break_cjmf",
  "instructor_content",
  "instructor_notes",
  "section_break_6",
  "youtube",
  "column_break_9",
  "quiz_id",
  "section_break_16",
  "question",
  "column_break_15",
  "file_type",
  "column_break_syza",
  "help"
 ],
 "fields": [
  {
   "fieldname": "chapter",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course Chapter",
   "options": "Course Chapter",
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "include_in_preview",
   "fieldtype": "Check",
   "label": "Include In Preview"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "section_break_6",
   "fieldtype": "Section Break",
   "hidden": 1
  },
  {
   "fieldname": "body",
   "fieldtype": "Markdown Editor",
   "ignore_xss_filter": 1,
   "label": "Body"
  },
  {
   "fieldname": "help",
   "fieldtype": "HTML"
  },
  {
   "fetch_from": "chapter.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "description": "Quiz will appear at the bottom of the lesson.",
   "fieldname": "quiz_id",
   "fieldtype": "Data",
   "label": "Quiz ID"
  },
  {
   "fieldname": "column_break_9",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_11",
   "fieldtype": "Section Break"
  },
  {
   "description": "YouTube Video will appear at the top of the lesson.",
   "fieldname": "youtube",
   "fieldtype": "Data",
   "label": "YouTube Video URL"
  },
  {
   "fieldname": "section_break_16",
   "fieldtype": "Section Break",
   "hidden": 1,
   "label": "Assignment"
  },
  {
   "description": "Assignment will appear at the bottom of the lesson.",
   "fieldname": "question",
   "fieldtype": "Small Text",
   "label": "Question"
  },
  {
   "fieldname": "file_type",
   "fieldtype": "Select",
   "label": "File Type",
   "mandatory_depends_on": "question",
   "options": "\nImage\nDocument\nPDF"
  },
  {
   "fieldname": "column_break_15",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "instructor_notes",
   "fieldtype": "Markdown Editor",
   "label": "Instructor Notes"
  },
  {
   "fieldname": "content",
   "fieldtype": "Text",
   "label": "Content"
  },
  {
   "fieldname": "column_break_cjmf",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "instructor_content",
   "fieldtype": "Text",
   "label": "Instructor Content"
  },
  {
   "fieldname": "column_break_syza",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fetch_from": "chapter.is_scorm_package",
   "fieldname": "is_scorm_package",
   "fieldtype": "Check",
   "label": "Is SCORM Package",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-11-14 13:46:56.838659",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Course Lesson",
 "naming_rule": "Expression",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "select": 1,
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "if_owner": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "select": 1,
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/batch_course/batch_course.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class BatchCourse(Document):
	pass


\lms/lms/doctype/cohort_staff/cohort_staff.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Cohort Staff", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/invite_request/invite_request.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import json

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils.password import get_decrypted_password


class InviteRequest(Document):
	def on_update(self):
		if (
			self.has_value_changed("status")
			and self.status == "Approved"
			and not frappe.flags.in_test
		):
			self.send_email()

	def create_user(self, password):
		full_name_split = self.full_name.split(" ")
		user = frappe.get_doc(
			{
				"doctype": "User",
				"email": self.signup_email,
				"first_name": full_name_split[0],
				"last_name": full_name_split[1] if len(full_name_split) > 1 else "",
				"username": self.username,
				"send_welcome_email": 0,
				"user_type": "Website User",
				"new_password": password,
			}
		)
		user.save(ignore_permissions=True)
		return user

	def send_email(self):
		site_name = "Mon.School"
		subject = _("Welcome to {0}!").format(site_name)

		args = {
			"full_name": self.full_name,
			"signup_form_link": f"/new-sign-up?invite_code={self.name}",
			"site_name": site_name,
			"site_url": frappe.utils.get_url(),
		}
		frappe.sendmail(
			recipients=self.invite_email,
			subject=subject,
			header=[subject, "green"],
			template="lms_invite_request_approved",
			args=args,
			now=True,
		)


@frappe.whitelist(allow_guest=True)
def create_invite_request(invite_email):

	if not frappe.utils.validate_email_address(invite_email):
		return "invalid email"

	if frappe.db.exists("User", invite_email):
		return "user"

	if frappe.db.exists("Invite Request", {"invite_email": invite_email}):
		return "invite"

	frappe.get_doc(
		{"doctype": "Invite Request", "invite_email": invite_email, "status": "Approved"}
	).save(ignore_permissions=True)
	return "OK"


@frappe.whitelist(allow_guest=True)
def update_invite(data):
	data = frappe._dict(json.loads(data)) if type(data) == str else frappe._dict(data)

	try:
		doc = frappe.get_doc("Invite Request", data.invite_code)
	except frappe.DoesNotExistError:
		frappe.throw(_("Invalid Invite Code."))

	doc.signup_email = data.signup_email
	doc.username = data.username
	doc.full_name = data.full_name
	doc.invite_code = data.invite_code
	doc.save(ignore_permissions=True)

	user = doc.create_user(data.password)
	if user:
		doc.status = "Registered"
		doc.save(ignore_permissions=True)

	return "OK"


\lms/lms/doctype/lms_program/lms_program.js
// Copyright (c) 2024, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Program", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/lms_badge/test_lms_badge.py
# Copyright (c) 2024, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSBadge(UnitTestCase):
	pass


\lms/lms/doctype/payment_country/test_payment_country.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestPaymentCountry(UnitTestCase):
	pass


\lms/lms/doctype/related_courses/related_courses.js
// Copyright (c) 2022, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("Related Courses", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_certificate_request/lms_certificate_request.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2022-03-29 10:43:50.889723",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "course_title",
  "column_break_4",
  "member",
  "member_name",
  "section_break_ikne",
  "evaluator",
  "evaluator_name",
  "column_break_sjco",
  "batch_name",
  "batch_title",
  "timezone",
  "section_break_lifi",
  "date",
  "day",
  "google_meet_link",
  "column_break_ddyh",
  "start_time",
  "end_time",
  "status"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Evaluator",
   "options": "User"
  },
  {
   "fieldname": "date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Date",
   "reqd": 1
  },
  {
   "fieldname": "day",
   "fieldtype": "Select",
   "label": "Day",
   "options": "Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday"
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "Start Time",
   "reqd": 1
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "label": "End Time",
   "reqd": 1
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "label": "Member Name",
   "read_only": 1
  },
  {
   "fieldname": "section_break_lifi",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_ddyh",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "google_meet_link",
   "fieldtype": "Data",
   "label": "Google Meet Link",
   "read_only": 1
  },
  {
   "fieldname": "batch_name",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Batch",
   "options": "LMS Batch"
  },
  {
   "fieldname": "section_break_ikne",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_sjco",
   "fieldtype": "Column Break"
  },
  {
   "fetch_from": "course.title",
   "fieldname": "course_title",
   "fieldtype": "Data",
   "label": "Course Title",
   "read_only": 1
  },
  {
   "fetch_from": "evaluator.full_name",
   "fieldname": "evaluator_name",
   "fieldtype": "Data",
   "label": "Evaluator Name",
   "read_only": 1
  },
  {
   "fetch_from": "batch_name.timezone",
   "fieldname": "timezone",
   "fieldtype": "Data",
   "label": "Timezone",
   "read_only": 1
  },
  {
   "fetch_from": "batch_name.title",
   "fieldname": "batch_title",
   "fieldtype": "Data",
   "hidden": 1,
   "label": "Batch Title"
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "in_standard_filter": 1,
   "label": "Status",
   "options": "Upcoming\nCompleted\nCancelled",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2025-02-19 17:20:02.526294",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Certificate Request",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "select": 1,
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Batch Evaluator",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [
  {
   "color": "Blue",
   "title": "Upcoming"
  },
  {
   "color": "Green",
   "title": "Completed"
  },
  {
   "color": "Red",
   "title": "Cancelled"
  }
 ],
 "title_field": "member_name"
}

\lms/lms/doctype/course_evaluator/course_evaluator.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from lms.lms.utils import get_evaluator
from datetime import datetime
from frappe.utils import get_time, getdate


class CourseEvaluator(Document):
	def validate(self):
		self.validate_time_slots()
		self.validate_unavailability()

	def validate_unavailability(self):
		if (
			self.unavailable_from
			and self.unavailable_to
			and getdate(self.unavailable_from) >= getdate(self.unavailable_to)
		):
			frappe.throw(_("Unavailable From Date cannot be greater than Unavailable To Date"))

	def validate_time_slots(self):
		for schedule in self.schedule:
			if get_time(schedule.start_time) >= get_time(schedule.end_time):
				frappe.throw(_("Start Time cannot be greater than End Time"))

			self.validate_overlaps(schedule)

	def validate_overlaps(self, schedule):
		same_day_slots = list(
			filter(lambda x: x.day == schedule.day and x.name != schedule.name, self.schedule)
		)
		overlap = False

		for slot in same_day_slots:
			if (
				get_time(schedule.start_time)
				<= get_time(slot.start_time)
				< get_time(schedule.end_time)
			):
				overlap = True
			if (
				get_time(schedule.start_time)
				< get_time(slot.end_time)
				<= get_time(schedule.end_time)
			):
				overlap = True
			if get_time(slot.start_time) < get_time(schedule.start_time) and get_time(
				schedule.end_time
			) < get_time(slot.end_time):
				overlap = True

			if overlap:
				frappe.throw(_("Slot Times are overlapping for some schedules."))


@frappe.whitelist()
def get_schedule(course, date, batch=None):
	evaluator = get_evaluator(course, batch)
	day = datetime.strptime(date, "%Y-%m-%d").strftime("%A")

	all_slots = frappe.get_all(
		"Evaluator Schedule",
		filters={
			"parent": evaluator,
			"day": day,
		},
		fields=["day", "start_time", "end_time"],
		order_by="start_time",
	)

	booked_slots = frappe.get_all(
		"LMS Certificate Request",
		filters={"evaluator": evaluator, "date": date},
		fields=["start_time", "day"],
	)

	for slot in booked_slots:
		same_slot = list(
			filter(lambda x: x.start_time == slot.start_time and x.day == slot.day, all_slots)
		)
		if len(same_slot):
			all_slots.remove(same_slot[0])

	return all_slots


\lms/lms/doctype/cohort_staff/cohort_staff.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2021-11-19 15:35:00.551949",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "cohort",
  "course",
  "column_break_3",
  "email",
  "role"
 ],
 "fields": [
  {
   "fieldname": "cohort",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Cohort",
   "options": "Cohort",
   "reqd": 1
  },
  {
   "fieldname": "email",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "User",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "role",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Role",
   "options": "Admin\nManager\nStaff",
   "reqd": 1
  },
  {
   "fetch_from": "cohort.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-12-16 15:16:04.042372",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort Staff",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/course_lesson/course_lesson.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils.telemetry import capture
from lms.lms.utils import get_course_progress
from ...md import find_macros
import json


class CourseLesson(Document):
	def validate(self):
		# self.check_and_create_folder()
		self.validate_quiz_id()

	def validate_quiz_id(self):
		if self.quiz_id and not frappe.db.exists("LMS Quiz", self.quiz_id):
			frappe.throw(_("Invalid Quiz ID"))

	def on_update(self):
		dynamic_documents = ["Exercise", "Quiz"]
		for section in dynamic_documents:
			self.update_lesson_name_in_document(section)

	def update_lesson_name_in_document(self, section):
		doctype_map = {"Exercise": "LMS Exercise", "Quiz": "LMS Quiz"}
		macros = find_macros(self.body)
		documents = [value for name, value in macros if name == section]
		index = 1
		for name in documents:
			e = frappe.get_doc(doctype_map[section], name)
			e.lesson = self.name
			e.index_ = index
			e.course = self.course
			e.save(ignore_permissions=True)
			index += 1
		self.update_orphan_documents(doctype_map[section], documents)

	def update_orphan_documents(self, doctype, documents):
		"""Updates the documents that were previously part of this lesson,
		but not any more.
		"""
		linked_documents = {
			row["name"] for row in frappe.get_all(doctype, {"lesson": self.name})
		}
		active_documents = set(documents)
		orphan_documents = linked_documents - active_documents
		for name in orphan_documents:
			ex = frappe.get_doc(doctype, name)
			ex.lesson = None
			ex.course = None
			ex.index_ = 0
			ex.save(ignore_permissions=True)

	def check_and_create_folder(self):
		args = {
			"doctype": "File",
			"is_folder": True,
			"file_name": f"{self.name} {self.course}",
		}
		if not frappe.db.exists(args):
			folder = frappe.get_doc(args)
			folder.save(ignore_permissions=True)

	def get_exercises(self):
		if not self.body:
			return []

		macros = find_macros(self.body)
		exercises = [value for name, value in macros if name == "Exercise"]
		return [frappe.get_doc("LMS Exercise", name) for name in exercises]


@frappe.whitelist()
def save_progress(lesson, course):
	membership = frappe.db.exists(
		"LMS Enrollment", {"course": course, "member": frappe.session.user}
	)
	if not membership:
		return 0

	frappe.db.set_value("LMS Enrollment", membership, "current_lesson", lesson)
	already_completed = frappe.db.exists(
		"LMS Course Progress", {"lesson": lesson, "member": frappe.session.user}
	)

	quiz_completed = get_quiz_progress(lesson)
	assignment_completed = get_assignment_progress(lesson)

	if not already_completed and quiz_completed and assignment_completed:
		frappe.get_doc(
			{
				"doctype": "LMS Course Progress",
				"lesson": lesson,
				"status": "Complete",
				"member": frappe.session.user,
			}
		).save(ignore_permissions=True)

	progress = get_course_progress(course)
	capture_progress_for_analytics(progress, course)

	# Had to get doc, as on_change doesn't trigger when you use set_value. The trigger is necesary for badge to get assigned.
	enrollment = frappe.get_doc("LMS Enrollment", membership)
	enrollment.progress = progress
	enrollment.save()
	enrollment.run_method("on_change")

	return progress


def capture_progress_for_analytics(progress, course):
	if progress in [25, 50, 75, 100]:
		capture("course_progress", "lms", properties={"course": course, "progress": progress})


def get_quiz_progress(lesson):
	lesson_details = frappe.db.get_value(
		"Course Lesson", lesson, ["body", "content"], as_dict=1
	)
	quizzes = []

	if lesson_details.content:
		content = json.loads(lesson_details.content)

		for block in content.get("blocks"):
			if block.get("type") == "quiz":
				quizzes.append(block.get("data").get("quiz"))

	elif lesson_details.body:
		macros = find_macros(lesson_details.body)
		quizzes = [value for name, value in macros if name == "Quiz"]

	for quiz in quizzes:
		passing_percentage = frappe.db.get_value("LMS Quiz", quiz, "passing_percentage")
		if not frappe.db.exists(
			"LMS Quiz Submission",
			{
				"quiz": quiz,
				"member": frappe.session.user,
				"percentage": [">=", passing_percentage],
			},
		):
			return False
	return True


def get_assignment_progress(lesson):
	lesson_details = frappe.db.get_value(
		"Course Lesson", lesson, ["body", "content"], as_dict=1
	)
	assignments = []

	if lesson_details.content:
		content = json.loads(lesson_details.content)

		for block in content.get("blocks"):
			if block.get("type") == "assignment":
				assignments.append(block.get("data").get("assignment"))

	elif lesson_details.body:
		macros = find_macros(lesson_details.body)
		assignments = [value for name, value in macros if name == "Assignment"]

	for assignment in assignments:
		if not frappe.db.exists(
			"LMS Assignment Submission",
			{"assignment": assignment, "member": frappe.session.user},
		):
			return False
	return True


@frappe.whitelist()
def get_lesson_info(chapter):
	return frappe.db.get_value("Course Chapter", chapter, "course")


\lms/lms/doctype/lms_assignment/__init__.py


\lms/lms/doctype/invite_request/test_invite_request.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt
import unittest

import frappe

from lms.lms.doctype.invite_request.invite_request import (
	create_invite_request,
	update_invite,
)


class TestInviteRequest(unittest.TestCase):
	pass


\lms/lms/doctype/lms_quiz_submission/__init__.py


\lms/lms/doctype/lms_program/lms_program.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "field:title",
 "creation": "2024-11-18 12:27:13.283169",
 "doctype": "DocType",
 "engine": "InnoDB",
 "field_order": [
  "title",
  "program_courses",
  "program_members"
 ],
 "fields": [
  {
   "fieldname": "program_courses",
   "fieldtype": "Table",
   "label": "Program Courses",
   "options": "LMS Program Course"
  },
  {
   "fieldname": "program_members",
   "fieldtype": "Table",
   "label": "Program Members",
   "options": "LMS Program Member"
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1,
   "unique": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-11-28 22:06:16.742867",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Program",
 "naming_rule": "By fieldname",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Course Creator",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/lms_certificate_request/lms_certificate_request.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.model.mapper import get_mapped_doc
from frappe.utils import (
	format_date,
	format_time,
	getdate,
	add_to_date,
	get_datetime,
	nowtime,
	get_time,
	get_fullname,
)
from lms.lms.utils import get_evaluator
import json


class LMSCertificateRequest(Document):
	def validate(self):
		self.set_evaluator()
		self.validate_unavailability()
		self.validate_slot()
		self.validate_if_existing_requests()
		self.validate_evaluation_end_date()

	def after_insert(self):
		self.send_notification()

	def set_evaluator(self):
		if not self.evaluator:
			self.evaluator = get_evaluator(self.course, self.batch_name)
			self.evaluator_name = get_fullname(self.evaluator)

	def validate_unavailability(self):
		if self.evaluator:
			unavailable = frappe.db.get_value(
				"Course Evaluator",
				self.evaluator,
				["unavailable_from", "unavailable_to"],
				as_dict=1,
			)
			if (
				unavailable.unavailable_from
				and unavailable.unavailable_to
				and getdate(self.date) >= unavailable.unavailable_from
				and getdate(self.date) <= unavailable.unavailable_to
			):
				frappe.throw(
					_(
						"The evaluator of this course is unavailable from {0} to {1}. Please select a date after {1}"
					).format(
						format_date(unavailable.unavailable_from, "medium"),
						format_date(unavailable.unavailable_to, "medium"),
					)
				)

	def validate_slot(self):
		if frappe.db.exists(
			"LMS Certificate Request",
			{
				"evaluator": self.evaluator,
				"date": self.date,
				"start_time": self.start_time,
				"member": ["!=", self.member],
			},
		):
			frappe.throw(_("The slot is already booked by another participant."))

	def validate_if_existing_requests(self):
		existing_requests = frappe.get_all(
			"LMS Certificate Request",
			{
				"member": self.member,
				"course": self.course,
				"name": ["!=", self.name],
			},
			["date", "start_time", "course"],
		)

		for req in existing_requests:
			if (
				req.date == getdate(self.date)
				or getdate() < getdate(req.date)
				or (
					getdate() == getdate(req.date)
					and getdate(self.start_time) < getdate(req.start_time)
				)
			):
				course_title = frappe.db.get_value("LMS Course", req.course, "title")
				frappe.throw(
					_("You already have an evaluation on {0} at {1} for the course {2}.").format(
						format_date(req.date, "medium"),
						format_time(req.start_time, "short"),
						course_title,
					)
				)
		if getdate() == getdate(self.date) and get_time(self.start_time) < get_time(
			nowtime()
		):
			frappe.throw(_("You cannot schedule evaluations for past slots."))

	def validate_evaluation_end_date(self):
		if self.batch_name:
			evaluation_end_date = frappe.db.get_value(
				"LMS Batch", self.batch_name, "evaluation_end_date"
			)

			if evaluation_end_date:
				if getdate(self.date) > getdate(evaluation_end_date):
					frappe.throw(
						_("You cannot schedule evaluations after {0}.").format(
							format_date(evaluation_end_date, "medium")
						)
					)

	def send_notification(self):
		outgoing_email_account = frappe.get_cached_value(
			"Email Account", {"default_outgoing": 1, "enable_outgoing": 1}, "name"
		)
		if outgoing_email_account or frappe.conf.get("mail_login"):
			subject = _("Your evaluation slot has been booked")
			template = "certificate_request_notification"

			args = {
				"course": self.course_title,
				"timezone": self.timezone if self.batch_name else "",
				"date": format_date(self.date, "medium"),
				"member_name": self.member_name,
				"start_time": format_time(self.start_time, "short"),
				"evaluator": self.evaluator_name,
			}

			frappe.sendmail(
				recipients=[self.member],
				cc=[self.evaluator],
				subject=subject,
				template=template,
				args=args,
				header=[subject, "green"],
				retry=3,
			)


def schedule_evals():
	if frappe.db.get_single_value("LMS Settings", "send_calendar_invite_for_evaluations"):
		timelapse = add_to_date(get_datetime(), hours=-5)
		evals = frappe.get_all(
			"LMS Certificate Request",
			{"creation": [">=", timelapse], "google_meet_link": ["is", "not set"]},
			["name", "member", "member_name", "evaluator", "date", "start_time", "end_time"],
		)
		for eval in evals:
			setup_calendar_event(eval)


@frappe.whitelist()
def setup_calendar_event(eval):
	if isinstance(eval, str):
		eval = frappe._dict(json.loads(eval))

	calendar = frappe.db.get_value(
		"Google Calendar", {"user": eval.evaluator, "enable": 1}, "name"
	)

	if calendar:
		event = create_event(eval)
		add_participants(eval, event)
		update_meeting_details(eval, event, calendar)


def create_event(eval):
	event = frappe.get_doc(
		{
			"doctype": "Event",
			"subject": f"Evaluation of {eval.member_name}",
			"starts_on": f"{eval.date} {eval.start_time}",
			"ends_on": f"{eval.date} {eval.end_time}",
		}
	)
	event.save()
	return event


def add_participants(eval, event):
	participants = [eval.member, eval.evaluator]
	for participant in participants:
		contact_name = frappe.db.get_value("Contact", {"email_id": participant}, "name")
		frappe.get_doc(
			{
				"doctype": "Event Participants",
				"reference_doctype": "Contact",
				"reference_docname": contact_name,
				"email": participant,
				"parent": event.name,
				"parenttype": "Event",
				"parentfield": "event_participants",
			}
		).save()


def update_meeting_details(eval, event, calendar):
	event.reload()
	event.update(
		{
			"sync_with_google_calendar": 1,
			"add_video_conferencing": 1,
			"google_calendar": calendar,
		}
	)

	event.save()
	event.reload()
	frappe.db.set_value(
		"LMS Certificate Request", eval.name, "google_meet_link", event.google_meet_link
	)


@frappe.whitelist()
def create_certificate_request(
	course, date, day, start_time, end_time, batch_name=None
):
	is_member = frappe.db.exists(
		{"doctype": "LMS Enrollment", "course": course, "member": frappe.session.user}
	)

	if not is_member:
		return
	eval = frappe.new_doc("LMS Certificate Request")
	eval.update(
		{
			"course": course,
			"evaluator": get_evaluator(course, batch_name),
			"member": frappe.session.user,
			"date": date,
			"day": day,
			"start_time": start_time,
			"end_time": end_time,
			"batch_name": batch_name,
		}
	)
	eval.save(ignore_permissions=True)


@frappe.whitelist()
def create_lms_certificate_evaluation(source_name, target_doc=None):
	doc = get_mapped_doc(
		"LMS Certificate Request",
		source_name,
		{"LMS Certificate Request": {"doctype": "LMS Certificate Evaluation"}},
		target_doc,
	)
	return doc


\lms/lms/doctype/related_courses/related_courses.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2022-02-16 11:45:07.200407",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2022-02-16 11:48:30.964916",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Related Courses",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/course_evaluator/test_course_evaluator.py
# Copyright (c) 2022, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestCourseEvaluator(UnitTestCase):
	pass


\lms/lms/doctype/cohort_mentor/__init__.py


\lms/lms/doctype/course_lesson/test_course_lesson.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCourseLesson(unittest.TestCase):
	pass


\lms/lms/doctype/cohort_staff/cohort_staff.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class CohortStaff(Document):
	pass


\lms/lms/doctype/lms_program/lms_program.py
# Copyright (c) 2024, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document


class LMSProgram(Document):
	def validate(self):
		self.validate_program_courses()
		self.validate_program_members()

	def validate_program_courses(self):
		courses = [row.course for row in self.program_courses]
		duplicates = {course for course in courses if courses.count(course) > 1}
		if len(duplicates):
			frappe.throw(
				_("Course {0} has already been added to this batch.").format(
					frappe.bold(next(iter(duplicates)))
				)
			)

	def validate_program_members(self):
		members = [row.member for row in self.program_members]
		duplicates = {member for member in members if members.count(member) > 1}
		if len(duplicates):
			frappe.throw(
				_("Member {0} has already been added to this batch.").format(
					frappe.bold(next(iter(duplicates)))
				)
			)


\lms/lms/doctype/lms_assignment/lms_assignment.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Assignment", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/lms_quiz_submission/lms_quiz_submission.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Quiz Submission", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_course/__init__.py


\lms/lms/doctype/related_courses/related_courses.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class RelatedCourses(Document):
	pass


\lms/lms/doctype/lms_certificate_request/test_lms_certificate_request.py
# Copyright (c) 2022, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSCertificateRequest(UnitTestCase):
	pass


\lms/lms/doctype/cohort_staff/test_cohort_staff.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCohortStaff(unittest.TestCase):
	pass


\lms/lms/doctype/lms_batch_timetable/__init__.py


\lms/lms/doctype/lms_program/test_lms_program.py
# Copyright (c) 2024, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import IntegrationTestCase, UnitTestCase


# On IntegrationTestCase, the doctype test records and all
# link-field test record depdendencies are recursively loaded
# Use these module variables to add/remove to/from that list
EXTRA_TEST_RECORD_DEPENDENCIES = []  # eg. ["User"]
IGNORE_TEST_RECORD_DEPENDENCIES = []  # eg. ["User"]


class TestLMSProgram(UnitTestCase):
	"""
	Unit tests for LMSProgram.
	Use this class for testing individual functions and methods.
	"""

	pass


\lms/lms/doctype/lms_exercise/__init__.py


\lms/lms/doctype/lms_assignment/lms_assignment.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "format: ASG-{#####}",
 "creation": "2023-05-26 19:41:26.025081",
 "default_view": "List",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "question",
  "column_break_hmwv",
  "type",
  "grade_assignment",
  "section_break_sjti",
  "show_answer",
  "answer"
 ],
 "fields": [
  {
   "fieldname": "question",
   "fieldtype": "Text Editor",
   "label": "Question",
   "reqd": 1
  },
  {
   "fieldname": "type",
   "fieldtype": "Select",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Type",
   "options": "Document\nPDF\nURL\nImage\nText",
   "reqd": 1
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "column_break_hmwv",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "depends_on": "eval:doc.type == \"Text\"",
   "fieldname": "show_answer",
   "fieldtype": "Check",
   "label": "Show Answer"
  },
  {
   "depends_on": "show_answer",
   "fieldname": "answer",
   "fieldtype": "Text Editor",
   "label": "Answer"
  },
  {
   "default": "1",
   "depends_on": "eval:doc.type == \"Text\"",
   "fieldname": "grade_assignment",
   "fieldtype": "Check",
   "label": "Grade Assignment"
  },
  {
   "fieldname": "section_break_sjti",
   "fieldtype": "Section Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-12-24 09:36:31.464508",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Assignment",
 "naming_rule": "Expression (old style)",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title"
}

\lms/lms/doctype/cohort_mentor/cohort_mentor.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Cohort Mentor", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_course/lms_course.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Course", {
	onload: function (frm) {
		frm.set_query("chapter", "chapters", function () {
			return {
				filters: {
					course: frm.doc.name,
				},
			};
		});

		frm.set_query("course", "related_courses", function () {
			return {
				filters: {
					published: true,
				},
			};
		});
	},
	refresh: (frm) => {
		frm.add_web_link(`/lms/courses/${frm.doc.name}`, "See on Website");

		if (!frm.doc.currency)
			frappe.db
				.get_single_value("LMS Settings", "default_currency")
				.then((value) => {
					frm.set_value("currency", value);
				});
	},
});


\lms/lms/doctype/related_courses/test_related_courses.py
# Copyright (c) 2022, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestRelatedCourses(unittest.TestCase):
	pass


\lms/lms/doctype/lms_quiz_submission/lms_quiz_submission.json
{
 "actions": [],
 "creation": "2021-06-07 14:19:54.958989",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "quiz",
  "quiz_title",
  "course",
  "column_break_3",
  "member",
  "member_name",
  "section_break_dkpn",
  "score",
  "score_out_of",
  "column_break_gkip",
  "percentage",
  "passing_percentage",
  "section_break_6",
  "result"
 ],
 "fields": [
  {
   "fieldname": "quiz",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Quiz",
   "options": "LMS Quiz"
  },
  {
   "fieldname": "result",
   "fieldtype": "Table",
   "label": "Result",
   "options": "LMS Quiz Result"
  },
  {
   "fieldname": "score",
   "fieldtype": "Int",
   "in_list_view": 1,
   "label": "Score",
   "reqd": 1
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User"
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "label": "Member Name",
   "read_only": 1
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_6",
   "fieldtype": "Section Break"
  },
  {
   "fetch_from": "quiz.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "fetch_from": "quiz.total_marks",
   "fieldname": "score_out_of",
   "fieldtype": "Int",
   "label": "Score Out Of",
   "non_negative": 1,
   "read_only": 1,
   "reqd": 1
  },
  {
   "fieldname": "section_break_dkpn",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_gkip",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "percentage",
   "fieldtype": "Int",
   "label": "Percentage",
   "non_negative": 1,
   "reqd": 1
  },
  {
   "fieldname": "passing_percentage",
   "fieldtype": "Int",
   "label": "Passing Percentage",
   "non_negative": 1,
   "read_only": 1,
   "reqd": 1
  },
  {
   "fetch_from": "quiz.title",
   "fieldname": "quiz_title",
   "fieldtype": "Data",
   "label": "Quiz Title",
   "read_only": 1
  }
 ],
 "in_create": 1,
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-10-07 16:52:04.162521",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Quiz Submission",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "member_name",
 "track_changes": 1
}

\lms/lms/doctype/lms_assignment_submission/__init__.py


\lms/lms/doctype/lms_certificate_evaluation/__init__.py


\lms/lms/doctype/lms_batch_timetable/lms_batch_timetable.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Batch Timetable", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/cohort_mentor/cohort_mentor.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2021-11-19 15:31:47.129156",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "cohort",
  "email",
  "subgroup",
  "course"
 ],
 "fields": [
  {
   "fieldname": "cohort",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Cohort",
   "options": "Cohort",
   "reqd": 1
  },
  {
   "fieldname": "email",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "E-mail",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "subgroup",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Primary Subgroup",
   "options": "Cohort Subgroup",
   "reqd": 1
  },
  {
   "fetch_from": "cohort.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-11-29 16:32:33.235281",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "Cohort Mentor",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/lms_assignment/lms_assignment.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from lms.lms.utils import has_course_moderator_role, has_course_instructor_role


class LMSAssignment(Document):
	pass


@frappe.whitelist()
def save_assignment(assignment, title, type, question):
	if not has_course_moderator_role() or not has_course_instructor_role():
		return

	if assignment:
		doc = frappe.get_doc("LMS Assignment", assignment)
	else:
		doc = frappe.get_doc({"doctype": "LMS Assignment"})

	doc.update({"title": title, "type": type, "question": question})
	doc.save(ignore_permissions=True)
	return doc.name


\lms/lms/doctype/lms_quiz_submission/lms_quiz_submission.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from frappe.utils import cint
from frappe import _
from frappe.desk.doctype.notification_log.notification_log import make_notification_logs


class LMSQuizSubmission(Document):
	def validate(self):
		self.validate_if_max_attempts_exceeded()
		self.validate_marks()
		self.set_percentage()

	def on_update(self):
		self.notify_member()

	def validate_if_max_attempts_exceeded(self):
		max_attempts = frappe.db.get_value("LMS Quiz", self.quiz, ["max_attempts"])
		if max_attempts == 0:
			return

		current_user_submission_count = frappe.db.count(
			self.doctype, filters={"quiz": self.quiz, "member": frappe.session.user}
		)
		if current_user_submission_count >= max_attempts:
			frappe.throw(
				_("You have exceeded the maximum number of attempts ({0}) for this quiz").format(
					max_attempts
				),
				MaximumAttemptsExceededError,
			)

	def validate_marks(self):
		self.score = 0
		for row in self.result:
			if cint(row.marks) > cint(row.marks_out_of):
				frappe.throw(
					_(
						"Marks for question number {0} cannot be greater than the marks allotted for that question."
					).format(row.idx)
				)
			else:
				self.score += cint(row.marks)

	def set_percentage(self):
		if self.score and self.score_out_of:
			self.percentage = (self.score / self.score_out_of) * 100

	def notify_member(self):
		if self.score != 0 and self.has_value_changed("score"):
			notification = frappe._dict(
				{
					"subject": _("You have got a score of {0} for the quiz {1}").format(
						self.score, self.quiz_title
					),
					"email_content": _(
						"There has been an update on your submission. You have got a score of {0} for the quiz {1}"
					).format(self.score, self.quiz_title),
					"document_type": self.doctype,
					"document_name": self.name,
					"for_user": self.member,
					"from_user": "Administrator",
					"type": "Alert",
					"link": "",
				}
			)

			make_notification_logs(notification, [self.member])


class MaximumAttemptsExceededError(frappe.DuplicateEntryError):
	pass


\lms/lms/doctype/lms_batch/__init__.py


\lms/lms/doctype/__init__.py


\lms/lms/doctype/lms_exercise/lms_exercise.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Exercise", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/cohort_mentor/cohort_mentor.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document


class CohortMentor(Document):
	def get_subgroup(self):
		return frappe.get_doc("Cohort Subgroup", self.subgroup)

	def get_user(self):
		return frappe.get_doc("User", self.email)


\lms/lms/doctype/lms_course/lms_course.json
{
 "actions": [
  {
   "action": "lms.lms.doctype.lms_course.lms_course.reindex_exercises",
   "action_type": "Server Action",
   "group": "Reindex",
   "label": "Reindex Exercises"
  }
 ],
 "allow_import": 1,
 "allow_rename": 1,
 "creation": "2022-02-22 15:28:26.091549",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "video_link",
  "column_break_3",
  "instructors",
  "tags",
  "column_break_htgn",
  "image",
  "category",
  "status",
  "section_break_7",
  "published",
  "published_on",
  "column_break_10",
  "upcoming",
  "featured",
  "disable_self_learning",
  "section_break_18",
  "short_introduction",
  "column_break_viqw",
  "description",
  "section_break_gglp",
  "chapters",
  "related_courses",
  "pricing_tab",
  "pricing_section",
  "paid_course",
  "enable_certification",
  "paid_certificate",
  "evaluator",
  "column_break_acoj",
  "course_price",
  "currency",
  "amount_usd",
  "tab_4_tab",
  "statistics_section",
  "enrollments",
  "lessons",
  "rating"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1,
   "width": "200"
  },
  {
   "fieldname": "description",
   "fieldtype": "Text Editor",
   "label": "Description",
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "published",
   "fieldtype": "Check",
   "label": "Published"
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "video_link",
   "fieldtype": "Data",
   "label": "Video Embed Link"
  },
  {
   "fieldname": "short_introduction",
   "fieldtype": "Small Text",
   "label": "Short Introduction",
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "disable_self_learning",
   "fieldtype": "Check",
   "label": "Disable Self Learning"
  },
  {
   "fieldname": "image",
   "fieldtype": "Attach Image",
   "label": "Preview Image",
   "reqd": 1
  },
  {
   "fieldname": "tags",
   "fieldtype": "Data",
   "label": "Tags"
  },
  {
   "default": "0",
   "fieldname": "upcoming",
   "fieldtype": "Check",
   "label": "Upcoming"
  },
  {
   "fieldname": "chapters",
   "fieldtype": "Table",
   "label": "Chapters",
   "options": "Chapter Reference"
  },
  {
   "fieldname": "instructors",
   "fieldtype": "Table MultiSelect",
   "in_standard_filter": 1,
   "label": "Instructors",
   "max_height": "50px",
   "options": "Course Instructor",
   "reqd": 1
  },
  {
   "fieldname": "section_break_7",
   "fieldtype": "Section Break",
   "label": "Course Settings"
  },
  {
   "default": "0",
   "fieldname": "enable_certification",
   "fieldtype": "Check",
   "label": "Completion Certificate"
  },
  {
   "fieldname": "related_courses",
   "fieldtype": "Table",
   "label": "Related Courses",
   "options": "Related Courses"
  },
  {
   "default": "In Progress",
   "fieldname": "status",
   "fieldtype": "Select",
   "hidden": 1,
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Status",
   "options": "In Progress\nUnder Review\nApproved",
   "read_only": 1
  },
  {
   "fieldname": "section_break_18",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_10",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "pricing_section",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "currency",
   "fieldtype": "Link",
   "label": "Currency",
   "mandatory_depends_on": "paid_course",
   "options": "Currency"
  },
  {
   "default": "0",
   "fieldname": "paid_course",
   "fieldtype": "Check",
   "label": "Paid Course"
  },
  {
   "fieldname": "course_price",
   "fieldtype": "Currency",
   "label": "Amount",
   "mandatory_depends_on": "paid_course"
  },
  {
   "fieldname": "column_break_acoj",
   "fieldtype": "Column Break"
  },
  {
   "description": "If you set an amount here, then the USD equivalent setting will not get applied.",
   "fieldname": "amount_usd",
   "fieldtype": "Currency",
   "label": "Amount (USD)"
  },
  {
   "fieldname": "published_on",
   "fieldtype": "Date",
   "label": "Published On"
  },
  {
   "default": "0",
   "fieldname": "featured",
   "fieldtype": "Check",
   "label": "Featured"
  },
  {
   "fieldname": "column_break_viqw",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_gglp",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "pricing_tab",
   "fieldtype": "Tab Break",
   "label": "Pricing and Certification"
  },
  {
   "fieldname": "column_break_htgn",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "category",
   "fieldtype": "Link",
   "label": "Category",
   "options": "LMS Category"
  },
  {
   "fieldname": "tab_4_tab",
   "fieldtype": "Tab Break",
   "label": "Statistics"
  },
  {
   "fieldname": "statistics_section",
   "fieldtype": "Section Break"
  },
  {
   "default": "0",
   "fieldname": "enrollments",
   "fieldtype": "Data",
   "label": "Enrollments",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "lessons",
   "fieldtype": "Data",
   "label": "Lessons",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "rating",
   "fieldtype": "Data",
   "label": "Rating",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "paid_certificate",
   "fieldtype": "Check",
   "label": "Paid Certificate"
  },
  {
   "depends_on": "paid_certificate",
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "label": "Evaluator",
   "options": "Course Evaluator"
  }
 ],
 "is_published_field": "published",
 "links": [
  {
   "group": "Chapters",
   "link_doctype": "Course Chapter",
   "link_fieldname": "course"
  },
  {
   "group": "Batches",
   "link_doctype": "LMS Batch Old",
   "link_fieldname": "course"
  },
  {
   "group": "Mentors",
   "link_doctype": "LMS Course Mentor Mapping",
   "link_fieldname": "course"
  },
  {
   "group": "Interests",
   "link_doctype": "LMS Course Interest",
   "link_fieldname": "course"
  }
 ],
 "make_attachments_public": 1,
 "modified": "2025-02-24 11:50:58.325804",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Course",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Course Creator",
   "share": 1,
   "write": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/lms_batch_timetable/lms_batch_timetable.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "hash",
 "creation": "2023-09-14 12:44:51.098956",
 "default_view": "List",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "column_break_htdc",
  "reference_doctype",
  "reference_docname",
  "date",
  "day",
  "column_break_merq",
  "start_time",
  "end_time",
  "duration",
  "milestone"
 ],
 "fields": [
  {
   "fieldname": "reference_doctype",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Reference DocType",
   "options": "DocType"
  },
  {
   "fieldname": "reference_docname",
   "fieldtype": "Dynamic Link",
   "in_list_view": 1,
   "label": "Reference DocName",
   "options": "reference_doctype"
  },
  {
   "fieldname": "column_break_merq",
   "fieldtype": "Column Break"
  },
  {
   "depends_on": "eval:doc.parenttype == \"LMS Batch\";",
   "fieldname": "date",
   "fieldtype": "Date",
   "label": "Date"
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "Start Time"
  },
  {
   "fieldname": "duration",
   "fieldtype": "Data",
   "label": "Duration"
  },
  {
   "fieldname": "column_break_htdc",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "End Time"
  },
  {
   "depends_on": "eval: doc.parenttype == \"LMS Timetable Template\";",
   "fieldname": "day",
   "fieldtype": "Int",
   "label": "Day"
  },
  {
    "fieldname": "milestone",
    "fieldtype": "Check",
    "label": "Milestone"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2023-10-20 11:58:01.782921",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Batch Timetable",
 "naming_rule": "Random",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/lms_assignment_submission/lms_assignment_submission.js
// Copyright (c) 2021, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Assignment Submission", {
	onload: function (frm) {
		frm.set_query("member", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/lms_exercise/lms_exercise.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2021-05-19 17:43:39.923430",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "title",
  "description",
  "code",
  "answer",
  "column_break_4",
  "course",
  "hints",
  "tests",
  "image",
  "lesson",
  "index_",
  "index_label"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title"
  },
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Course",
   "options": "LMS Course"
  },
  {
   "columns": 4,
   "fieldname": "description",
   "fieldtype": "Small Text",
   "in_list_view": 1,
   "label": "Description"
  },
  {
   "columns": 4,
   "fieldname": "answer",
   "fieldtype": "Code",
   "label": "Answer"
  },
  {
   "fieldname": "tests",
   "fieldtype": "Code",
   "label": "Tests"
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "columns": 4,
   "fieldname": "hints",
   "fieldtype": "Small Text",
   "label": "Hints"
  },
  {
   "columns": 4,
   "fieldname": "code",
   "fieldtype": "Code",
   "label": "Code"
  },
  {
   "fieldname": "image",
   "fieldtype": "Code",
   "label": "Image",
   "read_only": 1
  },
  {
   "fieldname": "lesson",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Lesson",
   "options": "Course Lesson"
  },
  {
   "fieldname": "index_",
   "fieldtype": "Int",
   "label": "Index",
   "read_only": 1
  },
  {
   "fieldname": "index_label",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Index Label",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2021-09-29 15:27:55.585874",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Exercise",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "search_fields": "title",
 "sort_field": "index_label",
 "sort_order": "ASC",
 "title_field": "title",
 "track_changes": 1
}


\lms/lms/doctype/lms_batch/lms_batch.js
// Copyright (c) 2022, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Batch", {
	onload: function (frm) {
		frm.set_query("student", "students", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});

		frm.set_query("reference_doctype", "timetable", function () {
			let doctypes = ["Course Lesson", "LMS Quiz", "LMS Assignment"];
			return {
				filters: {
					name: ["in", doctypes],
				},
			};
		});

		frm.set_query("assessment_type", "assessment", function () {
			let doctypes = ["LMS Quiz", "LMS Assignment"];
			return {
				filters: {
					name: ["in", doctypes],
				},
			};
		});

		frm.set_query("reference_doctype", "timetable_legends", function () {
			let doctypes = ["Course Lesson", "LMS Quiz", "LMS Assignment"];
			return {
				filters: {
					name: ["in", doctypes],
				},
			};
		});

		if (frm.doc.timetable.length && !frm.doc.timetable_legends.length) {
			set_default_legends(frm);
		}
	},

	timetable_template: function (frm) {
		set_timetable(frm);
	},

	refresh: (frm) => {
		frm.add_web_link(
			`/lms/batches/details/${frm.doc.name}`,
			"See on website"
		);
	},
});

const set_timetable = (frm) => {
	if (frm.doc.timetable_template) {
		frm.clear_table("timetable");
		frm.refresh_fields();

		frappe.call({
			method: "frappe.client.get_list",
			args: {
				doctype: "LMS Batch Timetable",
				parent: "LMS Timetable Template",
				fields: [
					"reference_doctype",
					"reference_docname",
					"day",
					"start_time",
					"end_time",
					"duration",
					"milestone",
				],
				filters: {
					parent: frm.doc.timetable_template,
					parenttype: "LMS Timetable Template",
				},
				order_by: "idx",
			},
			callback: (data) => {
				add_timetable_rows(frm, data.message);
			},
		});
	}
};

const add_timetable_rows = (frm, timetable) => {
	timetable.forEach((row) => {
		let child = frm.add_child("timetable");
		child.reference_doctype = row.reference_doctype;
		child.reference_docname = row.reference_docname;
		child.date = frappe.datetime.add_days(frm.doc.start_date, row.day - 1);
		child.start_time = row.start_time;
		child.end_time = row.end_time
			? row.end_time
			: row.duration
			? moment
					.utc(row.start_time, "HH:mm")
					.add(row.duration, "hour")
					.format("HH:mm")
			: null;
		child.duration = row.duration;
		child.milestone = row.milestone;
	});
	frm.refresh_field("timetable");

	set_legends(frm);
};

const set_legends = (frm) => {
	if (frm.doc.timetable_template) {
		frm.clear_table("timetable_legends");
		frm.refresh_fields();
		frappe.call({
			method: "frappe.client.get_list",
			args: {
				doctype: "LMS Timetable Legend",
				parent: "LMS Timetable Template",
				fields: ["reference_doctype", "label", "color"],
				filters: {
					parent: frm.doc.timetable_template,
					parenttype: "LMS Timetable Template",
				},
				order_by: "idx",
			},
			callback: (data) => {
				add_legend_rows(frm, data.message);
			},
		});
	}
};

const add_legend_rows = (frm, legends) => {
	legends.forEach((row) => {
		let child = frm.add_child("timetable_legends");
		child.reference_doctype = row.reference_doctype;
		child.label = row.label;
		child.color = row.color;
	});
	frm.refresh_field("timetable_legends");
	frm.save();
};

const set_default_legends = (frm) => {
	const data = [
		{
			reference_doctype: "Course Lesson",
			label: "Lesson",
			color: "#449CF0",
		},
		{
			reference_doctype: "LMS Quiz",
			label: "LMS Quiz",
			color: "#39E4A5",
		},
		{
			reference_doctype: "LMS Assignment",
			label: "LMS Assignment",
			color: "#ECAD4B",
		},
		{
			reference_doctype: "LMS Live Class",
			label: "LMS Live Class",
			color: "#bb8be8",
		},
	];

	data.forEach((detail) => {
		let child = frm.add_child("timetable_legends");
		child.reference_doctype = detail.reference_doctype;
		child.label = detail.label;
		child.color = detail.color;
	});
	frm.refresh_field("timetable_legends");
	frm.save();
};


\lms/lms/doctype/lms_certificate_evaluation/lms_certificate_evaluation.js
// Copyright (c) 2022, Frappe and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Certificate Evaluation", {
	refresh: function (frm) {
		if (!frm.is_new() && frm.doc.status == "Pass") {
			frm.add_custom_button(__("Create LMS Certificate"), () => {
				frappe.model.open_mapped_doc({
					method: "lms.lms.doctype.lms_certificate_evaluation.lms_certificate_evaluation.create_lms_certificate",
					frm: frm,
				});
			});
		}
	},

	onload: function (frm) {
		frm.set_query("course", function (doc) {
			return {
				filters: {
					enable_certification: true,
					grant_certificate_after: "Evaluation",
				},
			};
		});

		frm.set_query("member", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/lms_assignment/test_lms_assignment.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSAssignment(UnitTestCase):
	pass


\lms/lms/doctype/lms_quiz_submission/test_lms_quiz_submission.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSQuizSubmission(unittest.TestCase):
	pass


\lms/lms/doctype/batch_course/__init__.py


\lms/lms/doctype/lms_assignment_submission/lms_assignment_submission.json
{
 "actions": [],
 "allow_rename": 1,
 "autoname": "format: ASG-SUB-{#####}",
 "creation": "2021-12-21 16:15:22.651658",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "assignment",
  "assignment_title",
  "type",
  "column_break_3",
  "member",
  "member_name",
  "evaluator",
  "section_break_dlzh",
  "assignment_attachment",
  "answer",
  "section_break_ydgh",
  "column_break_oqqy",
  "status",
  "comments",
  "section_break_rqal",
  "question",
  "column_break_esgd",
  "course",
  "lesson"
 ],
 "fields": [
  {
   "fieldname": "lesson",
   "fieldtype": "Link",
   "label": "Lesson",
   "options": "Course Lesson"
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "assignment",
   "fieldtype": "Link",
   "label": "Assignment",
   "options": "LMS Assignment"
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Member Name",
   "read_only": 1
  },
  {
   "fetch_from": "lesson.course",
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "read_only": 1
  },
  {
   "default": "Not Graded",
   "fieldname": "status",
   "fieldtype": "Select",
   "label": "Status",
   "options": "Pass\nFail\nNot Graded\nNot Applicable"
  },
  {
   "fieldname": "comments",
   "fieldtype": "Text Editor",
   "label": "Comments"
  },
  {
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "label": "Evaluator",
   "options": "User"
  },
  {
   "depends_on": "eval:!([\"URL\", \"Text\"]).includes(doc.type);",
   "fieldname": "assignment_attachment",
   "fieldtype": "Attach",
   "label": "Assignment Attachment",
   "mandatory_depends_on": "eval:doc.type != \"URL\";"
  },
  {
   "fetch_from": "assignment.type",
   "fieldname": "type",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Type",
   "options": "Document\nPDF\nURL\nImage\nText"
  },
  {
   "fetch_from": "assignment.question",
   "fieldname": "question",
   "fieldtype": "Text Editor",
   "label": "Question",
   "read_only": 1
  },
  {
   "fetch_from": "assignment.title",
   "fieldname": "assignment_title",
   "fieldtype": "Data",
   "label": "Assignment Title"
  },
  {
   "fieldname": "section_break_rqal",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_esgd",
   "fieldtype": "Column Break"
  },
  {
   "depends_on": "eval:([\"URL\", \"Text\"]).includes(doc.type);",
   "fieldname": "answer",
   "fieldtype": "Text Editor",
   "label": "Answer",
   "mandatory_depends_on": "eval:doc.type == \"URL\";"
  },
  {
   "fieldname": "section_break_dlzh",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_oqqy",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_ydgh",
   "fieldtype": "Section Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "make_attachments_public": 1,
 "modified": "2025-02-17 18:40:53.374932",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Assignment Submission",
 "naming_rule": "Expression (old style)",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "email": 1,
   "export": 1,
   "if_owner": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "LMS Student",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [
  {
   "color": "Green",
   "title": "Pass"
  },
  {
   "color": "Orange",
   "title": "Not Graded"
  },
  {
   "color": "Red",
   "title": "Fail"
  },
  {
   "color": "Blue",
   "title": "Not Applicable"
  }
 ],
 "title_field": "assignment_title"
}

\lms/lms/doctype/lms_batch_timetable/lms_batch_timetable.py
# Copyright (c) 2023, Frappe and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSBatchTimetable(Document):
	pass


\lms/lms/doctype/lms_course/lms_course.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

import json
import random
import frappe
from frappe.model.document import Document
from frappe.utils import today, cint
from lms.lms.utils import get_chapters
from ...utils import generate_slug, validate_image, update_payment_record
from frappe import _


class LMSCourse(Document):
	def validate(self):
		self.validate_published()
		self.validate_instructors()
		self.validate_video_link()
		self.validate_status()
		self.validate_payments_app()
		self.validate_certification()
		self.validate_amount_and_currency()
		self.image = validate_image(self.image)

	def validate_published(self):
		if self.published and not self.published_on:
			self.published_on = today()

	def validate_instructors(self):
		if self.is_new() and not self.instructors:
			frappe.get_doc(
				{
					"doctype": "Course Instructor",
					"instructor": self.owner,
					"parent": self.name,
					"parentfield": "instructors",
					"parenttype": "LMS Course",
				}
			).save(ignore_permissions=True)

	def validate_video_link(self):
		if self.video_link and "/" in self.video_link:
			self.video_link = self.video_link.split("/")[-1]

	def validate_status(self):
		if self.published:
			self.status = "Approved"

	def validate_payments_app(self):
		if self.paid_course:
			installed_apps = frappe.get_installed_apps()
			if "payments" not in installed_apps:
				frappe.throw(_("Please install the Payments app to create a paid courses."))

	def validate_certification(self):
		if self.enable_certification and self.paid_certificate:
			frappe.throw(
				_("A course cannot have both paid certificate and certificate of completion.")
			)

		if self.paid_certificate and not self.evaluator:
			frappe.throw(_("Evaluator is required for paid certificates."))

	def validate_amount_and_currency(self):
		if self.paid_course and (cint(self.course_price) < 0 or not self.currency):
			frappe.throw(_("Amount and currency are required for paid courses."))

		if self.paid_certificate and (cint(self.course_price) <= 0 or not self.currency):
			frappe.throw(_("Amount and currency are required for paid certificates."))

	def on_update(self):
		if not self.upcoming and self.has_value_changed("upcoming"):
			self.send_email_to_interested_users()

	def on_payment_authorized(self, payment_status):
		if payment_status in ["Authorized", "Completed"]:
			update_payment_record("LMS Course", self.name)

	def send_email_to_interested_users(self):
		interested_users = frappe.get_all(
			"LMS Course Interest", {"course": self.name}, ["name", "user"]
		)
		subject = self.title + " is available!"
		args = {
			"title": self.title,
			"course_link": f"/lms/courses/{self.name}",
			"app_name": frappe.db.get_single_value("System Settings", "app_name"),
			"site_url": frappe.utils.get_url(),
		}

		for user in interested_users:
			args["first_name"] = frappe.db.get_value("User", user.user, "first_name")
			email_args = frappe._dict(
				recipients=user.user,
				subject=subject,
				header=[subject, "green"],
				template="lms_course_interest",
				args=args,
				now=True,
			)
			frappe.enqueue(
				method=frappe.sendmail, queue="short", timeout=300, is_async=True, **email_args
			)
			frappe.db.set_value("LMS Course Interest", user.name, "email_sent", True)

	def autoname(self):
		if not self.name:
			self.name = generate_slug(self.title, "LMS Course")

	def __repr__(self):
		return f"<Course#{self.name}>"

	def has_mentor(self, email):
		"""Checks if this course has a mentor with given email."""
		if not email or email == "Guest":
			return False

		mapping = frappe.get_all(
			"LMS Course Mentor Mapping", {"course": self.name, "mentor": email}
		)
		return mapping != []

	def add_mentor(self, email):
		"""Adds a new mentor to the course."""
		if not email:
			raise ValueError("Invalid email")
		if email == "Guest":
			raise ValueError("Guest user can not be added as a mentor")

		# given user is already a mentor
		if self.has_mentor(email):
			return

		doc = frappe.get_doc(
			{"doctype": "LMS Course Mentor Mapping", "course": self.name, "mentor": email}
		)
		doc.insert()

	def get_student_batch(self, email):
		"""Returns the batch the given student is part of.

		Returns None if the student is not part of any batch.
		"""
		if not email:
			return

		batch_name = frappe.get_value(
			doctype="LMS Enrollment",
			filters={"course": self.name, "member_type": "Student", "member": email},
			fieldname="batch_old",
		)
		return batch_name and frappe.get_doc("LMS Batch Old", batch_name)

	def get_batches(self, mentor=None):
		batches = frappe.get_all("LMS Batch Old", {"course": self.name})
		if mentor:
			# TODO: optimize this
			memberships = frappe.db.get_all("LMS Enrollment", {"member": mentor}, ["batch_old"])
			batch_names = {m.batch_old for m in memberships}
			return [b for b in batches if b.name in batch_names]

	def get_cohorts(self):
		return frappe.get_all(
			"Cohort",
			{"course": self.name},
			["name", "slug", "title", "begin_date", "end_date"],
			order_by="creation",
		)

	def get_cohort(self, cohort_slug):
		name = frappe.get_value("Cohort", {"course": self.name, "slug": cohort_slug})
		return name and frappe.get_doc("Cohort", name)

	def reindex_exercises(self):
		for i, c in enumerate(get_chapters(self.name), start=1):
			self._reindex_exercises_in_chapter(c, i)

	def _reindex_exercises_in_chapter(self, c, index):
		i = 1
		for lesson in self.get_lessons(c):
			for exercise in lesson.get_exercises():
				exercise.index_ = i
				exercise.index_label = f"{index}.{i}"
				exercise.save()
				i += 1

	def get_all_memberships(self, member):
		all_memberships = frappe.get_all(
			"LMS Enrollment", {"member": member, "course": self.name}, ["batch_old"]
		)
		for membership in all_memberships:
			membership.batch_title = frappe.db.get_value(
				"LMS Batch Old", membership.batch_old, "title"
			)
		return all_memberships


@frappe.whitelist()
def reindex_exercises(doc):
	course_data = json.loads(doc)
	course = frappe.get_doc("LMS Course", course_data["name"])
	course.reindex_exercises()
	frappe.msgprint("All exercises in this course have been re-indexed.")


\lms/lms/doctype/cohort_mentor/test_cohort_mentor.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

# import frappe
import unittest


class TestCohortMentor(unittest.TestCase):
	pass


\lms/lms/doctype/lms_option/__init__.py


\lms/lms/doctype/lms_certificate_evaluation/lms_certificate_evaluation.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2022-03-29 09:32:16.769951",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "member",
  "member_name",
  "column_break_ueht",
  "course",
  "batch_name",
  "section_break_zwfi",
  "evaluator",
  "evaluator_name",
  "column_break_5",
  "date",
  "start_time",
  "end_time",
  "section_break_6",
  "rating",
  "status",
  "column_break_10",
  "summary"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fieldname": "column_break_5",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "rating",
   "fieldtype": "Rating",
   "in_list_view": 1,
   "label": "Rating",
   "mandatory_depends_on": "eval:doc.status == 'Pass'"
  },
  {
   "fieldname": "summary",
   "fieldtype": "Small Text",
   "label": "Summary",
   "mandatory_depends_on": "eval:doc.status != 'Pending' && doc.status != 'In Progress'"
  },
  {
   "fieldname": "date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Date",
   "reqd": 1
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "label": "Start Time",
   "reqd": 1
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "label": "End Time"
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "member_name",
   "fieldtype": "Data",
   "label": "Member Name",
   "read_only": 1
  },
  {
   "fieldname": "status",
   "fieldtype": "Select",
   "label": "Status",
   "options": "Pending\nIn Progress\nPass\nFail",
   "reqd": 1
  },
  {
   "fieldname": "section_break_6",
   "fieldtype": "Section Break",
   "label": "Evaluation Details"
  },
  {
   "fieldname": "column_break_10",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "batch_name",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Batch Name",
   "options": "LMS Batch"
  },
  {
   "fieldname": "column_break_ueht",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_zwfi",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "evaluator",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Evaluator",
   "options": "User"
  },
  {
   "fetch_from": "evaluator.full_name",
   "fieldname": "evaluator_name",
   "fieldtype": "Data",
   "label": "Evaluator Name",
   "read_only": 1
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [],
 "modified": "2024-09-11 11:20:06.233491",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Certificate Evaluation",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Batch Evaluator",
   "share": 1,
   "write": 1
  }
 ],
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [
  {
   "color": "Green",
   "title": "Pass"
  },
  {
   "color": "Red",
   "title": "Fail"
  },
  {
   "color": "Blue",
   "title": "Pending"
  },
  {
   "color": "Orange",
   "title": "In Progress"
  }
 ],
 "title_field": "member_name"
}

\lms/lms/doctype/lms_batch_old/__init__.py


\lms/lms/doctype/lms_exercise/lms_exercise.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document

from lms.lms.utils import get_membership


class LMSExercise(Document):
	def get_user_submission(self):
		"""Returns the latest submission for this user."""
		user = frappe.session.user
		if not user or user == "Guest":
			return

		result = frappe.get_all(
			"Exercise Submission",
			fields="*",
			filters={"owner": user, "exercise": self.name},
			order_by="creation desc",
			page_length=1,
		)

		if result:
			return result[0]

	def submit(self, code):
		"""Submits the given code as solution to exercise."""
		user = frappe.session.user
		if not user or user == "Guest":
			return

		old_submission = self.get_user_submission()
		if old_submission and old_submission.solution == code:
			return old_submission

		member = get_membership(self.course, frappe.session.user)

		doc = frappe.get_doc(
			doctype="Exercise Submission",
			exercise=self.name,
			exercise_title=self.title,
			course=self.course,
			lesson=self.lesson,
			batch=member.batch_old,
			solution=code,
			member=member.name,
		)
		doc.insert(ignore_permissions=True)

		return doc


\lms/lms/doctype/lms_course/test_lms_course.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

import unittest

import frappe

from .lms_course import LMSCourse


class TestLMSCourse(unittest.TestCase):
	def test_new_course(self):
		course = new_course("Test Course")
		assert course.title == "Test Course"

	# disabled this test as it is failing
	def _test_add_mentors(self):
		course = new_course("Test Course")
		assert course.get_mentors() == []

		user = new_user("Tester", "tester@example.com")
		course.add_mentor("tester@example.com")

		mentors = course.get_mentors()
		mentors_data = [
			dict(email=mentor.email, batch_count=mentor.batch_count) for mentor in mentors
		]
		assert mentors_data == [{"email": "tester@example.com", "batch_count": 0}]

	def tearDown(self):
		if frappe.db.exists("User", "tester@example.com"):
			frappe.delete_doc("User", "tester@example.com")

		if frappe.db.exists("LMS Course", "test-course"):
			frappe.db.delete("Exercise Submission", {"course": "test-course"})
			frappe.db.delete("Exercise Latest Submission", {"course": "test-course"})
			frappe.db.delete("LMS Exercise", {"course": "test-course"})
			frappe.db.delete("LMS Enrollment", {"course": "test-course"})
			frappe.db.delete("Course Lesson", {"course": "test-course"})
			frappe.db.delete("Course Chapter", {"course": "test-course"})
			frappe.db.delete("LMS Batch Old", {"course": "test-course"})
			frappe.db.delete("LMS Course Mentor Mapping", {"course": "test-course"})
			frappe.db.delete("Course Instructor", {"parent": "test-course"})
			frappe.db.sql("delete from `tabCourse Instructor`")
			frappe.delete_doc("LMS Course", "test-course")


def new_user(name, email):
	user = frappe.db.exists("User", email)
	if user:
		return frappe.get_doc("User", user)
	else:
		filters = {
			"email": email,
			"first_name": name,
			"send_welcome_email": False,
		}

		doc = frappe.new_doc("User")
		doc.update(filters)
		doc.save()
		return doc


def new_course(title, additional_filters=None):
	course = frappe.db.exists("LMS Course", {"title": title})
	if course:
		return frappe.get_doc("LMS Course", course)
	else:
		create_evaluator()
		user = frappe.db.get_value(
			"User",
			{
				"user_type": "System User",
			},
		)
		filters = {
			"title": title,
			"short_introduction": title,
			"description": title,
			"video_link": "https://youtu.be/pEbIhUySqbk",
			"image": "/assets/lms/images/course-home.png",
			"instructors": [{"instructor": user}],
		}

		if additional_filters:
			filters.update(additional_filters)

		doc = frappe.new_doc("LMS Course")
		doc.update(filters)
		doc.save()
		return doc


def create_evaluator():
	if not frappe.db.exists("Course Evaluator", "evaluator@example.com"):
		new_user("Evaluator", "evaluator@example.com")
		frappe.get_doc(
			{"doctype": "Course Evaluator", "evaluator": "evaluator@example.com"}
		).save(ignore_permissions=True)


\lms/lms/doctype/cohort/__init__.py


\lms/lms/doctype/lms_batch/lms_batch.json
{
 "actions": [],
 "allow_import": 1,
 "allow_rename": 1,
 "creation": "2022-11-09 16:14:05.876933",
 "default_view": "List",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "section_break_earo",
  "title",
  "start_date",
  "end_date",
  "column_break_4",
  "start_time",
  "end_time",
  "timezone",
  "section_break_cssv",
  "published",
  "column_break_wfkz",
  "allow_self_enrollment",
  "column_break_vnrp",
  "certification",
  "section_break_6",
  "description",
  "column_break_hlqw",
  "instructors",
  "section_break_rgfj",
  "medium",
  "category",
  "confirmation_email_template",
  "column_break_flwy",
  "seat_count",
  "evaluation_end_date",
  "meta_image",
  "section_break_khcn",
  "batch_details",
  "batch_details_raw",
  "section_break_jgji",
  "courses",
  "assessment_tab",
  "assessment",
  "schedule_tab",
  "timetable_template",
  "column_break_anya",
  "show_live_class",
  "allow_future",
  "section_break_ontp",
  "timetable",
  "timetable_legends",
  "pricing_tab",
  "section_break_gsac",
  "paid_batch",
  "column_break_iens",
  "amount",
  "currency",
  "amount_usd",
  "customisations_tab",
  "section_break_ubxi",
  "custom_component",
  "column_break_pxgb",
  "custom_script"
 ],
 "fields": [
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "end_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "End Date",
   "reqd": 1
  },
  {
   "fieldname": "column_break_4",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "description",
   "fieldtype": "Small Text",
   "label": "Description",
   "reqd": 1
  },
  {
   "fieldname": "section_break_6",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "courses",
   "fieldtype": "Table",
   "label": "Courses",
   "options": "Batch Course"
  },
  {
   "fieldname": "start_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Start Date",
   "reqd": 1
  },
  {
   "fieldname": "custom_component",
   "fieldtype": "Code",
   "label": "Custom HTML",
   "options": "HTML"
  },
  {
   "default": "0",
   "description": "Students will be enrolled in a paid batch once they complete the payment",
   "fieldname": "paid_batch",
   "fieldtype": "Check",
   "label": "Paid Batch"
  },
  {
   "fieldname": "seat_count",
   "fieldtype": "Int",
   "label": "Seat Count"
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "Start Time",
   "reqd": 1
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "label": "End Time",
   "reqd": 1
  },
  {
   "fieldname": "assessment_tab",
   "fieldtype": "Tab Break",
   "label": "Assessment"
  },
  {
   "fieldname": "assessment",
   "fieldtype": "Table",
   "label": "Assessment",
   "options": "LMS Assessment"
  },
  {
   "fieldname": "section_break_rgfj",
   "fieldtype": "Section Break"
  },
  {
   "default": "Online",
   "fieldname": "medium",
   "fieldtype": "Select",
   "label": "Medium",
   "options": "Online\nOffline"
  },
  {
   "fieldname": "column_break_flwy",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "category",
   "fieldtype": "Link",
   "in_standard_filter": 1,
   "label": "Category",
   "options": "LMS Category"
  },
  {
   "description": "These customisations will work on the main batch page.",
   "fieldname": "section_break_ubxi",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "schedule_tab",
   "fieldtype": "Tab Break",
   "label": "Timetable"
  },
  {
   "fieldname": "section_break_gsac",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "column_break_iens",
   "fieldtype": "Column Break"
  },
  {
   "depends_on": "paid_batch",
   "fieldname": "amount",
   "fieldtype": "Currency",
   "label": "Amount",
   "mandatory_depends_on": "paid_batch"
  },
  {
   "depends_on": "paid_batch",
   "fieldname": "currency",
   "fieldtype": "Link",
   "label": "Currency",
   "mandatory_depends_on": "paid_batch",
   "options": "Currency"
  },
  {
   "fieldname": "batch_details",
   "fieldtype": "Text Editor",
   "label": "Batch Details",
   "reqd": 1
  },
  {
   "default": "0",
   "fieldname": "published",
   "fieldtype": "Check",
   "in_standard_filter": 1,
   "label": "Published"
  },
  {
   "fieldname": "timetable",
   "fieldtype": "Table",
   "label": "Timetable",
   "options": "LMS Batch Timetable"
  },
  {
   "fieldname": "timetable_template",
   "fieldtype": "Link",
   "label": "Timetable Template",
   "options": "LMS Timetable Template"
  },
  {
   "fieldname": "column_break_anya",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "show_live_class",
   "fieldtype": "Check",
   "label": "Show live class"
  },
  {
   "fieldname": "section_break_ontp",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "batch_details_raw",
   "fieldtype": "HTML Editor",
   "label": "Batch Details Raw"
  },
  {
   "fieldname": "column_break_hlqw",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_jgji",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "meta_image",
   "fieldtype": "Attach Image",
   "label": "Meta Image"
  },
  {
   "fieldname": "column_break_pxgb",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "customisations_tab",
   "fieldtype": "Tab Break",
   "label": "Customisations"
  },
  {
   "fieldname": "pricing_tab",
   "fieldtype": "Tab Break",
   "label": "Pricing"
  },
  {
   "fieldname": "custom_script",
   "fieldtype": "Code",
   "label": "Custom Script (JavaScript)",
   "options": "Javascript"
  },
  {
   "fieldname": "timetable_legends",
   "fieldtype": "Table",
   "label": "Timetable Legends",
   "options": "LMS Timetable Legend"
  },
  {
   "default": "1",
   "fieldname": "allow_future",
   "fieldtype": "Check",
   "label": "Allow accessing future dates"
  },
  {
   "fieldname": "evaluation_end_date",
   "fieldtype": "Date",
   "label": "Evaluation End Date"
  },
  {
   "depends_on": "paid_batch",
   "description": "If you set an amount here, then the USD equivalent setting will not get applied.",
   "fieldname": "amount_usd",
   "fieldtype": "Currency",
   "label": "Amount (USD)"
  },
  {
   "default": "0",
   "fieldname": "allow_self_enrollment",
   "fieldtype": "Check",
   "label": "Allow Self Enrollment"
  },
  {
   "fieldname": "timezone",
   "fieldtype": "Data",
   "label": "Timezone",
   "reqd": 1
  },
  {
   "fieldname": "instructors",
   "fieldtype": "Table MultiSelect",
   "label": "Instructors",
   "options": "Course Instructor",
   "reqd": 1
  },
  {
   "fieldname": "section_break_khcn",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "confirmation_email_template",
   "fieldtype": "Link",
   "label": "Confirmation Email Template",
   "options": "Email Template"
  },
  {
   "fieldname": "column_break_wfkz",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "column_break_vnrp",
   "fieldtype": "Column Break"
  },
  {
   "default": "0",
   "fieldname": "certification",
   "fieldtype": "Check",
   "in_standard_filter": 1,
   "label": "Certification"
  },
  {
   "fieldname": "section_break_earo",
   "fieldtype": "Section Break"
  },
  {
   "fieldname": "section_break_cssv",
   "fieldtype": "Section Break"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "link_doctype": "LMS Batch Enrollment",
   "link_fieldname": "batch"
  },
  {
   "link_doctype": "LMS Certificate Evaluation",
   "link_fieldname": "batch_name"
  },
  {
   "link_doctype": "LMS Certificate",
   "link_fieldname": "batch_name"
  }
 ],
 "modified": "2025-02-18 15:43:18.512504",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Batch",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Moderator",
   "share": 1,
   "write": 1
  },
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "Batch Evaluator",
   "share": 1,
   "write": 1
  }
 ],
 "show_title_field_in_link": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "title_field": "title",
 "track_changes": 1
}

\lms/lms/doctype/lms_batch_timetable/test_lms_batch_timetable.py
# Copyright (c) 2023, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSBatchTimetable(unittest.TestCase):
	pass


\lms/lms/doctype/lms_assignment_submission/lms_assignment_submission.py
# Copyright (c) 2021, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils import validate_url, validate_email_address
from frappe.email.doctype.email_template.email_template import get_email_template
from frappe.desk.doctype.notification_log.notification_log import make_notification_logs


class LMSAssignmentSubmission(Document):
	def validate(self):
		self.validate_duplicates()
		self.validate_url()
		self.validate_status()

	def after_insert(self):
		if not frappe.flags.in_test:
			outgoing_email_account = frappe.get_cached_value(
				"Email Account", {"default_outgoing": 1, "enable_outgoing": 1}, "name"
			)
			if outgoing_email_account or frappe.conf.get("mail_login"):
				self.send_mail()

	def validate_duplicates(self):
		if frappe.db.exists(
			"LMS Assignment Submission",
			{"assignment": self.assignment, "member": self.member, "name": ["!=", self.name]},
		):
			lesson_title = frappe.db.get_value("Course Lesson", self.lesson, "title")
			frappe.throw(
				_("Assignment for Lesson {0} by {1} already exists.").format(
					lesson_title, self.member_name
				)
			)

	def validate_url(self):
		if self.type == "URL" and not validate_url(self.answer):
			frappe.throw(_("Please enter a valid URL."))

	def send_mail(self):
		subject = _("New Assignment Submission")
		template = "assignment_submission"
		custom_template = frappe.db.get_single_value(
			"LMS Settings", "assignment_submission_template"
		)

		args = {
			"member_name": self.member_name,
			"assignment_name": self.assignment,
			"assignment_title": self.assignment_title,
			"submission_name": self.name,
		}

		moderators = frappe.get_all("Has Role", {"role": "Moderator"}, pluck="parent")
		for moderator in moderators:
			if not validate_email_address(moderator):
				moderators.remove(moderator)

		if custom_template:
			email_template = get_email_template(custom_template, args)
			subject = email_template.get("subject")
			content = email_template.get("message")
		frappe.sendmail(
			recipients=moderators,
			subject=subject,
			template=template if not custom_template else None,
			content=content if custom_template else None,
			args=args,
			header=[subject, "green"],
		)

	def validate_status(self):
		if not self.is_new():
			doc_before_save = self.get_doc_before_save()
			if (
				doc_before_save.status != self.status or doc_before_save.comments != self.comments
			):
				self.trigger_update_notification()

	def trigger_update_notification(self):
		notification = frappe._dict(
			{
				"subject": _(
					"There has been an update on your submission for assignment {0}"
				).format(self.assignment_title),
				"email_content": self.comments,
				"document_type": self.doctype,
				"document_name": self.name,
				"for_user": self.owner,
				"from_user": self.evaluator,
				"type": "Alert",
				"link": f"/assignment-submission/{self.assignment}/{self.name}",
			}
		)
		make_notification_logs(notification, [self.member])


@frappe.whitelist()
def upload_assignment(
	assignment_attachment=None,
	answer=None,
	assignment=None,
	lesson=None,
	status="Not Graded",
	comments=None,
	submission=None,
):
	if frappe.session.user == "Guest":
		return

	assignment_details = frappe.db.get_value(
		"LMS Assignment", assignment, ["type", "grade_assignment"], as_dict=1
	)
	assignment_type = assignment_details.type

	if assignment_type in ["URL", "Text"] and not answer:
		frappe.throw(_("Please enter the URL for assignment submission."))

	if assignment_type == "File" and not assignment_attachment:
		frappe.throw(_("Please upload the assignment file."))

	if assignment_type == "URL" and not validate_url(answer):
		frappe.throw(_("Please enter a valid URL."))

	if submission:
		doc = frappe.get_doc("LMS Assignment Submission", submission)
	else:
		doc = frappe.get_doc(
			{
				"doctype": "LMS Assignment Submission",
				"assignment": assignment,
				"lesson": lesson,
				"member": frappe.session.user,
				"type": assignment_type,
			}
		)

	doc.update(
		{
			"assignment_attachment": assignment_attachment,
			"status": "Not Applicable"
			if assignment_type == "Text" and not assignment_details.grade_assignment
			else status,
			"comments": comments,
			"answer": answer,
		}
	)
	doc.save(ignore_permissions=True)
	return doc.name


@frappe.whitelist()
def get_assignment(lesson):
	assignment = frappe.db.get_value(
		"LMS Assignment Submission",
		{"lesson": lesson, "member": frappe.session.user},
		["name", "lesson", "member", "assignment_attachment", "comments", "status"],
		as_dict=True,
	)
	assignment.file_name = frappe.db.get_value(
		"File", {"file_url": assignment.assignment_attachment}, "file_name"
	)
	return assignment


@frappe.whitelist()
def grade_assignment(name, result, comments):
	doc = frappe.get_doc("LMS Assignment Submission", name)
	doc.status = result
	doc.comments = comments
	doc.save(ignore_permissions=True)


\lms/lms/doctype/lms_program_member/__init__.py


\lms/lms/doctype/lms_certificate_evaluation/lms_certificate_evaluation.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.model.document import Document
from frappe.model.mapper import get_mapped_doc
from lms.lms.utils import has_course_moderator_role


class LMSCertificateEvaluation(Document):
	def validate(self):
		self.validate_rating()

	def validate_rating(self):
		if self.status not in ["Pending", "In Progress"] and self.rating == 0:
			frappe.throw(_("Rating cannot be 0"))


def has_website_permission(doc, ptype, user, verbose=False):
	if has_course_moderator_role() or doc.member == frappe.session.user:
		return True
	return False


@frappe.whitelist()
def create_lms_certificate(source_name, target_doc=None):
	doc = get_mapped_doc(
		"LMS Certificate Evaluation",
		source_name,
		{"LMS Certificate Evaluation": {"doctype": "LMS Certificate"}},
		target_doc,
	)
	return doc


\lms/lms/doctype/lms_exercise/test_lms_exercise.py
# Copyright (c) 2021, FOSS United and Contributors
# See license.txt

import unittest

import frappe

from lms.lms.doctype.lms_course.test_lms_course import new_course


class TestLMSExercise(unittest.TestCase):
	def new_exercise(self):
		course = new_course("Test Course")
		member = frappe.get_doc(
			{
				"doctype": "LMS Enrollment",
				"course": course.name,
				"member": frappe.session.user,
			}
		)
		member.insert()
		e = frappe.get_doc(
			{
				"doctype": "LMS Exercise",
				"name": "test-problem",
				"course": course.name,
				"title": "Test Problem",
				"description": "draw a circle",
				"code": "# draw a single cicle",
				"answer": ("# draw a single circle\n" + "circle(100, 100, 50)"),
			}
		)
		e.insert()
		return e

	def test_exercise(self):
		e = self.new_exercise()
		assert e.get_user_submission() is None

	def test_exercise_submission(self):
		e = self.new_exercise()
		submission = e.submit("circle(100, 100, 50)")
		assert submission is not None
		assert submission.exercise == e.name
		assert submission.course == e.course

		user_submission = e.get_user_submission()
		assert user_submission is not None
		assert user_submission.name == submission.name

	def tearDown(self):
		frappe.db.delete("LMS Enrollment")
		frappe.db.delete("Exercise Submission")
		frappe.db.delete("LMS Exercise")


\lms/lms/doctype/lms_batch_old/lms_batch_old.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Batch Old", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_option/lms_option.json
{
 "actions": [],
 "creation": "2021-06-07 10:46:10.402684",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "option",
  "is_correct"
 ],
 "fields": [
  {
   "fieldname": "option",
   "fieldtype": "Data",
   "label": "Option"
  },
  {
   "default": "0",
   "fieldname": "is_correct",
   "fieldtype": "Check",
   "label": "Is Correct"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2021-06-07 10:48:45.290227",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Option",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "modified",
 "sort_order": "DESC",
 "track_changes": 1
}

\lms/lms/doctype/lms_batch/lms_batch.py
# Copyright (c) 2022, Frappe and contributors
# For license information, please see license.txt

import frappe
import requests
import base64
import json
from frappe import _
from datetime import timedelta
from frappe.model.document import Document
from frappe.utils import cint, format_datetime, get_time, add_days, nowdate
from lms.lms.utils import (
	get_lesson_index,
	get_lesson_url,
	get_quiz_details,
	get_assignment_details,
	update_payment_record,
	generate_slug,
)


class LMSBatch(Document):
	def validate(self):
		if self.seat_count:
			self.validate_seats_left()
		self.validate_batch_end_date()
		self.validate_duplicate_courses()
		self.validate_payments_app()
		self.validate_amount_and_currency()
		self.validate_duplicate_assessments()
		self.validate_membership()
		self.validate_timetable()
		self.validate_evaluation_end_date()

	def autoname(self):
		if not self.name:
			self.name = generate_slug(self.title, "LMS Batch")

	def validate_batch_end_date(self):
		if self.end_date < self.start_date:
			frappe.throw(_("Batch end date cannot be before the batch start date"))

	def validate_duplicate_courses(self):
		courses = [row.course for row in self.courses]
		duplicates = {course for course in courses if courses.count(course) > 1}
		if len(duplicates):
			title = frappe.db.get_value("LMS Course", next(iter(duplicates)), "title")
			frappe.throw(
				_("Course {0} has already been added to this batch.").format(frappe.bold(title))
			)

	def validate_payments_app(self):
		if self.paid_batch:
			installed_apps = frappe.get_installed_apps()
			if "payments" not in installed_apps:
				frappe.throw(_("Please install the Payments app to create a paid batches."))

	def validate_amount_and_currency(self):
		if self.paid_batch and (not self.amount or not self.currency):
			frappe.throw(_("Amount and currency are required for paid batches."))

	def validate_duplicate_assessments(self):
		assessments = [row.assessment_name for row in self.assessment]
		for assessment in self.assessment:
			if assessments.count(assessment.assessment_name) > 1:
				title = frappe.db.get_value(
					assessment.assessment_type, assessment.assessment_name, "title"
				)
				frappe.throw(
					_("Assessment {0} has already been added to this batch.").format(
						frappe.bold(title)
					)
				)

	def validate_evaluation_end_date(self):
		if self.evaluation_end_date and self.evaluation_end_date < self.end_date:
			frappe.throw(_("Evaluation end date cannot be less than the batch end date."))

	def validate_membership(self):
		members = frappe.get_all("LMS Batch Enrollment", {"batch": self.name}, pluck="member")
		for course in self.courses:
			for member in members:
				if not frappe.db.exists(
					"LMS Enrollment", {"course": course.course, "member": member}
				):
					enrollment = frappe.new_doc("LMS Enrollment")
					enrollment.course = course.course
					enrollment.member = member
					enrollment.save()

	def validate_seats_left(self):
		students = frappe.db.count("LMS Batch Enrollment", {"batch": self.name})
		if cint(self.seat_count) < students:
			frappe.throw(_("There are no seats available in this batch."))

	def validate_timetable(self):
		for schedule in self.timetable:
			if schedule.start_time and schedule.end_time:
				if get_time(schedule.start_time) > get_time(schedule.end_time) or get_time(
					schedule.start_time
				) == get_time(schedule.end_time):
					frappe.throw(
						_("Row #{0} Start time cannot be greater than or equal to end time.").format(
							schedule.idx
						)
					)

				if get_time(schedule.start_time) < get_time(self.start_time) or get_time(
					schedule.start_time
				) > get_time(self.end_time):
					frappe.throw(
						_("Row #{0} Start time cannot be outside the batch duration.").format(
							schedule.idx
						)
					)

				if get_time(schedule.end_time) < get_time(self.start_time) or get_time(
					schedule.end_time
				) > get_time(self.end_time):
					frappe.throw(
						_("Row #{0} End time cannot be outside the batch duration.").format(schedule.idx)
					)

			if schedule.date < self.start_date or schedule.date > self.end_date:
				frappe.throw(
					_("Row #{0} Date cannot be outside the batch duration.").format(schedule.idx)
				)

	def on_payment_authorized(self, payment_status):
		if payment_status in ["Authorized", "Completed"]:
			update_payment_record("LMS Batch", self.name)


@frappe.whitelist()
def create_live_class(
	batch_name, title, duration, date, time, timezone, auto_recording, description=None
):
	frappe.only_for("Moderator")
	payload = {
		"topic": title,
		"start_time": format_datetime(f"{date} {time}", "yyyy-MM-ddTHH:mm:ssZ"),
		"duration": duration,
		"agenda": description,
		"private_meeting": True,
		"auto_recording": "none"
		if auto_recording == "No Recording"
		else auto_recording.lower(),
		"timezone": timezone,
	}
	headers = {
		"Authorization": "Bearer " + authenticate(),
		"content-type": "application/json",
	}
	response = requests.post(
		"https://api.zoom.us/v2/users/me/meetings", headers=headers, data=json.dumps(payload)
	)

	if response.status_code == 201:
		data = json.loads(response.text)
		payload.update(
			{
				"doctype": "LMS Live Class",
				"start_url": data.get("start_url"),
				"join_url": data.get("join_url"),
				"title": title,
				"host": frappe.session.user,
				"date": date,
				"time": time,
				"batch_name": batch_name,
				"password": data.get("password"),
				"description": description,
				"auto_recording": auto_recording,
			}
		)
		class_details = frappe.get_doc(payload)
		class_details.save()
		return class_details
	else:
		frappe.throw(
			_("Error creating live class. Please try again. {0}").format(response.text)
		)


def authenticate():
	zoom = frappe.get_single("Zoom Settings")
	if not zoom.enable:
		frappe.throw(_("Please enable Zoom Settings to use this feature."))

	authenticate_url = f"https://zoom.us/oauth/token?grant_type=account_credentials&account_id={zoom.account_id}"

	headers = {
		"Authorization": "Basic "
		+ base64.b64encode(
			bytes(
				zoom.client_id
				+ ":"
				+ zoom.get_password(fieldname="client_secret", raise_exception=False),
				encoding="utf8",
			)
		).decode()
	}
	response = requests.request("POST", authenticate_url, headers=headers)
	return response.json()["access_token"]


@frappe.whitelist()
def create_batch(
	title,
	start_date,
	end_date,
	description=None,
	batch_details=None,
	batch_details_raw=None,
	meta_image=None,
	seat_count=0,
	start_time=None,
	end_time=None,
	medium="Online",
	category=None,
	paid_batch=0,
	amount=0,
	currency=None,
	amount_usd=0,
	name=None,
	published=0,
	evaluation_end_date=None,
):
	frappe.only_for("Moderator")
	if name:
		doc = frappe.get_doc("LMS Batch", name)
	else:
		doc = frappe.get_doc({"doctype": "LMS Batch"})

	doc.update(
		{
			"title": title,
			"start_date": start_date,
			"end_date": end_date,
			"description": description,
			"batch_details": batch_details,
			"batch_details_raw": batch_details_raw,
			"meta_image": meta_image,
			"seat_count": seat_count,
			"start_time": start_time,
			"end_time": end_time,
			"medium": medium,
			"category": category,
			"paid_batch": paid_batch,
			"amount": amount,
			"currency": currency,
			"amount_usd": amount_usd,
			"published": published,
			"evaluation_end_date": evaluation_end_date,
		}
	)
	doc.save()
	return doc


@frappe.whitelist()
def add_course(course, parent, name=None, evaluator=None):
	frappe.only_for("Moderator")

	if frappe.db.exists("Batch Course", {"course": course, "parent": parent}):
		frappe.throw(_("Course already added to the batch."))

	if name:
		doc = frappe.get_doc("Batch Course", name)
	else:
		doc = frappe.new_doc("Batch Course")

	doc.update(
		{
			"course": course,
			"evaluator": evaluator,
			"parent": parent,
			"parentfield": "courses",
			"parenttype": "LMS Batch",
		}
	)
	doc.save()

	return doc.name


@frappe.whitelist()
def get_batch_timetable(batch):
	timetable = frappe.get_all(
		"LMS Batch Timetable",
		filters={"parent": batch},
		fields=[
			"reference_doctype",
			"reference_docname",
			"date",
			"start_time",
			"end_time",
			"milestone",
			"name",
			"idx",
			"parent",
		],
		order_by="date",
	)

	show_live_class = frappe.db.get_value("LMS Batch", batch, "show_live_class")
	if show_live_class:
		live_classes = get_live_classes(batch)
		timetable.extend(live_classes)

	timetable = get_timetable_details(timetable)
	return timetable


def get_live_classes(batch):
	live_classes = frappe.get_all(
		"LMS Live Class",
		{"batch_name": batch},
		["name", "title", "date", "time as start_time", "duration", "join_url as url"],
		order_by="date",
	)
	for class_ in live_classes:
		class_.end_time = class_.start_time + timedelta(minutes=class_.duration)
		class_.reference_doctype = "LMS Live Class"
		class_.reference_docname = class_.name
		class_.icon = "icon-call"

	return live_classes


def get_timetable_details(timetable):
	for entry in timetable:
		entry.title = frappe.db.get_value(
			entry.reference_doctype, entry.reference_docname, "title"
		)
		assessment = frappe._dict({"assessment_name": entry.reference_docname})

		if entry.reference_doctype == "Course Lesson":
			course = frappe.db.get_value(
				entry.reference_doctype, entry.reference_docname, "course"
			)
			entry.url = get_lesson_url(course, get_lesson_index(entry.reference_docname))

			entry.completed = (
				True
				if frappe.db.exists(
					"LMS Course Progress",
					{"lesson": entry.reference_docname, "member": frappe.session.user},
				)
				else False
			)

		elif entry.reference_doctype == "LMS Quiz":
			entry.url = "/quizzes"
			details = get_quiz_details(assessment, frappe.session.user)
			entry.update(details)

		elif entry.reference_doctype == "LMS Assignment":
			details = get_assignment_details(assessment, frappe.session.user)
			entry.update(details)

	timetable = sorted(timetable, key=lambda k: k["date"])
	return timetable


@frappe.whitelist()
def is_milestone_complete(idx, batch):
	previous_rows = frappe.get_all(
		"LMS Batch Timetable",
		filters={"parent": batch, "idx": ["<", cint(idx)]},
		fields=["reference_doctype", "reference_docname", "idx"],
		order_by="idx",
	)

	for row in previous_rows:
		if row.reference_doctype == "Course Lesson":
			if not frappe.db.exists(
				"LMS Course Progress",
				{"member": frappe.session.user, "lesson": row.reference_docname},
			):
				return False

		if row.reference_doctype == "LMS Quiz":
			passing_percentage = frappe.db.get_value(
				row.reference_doctype, row.reference_docname, "passing_percentage"
			)
			if not frappe.db.exists(
				"LMS Quiz Submission",
				{"quiz": row.reference_docname, "member": frappe.session.user},
			):
				return False

		if row.reference_doctype == "LMS Assignment":
			if not frappe.db.exists(
				"LMS Assignment Submission",
				{"assignment": row.reference_docname, "member": frappe.session.user},
			):
				return False

	return True


def send_batch_start_reminder():
	batches = frappe.get_all(
		"LMS Batch",
		{"start_date": add_days(nowdate(), 1), "published": 1},
		["name", "title", "start_date", "start_time", "medium"],
	)

	for batch in batches:
		students = frappe.get_all(
			"LMS Batch Enrollment", {"batch": batch}, ["member", "member_name"]
		)
		for student in students:
			send_mail(batch, student)


def send_mail(batch, student):
	subject = _("Batch Start Reminder")
	template = "batch_start_reminder"

	args = {
		"student_name": student.member_name,
		"title": batch.title,
		"start_date": batch.start_date,
		"start_time": batch.start_time,
		"medium": batch.medium,
		"name": batch.name,
	}

	frappe.sendmail(
		recipients=student.member,
		subject=subject,
		template=template,
		args=args,
		header=[_(f"Batch Start Reminder: {batch.title}"), "orange"],
	)


\lms/lms/doctype/lms_enrollment/__init__.py


\lms/lms/doctype/lms_category/__init__.py


\lms/lms/doctype/cohort/cohort.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("Cohort", {
	// refresh: function(frm) {
	// }
});


\lms/lms/doctype/lms_assignment_submission/test_lms_assignment_submission.py
# Copyright (c) 2021, Frappe and Contributors
# See license.txt

# import frappe
import unittest


class TestLMSAssignmentSubmission(unittest.TestCase):
	pass


\lms/lms/doctype/lms_program_member/lms_program_member.json
{
 "actions": [],
 "allow_rename": 1,
 "creation": "2024-11-18 12:29:13.615014",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "member",
  "full_name",
  "progress"
 ],
 "fields": [
  {
   "fieldname": "member",
   "fieldtype": "Link",
   "in_list_view": 1,
   "label": "Member",
   "options": "User",
   "reqd": 1
  },
  {
   "fetch_from": "member.full_name",
   "fieldname": "full_name",
   "fieldtype": "Data",
   "in_list_view": 1,
   "label": "Full Name",
   "read_only": 1
  },
  {
   "default": "0",
   "fieldname": "progress",
   "fieldtype": "Int",
   "in_list_view": 1,
   "label": "Progress"
  }
 ],
 "index_web_pages_for_search": 1,
 "istable": 1,
 "links": [],
 "modified": "2024-11-21 12:51:31.882576",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Program Member",
 "owner": "Administrator",
 "permissions": [],
 "sort_field": "creation",
 "sort_order": "DESC",
 "states": []
}

\lms/lms/doctype/lms_mentor_request/__init__.py


\lms/lms/doctype/lms_certificate_evaluation/test_lms_certificate_evaluation.py
# Copyright (c) 2022, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSCertificateEvaluation(UnitTestCase):
	pass


\lms/lms/doctype/lms_option/lms_option.py
# Copyright (c) 2021, FOSS United and contributors
# For license information, please see license.txt

# import frappe
from frappe.model.document import Document


class LMSOption(Document):
	pass


\lms/lms/doctype/lms_batch_old/lms_batch_old.json
{
 "actions": [],
 "autoname": "format: BATCH-{#####}",
 "creation": "2021-03-18 19:37:34.614796",
 "doctype": "DocType",
 "editable_grid": 1,
 "engine": "InnoDB",
 "field_order": [
  "course",
  "start_date",
  "start_time",
  "column_break_3",
  "title",
  "sessions_on",
  "end_time",
  "section_break_5",
  "description",
  "section_break_7",
  "visibility",
  "membership",
  "column_break_9",
  "status",
  "stage"
 ],
 "fields": [
  {
   "fieldname": "course",
   "fieldtype": "Link",
   "in_list_view": 1,
   "in_standard_filter": 1,
   "label": "Course",
   "options": "LMS Course",
   "reqd": 1
  },
  {
   "fieldname": "title",
   "fieldtype": "Data",
   "label": "Title",
   "reqd": 1
  },
  {
   "fieldname": "description",
   "fieldtype": "Markdown Editor",
   "label": "Description"
  },
  {
   "default": "Public",
   "fieldname": "visibility",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Visibility",
   "options": "Public\nUnlisted\nPrivate"
  },
  {
   "fieldname": "membership",
   "fieldtype": "Select",
   "label": "Membership",
   "options": "\nOpen\nRestricted\nInvite Only\nClosed"
  },
  {
   "default": "Active",
   "fieldname": "status",
   "fieldtype": "Select",
   "in_list_view": 1,
   "label": "Status",
   "options": "Active\nInactive"
  },
  {
   "default": "Ready",
   "fieldname": "stage",
   "fieldtype": "Select",
   "label": "Stage",
   "options": "Ready\nIn Progress\nCompleted\nCancelled"
  },
  {
   "fieldname": "column_break_3",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_5",
   "fieldtype": "Section Break",
   "label": "Batch Description"
  },
  {
   "fieldname": "column_break_9",
   "fieldtype": "Column Break"
  },
  {
   "fieldname": "section_break_7",
   "fieldtype": "Section Break",
   "label": "Batch Settings"
  },
  {
   "fieldname": "start_date",
   "fieldtype": "Date",
   "in_list_view": 1,
   "label": "Start Date"
  },
  {
   "fieldname": "start_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "Start Time"
  },
  {
   "fieldname": "sessions_on",
   "fieldtype": "Data",
   "label": "Sessions On Days"
  },
  {
   "fieldname": "end_time",
   "fieldtype": "Time",
   "in_list_view": 1,
   "label": "End Time"
  }
 ],
 "index_web_pages_for_search": 1,
 "links": [
  {
   "group": "Members",
   "link_doctype": "LMS Enrollment",
   "link_fieldname": "batch_old"
  }
 ],
 "modified": "2022-09-28 18:43:22.955907",
 "modified_by": "Administrator",
 "module": "LMS",
 "name": "LMS Batch Old",
 "naming_rule": "Expression",
 "owner": "Administrator",
 "permissions": [
  {
   "create": 1,
   "delete": 1,
   "email": 1,
   "export": 1,
   "print": 1,
   "read": 1,
   "report": 1,
   "role": "System Manager",
   "share": 1,
   "write": 1
  }
 ],
 "quick_entry": 1,
 "sort_field": "modified",
 "sort_order": "DESC",
 "states": [],
 "track_changes": 1
}

\lms/lms/doctype/lms_batch/test_lms_batch.py
# Copyright (c) 2022, Frappe and Contributors
# See license.txt

# import frappe
from frappe.tests import UnitTestCase


class TestLMSBatch(UnitTestCase):
	pass


\lms/lms/doctype/lms_enrollment/lms_enrollment.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Enrollment", {
	onload: function (frm) {
		frm.set_query("member", function (doc) {
			return {
				filters: {
					ignore_user_type: 1,
				},
			};
		});
	},
});


\lms/lms/doctype/lms_program_course/__init__.py


\lms/lms/doctype/lms_quiz/__init__.py


\lms/lms/doctype/lms_category/lms_category.js
// Copyright (c) 2023, Frappe and contributors
// For license information, please see license.txt

// frappe.ui.form.on("LMS Category", {
// 	refresh(frm) {

// 	},
// });


\lms/lms/doctype/lms_mentor_request/lms_mentor_request.js
// Copyright (c) 2021, FOSS United and contributors
// For license information, please see license.txt

frappe.ui.form.on("LMS Mentor Request", {
	// refresh: function(frm) {
	// }
});


