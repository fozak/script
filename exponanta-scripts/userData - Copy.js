const earlier = [
    -16323620,
    -16323620,
    7,
    4,
    6,
    84134,
    84134,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    -8,
    62,
    310,
    -8,
    62,
    310,
    1,
    -364193265,
    -364193265,
    1,
    25,
    1,
    -7229582,
    5,
    -7229582,
    5,
    1,
    20,
    1,
    94,
    2,
    2,
    94,
    1,
    -26569238,
    -26569238,
    2,
    978,
    397,
    -102,
    2,
    2,
    2,
    -1782592,
    1,
    -1782592,
    1,
    3,
    10,
    90,
    100,
    3,
    2,
    2,
    30,
    4,
    24,
    7,
    3,
    -102311162,
    -102311162,
    3,
    -63971228,
    -63971228,
    3,
    -400,
    693,
    -400,
    693,
    3,
    3,
    -71446,
    44,
    -71446,
    44,
    3,
    0,
    0,
    0,
    0,
    5,
    0,
    1,
    81,
    0,
    5,
    0,
    9,
    1,
    81,
    1,
    82,
    1,
    80,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    2,
    -99573062,
    0,
    0,
    0,
    0,
    5,
    0,
    1,
    81,
    0,
    5,
    0,
    9,
    1,
    81,
    1,
    82,
    1,
    80,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    2,
    -99573062,
    3,
    -95,
    661273,
    -95,
    661273,
    3,
    3,
    5,
    3,
    -7,
    5224162,
    -7,
    5224162,
    4,
    -29,
    777,
    -29,
    777,
    4,
    4,
    1,
    1,
    -501509217,
    -501509217,
    1,
    -32,
    0,
    326,
    -32,
    0,
    326,
    1,
    1
];

//updated 

const later = [
    -16323620,
    -16323620,
    7,
    4,
    6,
    84134,
    84134,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    -8,
    62,
    310,
    -8,
    62,
    310,
    1,
    -364193265,
    -364193265,
    1,
    25,
    1,
    -7229582,
    5,
    -7229582,
    5,
    1,
    20,
    1,
    94,
    2,
    2,
    94,
    1,
    -26569238,
    -26569238,
    2,
    978,
    397,
    -102,
    2,
    2,
    2,
    -1782592,
    1,
    -1782592,
    1,
    3,
    10,
    90,
    100,
    3,
    2,
    2,
    30,
    4,
    24,
    7,
    3,
    -102311162,
    -102311162,
    3,
    -63971228,
    -63971228,
    3,
    -400,
    693,
    -400,
    693,
    3,
    3,
    -71446,
    44,
    -71446,
    44,
    3,
    0,
    0,
    0,
    0,
    5,
    0,
    1,
    81,
    0,
    5,
    0,
    9,
    1,
    81,
    1,
    82,
    1,
    80,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    2,
    -99573062,
    0,
    0,
    0,
    0,
    5,
    0,
    1,
    81,
    0,
    5,
    0,
    9,
    1,
    81,
    1,
    82,
    1,
    80,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    2,
    -99573062,
    3,
    -95,
    661273,
    -95,
    661273,
    3,
    3,
    5,
    3,
    -7,
    5224162,
    -7,
    5224162,
    4,
    -29,
    777,
    -29,
    777,
    4,
    4,
    1,
    1,
    -501509217,
    -501509217,
    1,
    -32,
    0,
    326,
    -32,
    0,
    326,
    1,
    1,
    1,
    1.3,
    1,
    1,
    -527421325,
    -527421325,
    1,
    -593,
    5,
    9,
    -593,
    5,
    9,
    1,
    -64222,
    -64222,
    1,
    -376091203,
    -376091203,
    1,
    1,
    -1035493,
    -1035493,
    1,
    1,
    15,
    2,
    7,
    911,
    160,
    5,
    4,
    1,
    -815505210,
    -815505210,
    1,
    -4520,
    222,
    -4520,
    222,
    2,
    50,
    100,
    2,
    -8,
    994303,
    -8,
    994303,
    2,
    -6,
    363821,
    -6,
    363821,
    2,
    -7898,
    11,
    5,
    -7898,
    11,
    5,
    2,
    0,
    0,
    0,
    0,
    2,
    0,
    5,
    0,
    0,
    3,
    1,
    80,
    0,
    0,
    0,
    1,
    0,
    0,
    5,
    0,
    2,
    1,
    81,
    0,
    0,
    8,
    0,
    9,
    -6380343,
    0,
    0,
    0,
    0,
    2,
    0,
    5,
    0,
    0,
    3,
    1,
    80,
    0,
    0,
    0,
    1,
    0,
    0,
    5,
    0,
    2,
    1,
    81,
    0,
    0,
    8,
    0,
    9,
    -6380343,
    2,
    -778,
    901,
    2,
    -778,
    901,
    2,
    2,
    0,
    2,
    -23762488,
    0,
    2,
    -23762488,
    2,
    -1163489,
    -1163489,
    2,
    11,
    2,
    8,
    6,
    52,
    8,
    6,
    52,
    2,
    2,
    -2427962,
    -2427962,
    2,
    2,
    2,
    2,
    2,
    2,
    1976379,
    1976379,
    2,
    0,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    4,
    0,
    0,
    1,
    8,
    0,
    -846158211,
    0,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    4,
    0,
    0,
    1,
    8,
    0,
    -846158211,
    2,
    0,
    0,
    8,
    1,
    80,
    0,
    8,
    0,
    0,
    1,
    81,
    1,
    83,
    1,
    85,
    0,
    0,
    0,
    1,
    81,
    0,
    5,
    0,
    0,
    0,
    -44,
    4004,
    0,
    0,
    8,
    1,
    80,
    0,
    8,
    0,
    0,
    1,
    81,
    1,
    83,
    1,
    85,
    0,
    0,
    0,
    1,
    81,
    0,
    5,
    0,
    0,
    0,
    -44,
    4004,
    2,
    955,
    262,
    955,
    262,
    2,
    2,
    2,
    -378485290,
    -378485290,
    2,
    -744969164,
    -744969164,
    2,
    2,
    2
];



// Function to get new unique positions from the later sequence
function getNewUniquePositions(earlier, later) {
    // Create a Set from the earlier sequence for efficient lookup
    const earlierSet = new Set(earlier);

    // Filter the later sequence to find new unique values
    const uniquePositions = [...new Set(later.filter(num => !earlierSet.has(num)))];

    return uniquePositions;
}


// Get the new unique positions
const newUniquePositions = getNewUniquePositions(earlier, later);

// Function to extract corresponding text for each unique number
function getTextForUniqueNumbers(fullText, uniqueNumbers) {
    let textPieces = fullText.split(/-?\d+(\.\d+)?/);  // Split text by numbers
    let result = [];

    uniqueNumbers.forEach(num => {
        // Find the index of the unique number in the later array
        const index = later.indexOf(num);
        if (index !== -1) {
            // Gather the text before and after the number
            let beforeText = textPieces[index].trim();
            let afterText = (textPieces[index + 1] !== undefined) ? textPieces[index + 1].trim() : ""; // Check for undefined
            result.push(`${beforeText} ${num} ${afterText}`.trim());
        }
    });

    return result;
}

// Get the new text pieces corresponding to the unique numbers
const newTextPieces = getTextForUniqueNumbers(fullText, newUniquePositions);

// Log the result
console.log('New Text Pieces:', newTextPieces);