{
  "erpnext\\projects\\report\\delayed_tasks_summary\\delayed_tasks_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_columns()\n\tcharts = get_chart_data(data)\n\treturn columns, data, None, charts",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 57,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def get_chart_data(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\projects\\report\\timesheet_billing_summary\\timesheet_billing_summary.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def get_data(filters, group_fieldname=None):",
      "args": [
        "filters",
        "group_fieldname"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_columns(filters, group_fieldname=None):",
      "args": [
        "filters",
        "group_fieldname"
      ]
    },
    {
      "type": "function",
      "line_start": 118,
      "code_text": "def group_by(data, fieldname):",
      "args": [
        "data",
        "fieldname"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\project\\project.py": [
    {
      "type": "function",
      "line_start": 436,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 504,
      "code_text": "def daily_reminder():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 582,
      "code_text": "def get_projects_for_collect_progress(frequency, fields):",
      "args": [
        "frequency",
        "fields"
      ]
    },
    {
      "type": "function",
      "line_start": 592,
      "code_text": "def send_project_update_email_to_users(project):",
      "args": [
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 537,
      "code_text": "def allow_to_make_project_update(project, time, frequency):",
      "args": [
        "project",
        "time",
        "frequency"
      ]
    },
    {
      "type": "function",
      "line_start": 735,
      "code_text": "def get_users_email(doc):\n\treturn [d.email for d in doc.users if frappe.db.get_value(\"User\", d.user, \"enabled\")]",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 739,
      "code_text": "def calculate_total_purchase_cost(project: str | None = None):",
      "args": [
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def get_timeline_data(doctype: str, name: str) -> dict[int, int]:",
      "args": [
        "doctype: str",
        "name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 389,
      "code_text": "def get_project_list(doctype, txt, filters, limit_start, limit_page_length=20, order_by=\"creation\"):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "order_by"
      ]
    },
    {
      "type": "function",
      "line_start": 513,
      "code_text": "def twice_daily_reminder():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 524,
      "code_text": "def weekly_reminder():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 723,
      "code_text": "def get_holiday_list(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class Project(Document):"
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef onload(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef before_print(self, settings=None):\n\t\tself.onload()",
      "args": [
        "self",
        "settings"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef copy_from_template(self):  # nosemgrep",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef create_task_from_template(self, task_details):",
      "args": [
        "self",
        "task_details"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef calculate_start_date(self, task_details):\n\t\tself.start_date = add_days(self.expected_start_date, task_details.start)\n\t\tself.start_date = self.update_if_holiday(self.start_date)\n\t\treturn self.start_date",
      "args": [
        "self",
        "task_details"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef calculate_end_date(self, task_details):\n\t\tself.end_date = add_days(self.start_date, task_details.duration)\n\t\treturn self.update_if_holiday(self.end_date)",
      "args": [
        "self",
        "task_details"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef update_if_holiday(self, date):\n\t\tholiday_list = self.holiday_list or get_holiday_list(self.company)\n\t\twhile is_holiday(holiday_list, date):\n\t\t\tdate = add_days(date, 1)\n\t\treturn date",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef dependency_mapping(self, template_tasks, project_tasks):\n\t\tfor project_task in project_tasks:\n\t\t\ttemplate_task = frappe.get_doc(\"Task\", project_task.template_task)\n\n\t\t\tself.check_depends_on_value(template_task, project_task, project_tasks)\n\t\t\tself.check_for_parent_tasks(template_task, project_task, project_tasks)",
      "args": [
        "self",
        "template_tasks",
        "project_tasks"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef check_depends_on_value(self, template_task, project_task, project_tasks):",
      "args": [
        "self",
        "template_task",
        "project_task",
        "project_tasks"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef check_for_parent_tasks(self, template_task, project_task, project_tasks):",
      "args": [
        "self",
        "template_task",
        "project_task",
        "project_tasks"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef is_row_updated(self, row, existing_task_data, fields):",
      "args": [
        "self",
        "row",
        "existing_task_data",
        "fields"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef update_project(self):\n\t\t\"\"\"Called externally by Task\"\"\"\n\t\tself.update_percent_complete()\n\t\tself.update_costing()\n\t\tself.db_update()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef after_insert(self):\n\t\tself.copy_from_template()  # nosemgrep\n\t\tif self.sales_order:\n\t\t\tfrappe.db.set_value(\"Sales Order\", self.sales_order, \"project\", self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef on_trash(self):\n\t\tfrappe.db.set_value(\"Sales Order\", {\"project\": self.name}, \"project\", \"\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 213,
      "code_text": "\tdef update_percent_complete(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef update_costing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef calculate_gross_margin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 311,
      "code_text": "\tdef update_purchase_costing(self):\n\t\ttotal_purchase_cost = calculate_total_purchase_cost(self.name)\n\t\tself.total_purchase_cost = total_purchase_cost and total_purchase_cost[0][0] or 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 315,
      "code_text": "\tdef update_sales_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 324,
      "code_text": "\tdef update_billed_amount(self):\n\t\tself.total_billed_amount = self.get_billed_amount_from_parent() + self.get_billed_amount_from_child()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 327,
      "code_text": "\tdef get_billed_amount_from_parent(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 340,
      "code_text": "\tdef get_billed_amount_from_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 351,
      "code_text": "\tdef after_rename(self, old_name, new_name, merge=False):\n\t\tif old_name == self.copied_from:\n\t\t\tfrappe.db.set_value(\"Project\", new_name, \"copied_from\", new_name)",
      "args": [
        "self",
        "old_name",
        "new_name",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef send_welcome_email(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 456,
      "code_text": "def get_users_for_project(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 483,
      "code_text": "def get_cost_center_name(project):\n\treturn frappe.db.get_value(\"Project\", project, \"cost_center\")",
      "args": [
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 487,
      "code_text": "def hourly_reminder():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 498,
      "code_text": "def project_status_update_reminder():\n\tdaily_reminder()\n\ttwice_daily_reminder()\n\tweekly_reminder()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 553,
      "code_text": "def create_duplicate_project(prev_doc, project_name):",
      "args": [
        "prev_doc",
        "project_name"
      ]
    },
    {
      "type": "function",
      "line_start": 625,
      "code_text": "def collect_project_status():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 660,
      "code_text": "def send_project_status_email_to_users():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 682,
      "code_text": "def update_project_sales_billing():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 695,
      "code_text": "def create_kanban_board_if_not_exists(project):",
      "args": [
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 706,
      "code_text": "def set_project_status(project, status):",
      "args": [
        "project",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 753,
      "code_text": "def recalculate_project_total_purchase_cost(project: str | None = None):",
      "args": [
        "project"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\timesheet\\timesheet.py": [
    {
      "type": "function",
      "line_start": 395,
      "code_text": "def make_sales_invoice(source_name, item_code=None, customer=None, currency=None):",
      "args": [
        "source_name",
        "item_code",
        "customer",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 539,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class OverlapError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 471,
      "code_text": "def get_events(start, end, filters=None):",
      "args": [
        "start",
        "end",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 292,
      "code_text": "def get_projectwise_timesheet_data(project=None, parent=None, from_time=None, to_time=None):",
      "args": [
        "project",
        "parent",
        "from_time",
        "to_time"
      ]
    },
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_activity_cost(employee=None, activity_type=None, currency=None):",
      "args": [
        "employee",
        "activity_type",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 499,
      "code_text": "def get_timesheets_list(doctype, txt, filters, limit_start, limit_page_length=20, order_by=\"creation\"):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "order_by"
      ]
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class OverWorkLoggedError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class Timesheet(Document):"
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef calculate_hours(self):\n\t\tfor row in self.time_logs:\n\t\t\tif row.to_time and row.from_time:\n\t\t\t\trow.calculate_hours()\n\t\t\t\trow.validate_billing_hours()\n\t\t\t\trow.update_billing_hours()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef calculate_total_amounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef calculate_percentage_billed(self):\n\t\tself.per_billed = 0\n\t\tif self.total_billed_amount > 0 and self.total_billable_amount > 0:\n\t\t\tself.per_billed = (self.total_billed_amount * 100) / self.total_billable_amount\n\t\telif self.total_billed_hours > 0 and self.total_billable_hours > 0:\n\t\t\tself.per_billed = (self.total_billed_hours * 100) / self.total_billable_hours",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef update_billing_hours(self, args: \"TimesheetDetail\"):\n\t\targs.update_billing_hours()",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef set_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef set_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef before_cancel(self):\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_task_and_project()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef on_submit(self):\n\t\tself.validate_mandatory_fields()\n\t\tself.update_task_and_project()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef validate_mandatory_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef update_task_and_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef validate_dates(self):\n\t\tfor time_log in self.time_logs:\n\t\t\ttime_log.validate_dates()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 184,
      "code_text": "\tdef validate_time_logs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef validate_overlap(self, data):\n\t\tsettings = frappe.get_single(\"Projects Settings\")\n\t\tself.validate_overlap_for(\"user\", data, self.user, settings.ignore_user_time_overlap)\n\t\tself.validate_overlap_for(\"employee\", data, self.employee, settings.ignore_employee_time_overlap)",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef set_project(self, data: \"TimesheetDetail\"):\n\t\tdata.set_project()",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef validate_project(self, data: \"TimesheetDetail\"):\n\t\tdata.validate_parent_project(self.parent_project)",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef validate_overlap_for(self, fieldname, args, value, ignore_validation=False):",
      "args": [
        "self",
        "fieldname",
        "args",
        "value",
        "ignore_validation"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef get_overlap_for(self, fieldname, args, value):",
      "args": [
        "self",
        "fieldname",
        "args",
        "value"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef check_internal_overlap(self, fieldname, args):",
      "args": [
        "self",
        "fieldname",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef update_cost(self):\n\t\tfor time_log in self.time_logs:\n\t\t\ttime_log.update_cost(self.employee)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 276,
      "code_text": "\tdef update_time_rates(self, ts_detail):\n\t\tif not ts_detail.is_billable:\n\t\t\tts_detail.billing_rate = 0.0",
      "args": [
        "self",
        "ts_detail"
      ]
    },
    {
      "type": "method",
      "line_start": 280,
      "code_text": "\tdef unlink_sales_invoice(self, sales_invoice: str):",
      "args": [
        "self",
        "sales_invoice: str"
      ]
    },
    {
      "type": "function",
      "line_start": 331,
      "code_text": "def get_timesheet_detail_rate(timelog, currency):",
      "args": [
        "timelog",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 349,
      "code_text": "def get_timesheet(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 374,
      "code_text": "def get_timesheet_data(name, project):",
      "args": [
        "name",
        "project"
      ]
    }
  ],
  "erpnext\\projects\\report\\daily_timesheet_summary\\daily_timesheet_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def get_data(conditions, filters):",
      "args": [
        "conditions",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def get_column():",
      "args": []
    }
  ],
  "erpnext\\projects\\report\\project_summary\\project_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def get_chart_data(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def get_report_summary(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\task\\task.py": [
    {
      "type": "function",
      "line_start": 308,
      "code_text": "def get_project(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 356,
      "code_text": "def make_timesheet(source_name, target_doc=None, ignore_permissions=False):",
      "args": [
        "source_name",
        "target_doc",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 382,
      "code_text": "def get_children(doctype, parent, task=None, project=None, is_root=False):",
      "args": [
        "doctype",
        "parent",
        "task",
        "project",
        "is_root"
      ]
    },
    {
      "type": "function",
      "line_start": 408,
      "code_text": "def add_node():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class CircularReferenceError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 300,
      "code_text": "def check_if_child_exists(name):\n\tchild_tasks = frappe.get_all(\"Task\", filters={\"parent_task\": name})\n\tchild_tasks = [get_link_to_form(\"Task\", task.name) for task in child_tasks]\n\treturn child_tasks",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 342,
      "code_text": "def set_tasks_as_overdue():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 435,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Task\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class Task(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef get_customer_details(self):\n\t\tcust = frappe.db.sql(\"select customer_name from `tabCustomer` where name=%s\", self.customer)\n\t\tif cust:\n\t\t\tret = {\"customer_name\": cust and cust[0][0] or \"\"}\n\t\t\treturn ret",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef validate_dates(self):\n\t\tself.validate_from_to_dates(\"exp_start_date\", \"exp_end_date\")\n\t\tself.validate_from_to_dates(\"act_start_date\", \"act_end_date\")\n\t\tself.validate_parent_expected_end_date()\n\t\tself.validate_parent_project_dates()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef set_default_end_date_if_missing(self):\n\t\tif self.exp_start_date and self.expected_time:\n\t\t\tself.exp_end_date = add_to_date(self.exp_start_date, hours=self.expected_time)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef validate_parent_expected_end_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef validate_parent_project_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef validate_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef validate_progress(self):\n\t\tif flt(self.progress or 0) > 100:\n\t\t\tfrappe.throw(_(\"Progress % for a task cannot be more than 100.\"))\n\n\t\tif self.status == \"Completed\":\n\t\t\tself.progress = 100",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef validate_dependencies_for_template_task(self):\n\t\tif self.is_template:\n\t\t\tself.validate_parent_template_task()\n\t\t\tself.validate_depends_on_tasks()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef validate_parent_template_task(self):\n\t\tif self.parent_task:\n\t\t\tif not frappe.db.get_value(\"Task\", self.parent_task, \"is_template\"):\n\t\t\t\tparent_task_format = f\"\"\"<a href=\"/app/task/{self.parent_task}\">{self.parent_task}</a>\"\"\"\n\t\t\t\tfrappe.throw(_(\"Parent Task {0} is not a Template Task\").format(parent_task_format))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef validate_depends_on_tasks(self):\n\t\tif self.depends_on:\n\t\t\tfor task in self.depends_on:\n\t\t\t\tif not frappe.db.get_value(\"Task\", task.task, \"is_template\"):\n\t\t\t\t\tdependent_task_format = f\"\"\"<a href=\"/app/task/{task.task}\">{task.task}</a>\"\"\"\n\t\t\t\t\tfrappe.throw(_(\"Dependent Task {0} is not a Template Task\").format(dependent_task_format))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef validate_completed_on(self):\n\t\tif self.completed_on and getdate(self.completed_on) > getdate():\n\t\t\tfrappe.throw(_(\"Completed On cannot be greater than Today\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 175,
      "code_text": "\tdef update_depends_on(self):\n\t\tdepends_on_tasks = \"\"\n\t\tfor d in self.depends_on:\n\t\t\tif d.task and d.task not in depends_on_tasks:\n\t\t\t\tdepends_on_tasks += d.task + \",\"\n\t\tself.depends_on_tasks = depends_on_tasks",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef update_nsm_model(self):\n\t\tfrappe.utils.nestedset.update_nsm(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef unassign_todo(self):\n\t\tif self.status == \"Completed\":\n\t\t\tclose_all_assignments(self.doctype, self.name)\n\t\tif self.status == \"Cancelled\":\n\t\t\tclear(self.doctype, self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef update_time_and_costing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 213,
      "code_text": "\tdef update_project(self):\n\t\tif self.project and not self.flags.from_project:\n\t\t\tfrappe.get_cached_doc(\"Project\", self.project).update_project()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef check_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef reschedule_dependent_tasks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 265,
      "code_text": "\tdef has_webform_permission(self):\n\t\tproject_user = frappe.db.get_value(\n\t\t\t\"Project User\", {\"parent\": self.project, \"user\": frappe.session.user}, \"user\"\n\t\t)\n\t\tif project_user:\n\t\t\treturn True",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef populate_depends_on(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef on_trash(self):\n\t\tif check_if_child_exists(self.name):\n\t\t\tthrow(_(\"Child Task exists for this Task. You can not delete this Task.\"))\n\n\t\tself.update_nsm_model()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef after_delete(self):\n\t\tself.update_project()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 290,
      "code_text": "\tdef update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 334,
      "code_text": "def set_multiple_status(names, status):\n\tnames = json.loads(names)\n\tfor name in names:\n\t\ttask = frappe.get_doc(\"Task\", name)\n\t\ttask.status = status\n\t\ttask.save()",
      "args": [
        "names",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 422,
      "code_text": "def add_multiple_tasks(data, parent):",
      "args": [
        "data",
        "parent"
      ]
    }
  ],
  "erpnext\\projects\\report\\project_wise_stock_tracking\\project_wise_stock_tracking.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def get_project_details():\n\treturn frappe.db.sql(\n\t\t\"\"\" select name, project_name, status, company, customer, estimated_costing,\n\t\texpected_start_date, expected_end_date from tabProject where docstatus < 2\"\"\",\n\t\tas_dict=1,\n\t)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def get_purchased_items_cost():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def get_issued_items_cost():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 91,
      "code_text": "def get_delivered_items_cost():",
      "args": []
    }
  ],
  "erpnext\\projects\\doctype\\project\\project_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\projects\\doctype\\project_template\\project_template_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\"fieldname\": \"project_template\", \"transactions\": [{\"items\": [\"Project\"]}]}",
      "args": []
    }
  ],
  "erpnext\\projects\\doctype\\task\\task_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\projects\\doctype\\timesheet\\timesheet_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"time_sheet\",\n\t\t\"transactions\": [{\"label\": _(\"References\"), \"items\": [\"Sales Invoice\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\projects\\doctype\\project\\test_project.py": [
    {
      "type": "function",
      "line_start": 239,
      "code_text": "def get_project(name, template):",
      "args": [
        "name",
        "template"
      ]
    },
    {
      "type": "function",
      "line_start": 254,
      "code_text": "def make_project(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 279,
      "code_text": "def task_exists(subject):\n\tresult = frappe.db.get_list(\"Task\", filters={\"subject\": subject}, fields=[\"name\"])\n\tif not len(result):\n\t\treturn False\n\treturn frappe.get_doc(\"Task\", result[0].name)",
      "args": [
        "subject"
      ]
    },
    {
      "type": "function",
      "line_start": 286,
      "code_text": "def calculate_end_date(project, start, duration):\n\tstart = add_days(project.expected_start_date, start)\n\tstart = project.update_if_holiday(start)\n\tend = add_days(start, duration)\n\tend = project.update_if_holiday(end)\n\treturn getdate(end)",
      "args": [
        "project",
        "start",
        "duration"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class UnitTestProject(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class TestProject(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_project_with_template_having_no_parent_and_depend_tasks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef test_project_template_having_parent_child_tasks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef test_project_template_having_dependent_tasks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef test_project_linking_with_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef test_project_with_template_tasks_having_common_name(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef test_project_having_no_tasks_complete(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\timesheet\\test_timesheet.py": [
    {
      "type": "function",
      "line_start": 196,
      "code_text": "def make_timesheet(\n\temployee,\n\tsimulate=False,\n\tis_billable=0,\n\tactivity_type=\"_Test Activity Type\",\n\tproject=None,\n\ttask=None,\n\tcompany=None,\n):",
      "args": [
        "employee",
        "simulate",
        "is_billable",
        "activity_type",
        "project",
        "task",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 235,
      "code_text": "def update_activity_type(activity_type):\n\tactivity_type = frappe.get_doc(\"Activity Type\", activity_type)\n\tactivity_type.billing_rate = 50.0\n\tactivity_type.save(ignore_permissions=True)",
      "args": [
        "activity_type"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestTimesheet(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.db.delete(\"Timesheet\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_timesheet_billing_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef test_timesheet_billing_amount_not_billable(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef test_sales_invoice_from_timesheet(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_timesheet_billing_based_on_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef test_timesheet_time_overlap(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef test_timesheet_not_overlapping_with_continuous_timelogs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 143,
      "code_text": "\tdef test_to_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef test_per_billed_hours(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 179,
      "code_text": "\tdef test_per_billed_amount(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\timesheet_detail\\timesheet_detail.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TimesheetDetail(Document):"
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef set_to_time(self):\n\t\t\"\"\"Set to_time based on from_time and hours.\"\"\"\n\t\tif not (self.from_time and self.hours):\n\t\t\treturn\n\n\t\tself.to_time = get_datetime(add_to_date(self.from_time, hours=self.hours, as_datetime=True))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef set_project(self):\n\t\t\"\"\"Set project based on task.\"\"\"\n\t\tif self.task and not self.project:\n\t\t\tself.project = frappe.db.get_value(\"Task\", self.task, \"project\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef calculate_hours(self):\n\t\t\"\"\"Calculate hours based on from_time and to_time.\"\"\"\n\t\tif self.to_time and self.from_time:\n\t\t\tself.hours = time_diff_in_hours(self.to_time, self.from_time)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef update_billing_hours(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef update_cost(self, employee: str):",
      "args": [
        "self",
        "employee: str"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef validate_dates(self):\n\t\t\"\"\"Validate that to_time is not before from_time.\"\"\"\n\t\tif self.from_time and self.to_time and time_diff_in_hours(self.to_time, self.from_time) < 0:\n\t\t\tfrappe.throw(_(\"To Time cannot be before from date\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef validate_parent_project(self, parent_project: str):",
      "args": [
        "self",
        "parent_project: str"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef validate_task_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef validate_billing_hours(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\task\\test_task.py": [
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def create_task(\n\tsubject,\n\tstart=None,\n\tend=None,\n\tdepends_on=None,\n\tproject=None,\n\tparent_task=None,\n\tis_group=0,\n\tis_template=0,\n\tbegin=0,\n\tduration=0,\n\tsave=True,\n\tpriority=None,\n):",
      "args": [
        "subject",
        "start",
        "end",
        "depends_on",
        "project",
        "parent_task",
        "is_group",
        "is_template",
        "begin",
        "duration",
        "save",
        "priority"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestTask(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_circular_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_reschedule_dependent_task(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef test_close_assignment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef test_overdue(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\activity_cost\\activity_cost.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class DuplicationError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class ActivityCost(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef validate(self):\n\t\tself.set_title()\n\t\tself.check_unique()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef set_title(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef check_unique(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\project_update\\project_update.py": [
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def daily_reminder():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def email_sending(project_name, frequency, date_start, date_end, progress, number_of_drafts, update):",
      "args": [
        "project_name",
        "frequency",
        "date_start",
        "date_end",
        "progress",
        "number_of_drafts",
        "update"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProjectUpdate(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\project_template\\project_template.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class ProjectTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef validate(self):\n\t\tself.validate_dependencies()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef validate_dependencies(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef check_dependent_task_presence(self, task):\n\t\tfor task_details in self.tasks:\n\t\t\tif task_details.task == task:\n\t\t\t\treturn True\n\t\treturn False",
      "args": [
        "self",
        "task"
      ]
    }
  ],
  "erpnext\\projects\\report\\delayed_tasks_summary\\test_delayed_tasks_summary.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestDelayedTasksSummary(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_delayed_tasks_summary(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef tearDown(self):\n\t\tfor task in [\"_Test Task 98\", \"_Test Task 99\"]:\n\t\t\tfrappe.get_doc(\"Task\", {\"subject\": task}).delete()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\project_template\\test_project_template.py": [
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def make_project_template(project_template_name, project_tasks=None):",
      "args": [
        "project_template_name",
        "project_tasks"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestProjectTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\projects\\doctype\\activity_cost\\test_activity_cost.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestActivityCost(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_duplication(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\project_type\\project_type.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ProjectType(Document):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef on_trash(self):\n\t\tif self.name == \"External\":\n\t\t\tfrappe.throw(_(\"You cannot delete Project Type 'External'\"))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\projects\\web_form\\tasks\\tasks.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\project_user\\project_user.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProjectUser(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\project_template_task\\project_template_task.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProjectTemplateTask(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\task_depends_on\\task_depends_on.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TaskDependsOn(Document):"
    }
  ],
  "erpnext\\projects\\utils.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def query_task(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\projects\\doctype\\activity_type\\activity_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ActivityType(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\dependent_task\\dependent_task.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DependentTask(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\projects_settings\\projects_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProjectsSettings(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\projects_settings\\test_projects_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestProjectsSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\projects\\doctype\\project_type\\test_project_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestProjectType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\projects\\doctype\\project_update\\test_project_update.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestProjectUpdate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\projects\\doctype\\task_type\\task_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TaskType(Document):"
    }
  ],
  "erpnext\\projects\\doctype\\task_type\\test_task_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestTaskType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\__init__.py": [
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_company_currency(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_default_company(user=None):",
      "args": [
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_default_cost_center(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_default_currency():\n\t\"\"\"Returns the currency of the default company\"\"\"\n\tcompany = get_default_company()\n\tif company:\n\t\treturn frappe.get_cached_value(\"Company\", company, \"default_currency\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_region(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def set_perpetual_inventory(enable=1, company=None):",
      "args": [
        "enable",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def encode_company_abbr(name, company=None, abbr=None):",
      "args": [
        "name",
        "company",
        "abbr"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def is_perpetual_inventory_enabled(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 93,
      "code_text": "def get_default_finance_book(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_party_account_type(party_type):",
      "args": [
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 135,
      "code_text": "def allow_regional(fn):",
      "args": [
        "fn"
      ]
    },
    {
      "type": "function",
      "line_start": 157,
      "code_text": "def check_app_permission():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 170,
      "code_text": "def normalize_ctx_input(T: type) -> callable:",
      "args": [
        "T: type"
      ]
    }
  ],
  "erpnext\\deprecation_dumpster.py": [
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def deprecated(original: str, marked: str, graduation: str, msg: str, stacklevel: int = 1):",
      "args": [
        "original: str",
        "marked: str",
        "graduation: str",
        "msg: str",
        "stacklevel: int"
      ]
    },
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def deprecation_warning(marked: str, graduation: str, msg: str):",
      "args": [
        "marked: str",
        "graduation: str",
        "msg: str"
      ]
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class ERPNextDeprecationError(Warning):\n\t\"\"\"Deprecated feature in current version.\n\n\tRaises an error by default but can be configured via PYTHONWARNINGS in an emergency.\n\t\"\"\""
    },
    {
      "type": "class",
      "line_start": 35,
      "code_text": "class ERPNextDeprecationWarning(Warning):\n\t\"\"\"Deprecated feature in next version\"\"\""
    },
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class PendingERPNextDeprecationWarning(ERPNextDeprecationWarning):"
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def __get_deprecation_class(graduation: str | None = None, class_name: str | None = None) -> type:",
      "args": [
        "graduation",
        "class_name"
      ]
    },
    {
      "type": "class",
      "line_start": 53,
      "code_text": "class V15ERPNextDeprecationWarning(ERPNextDeprecationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 57,
      "code_text": "class V16ERPNextDeprecationWarning(ERPNextDeprecationWarning):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 61,
      "code_text": "class V17ERPNextDeprecationWarning(PendingERPNextDeprecationWarning):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def taxes_and_totals_get_itemised_taxable_amount(items):",
      "args": [
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_pos_profile_item_details(company, ctx, pos_profile=None, update_data=False):\n\tfrom erpnext.stock.get_item_details import get_pos_profile_item_details_\n\n\treturn get_pos_profile_item_details_(ctx, company, pos_profile=pos_profile, update_data=update_data)",
      "args": [
        "company",
        "ctx",
        "pos_profile",
        "update_data"
      ]
    },
    {
      "type": "function",
      "line_start": 160,
      "code_text": "def get_item_warehouse(item, ctx, overwrite_warehouse, defaults=None):\n\tfrom erpnext.stock.get_item_details import get_item_warehouse_\n\n\treturn get_item_warehouse_(ctx, item, overwrite_warehouse, defaults=defaults)",
      "args": [
        "item",
        "ctx",
        "overwrite_warehouse",
        "defaults"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\operations\\install_fixtures.py": [
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def _(x, *args, **kwargs):\n\t\"\"\"Redefine the translation function to return the string as is.\n\n\tWe want to create english records but still mark the strings as translatable.\n\tThe respective DocTypes have 'Translate Link Fields' enabled.\"\"\"\n\treturn x",
      "args": [
        "x",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 512,
      "code_text": "def create_bank_account(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 363,
      "code_text": "def add_uom_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 553,
      "code_text": "def get_fy_details(fy_start_date, fy_end_date):",
      "args": [
        "fy_start_date",
        "fy_end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def read_lines(filename: str) -> list[str]:\n\t\"\"\"Return a list of lines from a file in the data directory.\"\"\"\n\treturn (Path(__file__).parent.parent / \"data\" / filename).read_text().splitlines()",
      "args": [
        "filename: str"
      ]
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def install(country=None):",
      "args": [
        "country"
      ]
    },
    {
      "type": "function",
      "line_start": 336,
      "code_text": "def update_selling_defaults():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 346,
      "code_text": "def update_buying_defaults():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 356,
      "code_text": "def update_item_variant_settings():\n\t# set no copy fields of an item doctype to item variant settings\n\tdoc = frappe.get_doc(\"Item Variant Settings\")\n\tdoc.set_default_fields()\n\tdoc.save()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 399,
      "code_text": "def add_market_segments():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 410,
      "code_text": "def add_sale_stages():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 426,
      "code_text": "def install_company(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 452,
      "code_text": "def install_defaults(args=None):  # nosemgrep",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 486,
      "code_text": "def set_global_defaults(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 500,
      "code_text": "def update_stock_settings():",
      "args": []
    }
  ],
  "erpnext\\exceptions.py": [
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class InvalidAccountDimensionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class InvalidAccountCurrency(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class InvalidCurrency(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class MandatoryAccountDimensionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class PartyDisabled(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 5,
      "code_text": "class PartyFrozen(frappe.ValidationError):\n\tpass"
    }
  ],
  "erpnext\\accounts\\report\\consolidated_financial_statement\\consolidated_financial_statement.py": [
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def get_company_currency(filters=None):\n\treturn filters.get(\"presentation_currency\") or frappe.get_cached_value(\n\t\t\"Company\", filters.company, \"default_currency\"\n\t)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 321,
      "code_text": "def get_data(companies, root_type, balance_must_be, fiscal_year, filters=None, ignore_closing_entries=False):",
      "args": [
        "companies",
        "root_type",
        "balance_must_be",
        "fiscal_year",
        "filters",
        "ignore_closing_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 282,
      "code_text": "def get_columns(companies, filters):",
      "args": [
        "companies",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 536,
      "code_text": "def prepare_data(accounts, start_date, end_date, balance_must_be, companies, company_currency, filters):",
      "args": [
        "accounts",
        "start_date",
        "end_date",
        "balance_must_be",
        "companies",
        "company_currency",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def get_opening_balance(account_name, data, company):\n\tfor row in data:\n\t\tif row.get(\"account_name\") == account_name:\n\t\t\treturn row.get(\"company_wise_opening_bal\", {}).get(company, 0.0)",
      "args": [
        "account_name",
        "data",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 429,
      "code_text": "def accumulate_values_into_parents(accounts, accounts_by_name, companies):",
      "args": [
        "accounts",
        "accounts_by_name",
        "companies"
      ]
    },
    {
      "type": "function",
      "line_start": 580,
      "code_text": "def set_gl_entries_by_account(\n\tfrom_date,\n\tto_date,\n\troot_lft,\n\troot_rgt,\n\tfilters,\n\tgl_entries_by_account,\n\taccounts_by_name,\n\taccounts,\n\tignore_closing_entries=False,\n\troot_type=None,\n):",
      "args": [
        "from_date",
        "to_date",
        "root_lft",
        "root_rgt",
        "filters",
        "gl_entries_by_account",
        "accounts_by_name",
        "accounts",
        "ignore_closing_entries",
        "root_type"
      ]
    },
    {
      "type": "function",
      "line_start": 665,
      "code_text": "def get_account_details(account):",
      "args": [
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 767,
      "code_text": "def filter_accounts(accounts, depth=10):",
      "args": [
        "accounts",
        "depth"
      ]
    },
    {
      "type": "function",
      "line_start": 379,
      "code_text": "def calculate_values(accounts_by_name, gl_entries_by_account, companies, filters, fiscal_year):",
      "args": [
        "accounts_by_name",
        "gl_entries_by_account",
        "companies",
        "filters",
        "fiscal_year"
      ]
    },
    {
      "type": "function",
      "line_start": 743,
      "code_text": "def add_total_row(out, root_type, balance_must_be, companies, company_currency):",
      "args": [
        "out",
        "root_type",
        "balance_must_be",
        "companies",
        "company_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 185,
      "code_text": "def get_income_expense_data(companies, fiscal_year, filters):",
      "args": [
        "companies",
        "fiscal_year",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 261,
      "code_text": "def get_account_type_based_data(account_type, companies, fiscal_year, filters):",
      "args": [
        "account_type",
        "companies",
        "fiscal_year",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 501,
      "code_text": "def get_subsidiary_companies(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 510,
      "code_text": "def get_accounts(root_type, companies):",
      "args": [
        "root_type",
        "companies"
      ]
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def get_balance_sheet_data(fiscal_year, companies, columns, filters):",
      "args": [
        "fiscal_year",
        "companies",
        "columns",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 123,
      "code_text": "def prepare_companywise_opening_balance(asset_data, liability_data, equity_data, companies):",
      "args": [
        "asset_data",
        "liability_data",
        "equity_data",
        "companies"
      ]
    },
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_root_account_name(root_type, company):",
      "args": [
        "root_type",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def get_profit_loss_data(fiscal_year, companies, columns, filters):",
      "args": [
        "fiscal_year",
        "companies",
        "columns",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 196,
      "code_text": "def get_cash_flow_data(fiscal_year, companies, filters):",
      "args": [
        "fiscal_year",
        "companies",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 449,
      "code_text": "def get_account_heads(root_type, companies, filters):",
      "args": [
        "root_type",
        "companies",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 462,
      "code_text": "def update_parent_account_names(accounts):",
      "args": [
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 488,
      "code_text": "def get_companies(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 685,
      "code_text": "def validate_entries(key, entry, accounts_by_name, accounts):",
      "args": [
        "key",
        "entry",
        "accounts_by_name",
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 717,
      "code_text": "def get_additional_conditions(from_date, ignore_closing_entries, filters, d):",
      "args": [
        "from_date",
        "ignore_closing_entries",
        "filters",
        "d"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_invoice\\purchase_invoice.py": [
    {
      "type": "function",
      "line_start": 2027,
      "code_text": "def make_stock_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2073,
      "code_text": "def make_purchase_receipt(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1999,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "class",
      "line_start": 55,
      "code_text": "class PurchaseInvoice(BuyingController):"
    },
    {
      "type": "function",
      "line_start": 2020,
      "code_text": "def make_debit_note(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Purchase Invoice\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 48,
      "code_text": "class WarehouseMissingError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1962,
      "code_text": "def get_purchase_document_details(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2015,
      "code_text": "def make_regional_gl_entries(gl_entries, doc):\n\treturn gl_entries",
      "args": [
        "gl_entries",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 241,
      "code_text": "\tdef onload(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef before_save(self):\n\t\tif not self.on_hold:\n\t\t\tself.release_date = \"\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef invoice_is_blocked(self):\n\t\treturn self.on_hold and (not self.release_date or self.release_date > getdate(nowdate()))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef set_percentage_received(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 310,
      "code_text": "\tdef validate_release_date(self):\n\t\tif self.release_date and getdate(nowdate()) >= getdate(self.release_date):\n\t\t\tfrappe.throw(_(\"Release date must be in the future\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef validate_cash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 323,
      "code_text": "\tdef create_remarks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef set_missing_values(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 352,
      "code_text": "\tdef validate_credit_to_acc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef check_on_hold_or_closed_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 425,
      "code_text": "\tdef validate_warehouse(self, for_validate=True):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef validate_item_code(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif not d.item_code:\n\t\t\t\tfrappe.msgprint(_(\"Item Code required at Row No {0}\").format(d.idx), raise_exception=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 444,
      "code_text": "\tdef set_expense_account(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 591,
      "code_text": "\tdef validate_expense_account(self):\n\t\tfor item in self.get(\"items\"):\n\t\t\tvalidate_account_head(item.idx, item.expense_account, self.company, _(\"Expense\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 595,
      "code_text": "\tdef set_against_expense_account(self, force=False):",
      "args": [
        "self",
        "force"
      ]
    },
    {
      "type": "method",
      "line_start": 603,
      "code_text": "\tdef force_set_against_expense_account(self):\n\t\tself.set_against_expense_account()\n\t\tfrappe.db.set_value(self.doctype, self.name, \"against_expense_account\", self.against_expense_account)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef po_required(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 627,
      "code_text": "\tdef pr_required(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 648,
      "code_text": "\tdef validate_write_off_account(self):\n\t\tif self.write_off_amount and not self.write_off_account:\n\t\t\tthrow(_(\"Please enter Write Off Account\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 652,
      "code_text": "\tdef check_prev_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 668,
      "code_text": "\tdef update_status_updater_args(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 719,
      "code_text": "\tdef validate_purchase_receipt_if_update_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 729,
      "code_text": "\tdef validate_for_repost(self):\n\t\tself.validate_write_off_account()\n\t\tself.validate_expense_account()\n\t\tvalidate_docs_for_voucher_types([\"Purchase Invoice\"])\n\t\tvalidate_docs_for_deferred_accounting([], [self.name])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 735,
      "code_text": "\tdef before_submit(self):\n\t\tself.create_remarks()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 738,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 785,
      "code_text": "\tdef on_update_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 798,
      "code_text": "\tdef make_gl_entries(self, gl_entries=None, from_repost=False):",
      "args": [
        "self",
        "gl_entries",
        "from_repost"
      ]
    },
    {
      "type": "method",
      "line_start": 818,
      "code_text": "\tdef cancel_provisional_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 840,
      "code_text": "\tdef update_supplier_outstanding(self, update_outstanding):",
      "args": [
        "self",
        "update_outstanding"
      ]
    },
    {
      "type": "method",
      "line_start": 850,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None):",
      "args": [
        "self",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 879,
      "code_text": "\tdef check_asset_cwip_enabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 888,
      "code_text": "\tdef make_supplier_gl_entry(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 904,
      "code_text": "\tdef add_supplier_gl_entry(\n\t\tself, gl_entries, base_grand_total, grand_total, against_account=None, remarks=None, skip_merge=False\n\t):",
      "args": [
        "self",
        "gl_entries",
        "base_grand_total",
        "grand_total",
        "against_account",
        "remarks",
        "skip_merge"
      ]
    },
    {
      "type": "method",
      "line_start": 935,
      "code_text": "\tdef make_item_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1223,
      "code_text": "\tdef get_provisional_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1261,
      "code_text": "\tdef make_provisional_gl_entry(self, gl_entries, item):",
      "args": [
        "self",
        "gl_entries",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1280,
      "code_text": "\tdef update_gross_purchase_amount_for_linked_assets(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1301,
      "code_text": "\tdef make_stock_adjustment_entry(self, gl_entries, item, voucher_wise_stock_value, account_currency):",
      "args": [
        "self",
        "gl_entries",
        "item",
        "voucher_wise_stock_value",
        "account_currency"
      ]
    },
    {
      "type": "method",
      "line_start": 1373,
      "code_text": "\tdef make_tax_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1472,
      "code_text": "\tdef make_internal_transfer_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1490,
      "code_text": "\tdef make_gl_entries_for_tax_withholding(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1515,
      "code_text": "\tdef make_payment_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1561,
      "code_text": "\tdef make_write_off_gl_entry(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1606,
      "code_text": "\tdef make_gle_for_rounding_adjustment(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1650,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1705,
      "code_text": "\tdef update_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1724,
      "code_text": "\tdef validate_supplier_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1759,
      "code_text": "\tdef update_billing_status_in_pr(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 1796,
      "code_text": "\tdef get_pr_details_billed_amt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1814,
      "code_text": "\tdef on_recurring(self, reference_doc, auto_repeat_doc):\n\t\tself.due_date = None",
      "args": [
        "self",
        "reference_doc",
        "auto_repeat_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1817,
      "code_text": "\tdef block_invoice(self, hold_comment=None, release_date=None):\n\t\tself.db_set(\"on_hold\", 1)\n\t\tself.db_set(\"hold_comment\", cstr(hold_comment))\n\t\tself.db_set(\"release_date\", release_date)",
      "args": [
        "self",
        "hold_comment",
        "release_date"
      ]
    },
    {
      "type": "method",
      "line_start": 1822,
      "code_text": "\tdef unblock_invoice(self):\n\t\tself.db_set(\"on_hold\", 0)\n\t\tself.db_set(\"release_date\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1826,
      "code_text": "\tdef set_tax_withholding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1884,
      "code_text": "\tdef allocate_advance_tds(self, tax_withholding_details, advance_taxes):",
      "args": [
        "self",
        "tax_withholding_details",
        "advance_taxes"
      ]
    },
    {
      "type": "method",
      "line_start": 1909,
      "code_text": "\tdef update_advance_tax_references(self, cancel=0):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 1922,
      "code_text": "\tdef set_status(self, update=False, status=None, update_modified=True):",
      "args": [
        "self",
        "update",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "function",
      "line_start": 2045,
      "code_text": "def change_release_date(name, release_date=None):\n\tif frappe.db.exists(\"Purchase Invoice\", name):\n\t\tpi = frappe.get_doc(\"Purchase Invoice\", name)\n\t\tpi.db_set(\"release_date\", release_date)",
      "args": [
        "name",
        "release_date"
      ]
    },
    {
      "type": "function",
      "line_start": 2052,
      "code_text": "def unblock_invoice(name):\n\tif frappe.db.exists(\"Purchase Invoice\", name):\n\t\tpi = frappe.get_doc(\"Purchase Invoice\", name)\n\t\tpi.unblock_invoice()",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 2059,
      "code_text": "def block_invoice(name, release_date, hold_comment=None):\n\tif frappe.db.exists(\"Purchase Invoice\", name):\n\t\tpi = frappe.get_doc(\"Purchase Invoice\", name)\n\t\tpi.block_invoice(hold_comment, release_date)",
      "args": [
        "name",
        "release_date",
        "hold_comment"
      ]
    },
    {
      "type": "function",
      "line_start": 2066,
      "code_text": "def make_inter_company_sales_invoice(source_name, target_doc=None):\n\tfrom erpnext.accounts.doctype.sales_invoice.sales_invoice import make_inter_company_transaction\n\n\treturn make_inter_company_transaction(\"Purchase Invoice\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\work_order\\work_order.py": [
    {
      "type": "function",
      "line_start": 1774,
      "code_text": "def make_stock_entry(work_order_id, purpose, qty=None, target_warehouse=None):",
      "args": [
        "work_order_id",
        "purpose",
        "qty",
        "target_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1616,
      "code_text": "def get_item_details(item, project=None, skip_bom_info=False, throw=True):",
      "args": [
        "item",
        "project",
        "skip_bom_info",
        "throw"
      ]
    },
    {
      "type": "function",
      "line_start": 2054,
      "code_text": "def create_pick_list(source_name, target_doc=None, for_qty=None):",
      "args": [
        "source_name",
        "target_doc",
        "for_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 1544,
      "code_text": "def cancel_stock_reservation_entries(doc, sre_list):",
      "args": [
        "doc",
        "sre_list"
      ]
    },
    {
      "type": "class",
      "line_start": 45,
      "code_text": "class OverProductionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 49,
      "code_text": "class CapacityError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 53,
      "code_text": "class StockOverProductionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1995,
      "code_text": "def create_job_card(work_order, row, enable_capacity_planning=False, auto_create=False):",
      "args": [
        "work_order",
        "row",
        "enable_capacity_planning",
        "auto_create"
      ]
    },
    {
      "type": "function",
      "line_start": 2098,
      "code_text": "def get_reserved_qty_for_production(\n\titem_code: str,",
      "args": [
        "item_code: str",
        "warehouse: str",
        "non_completed_production_plans",
        "check_production_plan: bool"
      ]
    },
    {
      "type": "class",
      "line_start": 61,
      "code_text": "class ItemHasVariantError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 69,
      "code_text": "class WorkOrder(Document):"
    },
    {
      "type": "function",
      "line_start": 1524,
      "code_text": "def make_stock_reservation_entries(doc, items=None, notify=False):",
      "args": [
        "doc",
        "items",
        "notify"
      ]
    },
    {
      "type": "function",
      "line_start": 1700,
      "code_text": "def add_variant_item(variant_items, wo_doc, bom_no, table_name=\"items\"):",
      "args": [
        "variant_items",
        "wo_doc",
        "bom_no",
        "table_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1755,
      "code_text": "def check_if_scrap_warehouse_mandatory(bom_no):",
      "args": [
        "bom_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1869,
      "code_text": "def make_job_card(work_order, operations):",
      "args": [
        "work_order",
        "operations"
      ]
    },
    {
      "type": "function",
      "line_start": 1902,
      "code_text": "def close_work_order(work_order, status):",
      "args": [
        "work_order",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 1929,
      "code_text": "def split_qty_based_on_batch_size(wo_doc, row, qty):",
      "args": [
        "wo_doc",
        "row",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 2166,
      "code_text": "def get_row_wise_serial_batch(work_order, purpose=None):",
      "args": [
        "work_order",
        "purpose"
      ]
    },
    {
      "type": "class",
      "line_start": 57,
      "code_text": "class OperationTooLongError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 65,
      "code_text": "class SerialNoQtyError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef onload(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef show_create_job_card_button(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef validate_fg_warehouse_for_reservation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef set_reserve_stock(self):\n\t\tfor row in self.required_items:\n\t\t\trow.reserve_stock = self.reserve_stock",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef enable_auto_reserve_stock(self):\n\t\tif self.is_new() and frappe.db.get_single_value(\"Stock Settings\", \"auto_reserve_stock\"):\n\t\t\tself.reserve_stock = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef set_warehouses(self):\n\t\tfor row in self.required_items:\n\t\t\tif not row.source_warehouse:\n\t\t\t\trow.source_warehouse = self.source_warehouse",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef reset_use_multi_level_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef validate_workstation_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef validate_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef check_sales_order_on_hold_or_close(self):\n\t\tstatus = frappe.db.get_value(\"Sales Order\", self.sales_order, \"status\")\n\t\tif status in (\"Closed\", \"On Hold\"):\n\t\t\tfrappe.throw(_(\"Sales Order {0} is {1}\").format(self.sales_order, status))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 303,
      "code_text": "\tdef set_default_warehouse(self):\n\t\tif not self.wip_warehouse and not self.skip_transfer:\n\t\t\tself.wip_warehouse = frappe.db.get_single_value(\"Manufacturing Settings\", \"default_wip_warehouse\")\n\t\tif not self.fg_warehouse:\n\t\t\tself.fg_warehouse = frappe.db.get_single_value(\"Manufacturing Settings\", \"default_fg_warehouse\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef check_wip_warehouse_skip(self):\n\t\tif self.skip_transfer and not self.from_wip_warehouse:\n\t\t\tself.wip_warehouse = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef validate_warehouse_belongs_to_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef calculate_operating_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 343,
      "code_text": "\tdef validate_work_order_against_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef update_status(self, status=None):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 392,
      "code_text": "\tdef get_status(self, status=None):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 432,
      "code_text": "\tdef update_work_order_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 474,
      "code_text": "\tdef get_transferred_or_manufactured_qty(self, purpose):",
      "args": [
        "self",
        "purpose"
      ]
    },
    {
      "type": "method",
      "line_start": 487,
      "code_text": "\tdef set_process_loss_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 499,
      "code_text": "\tdef update_production_plan_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 519,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 528,
      "code_text": "\tdef before_submit(self):\n\t\tself.create_serial_no_batch_no()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 531,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 549,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 570,
      "code_text": "\tdef update_stock_reservation(self):\n\t\tmake_stock_reservation_entries(self)\n\t\tself.db_set(\"status\", self.get_status())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 574,
      "code_text": "\tdef create_serial_no_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 591,
      "code_text": "\tdef create_batch_for_finished_good(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 629,
      "code_text": "\tdef delete_auto_created_batch_and_serial_no(self):\n\t\tfor row in frappe.get_all(\"Serial No\", filters={\"work_order\": self.name}):\n\t\t\tfrappe.delete_doc(\"Serial No\", row.name)\n\n\t\tfor row in frappe.get_all(\"Batch\", filters={\"reference_name\": self.name}):\n\t\t\tfrappe.delete_doc(\"Batch\", row.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef make_serial_nos(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 701,
      "code_text": "\tdef create_job_card(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 718,
      "code_text": "\tdef prepare_data_for_job_card(self, row, index, plan_days, enable_capacity_planning):",
      "args": [
        "self",
        "row",
        "index",
        "plan_days",
        "enable_capacity_planning"
      ]
    },
    {
      "type": "method",
      "line_start": 744,
      "code_text": "\tdef set_operation_start_end_time(self, idx, row):",
      "args": [
        "self",
        "idx",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 760,
      "code_text": "\tdef validate_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 777,
      "code_text": "\tdef update_planned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 802,
      "code_text": "\tdef set_produced_qty_for_sub_assembly_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 824,
      "code_text": "\tdef update_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 846,
      "code_text": "\tdef update_work_order_qty_in_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 880,
      "code_text": "\tdef update_work_order_qty_in_combined_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 907,
      "code_text": "\tdef update_completed_qty_in_material_request(self):\n\t\tif self.material_request and self.material_request_item:\n\t\t\tfrappe.get_doc(\"Material Request\", self.material_request).update_completed_qty(\n\t\t\t\t[self.material_request_item]\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 913,
      "code_text": "\tdef set_work_order_operations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 977,
      "code_text": "\tdef calculate_time(self):\n\t\tfor d in self.get(\"operations\"):\n\t\t\tif not d.fixed_time:\n\t\t\t\td.time_in_mins = flt(d.time_in_mins) * (flt(self.qty) / flt(d.batch_size))\n\n\t\tself.calculate_operating_cost()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 984,
      "code_text": "\tdef get_holidays(self, workstation):",
      "args": [
        "self",
        "workstation"
      ]
    },
    {
      "type": "method",
      "line_start": 1006,
      "code_text": "\tdef update_operation_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1026,
      "code_text": "\tdef set_actual_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1054,
      "code_text": "\tdef set_lead_time(self):\n\t\tif self.actual_start_date and self.actual_end_date:\n\t\t\tself.lead_time = flt(time_diff_in_hours(self.actual_end_date, self.actual_start_date) * 60)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1058,
      "code_text": "\tdef delete_job_card(self):\n\t\tfor d in frappe.get_all(\"Job Card\", [\"name\"], {\"work_order\": self.name}):\n\t\t\tfrappe.delete_doc(\"Job Card\", d.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1062,
      "code_text": "\tdef validate_production_item(self):\n\t\tif frappe.get_cached_value(\"Item\", self.production_item, \"has_variants\"):\n\t\t\tfrappe.throw(_(\"Work Order cannot be raised against a Item Template\"), ItemHasVariantError)\n\n\t\tif self.production_item:\n\t\t\tvalidate_end_of_life(self.production_item)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1069,
      "code_text": "\tdef validate_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1118,
      "code_text": "\tdef validate_transfer_against(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1130,
      "code_text": "\tdef validate_operation_time(self):\n\t\tfor d in self.operations:\n\t\t\tif d.time_in_mins <= 0:\n\t\t\t\tfrappe.throw(_(\"Operation Time must be greater than 0 for Operation {0}\").format(d.operation))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1135,
      "code_text": "\tdef update_required_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1153,
      "code_text": "\tdef update_reserved_qty_for_production(self, items=None):\n\t\t\"\"\"update reserved_qty_for_production in bins\"\"\"\n\t\tfor d in self.required_items:\n\t\t\tif d.source_warehouse:\n\t\t\t\tstock_bin = get_bin(d.item_code, d.source_warehouse)\n\t\t\t\tstock_bin.update_reserved_qty_for_production()",
      "args": [
        "self",
        "items"
      ]
    },
    {
      "type": "method",
      "line_start": 1161,
      "code_text": "\tdef get_items_and_operations_from_bom(self):\n\t\tself.set_required_items()\n\t\tself.set_work_order_operations()\n\n\t\treturn check_if_scrap_warehouse_mandatory(self.bom_no)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1167,
      "code_text": "\tdef set_available_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1175,
      "code_text": "\tdef set_required_items(self, reset_only_qty=False):",
      "args": [
        "self",
        "reset_only_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 1220,
      "code_text": "\tdef update_transferred_qty_for_required_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1256,
      "code_text": "\tdef update_qty_in_stock_reservation(self, row, transferred_qty, row_wise_serial_batch):",
      "args": [
        "self",
        "row",
        "transferred_qty",
        "row_wise_serial_batch"
      ]
    },
    {
      "type": "method",
      "line_start": 1274,
      "code_text": "\tdef update_returned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1302,
      "code_text": "\tdef update_consumed_qty_for_required_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1321,
      "code_text": "\tdef update_consumed_qty_in_stock_reservation(self, item, consumed_qty, wip_warehouse):",
      "args": [
        "self",
        "item",
        "consumed_qty",
        "wip_warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 1354,
      "code_text": "\tdef validate_reserved_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1373,
      "code_text": "\tdef make_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1398,
      "code_text": "\tdef set_reserved_qty_for_wip_and_fg(self, stock_entry):",
      "args": [
        "self",
        "stock_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 1411,
      "code_text": "\tdef get_list_of_materials_for_reservation(self, stock_entry):",
      "args": [
        "self",
        "stock_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 1438,
      "code_text": "\tdef get_finished_goods_for_reservation(self, stock_entry):",
      "args": [
        "self",
        "stock_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 1472,
      "code_text": "\tdef get_so_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1485,
      "code_text": "\tdef get_voucher_details(self, stock_entry):",
      "args": [
        "self",
        "stock_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 1507,
      "code_text": "\tdef cancel_reserved_qty_for_wip_and_fg(self, ste_doc):",
      "args": [
        "self",
        "ste_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1556,
      "code_text": "def get_sre_details(work_order):",
      "args": [
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1583,
      "code_text": "def get_consumed_qty(work_order, item_code):",
      "args": [
        "work_order",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1608,
      "code_text": "def get_bom_operations(doctype, txt, searchfield, start, page_len, filters):\n\tif txt:\n\t\tfilters[\"operation\"] = (\"like\", \"%%%s%%\" % txt)\n\n\treturn frappe.get_all(\"BOM Operation\", filters=filters, fields=[\"operation\"], as_list=1)",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1677,
      "code_text": "def make_work_order(bom_no, item, qty=0, project=None, variant_items=None, use_multi_level_bom=None):",
      "args": [
        "bom_no",
        "item",
        "qty",
        "project",
        "variant_items",
        "use_multi_level_bom"
      ]
    },
    {
      "type": "function",
      "line_start": 1748,
      "code_text": "def get_template_rm_item(wo_doc, item_code):\n\tfor row in wo_doc.required_items:\n\t\tif row.item_code == item_code:\n\t\t\treturn row",
      "args": [
        "wo_doc",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1767,
      "code_text": "def set_work_order_ops(name):\n\tpo = frappe.get_doc(\"Work Order\", name)\n\tpo.set_work_order_operations()\n\tpo.save()",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 1822,
      "code_text": "def get_default_warehouse():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1833,
      "code_text": "def stop_unstop(work_order, status):",
      "args": [
        "work_order",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 1853,
      "code_text": "def query_sales_order(production_item):",
      "args": [
        "production_item"
      ]
    },
    {
      "type": "function",
      "line_start": 1886,
      "code_text": "def get_operation_details(name, work_order):",
      "args": [
        "name",
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1945,
      "code_text": "def get_serial_nos_for_job_card(row, wo_doc):",
      "args": [
        "row",
        "wo_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1962,
      "code_text": "def get_serial_nos_for_work_order(work_order, production_item):",
      "args": [
        "work_order",
        "production_item"
      ]
    },
    {
      "type": "function",
      "line_start": 1977,
      "code_text": "def validate_operation_data(row):",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 2047,
      "code_text": "def get_work_order_operation_data(work_order, operation, workstation):\n\tfor d in work_order.operations:\n\t\tif d.operation == operation and d.workstation == workstation:\n\t\t\treturn d",
      "args": [
        "work_order",
        "operation",
        "workstation"
      ]
    },
    {
      "type": "function",
      "line_start": 2145,
      "code_text": "def make_stock_return_entry(work_order):",
      "args": [
        "work_order"
      ]
    }
  ],
  "erpnext\\stock\\get_item_details.py": [
    {
      "type": "function",
      "line_start": 889,
      "code_text": "def get_default_cost_center(ctx: ItemDetailsCtx, item=None, item_group=None, brand=None, company=None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def get_item_details(\n\tctx: ItemDetailsCtx, doc=None, for_validate=False, overwrite_warehouse=True",
      "args": [
        "ctx: ItemDetailsCtx",
        "doc",
        "for_validate",
        "overwrite_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1369,
      "code_text": "def get_batch_qty(batch_no, warehouse, item_code):\n\tfrom erpnext.stock.doctype.batch import batch\n\n\tif batch_no:\n\t\treturn {\"actual_batch_qty\": batch.get_batch_qty(batch_no, warehouse)}",
      "args": [
        "batch_no",
        "warehouse",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1304,
      "code_text": "def get_conversion_factor(item_code, uom):",
      "args": [
        "item_code",
        "uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1328,
      "code_text": "def get_bin_details(item_code, warehouse, company=None, include_child_warehouses=False):",
      "args": [
        "item_code",
        "warehouse",
        "company",
        "include_child_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1496,
      "code_text": "def get_valuation_rate(item_code, company, warehouse=None):",
      "args": [
        "item_code",
        "company",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1107,
      "code_text": "def get_price_list_rate_for(ctx: ItemDetailsCtx, item_code):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 796,
      "code_text": "def get_item_tax_map(*, doc: str | dict | Document, tax_template: str | None = None, as_json=True):",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1478,
      "code_text": "def get_default_bom(item_code=None):",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 562,
      "code_text": "def get_item_warehouse_(ctx: ItemDetailsCtx, item, overwrite_warehouse, defaults=None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "overwrite_warehouse",
        "defaults"
      ]
    },
    {
      "type": "function",
      "line_start": 942,
      "code_text": "def get_price_list_rate(ctx: ItemDetailsCtx, item_doc, out: ItemDetails = None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item_doc",
        "out: ItemDetails"
      ]
    },
    {
      "type": "function",
      "line_start": 1041,
      "code_text": "def get_item_price(\n\tpctx: ItemPriceCtx | dict, item_code, ignore_party=False, force_batch_no=False",
      "args": [
        "pctx",
        "item_code",
        "ignore_party",
        "force_batch_no"
      ]
    },
    {
      "type": "function",
      "line_start": 675,
      "code_text": "def get_item_tax_template(ctx: ItemDetailsCtx, item, out: ItemDetails):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "out: ItemDetails"
      ]
    },
    {
      "type": "function",
      "line_start": 709,
      "code_text": "def _get_item_tax_template(\n\tctx: ItemDetailsCtx, taxes, out: ItemDetails | None = None, for_validate=False",
      "args": [
        "ctx: ItemDetailsCtx",
        "taxes",
        "out",
        "for_validate"
      ]
    },
    {
      "type": "function",
      "line_start": 1176,
      "code_text": "def validate_conversion_rate(ctx: ItemDetailsCtx, meta):",
      "args": [
        "ctx: ItemDetailsCtx",
        "meta"
      ]
    },
    {
      "type": "function",
      "line_start": 1248,
      "code_text": "def get_pos_profile_item_details_(ctx: ItemDetailsCtx, company, pos_profile=None, update_data=False):",
      "args": [
        "ctx: ItemDetailsCtx",
        "company",
        "pos_profile",
        "update_data"
      ]
    },
    {
      "type": "function",
      "line_start": 1268,
      "code_text": "def get_pos_profile(company, pos_profile=None, user=None):",
      "args": [
        "company",
        "pos_profile",
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def _preprocess_ctx(ctx):",
      "args": [
        "ctx"
      ]
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def update_stock(ctx, out, doc=None):",
      "args": [
        "ctx",
        "out",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def get_filtered_serial_nos(serial_nos, doc):",
      "args": [
        "serial_nos",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 294,
      "code_text": "def get_item_code(barcode=None, serial_no=None):",
      "args": [
        "barcode",
        "serial_no"
      ]
    },
    {
      "type": "function",
      "line_start": 608,
      "code_text": "def get_barcode_data(items_list=None, item_code=None):",
      "args": [
        "items_list",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 846,
      "code_text": "def get_default_expense_account(ctx: ItemDetailsCtx, item, item_group, brand):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand"
      ]
    },
    {
      "type": "function",
      "line_start": 986,
      "code_text": "def insert_item_price(ctx: ItemDetailsCtx):",
      "args": [
        "ctx: ItemDetailsCtx"
      ]
    },
    {
      "type": "function",
      "line_start": 1442,
      "code_text": "def get_price_list_currency_and_exchange_rate(ctx: ItemDetailsCtx):",
      "args": [
        "ctx: ItemDetailsCtx"
      ]
    },
    {
      "type": "function",
      "line_start": 159,
      "code_text": "def remove_standard_fields(out: ItemDetails):\n\tfor key in child_table_fields + default_fields:\n\t\tout.pop(key, None)\n\treturn out",
      "args": [
        "out: ItemDetails"
      ]
    },
    {
      "type": "function",
      "line_start": 165,
      "code_text": "def set_valuation_rate(out: ItemDetails | dict, ctx: ItemDetailsCtx):",
      "args": [
        "out",
        "ctx: ItemDetailsCtx"
      ]
    },
    {
      "type": "function",
      "line_start": 248,
      "code_text": "def has_incorrect_serial_nos(ctx, out):",
      "args": [
        "ctx",
        "out"
      ]
    },
    {
      "type": "function",
      "line_start": 261,
      "code_text": "def filter_batches(batches, doc):\n\tfor row in doc.get(\"items\"):\n\t\tif row.get(\"batch_no\") in batches:\n\t\t\tbatches[row.get(\"batch_no\")] -= row.get(\"qty\")\n\t\t\tif batches[row.get(\"batch_no\")] <= 0:\n\t\t\t\tdel batches[row.get(\"batch_no\")]",
      "args": [
        "batches",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 281,
      "code_text": "def update_bin_details(ctx: ItemDetailsCtx, out: ItemDetails, doc):",
      "args": [
        "ctx: ItemDetailsCtx",
        "out: ItemDetails",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 307,
      "code_text": "def validate_item_details(ctx: ItemDetailsCtx, item):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 330,
      "code_text": "def get_basic_details(ctx: ItemDetailsCtx, item, overwrite_warehouse=True) -> ItemDetails:",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "overwrite_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 600,
      "code_text": "def update_barcode_value(out):\n\tbarcode_data = get_barcode_data([out])\n\n\t# If item has one barcode then update the value of the barcode field\n\tif barcode_data and len(barcode_data.get(out.item_code)) == 1:\n\t\tout[\"barcode\"] = barcode_data.get(out.item_code)[0]",
      "args": [
        "out"
      ]
    },
    {
      "type": "function",
      "line_start": 635,
      "code_text": "def get_item_tax_info(doc, tax_category, item_codes, item_rates=None, item_tax_templates=None):",
      "args": [
        "doc",
        "tax_category",
        "item_codes",
        "item_rates",
        "item_tax_templates"
      ]
    },
    {
      "type": "function",
      "line_start": 778,
      "code_text": "def is_within_valid_range(ctx: ItemDetailsCtx, tax) -> bool:",
      "args": [
        "ctx: ItemDetailsCtx",
        "tax"
      ]
    },
    {
      "type": "function",
      "line_start": 813,
      "code_text": "def calculate_service_end_date(ctx: ItemDetailsCtx, item=None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 837,
      "code_text": "def get_default_income_account(ctx: ItemDetailsCtx, item, item_group, brand):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand"
      ]
    },
    {
      "type": "function",
      "line_start": 855,
      "code_text": "def get_provisional_account(ctx: ItemDetailsCtx, item, item_group, brand):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand"
      ]
    },
    {
      "type": "function",
      "line_start": 864,
      "code_text": "def get_default_discount_account(ctx: ItemDetailsCtx, item, item_group, brand):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand"
      ]
    },
    {
      "type": "function",
      "line_start": 873,
      "code_text": "def get_default_deferred_account(ctx: ItemDetailsCtx, item, fieldname=None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item",
        "fieldname"
      ]
    },
    {
      "type": "function",
      "line_start": 938,
      "code_text": "def get_default_supplier(_ctx: ItemDetailsCtx, item, item_group, brand):\n\treturn item.get(\"default_supplier\") or item_group.get(\"default_supplier\") or brand.get(\"default_supplier\")",
      "args": [
        "_ctx: ItemDetailsCtx",
        "item",
        "item_group",
        "brand"
      ]
    },
    {
      "type": "function",
      "line_start": 1091,
      "code_text": "def get_batch_based_item_price(pctx: ItemPriceCtx | dict | str, item_code) -> float:",
      "args": [
        "pctx",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1156,
      "code_text": "def check_packing_list(price_list_rate_name, desired_qty, item_code):",
      "args": [
        "price_list_rate_name",
        "desired_qty",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1222,
      "code_text": "def get_party_item_code(ctx: ItemDetailsCtx, item_doc, out: ItemDetails):",
      "args": [
        "ctx: ItemDetailsCtx",
        "item_doc",
        "out: ItemDetails"
      ]
    },
    {
      "type": "function",
      "line_start": 1319,
      "code_text": "def get_projected_qty(item_code, warehouse):\n\treturn {\n\t\t\"projected_qty\": frappe.db.get_value(\n\t\t\t\"Bin\", {\"item_code\": item_code, \"warehouse\": warehouse}, \"projected_qty\"\n\t\t)\n\t}",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1355,
      "code_text": "def get_company_total_stock(item_code, company):",
      "args": [
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1378,
      "code_text": "def apply_price_list(ctx: ItemDetailsCtx, as_doc=False, doc=None):",
      "args": [
        "ctx: ItemDetailsCtx",
        "as_doc",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1434,
      "code_text": "def apply_price_list_on_item(ctx, doc=None):\n\titem_doc = frappe.db.get_value(\"Item\", ctx.item_code, [\"name\", \"variant_of\"], as_dict=1)\n\titem_details = get_price_list_rate(ctx, item_doc)\n\titem_details.update(get_pricing_rule_for_item(ctx, doc=doc))\n\n\treturn item_details",
      "args": [
        "ctx",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1530,
      "code_text": "def get_gross_profit(out: ItemDetails):\n\tif out.valuation_rate:\n\t\tout.update({\"gross_profit\": ((out.base_rate - out.valuation_rate) * out.stock_qty)})\n\n\treturn out",
      "args": [
        "out: ItemDetails"
      ]
    },
    {
      "type": "function",
      "line_start": 1538,
      "code_text": "def get_serial_no(_args, serial_nos=None, sales_order=None):\n\tserial_nos = serial_nos or []\n\treturn serial_nos",
      "args": [
        "_args",
        "serial_nos",
        "sales_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1543,
      "code_text": "def update_party_blanket_order(ctx: ItemDetailsCtx, out: ItemDetails | dict):\n\tif out[\"against_blanket_order\"]:\n\t\tblanket_order_details = get_blanket_order_details(ctx)\n\t\tif blanket_order_details:\n\t\t\tout.update(blanket_order_details)",
      "args": [
        "ctx: ItemDetailsCtx",
        "out"
      ]
    },
    {
      "type": "function",
      "line_start": 1552,
      "code_text": "def get_blanket_order_details(ctx: ItemDetailsCtx):",
      "args": [
        "ctx: ItemDetailsCtx"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_analytics\\stock_analytics.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 221,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 336,
      "code_text": "def get_item_details(items, sle):",
      "args": [
        "items",
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 253,
      "code_text": "def get_chart_data(columns):\n\tlabels = [d.get(\"label\") for d in columns[5:]]\n\tchart = {\"data\": {\"labels\": labels, \"datasets\": []}}\n\tchart[\"type\"] = \"line\"\n\n\treturn chart",
      "args": [
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 261,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 276,
      "code_text": "def get_stock_ledger_entries(filters, items):",
      "args": [
        "filters",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def get_period_date_ranges(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_period(posting_date, filters):",
      "args": [
        "posting_date",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 309,
      "code_text": "def apply_conditions(query, filters):",
      "args": [
        "query",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def get_periodic_data(entry, filters):",
      "args": [
        "entry",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def round_down_to_nearest_frequency(date: str, frequency: str) -> datetime.datetime:",
      "args": [
        "date: str",
        "frequency: str"
      ]
    },
    {
      "type": "function",
      "line_start": 191,
      "code_text": "def fill_intermediate_periods(\n\tperiodic_data, item_code: str, current_period: str, all_periods: list[str]",
      "args": [
        "periodic_data",
        "item_code: str",
        "current_period: str",
        "all_periods"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\material_request\\material_request.py": [
    {
      "type": "function",
      "line_start": 719,
      "code_text": "def make_stock_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 876,
      "code_text": "def create_pick_list(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 406,
      "code_text": "def set_missing_values(source, target_doc):\n\tif target_doc.doctype == \"Purchase Order\" and getdate(target_doc.schedule_date) < getdate(nowdate()):\n\t\ttarget_doc.schedule_date = None\n\ttarget_doc.run_method(\"set_missing_values\")\n\ttarget_doc.run_method(\"calculate_taxes_and_totals\")",
      "args": [
        "source",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 413,
      "code_text": "def update_item(obj, target, source_parent):",
      "args": [
        "obj",
        "target",
        "source_parent"
      ]
    },
    {
      "type": "function",
      "line_start": 439,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 463,
      "code_text": "def make_purchase_order(source_name, target_doc=None, args=None):",
      "args": [
        "source_name",
        "target_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 540,
      "code_text": "def make_request_for_quotation(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 456,
      "code_text": "def update_status(name, status):\n\tmaterial_request = frappe.get_doc(\"Material Request\", name)\n\tmaterial_request.check_permission(\"write\")\n\tmaterial_request.update_status(status)",
      "args": [
        "name",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 809,
      "code_text": "def raise_work_orders(material_request):",
      "args": [
        "material_request"
      ]
    },
    {
      "type": "function",
      "line_start": 608,
      "code_text": "def get_items_based_on_default_supplier(supplier):",
      "args": [
        "supplier"
      ]
    },
    {
      "type": "function",
      "line_start": 690,
      "code_text": "def make_supplier_quotation(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class MaterialRequest(BuyingController):"
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef check_if_already_pulled(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef validate_qty_against_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef validate_pp_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef before_update_after_submit(self):\n\t\tself.validate_schedule_date()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef validate_material_request_type(self):\n\t\t\"\"\"Validate fields in accordance with selected type\"\"\"\n\n\t\tif self.material_request_type != \"Customer Provided\":\n\t\t\tself.customer = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef set_title(self):\n\t\t\"\"\"Set title as comma separated list of items\"\"\"\n\t\tif not self.title:\n\t\t\titems = \", \".join([d.item_name for d in self.items][:3])\n\t\t\tself.title = _(\"{0} Request for {1}\").format(_(self.material_request_type), items)[:100]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 200,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef before_save(self):\n\t\tself.set_status(update=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef before_submit(self):\n\t\tself.set_status(update=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef before_cancel(self):\n\t\t# if MRQ is already closed, no point saving the document\n\t\tcheck_on_hold_or_closed_status(self.doctype, self.name)\n\n\t\tself.set_status(update=True, status=\"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef check_modified_date(self):\n\t\tmod_db = frappe.db.sql(\"\"\"select modified from `tabMaterial Request` where name = %s\"\"\", self.name)\n\t\tdate_diff = frappe.db.sql(f\"\"\"select TIMEDIFF('{mod_db[0][0]}', '{cstr(self.modified)}')\"\"\")\n\n\t\tif date_diff and date_diff[0][0]:\n\t\t\tfrappe.throw(_(\"{0} {1} has been modified. Please refresh.\").format(_(self.doctype), self.name))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef update_status(self, status):\n\t\tself.check_modified_date()\n\t\tself.status_can_change(status)\n\t\tself.set_status(update=True, status=status)\n\t\tself.update_requested_qty()",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 233,
      "code_text": "\tdef status_can_change(self, status):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_requested_qty_in_production_plan(cancel=True)\n\t\tself.update_requested_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef get_mr_items_ordered_qty(self, mr_items):",
      "args": [
        "self",
        "mr_items"
      ]
    },
    {
      "type": "method",
      "line_start": 290,
      "code_text": "\tdef update_completed_qty(self, mr_items=None, update_modified=True):",
      "args": [
        "self",
        "mr_items",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 342,
      "code_text": "\tdef update_requested_qty(self, mr_item_rows=None):",
      "args": [
        "self",
        "mr_item_rows"
      ]
    },
    {
      "type": "method",
      "line_start": 363,
      "code_text": "\tdef update_requested_qty_in_production_plan(self, cancel=False):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 384,
      "code_text": "def update_completed_and_requested_qty(stock_entry, method):",
      "args": [
        "stock_entry",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 565,
      "code_text": "def make_purchase_order_based_on_supplier(source_name, target_doc=None, args=None):",
      "args": [
        "source_name",
        "target_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 621,
      "code_text": "def get_material_requests_based_on_supplier(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 660,
      "code_text": "def get_default_supplier_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 900,
      "code_text": "def make_in_transit_stock_entry(source_name, in_transit_warehouse):",
      "args": [
        "source_name",
        "in_transit_warehouse"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\purchase_receipt\\purchase_receipt.py": [
    {
      "type": "function",
      "line_start": 1363,
      "code_text": "def make_stock_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1207,
      "code_text": "def make_purchase_invoice(source_name, target_doc=None, args=None):",
      "args": [
        "source_name",
        "target_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1350,
      "code_text": "def make_purchase_return(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Purchase Receipt\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 970,
      "code_text": "def get_stock_value_difference(voucher_no, voucher_detail_no, warehouse):",
      "args": [
        "voucher_no",
        "voucher_detail_no",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1343,
      "code_text": "def make_purchase_return_against_rejected_warehouse(source_name):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Purchase Receipt\", source_name, return_against_rejected_qty=True)",
      "args": [
        "source_name"
      ]
    },
    {
      "type": "function",
      "line_start": 984,
      "code_text": "def update_billed_amount_based_on_po(po_details, update_modified=True, pr_doc=None):",
      "args": [
        "po_details",
        "update_modified",
        "pr_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1104,
      "code_text": "def update_billing_percentage(pr_doc, update_modified=True, adjust_incoming_rate=False):",
      "args": [
        "pr_doc",
        "update_modified",
        "adjust_incoming_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 1157,
      "code_text": "def get_billed_qty_against_purchase_receipt(pr_doc):",
      "args": [
        "pr_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1173,
      "code_text": "def adjust_incoming_rate_for_pr(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1308,
      "code_text": "def get_invoiced_qty_map(purchase_receipt):",
      "args": [
        "purchase_receipt"
      ]
    },
    {
      "type": "function",
      "line_start": 1324,
      "code_text": "def get_returned_qty_map(purchase_receipt):",
      "args": [
        "purchase_receipt"
      ]
    },
    {
      "type": "function",
      "line_start": 1397,
      "code_text": "def get_item_account_wise_additional_cost(purchase_document):",
      "args": [
        "purchase_document"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class PurchaseReceipt(BuyingController):"
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef before_validate(self):\n\t\tfrom erpnext.stock.doctype.putaway_rule.putaway_rule import apply_putaway_rule\n\n\t\tif self.get(\"items\") and self.apply_putaway_rule and not self.get(\"is_return\"):\n\t\t\tapply_putaway_rule(self.doctype, self.get(\"items\"), self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef validate_uom_is_integer(self):\n\t\tsuper().validate_uom_is_integer(\"uom\", [\"qty\", \"received_qty\"], \"Purchase Receipt Item\")\n\t\tsuper().validate_uom_is_integer(\"stock_uom\", \"stock_qty\", \"Purchase Receipt Item\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef validate_cwip_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 275,
      "code_text": "\tdef validate_provisional_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 288,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef po_required(self):\n\t\tif frappe.db.get_single_value(\"Buying Settings\", \"po_required\") == \"Yes\":\n\t\t\tfor d in self.get(\"items\"):\n\t\t\t\tif not d.purchase_order:\n\t\t\t\t\tfrappe.throw(_(\"Purchase Order number required for Item {0}\").format(d.item_code))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef validate_items_quality_inspection(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 339,
      "code_text": "\tdef get_already_received_qty(self, po, po_detail):",
      "args": [
        "self",
        "po",
        "po_detail"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef get_po_qty_and_warehouse(self, po_detail):\n\t\tpo_qty, po_warehouse = frappe.db.get_value(\"Purchase Order Item\", po_detail, [\"qty\", \"warehouse\"])\n\t\treturn po_qty, po_warehouse",
      "args": [
        "self",
        "po_detail"
      ]
    },
    {
      "type": "method",
      "line_start": 354,
      "code_text": "\tdef check_on_hold_or_closed_status(self):\n\t\tcheck_list = []\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.meta.get_field(\"purchase_order\") and d.purchase_order and d.purchase_order not in check_list:\n\t\t\t\tcheck_list.append(d.purchase_order)\n\t\t\t\tcheck_on_hold_or_closed_status(\"Purchase Order\", d.purchase_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 362,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef update_received_qty_if_from_pp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef check_next_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 430,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 462,
      "code_text": "\tdef before_cancel(self):\n\t\tsuper().before_cancel()\n\t\tself.remove_amount_difference_with_purchase_invoice()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 466,
      "code_text": "\tdef remove_amount_difference_with_purchase_invoice(self):\n\t\tfor item in self.items:\n\t\t\titem.amount_difference_with_purchase_invoice = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 470,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "warehouse_account",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 481,
      "code_text": "\tdef make_item_gl_entries(self, gl_entries, warehouse_account=None):",
      "args": [
        "self",
        "gl_entries",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 766,
      "code_text": "\tdef add_provisional_gl_entry(\n\t\tself, item, gl_entries, posting_date, provisional_account, reverse=0, item_amount=None\n\t):",
      "args": [
        "self",
        "item",
        "gl_entries",
        "posting_date",
        "provisional_account",
        "reverse",
        "item_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 814,
      "code_text": "\tdef is_landed_cost_booked_for_any_item(self) -> bool:\n\t\tfor x in self.items:\n\t\t\tif x.landed_cost_voucher_amount != 0:\n\t\t\t\treturn True\n\n\t\treturn False",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 821,
      "code_text": "\tdef make_tax_gl_entries(self, gl_entries, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "gl_entries",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 872,
      "code_text": "\tdef update_assets(self, item, valuation_rate):",
      "args": [
        "self",
        "item",
        "valuation_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 894,
      "code_text": "\tdef update_status(self, status):\n\t\tself.set_status(update=True, status=status)\n\t\tself.notify_update()\n\t\tclear_doctype_notifications(self)",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 899,
      "code_text": "\tdef update_billing_status(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 915,
      "code_text": "\tdef reserve_stock_for_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 955,
      "code_text": "\tdef enable_recalculate_rate_in_sles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1032,
      "code_text": "def get_purchase_receipts_against_po_details(po_details):",
      "args": [
        "po_details"
      ]
    },
    {
      "type": "function",
      "line_start": 1061,
      "code_text": "def get_billed_amount_against_pr(pr_items):",
      "args": [
        "pr_items"
      ]
    },
    {
      "type": "function",
      "line_start": 1079,
      "code_text": "def get_billed_amount_against_po(po_items):",
      "args": [
        "po_items"
      ]
    },
    {
      "type": "function",
      "line_start": 1185,
      "code_text": "def get_item_wise_returned_qty(pr_doc):",
      "args": [
        "pr_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1357,
      "code_text": "def update_purchase_receipt_status(docname, status):\n\tpr = frappe.get_doc(\"Purchase Receipt\", docname)\n\tpr.update_status(status)",
      "args": [
        "docname",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 1393,
      "code_text": "def make_inter_company_delivery_note(source_name, target_doc=None):\n\treturn make_inter_company_transaction(\"Purchase Receipt\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1450,
      "code_text": "def update_regional_gl_entries(gl_list, doc):\n\treturn",
      "args": [
        "gl_list",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1455,
      "code_text": "def make_lcv(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    }
  ],
  "erpnext\\buying\\report\\item_wise_purchase_history\\item_wise_purchase_history.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 197,
      "code_text": "def get_item_details():\n\tdetails = frappe.db.get_all(\"Item\", fields=[\"name\", \"item_name\", \"item_group\"])\n\titem_details = {}\n\tfor d in details:\n\t\titem_details.setdefault(d.name, frappe._dict({\"item_name\": d.item_name, \"item_group\": d.item_group}))\n\treturn item_details",
      "args": []
    },
    {
      "type": "function",
      "line_start": 248,
      "code_text": "def get_chart_data(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def get_supplier_details():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 205,
      "code_text": "def get_purchase_order_details(company_list, filters):",
      "args": [
        "company_list",
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\item_wise_sales_history\\item_wise_sales_history.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 179,
      "code_text": "def get_item_details():\n\tdetails = frappe.db.get_all(\"Item\", fields=[\"name\", \"item_name\", \"item_group\"])\n\titem_details = {}\n\tfor d in details:\n\t\titem_details.setdefault(d.name, frappe._dict({\"item_name\": d.item_name, \"item_group\": d.item_group}))\n\treturn item_details",
      "args": []
    },
    {
      "type": "function",
      "line_start": 233,
      "code_text": "def get_chart_data(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 169,
      "code_text": "def get_customer_details():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 187,
      "code_text": "def get_sales_order_details(company_list, filters):",
      "args": [
        "company_list",
        "filters"
      ]
    }
  ],
  "erpnext\\regional\\report\\uae_vat_201\\uae_vat_201.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata, emirates, amounts_by_emirate = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_data(filters=None):\n\t\"\"\"Returns the list of dictionaries. Each dictionary is a row in the datatable and chart data.\"\"\"\n\tdata = []\n\temirates, amounts_by_emirate = append_vat_on_sales(data, filters)\n\tappend_vat_on_expenses(data, filters)\n\treturn data, emirates, amounts_by_emirate",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 391,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def get_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 128,
      "code_text": "def append_data(data, no, legend, amount, vat_amount):\n\t\"\"\"Returns data with appended value.\"\"\"\n\tdata.append({\"no\": no, \"legend\": legend, \"amount\": amount, \"vat_amount\": vat_amount})",
      "args": [
        "data",
        "no",
        "legend",
        "amount",
        "vat_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def get_standard_rated_expenses_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 285,
      "code_text": "def get_standard_rated_expenses_tax(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_total_emiratewise(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 256,
      "code_text": "def get_conditions_join(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 305,
      "code_text": "def get_tourist_tax_return_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 321,
      "code_text": "def get_tourist_tax_return_tax(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 341,
      "code_text": "def get_zero_rated_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 366,
      "code_text": "def get_exempt_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def append_vat_on_sales(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 74,
      "code_text": "def standard_rated_expenses_emiratewise(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 91,
      "code_text": "def append_emiratewise_expenses(data, emirates, amounts_by_emirate):",
      "args": [
        "data",
        "emirates",
        "amounts_by_emirate"
      ]
    },
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def append_vat_on_expenses(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 157,
      "code_text": "def get_emirates():\n\t\"\"\"Returns a List of emirates in the order that they are to be displayed.\"\"\"\n\treturn [\"Abu Dhabi\", \"Dubai\", \"Sharjah\", \"Ajman\", \"Umm Al Quwain\", \"Ras Al Khaimah\", \"Fujairah\"]",
      "args": []
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def get_reverse_charge_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def get_reverse_charge_tax(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 213,
      "code_text": "def get_reverse_charge_recoverable_total(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 230,
      "code_text": "def get_reverse_charge_recoverable_tax(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\report\\requested_items_to_order_and_receive\\requested_items_to_order_and_receive.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 181,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def get_conditions(filters, query, mr, mr_item):",
      "args": [
        "filters",
        "query",
        "mr",
        "mr_item"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def prepare_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def prepare_chart_data(item_data):",
      "args": [
        "item_data"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def update_qty_columns(row_to_update, data_row):\n\tfields = [\"qty\", \"stock_qty\", \"ordered_qty\", \"received_qty\", \"qty_to_receive\", \"qty_to_order\"]\n\tfor field in fields:\n\t\trow_to_update[field] += flt(data_row[field])",
      "args": [
        "row_to_update",
        "data_row"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_order_analysis\\sales_order_analysis.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_data(conditions, filters):",
      "args": [
        "conditions",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 218,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def prepare_data(data, so_elapsed_time, filters):",
      "args": [
        "data",
        "so_elapsed_time",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def prepare_chart_data(pending, completed):",
      "args": [
        "pending",
        "completed"
      ]
    },
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def get_so_elapsed_time(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\stock\\report\\serial_and_batch_summary\\serial_and_batch_summary.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters, data)\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def get_columns(filters, data):",
      "args": [
        "filters",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def get_serial_nos(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 218,
      "code_text": "def get_batch_nos(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def get_filter_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def get_voucher_type(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card\\job_card.py": [
    {
      "type": "function",
      "line_start": 1430,
      "code_text": "def make_stock_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 35,
      "code_text": "class OverlapError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1399,
      "code_text": "def make_material_request(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1497,
      "code_text": "def time_diff_in_minutes(string_ed_date, string_st_date):\n\treturn time_diff(string_ed_date, string_st_date).total_seconds() / 60",
      "args": [
        "string_ed_date",
        "string_st_date"
      ]
    },
    {
      "type": "class",
      "line_start": 43,
      "code_text": "class OperationSequenceError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1550,
      "code_text": "def make_corrective_job_card(source_name, operation=None, for_operation=None, target_doc=None):",
      "args": [
        "source_name",
        "operation",
        "for_operation",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class OperationMismatchError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 47,
      "code_text": "class JobCardCancelError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 51,
      "code_text": "class JobCardOverTransferError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 55,
      "code_text": "class JobCard(Document):"
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef onload(self):\n\t\texcess_transfer = frappe.db.get_single_value(\"Manufacturing Settings\", \"job_card_excess_transfer\")\n\t\tself.set_onload(\"job_card_excess_transfer\", excess_transfer)\n\t\tself.set_onload(\"work_order_closed\", self.is_work_order_closed())\n\t\tself.set_onload(\"has_stock_entry\", self.has_stock_entry())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef has_stock_entry(self):\n\t\treturn frappe.db.exists(\"Stock Entry\", {\"job_card\": self.name, \"docstatus\": [\"!=\", 2]})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef before_validate(self):\n\t\tself.set_wip_warehouse()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef on_update(self):\n\t\tself.validate_job_card_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef validate_on_hold(self):\n\t\tif self.is_paused and not self.time_logs:\n\t\t\tself.is_paused = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef set_manufactured_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef validate_job_card_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 231,
      "code_text": "\tdef set_sub_operations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef validate_time_logs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 278,
      "code_text": "\tdef get_overlap_for(self, args, open_job_cards=None):",
      "args": [
        "self",
        "args",
        "open_job_cards"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef has_overlap(self, production_capacity, time_logs):",
      "args": [
        "self",
        "production_capacity",
        "time_logs"
      ]
    },
    {
      "type": "method",
      "line_start": 351,
      "code_text": "\tdef get_time_logs(self, args, doctype, open_job_cards=None):",
      "args": [
        "self",
        "args",
        "doctype",
        "open_job_cards"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef get_open_job_cards(self, employee, workstation=None):",
      "args": [
        "self",
        "employee",
        "workstation"
      ]
    },
    {
      "type": "method",
      "line_start": 432,
      "code_text": "\tdef get_workstation_based_on_available_slot(self, existing_time_logs) -> dict:",
      "args": [
        "self",
        "existing_time_logs"
      ]
    },
    {
      "type": "method",
      "line_start": 450,
      "code_text": "\tdef time_slot_wise_busy_workstations(existing_time_logs) -> dict:",
      "args": [
        "existing_time_logs"
      ]
    },
    {
      "type": "method",
      "line_start": 459,
      "code_text": "\tdef schedule_time_logs(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 473,
      "code_text": "\tdef validate_overlap_for_workstation(self, args, row):",
      "args": [
        "self",
        "args",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 498,
      "code_text": "\tdef check_workstation_time(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 558,
      "code_text": "\tdef add_time_log(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 595,
      "code_text": "\tdef add_start_time_log(self, args):\n\t\tif args.from_time and args.to_time:\n\t\t\targs.time_in_mins = time_diff_in_minutes(args.to_time, args.from_time)\n\n\t\trow = self.append(\"time_logs\", args)\n\t\trow.db_update()",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef set_employees(self, employees):\n\t\tfor name in employees:\n\t\t\tself.append(\"employee\", {\"employee\": name.get(\"employee\"), \"completed_qty\": 0.0})\n\t\t\tself.save()",
      "args": [
        "self",
        "employees"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef update_sub_operation_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 650,
      "code_text": "\tdef update_time_logs(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 662,
      "code_text": "\tdef get_required_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 699,
      "code_text": "\tdef before_save(self):\n\t\tself.set_expected_and_actual_time()\n\t\tself.set_process_loss()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 703,
      "code_text": "\tdef on_submit(self):\n\t\tself.validate_transfer_qty()\n\t\tself.validate_job_card()\n\t\tself.update_work_order()\n\t\tself.set_transferred_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 709,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_work_order()\n\t\tself.set_transferred_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 713,
      "code_text": "\tdef validate_transfer_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 726,
      "code_text": "\tdef validate_job_card(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 762,
      "code_text": "\tdef set_expected_and_actual_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 788,
      "code_text": "\tdef set_process_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 797,
      "code_text": "\tdef update_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 828,
      "code_text": "\tdef update_semi_finished_good_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 842,
      "code_text": "\tdef update_corrective_in_work_order(self, wo):",
      "args": [
        "self",
        "wo"
      ]
    },
    {
      "type": "method",
      "line_start": 855,
      "code_text": "\tdef validate_produced_quantity(self, for_quantity, process_loss_qty, wo):",
      "args": [
        "self",
        "for_quantity",
        "process_loss_qty",
        "wo"
      ]
    },
    {
      "type": "method",
      "line_start": 872,
      "code_text": "\tdef update_work_order_data(self, for_quantity, process_loss_qty, time_in_mins, wo):",
      "args": [
        "self",
        "for_quantity",
        "process_loss_qty",
        "time_in_mins",
        "wo"
      ]
    },
    {
      "type": "method",
      "line_start": 908,
      "code_text": "\tdef get_current_operation_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 924,
      "code_text": "\tdef set_transferred_qty_in_job_card_item(self, ste_doc):",
      "args": [
        "self",
        "ste_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 981,
      "code_text": "\tdef set_transferred_qty(self, update_status=False):",
      "args": [
        "self",
        "update_status"
      ]
    },
    {
      "type": "method",
      "line_start": 1011,
      "code_text": "\tdef set_transferred_qty_in_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1030,
      "code_text": "\tdef set_status(self, update_status=False):",
      "args": [
        "self",
        "update_status"
      ]
    },
    {
      "type": "method",
      "line_start": 1062,
      "code_text": "\tdef set_wip_warehouse(self):\n\t\tif not self.wip_warehouse:\n\t\t\tself.wip_warehouse = frappe.db.get_single_value(\"Manufacturing Settings\", \"default_wip_warehouse\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1066,
      "code_text": "\tdef validate_operation_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1084,
      "code_text": "\tdef pause_job(self, **kwargs):\n\t\tif isinstance(kwargs, dict):\n\t\t\tkwargs = frappe._dict(kwargs)\n\n\t\tself.db_set(\"is_paused\", 1)\n\t\tself.add_time_logs(to_time=kwargs.end_time, completed_qty=0.0, employees=self.employee)",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 1092,
      "code_text": "\tdef resume_job(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 1103,
      "code_text": "\tdef validate_sequence_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1158,
      "code_text": "\tdef validate_work_order(self):\n\t\tif self.is_work_order_closed():\n\t\t\tfrappe.throw(_(\"You can't make any changes to Job Card since Work Order is closed.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1162,
      "code_text": "\tdef is_work_order_closed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1171,
      "code_text": "\tdef update_status_in_workstation(self, status):\n\t\tif not self.workstation:\n\t\t\treturn\n\n\t\tfrappe.db.set_value(\"Workstation\", self.workstation, \"status\", status)",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 1177,
      "code_text": "\tdef add_time_logs(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 1218,
      "code_text": "\tdef update_workstation_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1241,
      "code_text": "\tdef start_timer(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 1252,
      "code_text": "\tdef complete_job_card(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 1279,
      "code_text": "\tdef make_stock_entry_for_semi_fg_item(self, auto_submit=False):",
      "args": [
        "self",
        "auto_submit"
      ]
    },
    {
      "type": "function",
      "line_start": 1314,
      "code_text": "def make_subcontracting_po(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1357,
      "code_text": "def make_time_log(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1369,
      "code_text": "def get_operation_details(work_order, operation):",
      "args": [
        "work_order",
        "operation"
      ]
    },
    {
      "type": "function",
      "line_start": 1379,
      "code_text": "def get_operations(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1502,
      "code_text": "def get_job_details(start, end, filters=None):",
      "args": [
        "start",
        "end",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item\\test_item.py": [
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def make_item(item_code=None, properties=None, uoms=None, barcode=None):",
      "args": [
        "item_code",
        "properties",
        "uoms",
        "barcode"
      ]
    },
    {
      "type": "function",
      "line_start": 990,
      "code_text": "def create_item(\n\titem_code,\n\tis_stock_item=1,\n\tvaluation_rate=0,\n\tstock_uom=\"Nos\",\n\twarehouse=\"_Test Warehouse - _TC\",\n\tis_customer_provided_item=None,\n\tcustomer=None,\n\tis_purchase_item=None,\n\topening_stock=0,\n\tis_fixed_asset=0,\n\tasset_category=None,\n\tbuying_cost_center=None,\n\tselling_cost_center=None,\n\tcompany=\"_Test Company\",\n):",
      "args": [
        "item_code",
        "is_stock_item",
        "valuation_rate",
        "stock_uom",
        "warehouse",
        "is_customer_provided_item",
        "customer",
        "is_purchase_item",
        "opening_stock",
        "is_fixed_asset",
        "asset_category",
        "buying_cost_center",
        "selling_cost_center",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 982,
      "code_text": "def make_item_variant():\n\tif not frappe.db.exists(\"Item\", \"_Test Variant Item-S\"):\n\t\tvariant = create_variant(\"_Test Variant Item\", \"\"\"{\"Test Size\": \"Small\"}\"\"\")\n\t\tvariant.item_code = \"_Test Variant Item-S\"\n\t\tvariant.item_name = \"_Test Variant Item-S\"\n\t\tvariant.save()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 976,
      "code_text": "def set_item_variant_settings(fields):\n\tdoc = frappe.get_doc(\"Item Variant Settings\")\n\tdoc.set(\"fields\", fields)\n\tdoc.save()",
      "args": [
        "fields"
      ]
    },
    {
      "type": "class",
      "line_start": 77,
      "code_text": "class UnitTestItem(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 86,
      "code_text": "class TestItem(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tfrappe.flags.attribute_values = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef get_item(self, idx):",
      "args": [
        "self",
        "idx"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef test_get_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef test_get_asset_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef test_item_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 305,
      "code_text": "\tdef test_item_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 373,
      "code_text": "\tdef test_item_default_validations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 396,
      "code_text": "\tdef test_item_attribute_change_after_variant(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 411,
      "code_text": "\tdef test_make_item_variant(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 422,
      "code_text": "\tdef test_copy_fields_from_template_to_variants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 453,
      "code_text": "\tdef test_make_item_variant_with_numeric_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef test_item_merging(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 532,
      "code_text": "\tdef test_item_merging_with_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 552,
      "code_text": "\tdef test_uom_conversion_factor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 569,
      "code_text": "\tdef test_uom_conv_intermediate(self):\n\t\tfactor = get_uom_conv_factor(\"Pound\", \"Gram\")\n\t\tself.assertAlmostEqual(factor, 453.592, 3)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef test_uom_conv_base_case(self):\n\t\tfactor = get_uom_conv_factor(\"m\", \"m\")\n\t\tself.assertEqual(factor, 1.0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 577,
      "code_text": "\tdef test_item_variant_by_manufacturer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 598,
      "code_text": "\tdef test_stock_exists_against_template_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef test_add_item_barcode(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 670,
      "code_text": "\tdef test_heatmap_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 685,
      "code_text": "\tdef test_index_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 696,
      "code_text": "\tdef test_attribute_completions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 707,
      "code_text": "\tdef test_check_stock_uom_with_bin(self):\n\t\t# this item has opening stock and stock_uom set in self.globalTestRecords[\"Item\"].\n\t\titem = frappe.get_doc(\"Item\", \"_Test Item\")\n\t\titem.stock_uom = \"Gram\"\n\t\tself.assertRaises(frappe.ValidationError, item.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 713,
      "code_text": "\tdef test_check_stock_uom_with_bin_no_sle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 734,
      "code_text": "\tdef test_erasure_of_old_conversions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 744,
      "code_text": "\tdef test_validate_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 753,
      "code_text": "\tdef test_autoname_series(self):\n\t\titem = frappe.new_doc(\"Item\")\n\t\titem.item_group = \"All Item Groups\"\n\t\titem.save()  # if item code saved without item_code then series worked",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 759,
      "code_text": "\tdef test_item_wise_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 771,
      "code_text": "\tdef test_backdated_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef test_retain_sample(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 799,
      "code_text": "\tdef consume_item_code_with_differet_stock_transactions(\n\t\tself, item_code, warehouse=\"_Test Warehouse - _TC\"\n\t):",
      "args": [
        "self",
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 816,
      "code_text": "\tdef test_item_dashboard(self):\n\t\tfrom erpnext.stock.dashboard.item_dashboard import get_data\n\n\t\tself.assertTrue(get_data(item_code=\"_Test Item\"))\n\t\tself.assertTrue(get_data(warehouse=\"_Test Warehouse - _TC\"))\n\t\tself.assertTrue(get_data(item_group=\"All Item Groups\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 823,
      "code_text": "\tdef test_empty_description(self):\n\t\titem = make_item(properties={\"description\": \"<p></p>\"})\n\t\tself.assertEqual(item.description, item.item_name)\n\t\titem.description = \"\"\n\t\titem.save()\n\t\tself.assertEqual(item.description, item.item_name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 830,
      "code_text": "\tdef test_item_type_field_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 857,
      "code_text": "\tdef test_customer_codes_length(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 865,
      "code_text": "\tdef test_update_is_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 895,
      "code_text": "\tdef test_serach_fields_for_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 915,
      "code_text": "\tdef test_group_warehouse_for_reorder_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 936,
      "code_text": "\tdef test_variant_uom_mismatch_throws_error(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\report\\serial_no_ledger\\serial_no_ledger.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 167,
      "code_text": "def get_serial_nos(filters, serial_bundle_ids):",
      "args": [
        "filters",
        "serial_bundle_ids"
      ]
    }
  ],
  "erpnext\\assets\\report\\fixed_asset_register\\fixed_asset_register.py": [
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 362,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def prepare_chart_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def get_assets_linked_to_fb(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 242,
      "code_text": "def get_asset_depreciation_amount_map(filters, finance_book):",
      "args": [
        "filters",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 293,
      "code_text": "def get_group_by_data(group_by, conditions, assets_linked_to_fb, depreciation_amount_map):",
      "args": [
        "group_by",
        "conditions",
        "assets_linked_to_fb",
        "depreciation_amount_map"
      ]
    },
    {
      "type": "function",
      "line_start": 332,
      "code_text": "def get_purchase_receipt_supplier_map():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 347,
      "code_text": "def get_purchase_invoice_supplier_map():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\report\\work_order_summary\\work_order_summary.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_chart_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def prepare_chart_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def get_chart_based_on_status(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def get_chart_based_on_age(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 140,
      "code_text": "def get_chart_based_on_qty(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\trial_balance\\trial_balance.py": [
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def execute(filters=None):\n\tvalidate_filters(filters)\n\tdata = get_data(filters)\n\tcolumns = get_columns()\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 429,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 392,
      "code_text": "def prepare_data(accounts, filters, parent_children_map, company_currency):",
      "args": [
        "accounts",
        "filters",
        "parent_children_map",
        "company_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def get_opening_balance(\n\tdoctype,\n\tfilters,\n\treport_type,\n\taccounting_dimensions,\n\tperiod_closing_voucher=None,\n\tstart_date=None,\n\tignore_is_opening=0,\n):",
      "args": [
        "doctype",
        "filters",
        "report_type",
        "accounting_dimensions",
        "period_closing_voucher",
        "start_date",
        "ignore_is_opening"
      ]
    },
    {
      "type": "function",
      "line_start": 385,
      "code_text": "def accumulate_values_into_parents(accounts, accounts_by_name):\n\tfor d in reversed(accounts):\n\t\tif d.parent_account:\n\t\t\tfor key in value_fields:\n\t\t\t\taccounts_by_name[d.parent_account][key] += d[key]",
      "args": [
        "accounts",
        "accounts_by_name"
      ]
    },
    {
      "type": "function",
      "line_start": 331,
      "code_text": "def calculate_values(accounts, gl_entries_by_account, opening_balances, show_net_values, ignore_is_opening=0):",
      "args": [
        "accounts",
        "gl_entries_by_account",
        "opening_balances",
        "show_net_values",
        "ignore_is_opening"
      ]
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def get_opening_balances(filters, ignore_is_opening):\n\tbalance_sheet_opening = get_rootwise_opening_balances(filters, \"Balance Sheet\", ignore_is_opening)\n\tpl_opening = get_rootwise_opening_balances(filters, \"Profit and Loss\", ignore_is_opening)\n\n\tbalance_sheet_opening.update(pl_opening)\n\treturn balance_sheet_opening",
      "args": [
        "filters",
        "ignore_is_opening"
      ]
    },
    {
      "type": "function",
      "line_start": 147,
      "code_text": "def get_rootwise_opening_balances(filters, report_type, ignore_is_opening):",
      "args": [
        "filters",
        "report_type",
        "ignore_is_opening"
      ]
    },
    {
      "type": "function",
      "line_start": 490,
      "code_text": "def prepare_opening_closing(row):",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 360,
      "code_text": "def calculate_total_row(accounts, company_currency):",
      "args": [
        "accounts",
        "company_currency"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\job_card_summary\\job_card_summary.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters)\n\tchart_data = get_chart_data(data, filters)\n\treturn columns, data, None, chart_data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_chart_data(job_card_details, filters):",
      "args": [
        "job_card_details",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def prepare_chart_data(job_card_details, filters):",
      "args": [
        "job_card_details",
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\production_analytics\\production_analytics.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns(filters)\n\tdata, chart = get_data(filters, columns)\n\treturn columns, data, None, chart",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_data(filters, columns):",
      "args": [
        "filters",
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def get_chart_data(periodic_data, columns):",
      "args": [
        "periodic_data",
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def update_periodic_data(periodic_data, status, period):",
      "args": [
        "periodic_data",
        "status",
        "period"
      ]
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_periodic_data(filters, entry):",
      "args": [
        "filters",
        "entry"
      ]
    }
  ],
  "erpnext\\crm\\report\\lost_opportunity\\lost_opportunity.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns, data = get_columns(), get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def get_join(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\account_balance\\account_balance.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\tfilters = frappe._dict(filters or {})\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\regional\\report\\uae_vat_201\\test_uae_vat_201.py": [
    {
      "type": "function",
      "line_start": 187,
      "code_text": "def make_item(item_code, properties=None):",
      "args": [
        "item_code",
        "properties"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def create_warehouse(warehouse_name, properties=None, company=None):",
      "args": [
        "warehouse_name",
        "properties",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def make_customer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def make_supplier():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def make_company(company_name, abbr):",
      "args": [
        "company_name",
        "abbr"
      ]
    },
    {
      "type": "function",
      "line_start": 209,
      "code_text": "def make_sales_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 256,
      "code_text": "def create_purchase_invoices():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestUaeVat201(TestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_uae_vat_201_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef test_uae_vat_201_report_with_foreign_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 123,
      "code_text": "def set_vat_accounts():",
      "args": []
    }
  ],
  "erpnext\\support\\report\\support_hour_distribution\\support_hour_distribution.py": [
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 85,
      "code_text": "def get_chart_data(timeslot_wise_count):",
      "args": [
        "timeslot_wise_count"
      ]
    },
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def get_hours_count(start_time, end_time):",
      "args": [
        "start_time",
        "end_time"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\downtime_analysis\\downtime_analysis.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters)\n\tchart_data = get_chart_data(data, filters)\n\treturn columns, data, None, chart_data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 46,
      "code_text": "def get_chart_data(data, columns):",
      "args": [
        "data",
        "columns"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\quality_inspection_summary\\quality_inspection_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters)\n\tchart_data = get_chart_data(data, filters)\n\treturn columns, data, None, chart_data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def get_chart_data(periodic_data, columns):",
      "args": [
        "periodic_data",
        "columns"
      ]
    }
  ],
  "erpnext\\stock\\report\\item_shortage_report\\item_shortage_report.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def get_chart_data(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\buying\\report\\subcontract_order_summary\\subcontract_order_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_data(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_supplied_items(orders, report_filters):",
      "args": [
        "orders",
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_filters(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_subcontracted_orders(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def prepare_subcontracted_data(orders, supplied_items):",
      "args": [
        "orders",
        "supplied_items"
      ]
    },
    {
      "type": "function",
      "line_start": 114,
      "code_text": "def get_subcontracted_data(order_details, data):",
      "args": [
        "order_details",
        "data"
      ]
    }
  ],
  "erpnext\\buying\\report\\purchase_order_analysis\\purchase_order_analysis.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 198,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 134,
      "code_text": "def prepare_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def prepare_chart_data(pending, completed):",
      "args": [
        "pending",
        "completed"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def update_received_amount(data):\n\tpr_data = get_received_amount_data(data)\n\n\tfor row in data:\n\t\trow.received_qty_amount = flt(pr_data.get(row.name))",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_received_amount_data(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\accounts\\report\\dimension_wise_accounts_balance_report\\dimension_wise_accounts_balance_report.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_data(filters, dimension_list):",
      "args": [
        "filters",
        "dimension_list"
      ]
    },
    {
      "type": "function",
      "line_start": 197,
      "code_text": "def get_columns(dimension_list):",
      "args": [
        "dimension_list"
      ]
    },
    {
      "type": "function",
      "line_start": 187,
      "code_text": "def get_dimensions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def prepare_data(accounts, filters, company_currency, dimension_list):",
      "args": [
        "accounts",
        "filters",
        "company_currency",
        "dimension_list"
      ]
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def set_gl_entries_by_account(dimension_list, filters, account, gl_entries_by_account):",
      "args": [
        "dimension_list",
        "filters",
        "account",
        "gl_entries_by_account"
      ]
    },
    {
      "type": "function",
      "line_start": 169,
      "code_text": "def accumulate_values_into_parents(accounts, accounts_by_name, dimension_list):",
      "args": [
        "accounts",
        "accounts_by_name",
        "dimension_list"
      ]
    },
    {
      "type": "function",
      "line_start": 118,
      "code_text": "def format_gl_entries(gl_entries_by_account, accounts_by_name, dimension_list, dimension_type):",
      "args": [
        "gl_entries_by_account",
        "accounts_by_name",
        "dimension_list",
        "dimension_type"
      ]
    },
    {
      "type": "function",
      "line_start": 179,
      "code_text": "def get_condition(dimension):\n\tconditions = []\n\n\tconditions.append(f\"{frappe.scrub(dimension)} in %(dimensions)s\")\n\n\treturn \" and {}\".format(\" and \".join(conditions)) if conditions else \"\"",
      "args": [
        "dimension"
      ]
    }
  ],
  "erpnext\\stock\\report\\cogs_by_item_group\\cogs_by_item_group.py": [
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def execute(filters: Filters) -> tuple[Columns, Data]:\n\tupdate_filters_with_account(filters)\n\tvalidate_filters(filters)\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_data(filters: Filters) -> Data:",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_columns() -> Columns:\n\treturn [\n\t\t{\"label\": _(\"Item Group\"), \"fieldname\": \"item_group\", \"fieldtype\": \"Data\", \"width\": \"200\"},\n\t\t{\"label\": _(\"COGS Debit\"), \"fieldname\": \"cogs_debit\", \"fieldtype\": \"Currency\", \"width\": \"200\"},\n\t]",
      "args": []
    },
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def validate_filters(filters: Filters) -> None:\n\tif filters.from_date > filters.to_date:\n\t\tfrappe.throw(_(\"From Date must be before To Date\"))",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 147,
      "code_text": "def get_row(name: str, value: float, is_bold: int, indent: int) -> Row:\n\titem_group = name\n\tif is_bold:\n\t\titem_group = frappe.bold(item_group)\n\treturn frappe._dict(item_group=item_group, cogs_debit=value, indent=indent)",
      "args": [
        "name: str",
        "value: float",
        "is_bold: int",
        "indent: int"
      ]
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def update_filters_with_account(filters: Filters) -> None:\n\taccount = frappe.get_value(\"Company\", filters.get(\"company\"), \"default_expense_account\")\n\tfilters.update(dict(account=account))",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_filtered_entries(filters: Filters) -> FilteredEntries:",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_stock_value_difference_list(filtered_entries: FilteredEntries) -> SVDList:",
      "args": [
        "filtered_entries: FilteredEntries"
      ]
    },
    {
      "type": "function",
      "line_start": 90,
      "code_text": "def get_leveled_dict() -> OrderedDict:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def assign_self_values(leveled_dict: OrderedDict, svd_list: SVDList) -> None:\n\tkey_dict = {v[\"name\"]: k for k, v in leveled_dict.items()}\n\tfor item in svd_list:\n\t\tkey = key_dict[item.get(\"item_group\")]\n\t\tleveled_dict[key][\"self_value\"] += -item.get(\"stock_value_difference\")",
      "args": [
        "leveled_dict: OrderedDict",
        "svd_list: SVDList"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def assign_agg_values(leveled_dict: OrderedDict) -> None:",
      "args": [
        "leveled_dict: OrderedDict"
      ]
    },
    {
      "type": "function",
      "line_start": 154,
      "code_text": "def assign_item_groups_to_svd_list(svd_list: SVDList) -> None:\n\tig_map = get_item_groups_map(svd_list)\n\tfor item in svd_list:\n\t\titem.item_group = ig_map[item.get(\"item_code\")]",
      "args": [
        "svd_list: SVDList"
      ]
    },
    {
      "type": "function",
      "line_start": 160,
      "code_text": "def get_item_groups_map(svd_list: SVDList) -> dict[str, str]:\n\titem_codes = set(i[\"item_code\"] for i in svd_list)\n\tig_list = frappe.get_list(\n\t\t\"Item\", fields=[\"item_code\", \"item_group\"], filters=[(\"item_code\", \"in\", item_codes)]\n\t)\n\treturn {i[\"item_code\"]: i[\"item_group\"] for i in ig_list}",
      "args": [
        "svd_list: SVDList"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def get_item_groups_dict() -> ItemGroupsDict:\n\titem_groups_list = frappe.get_all(\"Item Group\", fields=(\"name\", \"is_group\", \"lft\", \"rgt\"))\n\treturn {(i[\"lft\"], i[\"rgt\"]): {\"name\": i[\"name\"], \"is_group\": i[\"is_group\"]} for i in item_groups_list}",
      "args": []
    },
    {
      "type": "function",
      "line_start": 173,
      "code_text": "def update_leveled_dict(leveled_dict: OrderedDict) -> None:\n\tfor k in leveled_dict:\n\t\tleveled_dict[k].update({\"self_value\": 0, \"agg_value\": 0})",
      "args": [
        "leveled_dict: OrderedDict"
      ]
    }
  ],
  "erpnext\\accounts\\report\\profitability_analysis\\profitability_analysis.py": [
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def get_data(accounts, filters, based_on):",
      "args": [
        "accounts",
        "filters",
        "based_on"
      ]
    },
    {
      "type": "function",
      "line_start": 164,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def prepare_data(accounts, filters, total_row, parent_children_map, based_on):",
      "args": [
        "accounts",
        "filters",
        "total_row",
        "parent_children_map",
        "based_on"
      ]
    },
    {
      "type": "function",
      "line_start": 126,
      "code_text": "def accumulate_values_into_parents(accounts, accounts_by_name):\n\tfor d in reversed(accounts):\n\t\tif d.parent_account:\n\t\t\tfor key in value_fields:\n\t\t\t\taccounts_by_name[d.parent_account][key] += d[key]",
      "args": [
        "accounts",
        "accounts_by_name"
      ]
    },
    {
      "type": "function",
      "line_start": 204,
      "code_text": "def set_gl_entries_by_account(\n\tcompany, from_date, to_date, based_on, gl_entries_by_account, ignore_closing_entries=False\n):",
      "args": [
        "company",
        "from_date",
        "to_date",
        "based_on",
        "gl_entries_by_account",
        "ignore_closing_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def calculate_values(accounts, gl_entries_by_account, filters):",
      "args": [
        "accounts",
        "gl_entries_by_account",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def get_accounts_data(based_on, company):",
      "args": [
        "based_on",
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\report\\invalid_ledger_entries\\invalid_ledger_entries.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters: dict | None = None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_data(filters) -> list[list]:",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def get_columns() -> list[dict]:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def validate_filters(filters: dict | None = None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def identify_cancelled_vouchers(active_vouchers: list[dict] | list | None = None) -> list[dict]:",
      "args": [
        "active_vouchers"
      ]
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def build_query_filters(filters: dict | None = None) -> list:",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_active_vouchers_for_period(filters: dict | None = None) -> list[dict]:",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\address_and_contacts\\address_and_contacts.py": [
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def execute(filters=None):\n\tcolumns, data = get_columns(filters), get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_data(filters):\n\tparty_type = filters.get(\"party_type\")\n\tparty = filters.get(\"party_name\")\n\tparty_group = get_party_group(party_type)\n\n\treturn get_party_addresses_and_contact(party_type, party, party_group, filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 134,
      "code_text": "def get_party_details(party_type, party_list, doctype, party_details):",
      "args": [
        "party_type",
        "party_list",
        "doctype",
        "party_details"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def add_blank_columns_for(doctype):\n\treturn [\"\" for field in field_map.get(doctype, [])]",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_party_group(party_type):",
      "args": [
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 74,
      "code_text": "def get_party_addresses_and_contact(party_type, party, party_group, filters):",
      "args": [
        "party_type",
        "party",
        "party_group",
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\report\\supplier_quotation_comparison\\supplier_quotation_comparison.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def prepare_data(supplier_quotation_data, filters):",
      "args": [
        "supplier_quotation_data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 160,
      "code_text": "def prepare_chart_data(suppliers, qty_list, supplier_qty_price_map):",
      "args": [
        "suppliers",
        "qty_list",
        "supplier_qty_price_map"
      ]
    },
    {
      "type": "function",
      "line_start": 284,
      "code_text": "def get_message():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 298,
      "code_text": "def set_default_supplier(item_code, supplier, company):",
      "args": [
        "item_code",
        "supplier",
        "company"
      ]
    }
  ],
  "erpnext\\stock\\report\\batch_item_expiry_status\\batch_item_expiry_status.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 63,
      "code_text": "def get_batch_details(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\reserved_stock\\reserved_stock.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ledger_invariant_check\\stock_ledger_invariant_check.py": [
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_data(filters):\n\tsles = get_stock_ledger_entries(filters)\n\treturn add_invariant_check_fields(sles, filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_stock_ledger_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def add_invariant_check_fields(sles, filters):",
      "args": [
        "sles",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def is_sle_has_correct_data(sle, precision):\n\tif flt(sle.difference_in_qty, precision) != 0.0 or flt(sle.diff_value_diff, precision) != 0:\n\t\tprint(flt(sle.difference_in_qty, precision), flt(sle.diff_value_diff, precision))\n\t\treturn False\n\n\treturn True",
      "args": [
        "sle",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 299,
      "code_text": "def create_reposting_entries(rows, item_code=None, warehouse=None):",
      "args": [
        "rows",
        "item_code",
        "warehouse"
      ]
    }
  ],
  "erpnext\\stock\\report\\incorrect_serial_no_valuation\\incorrect_serial_no_valuation.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_data(filters):\n\tdata = get_stock_ledger_entries(filters)\n\tserial_nos_data = prepare_serial_nos(data)\n\tdata = get_incorrect_serial_nos(serial_nos_data)\n\n\treturn data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_stock_ledger_entries(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def prepare_serial_nos(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def get_incorrect_serial_nos(serial_nos_data):",
      "args": [
        "serial_nos_data"
      ]
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def check_incorrect_serial_data(data, total_dict):",
      "args": [
        "data",
        "total_dict"
      ]
    }
  ],
  "erpnext\\accounts\\report\\inactive_sales_items\\inactive_sales_items.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 94,
      "code_text": "def get_sales_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def get_territories(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\incorrect_balance_qty_after_transaction\\incorrect_balance_qty_after_transaction.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def get_stock_ledger_entries(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def validate_data(itewise_balance_qty):",
      "args": [
        "itewise_balance_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def get_incorrect_data(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\stock\\report\\fifo_queue_vs_qty_after_transaction_comparison\\fifo_queue_vs_qty_after_transaction_comparison.py": [
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_data(filters):\n\tif not any([filters.warehouse, filters.item_code, filters.item_group]):\n\t\tfrappe.throw(_(\"Any one of following filters required: warehouse, Item Code, Item Group\"))\n\tsles = get_stock_ledger_entries(filters)\n\treturn find_first_bad_queue(sles)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_stock_ledger_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def find_first_bad_queue(sles):",
      "args": [
        "sles"
      ]
    }
  ],
  "erpnext\\selling\\report\\territory_wise_sales\\territory_wise_sales.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\tfilters = frappe._dict(filters)\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_data(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 183,
      "code_text": "def _get_total(doclist, amount_field=\"base_grand_total\"):",
      "args": [
        "doclist",
        "amount_field"
      ]
    },
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_sales_orders(quotations):",
      "args": [
        "quotations"
      ]
    },
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_opportunities(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 132,
      "code_text": "def get_quotations(opportunities):",
      "args": [
        "opportunities"
      ]
    },
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def get_sales_invoice(sales_orders):",
      "args": [
        "sales_orders"
      ]
    }
  ],
  "erpnext\\stock\\report\\warehouse_wise_stock_balance\\warehouse_wise_stock_balance.py": [
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def get_data(filters: StockBalanceFilter):",
      "args": [
        "filters: StockBalanceFilter"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def get_columns(filters: StockBalanceFilter) -> list[dict]:",
      "args": [
        "filters: StockBalanceFilter"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class StockBalanceFilter(TypedDict):\n\tcompany: str | None\n\twarehouse: str | None\n\tshow_disabled_warehouses: int | None"
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_warehouse_wise_balance(filters: StockBalanceFilter) -> list[SLEntry]:",
      "args": [
        "filters: StockBalanceFilter"
      ]
    },
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_warehouses(report_filters: StockBalanceFilter):",
      "args": [
        "report_filters: StockBalanceFilter"
      ]
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def update_indent(warehouses):",
      "args": [
        "warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def set_balance_in_parent(warehouses):",
      "args": [
        "warehouses"
      ]
    }
  ],
  "erpnext\\buying\\report\\procurement_tracker\\procurement_tracker.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def apply_filters_on_query(filters, parent, child, query):",
      "args": [
        "filters",
        "parent",
        "child",
        "query"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def get_mapped_mr_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 241,
      "code_text": "def get_mapped_pi_records():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 259,
      "code_text": "def get_mapped_pr_records():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 277,
      "code_text": "def get_po_entries(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\trial_balance_for_party\\trial_balance_for_party.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def get_data(filters, show_party_name):",
      "args": [
        "filters",
        "show_party_name"
      ]
    },
    {
      "type": "function",
      "line_start": 180,
      "code_text": "def get_columns(filters, show_party_name):",
      "args": [
        "filters",
        "show_party_name"
      ]
    },
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def get_opening_balances(filters, account_filter=None):",
      "args": [
        "filters",
        "account_filter"
      ]
    },
    {
      "type": "function",
      "line_start": 169,
      "code_text": "def toggle_debit_credit(debit, credit):",
      "args": [
        "debit",
        "credit"
      ]
    },
    {
      "type": "function",
      "line_start": 135,
      "code_text": "def get_balances_within_period(filters, account_filter=None):",
      "args": [
        "filters",
        "account_filter"
      ]
    },
    {
      "type": "function",
      "line_start": 254,
      "code_text": "def is_party_name_visible(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\asset_depreciations_and_balances\\asset_depreciations_and_balances.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tfilters.day_before_from_date = add_days(filters.from_date, -1)\n\tcolumns, data = get_columns(filters), get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_data(filters):\n\tif filters.get(\"group_by\") == \"Asset Category\":\n\t\treturn get_group_by_asset_category_data(filters)\n\telif filters.get(\"group_by\") == \"Asset\":\n\t\treturn get_group_by_asset_data(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 435,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_group_by_asset_category_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_asset_categories_for_grouped_by_category(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_assets_for_grouped_by_category(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 232,
      "code_text": "def get_group_by_asset_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 272,
      "code_text": "def get_asset_details_for_grouped_by_category(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 351,
      "code_text": "def get_assets_for_grouped_by_asset(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\item_variant_details\\item_variant_details.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns(filters.item)\n\tdata = get_data(filters.item)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_data(item):",
      "args": [
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def get_columns(item):",
      "args": [
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_open_sales_orders_count(variants_list):",
      "args": [
        "variants_list"
      ]
    },
    {
      "type": "function",
      "line_start": 142,
      "code_text": "def get_stock_details_map(variant_list):",
      "args": [
        "variant_list"
      ]
    },
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def get_buying_price_map(variant_list):",
      "args": [
        "variant_list"
      ]
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def get_selling_price_map(variant_list):",
      "args": [
        "variant_list"
      ]
    },
    {
      "type": "function",
      "line_start": 202,
      "code_text": "def get_attribute_values_map(variant_list):",
      "args": [
        "variant_list"
      ]
    }
  ],
  "erpnext\\stock\\report\\available_batch_report\\available_batch_report.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def get_query_based_on_filters(query, batch, table, filters):",
      "args": [
        "query",
        "batch",
        "table",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def parse_batchwise_data(batchwise_data):",
      "args": [
        "batchwise_data"
      ]
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def get_batchwise_data_from_stock_ledger(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def get_batchwise_data_from_serial_batch_bundle(batchwise_data, filters):",
      "args": [
        "batchwise_data",
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_operations_time\\bom_operations_time.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tdata = get_data(filters)\n\tcolumns = get_columns(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_args():\n\treturn frappe._dict({\"name\": \"\", \"item\": \"\", \"item_name\": \"\", \"uom\": \"\"})",
      "args": []
    },
    {
      "type": "function",
      "line_start": 46,
      "code_text": "def get_filtered_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def get_bom_count(bom_data):",
      "args": [
        "bom_data"
      ]
    }
  ],
  "erpnext\\selling\\report\\customer_wise_item_price\\customer_wise_item_price.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def get_data(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def get_columns(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_customer_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def fetch_item_prices(\n\tcustomer: str | None = None,",
      "args": [
        "customer",
        "price_list",
        "selling_price_list",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def get_selling_items(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_and_account_value_comparison\\stock_and_account_value_comparison.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def get_data(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 103,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def get_gl_data(report_filters, filters):",
      "args": [
        "report_filters",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def get_stock_ledger_data(report_filters, filters):",
      "args": [
        "report_filters",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def create_reposting_entries(rows, company):",
      "args": [
        "rows",
        "company"
      ]
    }
  ],
  "erpnext\\stock\\report\\item_price_stock\\item_price_stock.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns()\n\tdata = get_data(filters, columns)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def get_data(filters, columns):\n\titem_price_qty_data = []\n\titem_price_qty_data = get_item_price_qty_data(filters)\n\treturn item_price_qty_data",
      "args": [
        "filters",
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_price_map(price_list_names, buying=0, selling=0):",
      "args": [
        "price_list_names",
        "buying",
        "selling"
      ]
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def get_item_price_qty_data(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_explorer\\bom_explorer.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tdata = []\n\tcolumns = get_columns()\n\tget_data(filters, data)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_data(filters, data):\n\tget_exploded_items(filters.bom, data)",
      "args": [
        "filters",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_exploded_items(bom, data, indent=0, qty=1):",
      "args": [
        "bom",
        "data",
        "indent",
        "qty"
      ]
    }
  ],
  "erpnext\\crm\\report\\prospects_engaged_but_not_converted\\prospects_engaged_but_not_converted.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def set_defaut_value_for_filters(filters):\n\tif not filters.get(\"no_of_interaction\"):\n\t\tfilters[\"no_of_interaction\"] = 1\n\tif not filters.get(\"lead_age\"):\n\t\tfilters[\"lead_age\"] = 60",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_lead_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_creation_date_based_on_lead_age(filters):\n\treturn add_days(now(), (filters.get(\"lead_age\") * -1))",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\work_order_consumed_materials\\work_order_consumed_materials.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_data(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_returned_materials(work_orders):",
      "args": [
        "work_orders"
      ]
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def get_fields():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def get_filter_condition(report_filters):",
      "args": [
        "report_filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ledger_variance\\stock_ledger_variance.py": [
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 201,
      "code_text": "def get_data(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 233,
      "code_text": "def get_item_warehouse_combinations(filters: dict | None = None) -> dict:",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def has_difference(row, precision, difference_in, valuation_method):",
      "args": [
        "row",
        "precision",
        "difference_in",
        "valuation_method"
      ]
    }
  ],
  "erpnext\\accounts\\report\\billed_items_to_be_received\\billed_items_to_be_received.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tdata = get_data(filters) or []\n\tcolumns = get_columns()\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_data(report_filters):\n\tfilters = get_report_filters(report_filters)\n\tfields = get_report_fields()\n\n\treturn frappe.get_all(\"Purchase Invoice\", fields=fields, filters=filters)",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_report_filters(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def get_report_fields():",
      "args": []
    }
  ],
  "erpnext\\buying\\report\\subcontracted_item_to_be_received\\subcontracted_item_to_be_received.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_subcontract_orders(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_subcontract_order_supplied_item(order_type, orders):\n\treturn frappe.get_all(\n\t\tf\"{order_type} Item\",\n\t\tfilters=[(\"parent\", \"IN\", orders)],\n\t\tfields=[\"parent\", \"item_code\", \"item_name\", \"qty\", \"received_qty\"],\n\t)",
      "args": [
        "order_type",
        "orders"
      ]
    }
  ],
  "erpnext\\selling\\report\\pending_so_items_for_purchase_request\\pending_so_items_for_purchase_request.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = get_data()\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def get_items_with_product_bundle(item_list):\n\tbundled_items = frappe.get_all(\n\t\t\"Product Bundle\", filters=[(\"new_item_code\", \"IN\", item_list)], fields=[\"new_item_code\"]\n\t)\n\n\treturn [d.new_item_code for d in bundled_items]",
      "args": [
        "item_list"
      ]
    },
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def get_packed_items(sales_order_list):",
      "args": [
        "sales_order_list"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_variance_report\\bom_variance_report.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns(filters)\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_work_orders(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\report\\subcontracted_raw_materials_to_be_transferred\\subcontracted_raw_materials_to_be_transferred.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_order_items_to_supply(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_qty_vs_serial_no_count\\stock_qty_vs_serial_no_count.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tvalidate_warehouse(filters)\n\tcolumns = get_columns()\n\tdata = get_data(filters.warehouse)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_data(warehouse):",
      "args": [
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def validate_warehouse(filters):\n\tcompany = filters.company\n\twarehouse = filters.warehouse\n\tif not frappe.db.exists(\"Warehouse\", {\"name\": warehouse, \"company\": company}):\n\t\tfrappe.throw(_(\"Warehouse: {0} does not belong to {1}\").format(warehouse, company))",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\voucher_wise_balance\\voucher_wise_balance.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def apply_filters(query, filters, gle):",
      "args": [
        "query",
        "filters",
        "gle"
      ]
    }
  ],
  "erpnext\\utilities\\report\\youtube_interactions\\youtube_interactions.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_chart_summary_data(data):",
      "args": [
        "data"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\process_loss_report\\process_loss_report.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute(filters: Filters) -> tuple[Columns, Data]:\n\tfilters = frappe._dict(filters or {})\n\tcolumns = get_columns()\n\tdata = get_data(filters)\n\treturn columns, data",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_data(filters: Filters) -> Data:",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def get_columns() -> Columns:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def update_data_with_total_pl_value(data: Data) -> None:\n\tfor row in data:\n\t\tvalue_per_unit_fg = row[\"total_fg_value\"] / row[\"qty_to_manufacture\"]\n\t\trow[\"total_pl_value\"] = row[\"process_loss_qty\"] * value_per_unit_fg",
      "args": [
        "data: Data"
      ]
    }
  ],
  "erpnext\\stock\\report\\incorrect_serial_and_batch_bundle\\incorrect_serial_and_batch_bundle.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters: dict | None = None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def get_data(filters) -> list[list]:",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def get_columns() -> list[dict]:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def remove_sabb_entry(selected_rows):",
      "args": [
        "selected_rows"
      ]
    }
  ],
  "erpnext\\stock\\report\\incorrect_stock_value_report\\incorrect_stock_value_report.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_data(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_unsync_date(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\cost_of_poor_quality_report\\cost_of_poor_quality_report.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\treturn get_columns(filters), get_data(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_data(report_filters):",
      "args": [
        "report_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def append_filters(query, report_filters, operations, job_card):",
      "args": [
        "query",
        "report_filters",
        "operations",
        "job_card"
      ]
    }
  ],
  "erpnext\\accounts\\report\\asset_depreciation_ledger\\asset_depreciation_ledger.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\tcolumns, data = get_columns(), get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def get_assets_details(assets):",
      "args": [
        "assets"
      ]
    }
  ],
  "erpnext\\selling\\report\\lost_quotations\\lost_quotations.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns(filters.get(\"group_by\"))\n\tfrom_date, to_date = get_timespan_date_range(filters.get(\"timespan\").lower())\n\tdata = get_data(filters.get(\"company\"), from_date, to_date, filters.get(\"group_by\"))\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def get_data(company: str, from_date: str, to_date: str, group_by: Literal[\"Lost Reason\", \"Competitor\"]):",
      "args": [
        "company: str",
        "from_date: str",
        "to_date: str",
        "group_by"
      ]
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_columns(group_by: Literal[\"Lost Reason\", \"Competitor\"]):",
      "args": [
        "group_by"
      ]
    }
  ],
  "erpnext\\crm\\report\\lead_details\\lead_details.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = get_columns(), get_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_columns():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\general_ledger\\general_ledger.py": [
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 597,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def get_gl_entries(filters, accounting_dimensions):",
      "args": [
        "filters",
        "accounting_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 432,
      "code_text": "def group_by_field(group_by):",
      "args": [
        "group_by"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def validate_filters(filters, account_details):",
      "args": [
        "filters",
        "account_details"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def get_result(filters, account_details):",
      "args": [
        "filters",
        "account_details"
      ]
    },
    {
      "type": "function",
      "line_start": 336,
      "code_text": "def get_accounts_with_children(accounts):",
      "args": [
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 556,
      "code_text": "def get_account_type_map(company):\n\taccount_type_map = frappe._dict(\n\t\tfrappe.get_all(\"Account\", fields=[\"name\", \"account_type\"], filters={\"company\": company}, as_list=1)\n\t)\n\n\treturn account_type_map",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 85,
      "code_text": "def validate_party(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 94,
      "code_text": "def set_account_currency(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 358,
      "code_text": "def set_bill_no(gl_entries):\n\tinv_details = get_supplier_invoice_details()\n\tfor gl in gl_entries:\n\t\tgl[\"bill_no\"] = inv_details.get(gl.get(\"against_voucher\"), \"\")",
      "args": [
        "gl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 364,
      "code_text": "def get_data_with_opening_closing(filters, account_details, accounting_dimensions, gl_entries):",
      "args": [
        "filters",
        "account_details",
        "accounting_dimensions",
        "gl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 413,
      "code_text": "def get_totals_dict():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 441,
      "code_text": "def initialize_gle_map(gl_entries, filters, totals_dict):",
      "args": [
        "gl_entries",
        "filters",
        "totals_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 450,
      "code_text": "def get_accountwise_gle(filters, accounting_dimensions, gl_entries, gle_map, totals):",
      "args": [
        "filters",
        "accounting_dimensions",
        "gl_entries",
        "gle_map",
        "totals"
      ]
    },
    {
      "type": "function",
      "line_start": 564,
      "code_text": "def get_result_as_list(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 579,
      "code_text": "def get_supplier_invoice_details():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 591,
      "code_text": "def get_balance(row, balance, debit_field, credit_field):\n\tbalance += row.get(debit_field, 0) - row.get(credit_field, 0)\n\n\treturn balance",
      "args": [
        "row",
        "balance",
        "debit_field",
        "credit_field"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry\\stock_entry_utils.py": [
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def make_stock_entry(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\regional\\report\\vat_audit_report\\test_vat_audit_report.py": [
    {
      "type": "function",
      "line_start": 134,
      "code_text": "def make_item(item_code, properties=None):",
      "args": [
        "item_code",
        "properties"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def make_customer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def make_supplier():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def make_company(company_name, abbr):",
      "args": [
        "company_name",
        "abbr"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def make_sales_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def create_purchase_invoices():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestVATAuditReport(TestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.sql(\"delete from `tabSales Invoice` where company='_Test Company SA VAT'\")\n\t\tfrappe.db.sql(\"delete from `tabPurchase Invoice` where company='_Test Company SA VAT'\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef test_vat_audit_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 90,
      "code_text": "def set_sa_vat_accounts():",
      "args": []
    }
  ],
  "erpnext\\selling\\report\\sales_person_wise_transaction_summary\\sales_person_wise_transaction_summary.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 252,
      "code_text": "def get_item_details():\n\titem_details = {}\n\tfor d in frappe.db.sql(\"\"\"SELECT `name`, `item_group`, `brand` FROM `tabItem`\"\"\", as_dict=1):\n\t\titem_details.setdefault(d.name, d)\n\n\treturn item_details",
      "args": []
    },
    {
      "type": "function",
      "line_start": 195,
      "code_text": "def get_conditions(filters, date_field):",
      "args": [
        "filters",
        "date_field"
      ]
    },
    {
      "type": "function",
      "line_start": 229,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ledger\\stock_ledger.py": [
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 202,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 477,
      "code_text": "def get_item_details(items, sl_entries, include_uom):",
      "args": [
        "items",
        "sl_entries",
        "include_uom"
      ]
    },
    {
      "type": "function",
      "line_start": 369,
      "code_text": "def get_stock_ledger_entries(filters, items):",
      "args": [
        "filters",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 454,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 591,
      "code_text": "def get_opening_balance(filters, columns, sl_entries):",
      "args": [
        "filters",
        "columns",
        "sl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 635,
      "code_text": "def get_item_group_condition(item_group, item_table=None):",
      "args": [
        "item_group",
        "item_table"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def update_available_serial_nos(available_serial_nos, sle):",
      "args": [
        "available_serial_nos",
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 528,
      "code_text": "def get_opening_balance_from_batch(filters, columns, sl_entries):",
      "args": [
        "filters",
        "columns",
        "sl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 626,
      "code_text": "def get_warehouse_condition(warehouse):",
      "args": [
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 654,
      "code_text": "def check_inventory_dimension_filters_applied(filters) -> bool:\n\tfor dimension in get_inventory_dimensions():\n\t\tif dimension.fieldname in filters and filters.get(dimension.fieldname):\n\t\t\treturn True\n\n\treturn False",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_segregated_bundle_entries(sle, bundle_details, batch_balance_dict, filters):",
      "args": [
        "sle",
        "bundle_details",
        "batch_balance_dict",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def get_serial_batch_bundle_details(sl_entries, filters=None):",
      "args": [
        "sl_entries",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 430,
      "code_text": "def get_serial_and_batch_bundles(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 450,
      "code_text": "def get_inventory_dimension_fields():\n\treturn [dimension.fieldname for dimension in get_inventory_dimensions()]",
      "args": []
    },
    {
      "type": "function",
      "line_start": 508,
      "code_text": "def get_sle_conditions(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\purchase_order\\purchase_order.py": [
    {
      "type": "function",
      "line_start": 731,
      "code_text": "def make_purchase_receipt(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 777,
      "code_text": "def make_purchase_invoice(source_name, target_doc=None):\n\treturn get_mapped_purchase_invoice(source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 725,
      "code_text": "def set_missing_values(source, target):\n\ttarget.run_method(\"set_missing_values\")\n\ttarget.run_method(\"calculate_taxes_and_totals\")",
      "args": [
        "source",
        "target"
      ]
    },
    {
      "type": "function",
      "line_start": 863,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 893,
      "code_text": "def make_subcontracting_order(source_name, target_doc=None, save=False, submit=False, notify=False):",
      "args": [
        "source_name",
        "target_doc",
        "save",
        "submit",
        "notify"
      ]
    },
    {
      "type": "function",
      "line_start": 879,
      "code_text": "def update_status(status, name):\n\tpo = frappe.get_doc(\"Purchase Order\", name)\n\tpo.update_status(status)\n\tpo.update_delivered_qty_in_sales_order()",
      "args": [
        "status",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 686,
      "code_text": "def item_last_purchase_rate(name, conversion_rate, item_code, conversion_factor=1.0):",
      "args": [
        "name",
        "conversion_rate",
        "item_code",
        "conversion_factor"
      ]
    },
    {
      "type": "function",
      "line_start": 792,
      "code_text": "def get_mapped_purchase_invoice(source_name, target_doc=None, ignore_permissions=False):",
      "args": [
        "source_name",
        "target_doc",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 930,
      "code_text": "def get_mapped_subcontracting_order(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class PurchaseOrder(BuyingController):"
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef onload(self):\n\t\tsupplier_tds = frappe.db.get_value(\"Supplier\", self.supplier, \"tax_withholding_category\")\n\t\tself.set_onload(\"supplier_tds\", supplier_tds)\n\t\tself.set_onload(\"can_update_items\", self.can_update_items())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 266,
      "code_text": "\tdef set_tax_withholding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef validate_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 320,
      "code_text": "\tdef validate_minimum_order_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef validate_bom_for_subcontracting_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef validate_fg_item_for_subcontracting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 385,
      "code_text": "\tdef get_schedule_dates(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.material_request_item and not d.schedule_date:\n\t\t\t\td.schedule_date = frappe.db.get_value(\n\t\t\t\t\t\"Material Request Item\", d.material_request_item, \"schedule_date\"\n\t\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 393,
      "code_text": "\tdef get_last_purchase_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 419,
      "code_text": "\tdef check_on_hold_or_closed_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 430,
      "code_text": "\tdef update_ordered_qty(self, po_item_rows=None):",
      "args": [
        "self",
        "po_item_rows"
      ]
    },
    {
      "type": "method",
      "line_start": 445,
      "code_text": "\tdef check_modified_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef update_status(self, status):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 466,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 493,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 527,
      "code_text": "\tdef on_update(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 530,
      "code_text": "\tdef update_status_updater(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 556,
      "code_text": "\tdef update_status_updater_if_from_pp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 570,
      "code_text": "\tdef update_delivered_qty_in_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 584,
      "code_text": "\tdef has_drop_ship_item(self):\n\t\treturn any(d.delivered_by_supplier for d in self.items)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 587,
      "code_text": "\tdef is_against_so(self):\n\t\treturn any(d.sales_order for d in self.items if d.sales_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef is_against_pp(self):\n\t\treturn any(d.production_plan for d in self.items if d.production_plan)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 593,
      "code_text": "\tdef set_received_qty_for_drop_ship_items(self):\n\t\tfor item in self.items:\n\t\t\tif item.delivered_by_supplier == 1:\n\t\t\t\titem.received_qty = item.qty",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 598,
      "code_text": "\tdef update_reserved_qty_for_subcontract(self):\n\t\tif self.is_old_subcontracting_flow:\n\t\t\tfor d in self.supplied_items:\n\t\t\t\tif d.rm_item_code:\n\t\t\t\t\tstock_bin = get_bin(d.rm_item_code, d.reserve_warehouse)\n\t\t\t\t\tstock_bin.update_reserved_qty_for_sub_contracting(subcontract_doctype=\"Purchase Order\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 605,
      "code_text": "\tdef update_receiving_percentage(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 615,
      "code_text": "\tdef set_service_items_for_finished_goods(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef can_update_items(self) -> bool:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 645,
      "code_text": "\tdef update_ordered_qty_in_so_for_removed_items(self, removed_items):",
      "args": [
        "self",
        "removed_items"
      ]
    },
    {
      "type": "method",
      "line_start": 661,
      "code_text": "\tdef auto_create_subcontracting_order(self):\n\t\tif self.is_subcontracted and not self.is_old_subcontracting_flow:\n\t\t\tif frappe.db.get_single_value(\"Buying Settings\", \"auto_create_subcontracting_order\"):\n\t\t\t\tmake_subcontracting_order(self.name, save=True, notify=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 666,
      "code_text": "\tdef update_subcontracting_order_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 677,
      "code_text": "\tdef set_missing_values(self, for_validate=False):\n\t\ttds_category = frappe.db.get_value(\"Supplier\", self.supplier, \"tax_withholding_category\")\n\t\tif tds_category and not for_validate:\n\t\t\tself.set_onload(\"supplier_tds\", tds_category)\n\n\t\tsuper().set_missing_values(for_validate)",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "function",
      "line_start": 704,
      "code_text": "def close_or_unclose_purchase_orders(names, status):",
      "args": [
        "names",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 782,
      "code_text": "def make_purchase_invoice_from_portal(purchase_order_name):",
      "args": [
        "purchase_order_name"
      ]
    },
    {
      "type": "function",
      "line_start": 886,
      "code_text": "def make_inter_company_sales_order(source_name, target_doc=None):\n\tfrom erpnext.accounts.doctype.sales_invoice.sales_invoice import make_inter_company_transaction\n\n\treturn make_inter_company_transaction(\"Purchase Order\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 920,
      "code_text": "def is_po_fully_subcontracted(po_name):",
      "args": [
        "po_name"
      ]
    }
  ],
  "erpnext\\controllers\\stock_controller.py": [
    {
      "type": "function",
      "line_start": 1537,
      "code_text": "def get_data(raw_columns, raw_data):",
      "args": [
        "raw_columns",
        "raw_data"
      ]
    },
    {
      "type": "function",
      "line_start": 1529,
      "code_text": "def get_columns(raw_columns, fields):\n\treturn [\n\t\t{\"name\": d.get(\"label\"), \"editable\": False, \"width\": 110}\n\t\tfor d in raw_columns\n\t\tif not d.get(\"hidden\") and d.get(\"fieldname\") in fields\n\t]",
      "args": [
        "raw_columns",
        "fields"
      ]
    },
    {
      "type": "class",
      "line_start": 50,
      "code_text": "class StockController(AccountsController):"
    },
    {
      "type": "function",
      "line_start": 1747,
      "code_text": "def create_repost_item_valuation_entry(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1644,
      "code_text": "def future_sle_exists(args, sl_entries=None, allow_force_reposting=True):",
      "args": [
        "args",
        "sl_entries",
        "allow_force_reposting"
      ]
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class QualityInspectionRejectedError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1768,
      "code_text": "def create_item_wise_repost_entries(\n\tvoucher_type, voucher_no, allow_zero_rate=False, via_landed_cost_voucher=False\n):",
      "args": [
        "voucher_type",
        "voucher_no",
        "allow_zero_rate",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "class",
      "line_start": 34,
      "code_text": "class QualityInspectionRequiredError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 42,
      "code_text": "class QualityInspectionNotSubmittedError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 46,
      "code_text": "class BatchExpiredError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1801,
      "code_text": "def make_bundle_for_material_transfer(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef reset_conversion_factor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef validate_items_exist(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef validate_duplicate_serial_and_batch_bundle(self, table_name):",
      "args": [
        "self",
        "table_name"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef make_gl_entries(self, gl_entries=None, from_repost=False, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "gl_entries",
        "from_repost",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef validate_serialized_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef clean_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef make_bundle_using_old_serial_batch_fields(self, table_name=None, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "table_name",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 260,
      "code_text": "\tdef get_parent_details_for_packed_items(self):\n\t\tparent_details = frappe._dict()\n\t\tfor row in self.get(\"items\"):\n\t\t\tparent_details[row.name] = row\n\n\t\treturn parent_details",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 267,
      "code_text": "\tdef make_bundle_for_sales_purchase_return(self, table_name=None):",
      "args": [
        "self",
        "table_name"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef make_bundle_for_rejected_qty(self, table_name=None):",
      "args": [
        "self",
        "table_name"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef make_bundle_for_non_rejected_qty(self, table_name):",
      "args": [
        "self",
        "table_name"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef get_reference_ids(self, table_name, qty_field=None, bundle_field=None) -> tuple[str, list[str]]:",
      "args": [
        "self",
        "table_name",
        "qty_field",
        "bundle_field"
      ]
    },
    {
      "type": "method",
      "line_start": 390,
      "code_text": "\tdef is_serial_batch_item(self, item_code) -> bool:",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 401,
      "code_text": "\tdef update_bundle_details(self, bundle_details, table_name, row, is_rejected=False, parent_details=None):",
      "args": [
        "self",
        "bundle_details",
        "table_name",
        "row",
        "is_rejected",
        "parent_details"
      ]
    },
    {
      "type": "method",
      "line_start": 460,
      "code_text": "\tdef create_serial_batch_bundle(self, bundle_details, row):",
      "args": [
        "self",
        "bundle_details",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef validate_serial_nos_and_batches_with_bundle(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 509,
      "code_text": "\tdef set_use_serial_batch_fields(self):\n\t\tif frappe.db.get_single_value(\"Stock Settings\", \"use_serial_batch_fields\"):\n\t\t\tfor row in self.items:\n\t\t\t\trow.use_serial_batch_fields = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 514,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None, default_expense_account=None, default_cost_center=None):",
      "args": [
        "self",
        "warehouse_account",
        "default_expense_account",
        "default_cost_center"
      ]
    },
    {
      "type": "method",
      "line_start": 639,
      "code_text": "\tdef get_debit_field_precision(self):\n\t\tif not frappe.flags.debit_field_precision:\n\t\t\tfrappe.flags.debit_field_precision = frappe.get_precision(\"GL Entry\", \"debit_in_account_currency\")\n\n\t\treturn frappe.flags.debit_field_precision",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 645,
      "code_text": "\tdef get_voucher_details(self, default_expense_account, default_cost_center, sle_map):",
      "args": [
        "self",
        "default_expense_account",
        "default_cost_center",
        "sle_map"
      ]
    },
    {
      "type": "method",
      "line_start": 674,
      "code_text": "\tdef get_items_and_warehouses(self) -> tuple[list[str], list[str]]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 697,
      "code_text": "\tdef get_stock_ledger_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 729,
      "code_text": "\tdef check_expense_account(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 767,
      "code_text": "\tdef delete_auto_created_batches(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 796,
      "code_text": "\tdef set_serial_and_batch_bundle(self, table_name=None, ignore_validate=False):",
      "args": [
        "self",
        "table_name",
        "ignore_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 813,
      "code_text": "\tdef make_package_for_transfer(\n\t\tself, serial_and_batch_bundle, warehouse, type_of_transaction=None, do_not_submit=None\n\t):",
      "args": [
        "self",
        "serial_and_batch_bundle",
        "warehouse",
        "type_of_transaction",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 827,
      "code_text": "\tdef get_sl_entries(self, d, args):",
      "args": [
        "self",
        "d",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 864,
      "code_text": "\tdef update_inventory_dimensions(self, row, sl_dict) -> None:",
      "args": [
        "self",
        "row",
        "sl_dict"
      ]
    },
    {
      "type": "method",
      "line_start": 942,
      "code_text": "\tdef make_sl_entries(self, sl_entries, allow_negative_stock=False, via_landed_cost_voucher=False):\n\t\tfrom erpnext.stock.serial_batch_bundle import update_batch_qty\n\t\tfrom erpnext.stock.stock_ledger import make_sl_entries\n\n\t\tmake_sl_entries(sl_entries, allow_negative_stock, via_landed_cost_voucher)\n\t\tupdate_batch_qty(self.doctype, self.name, via_landed_cost_voucher=via_landed_cost_voucher)",
      "args": [
        "self",
        "sl_entries",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 949,
      "code_text": "\tdef make_gl_entries_on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 958,
      "code_text": "\tdef get_serialized_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 970,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 991,
      "code_text": "\tdef update_billing_percentage(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 1014,
      "code_text": "\tdef validate_inspection(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1051,
      "code_text": "\tdef validate_qi_presence(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 1062,
      "code_text": "\tdef validate_qi_submission(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 1077,
      "code_text": "\tdef validate_qi_rejection(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 1092,
      "code_text": "\tdef update_blanket_order(self):\n\t\tblanket_orders = list(set([d.blanket_order for d in self.items if d.blanket_order]))\n\t\tfor blanket_order in blanket_orders:\n\t\t\tfrappe.get_doc(\"Blanket Order\", blanket_order).update_ordered_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1097,
      "code_text": "\tdef validate_customer_provided_item(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\t# Customer Provided parts will have zero valuation rate\n\t\t\tif frappe.get_cached_value(\"Item\", d.item_code, \"is_customer_provided_item\"):\n\t\t\t\td.allow_zero_valuation_rate = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1103,
      "code_text": "\tdef set_rate_of_stock_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1116,
      "code_text": "\tdef validate_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1128,
      "code_text": "\tdef validate_internal_transfer_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1136,
      "code_text": "\tdef validate_in_transit_warehouses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1153,
      "code_text": "\tdef validate_multi_currency(self):\n\t\tif self.currency != self.company_currency:\n\t\t\tfrappe.throw(_(\"Internal transfers can only be done in company's default currency\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1157,
      "code_text": "\tdef validate_packed_items(self):\n\t\tif self.doctype in (\"Sales Invoice\", \"Delivery Note Item\") and self.get(\"packed_items\"):\n\t\t\tfrappe.throw(_(\"Packed Items cannot be transferred internally\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1161,
      "code_text": "\tdef validate_internal_transfer_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1204,
      "code_text": "\tdef get_item_wise_inter_transfer_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1234,
      "code_text": "\tdef get_item_wise_inter_received_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1273,
      "code_text": "\tdef validate_putaway_capacity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1325,
      "code_text": "\tdef prepare_over_receipt_message(self, rule, values):",
      "args": [
        "self",
        "rule",
        "values"
      ]
    },
    {
      "type": "method",
      "line_start": 1337,
      "code_text": "\tdef repost_future_sle_and_gle(self, force=False, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "force",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 1365,
      "code_text": "\tdef add_gl_entry(\n\t\tself,\n\t\tgl_entries,\n\t\taccount,\n\t\tcost_center,\n\t\tdebit,\n\t\tcredit,\n\t\tremarks,\n\t\tagainst_account,\n\t\tdebit_in_account_currency=None,\n\t\tcredit_in_account_currency=None,\n\t\taccount_currency=None,\n\t\tproject=None,\n\t\tvoucher_detail_no=None,\n\t\titem=None,\n\t\tposting_date=None,\n\t):",
      "args": [
        "self",
        "gl_entries",
        "account",
        "cost_center",
        "debit",
        "credit",
        "remarks",
        "against_account",
        "debit_in_account_currency",
        "credit_in_account_currency",
        "account_currency",
        "project",
        "voucher_detail_no",
        "item",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 1407,
      "code_text": "def show_accounting_ledger_preview(company, doctype, docname):",
      "args": [
        "company",
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 1420,
      "code_text": "def show_stock_ledger_preview(company, doctype, docname):",
      "args": [
        "company",
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 1435,
      "code_text": "def get_accounting_ledger_preview(doc, filters):",
      "args": [
        "doc",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1467,
      "code_text": "def get_stock_ledger_preview(doc, filters):",
      "args": [
        "doc",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1507,
      "code_text": "def get_sl_entries_for_preview(doctype, docname, fields):",
      "args": [
        "doctype",
        "docname",
        "fields"
      ]
    },
    {
      "type": "function",
      "line_start": 1525,
      "code_text": "def get_gl_entries_for_preview(doctype, docname, fields):\n\treturn frappe.get_all(\"GL Entry\", filters={\"voucher_type\": doctype, \"voucher_no\": docname}, fields=fields)",
      "args": [
        "doctype",
        "docname",
        "fields"
      ]
    },
    {
      "type": "function",
      "line_start": 1549,
      "code_text": "def repost_required_for_queue(doc: StockController) -> bool:",
      "args": [
        "doc: StockController"
      ]
    },
    {
      "type": "function",
      "line_start": 1579,
      "code_text": "def check_item_quality_inspection(doctype, items):",
      "args": [
        "doctype",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 1601,
      "code_text": "def make_quality_inspections(doctype, docname, items, inspection_type):",
      "args": [
        "doctype",
        "docname",
        "items",
        "inspection_type"
      ]
    },
    {
      "type": "function",
      "line_start": 1638,
      "code_text": "def is_reposting_pending():\n\treturn frappe.db.exists(\n\t\t\"Repost Item Valuation\", {\"docstatus\": 1, \"status\": [\"in\", [\"Queued\", \"In Progress\"]]}\n\t)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1692,
      "code_text": "def validate_future_sle_not_exists(args, key, sl_entries=None):",
      "args": [
        "args",
        "key",
        "sl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 1707,
      "code_text": "def get_cached_data(args, key):",
      "args": [
        "args",
        "key"
      ]
    },
    {
      "type": "function",
      "line_start": 1720,
      "code_text": "def get_sle_entries_against_voucher(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1729,
      "code_text": "def get_conditions_to_validate_future_sle(sl_entries):",
      "args": [
        "sl_entries"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ageing\\stock_ageing.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def execute(filters: Filters = None) -> tuple:",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_columns(filters: Filters) -> list[dict]:",
      "args": [
        "filters: Filters"
      ]
    },
    {
      "type": "function",
      "line_start": 183,
      "code_text": "def get_chart_data(data: list, filters: Filters) -> dict:",
      "args": [
        "data: list",
        "filters: Filters"
      ]
    },
    {
      "type": "class",
      "line_start": 226,
      "code_text": "class FIFOSlots:"
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def format_report_data(filters: Filters, item_details: dict, to_date: str) -> list[dict]:",
      "args": [
        "filters: Filters",
        "item_details: dict",
        "to_date: str"
      ]
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def get_average_age(fifo_queue: list, to_date: str) -> float:",
      "args": [
        "fifo_queue: list",
        "to_date: str"
      ]
    },
    {
      "type": "function",
      "line_start": 222,
      "code_text": "def add_column(range_columns: list, label: str, fieldname: str, fieldtype: str = \"Float\", width: int = 140):\n\trange_columns.append(dict(label=label, fieldname=fieldname, fieldtype=fieldtype, width=width))",
      "args": [
        "range_columns: list",
        "label: str",
        "fieldname: str",
        "fieldtype: str",
        "width: int"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def check_and_replace_valuations_if_moving_average(range_values, item_valuation_method, valuation_rate):",
      "args": [
        "range_values",
        "item_valuation_method",
        "valuation_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 103,
      "code_text": "def get_range_age(filters: Filters, fifo_queue: list, to_date: str, item_dict: dict) -> list:",
      "args": [
        "filters: Filters",
        "fifo_queue: list",
        "to_date: str",
        "item_dict: dict"
      ]
    },
    {
      "type": "function",
      "line_start": 207,
      "code_text": "def setup_ageing_columns(filters: Filters, range_columns: list):",
      "args": [
        "filters: Filters",
        "range_columns: list"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef __init__(self, filters: dict | None = None, sle: list | None = None):\n\t\tself.item_details = {}\n\t\tself.transferred_item_details = {}\n\t\tself.serial_no_batch_purchase_details = {}\n\t\tself.filters = filters\n\t\tself.sle = sle",
      "args": [
        "self",
        "filters",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 236,
      "code_text": "\tdef generate(self) -> dict:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 292,
      "code_text": "\tdef __init_key_stores(self, row: dict) -> tuple:",
      "args": [
        "self",
        "row: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 304,
      "code_text": "\tdef __compute_incoming_stock(self, row: dict, fifo_queue: list, transfer_key: tuple, serial_nos: list):",
      "args": [
        "self",
        "row: dict",
        "fifo_queue: list",
        "transfer_key: tuple",
        "serial_nos: list"
      ]
    },
    {
      "type": "method",
      "line_start": 336,
      "code_text": "\tdef __compute_outgoing_stock(self, row: dict, fifo_queue: list, transfer_key: tuple, serial_nos: list):",
      "args": [
        "self",
        "row: dict",
        "fifo_queue: list",
        "transfer_key: tuple",
        "serial_nos: list"
      ]
    },
    {
      "type": "method",
      "line_start": 370,
      "code_text": "\tdef __adjust_incoming_transfer_qty(self, transfer_data: dict, fifo_queue: list, row: dict):",
      "args": [
        "self",
        "transfer_data: dict",
        "fifo_queue: list",
        "row: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 403,
      "code_text": "\tdef __update_balances(self, row: dict, key: tuple | str):",
      "args": [
        "self",
        "row: dict",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 414,
      "code_text": "\tdef __aggregate_details_by_item(self, wh_wise_data: dict) -> dict:",
      "args": [
        "self",
        "wh_wise_data: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 438,
      "code_text": "\tdef __get_stock_ledger_entries(self) -> Iterator[dict]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 491,
      "code_text": "\tdef __get_bundle_wise_serial_nos(self) -> dict:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 521,
      "code_text": "\tdef __get_item_query(self) -> str:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 543,
      "code_text": "\tdef __get_warehouse_conditions(self, sle, sle_query) -> str:",
      "args": [
        "self",
        "sle",
        "sle_query"
      ]
    }
  ],
  "erpnext\\accounts\\report\\financial_statements.py": [
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def get_data(\n\tcompany,\n\troot_type,\n\tbalance_must_be,\n\tperiod_list,\n\tfilters=None,\n\taccumulated_values=1,\n\tonly_current_fiscal_year=True,\n\tignore_closing_entries=False,\n\tignore_accumulated_values_for_fy=False,\n\ttotal=True,\n):",
      "args": [
        "company",
        "root_type",
        "balance_must_be",
        "period_list",
        "filters",
        "accumulated_values",
        "only_current_fiscal_year",
        "ignore_closing_entries",
        "ignore_accumulated_values_for_fy",
        "total"
      ]
    },
    {
      "type": "function",
      "line_start": 642,
      "code_text": "def get_columns(periodicity, period_list, accumulated_values=1, company=None, cash_flow=False):",
      "args": [
        "periodicity",
        "period_list",
        "accumulated_values",
        "company",
        "cash_flow"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def get_period_list(\n\tfrom_fiscal_year,\n\tto_fiscal_year,\n\tperiod_start_date,\n\tperiod_end_date,\n\tfilter_based_on,\n\tperiodicity,\n\taccumulated_values=False,\n\tcompany=None,\n\treset_period_on_fy_change=True,\n\tignore_fiscal_year=False,\n):",
      "args": [
        "from_fiscal_year",
        "to_fiscal_year",
        "period_start_date",
        "period_end_date",
        "filter_based_on",
        "periodicity",
        "accumulated_values",
        "company",
        "reset_period_on_fy_change",
        "ignore_fiscal_year"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def prepare_data(accounts, balance_must_be, period_list, company_currency, accumulated_values):",
      "args": [
        "accounts",
        "balance_must_be",
        "period_list",
        "company_currency",
        "accumulated_values"
      ]
    },
    {
      "type": "function",
      "line_start": 255,
      "code_text": "def accumulate_values_into_parents(accounts, accounts_by_name, period_list):",
      "args": [
        "accounts",
        "accounts_by_name",
        "period_list"
      ]
    },
    {
      "type": "function",
      "line_start": 320,
      "code_text": "def filter_out_zero_value_rows(data, parent_children_map, show_zero_values=False):",
      "args": [
        "data",
        "parent_children_map",
        "show_zero_values"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def filter_accounts(accounts, depth=20):",
      "args": [
        "accounts",
        "depth"
      ]
    },
    {
      "type": "function",
      "line_start": 421,
      "code_text": "def set_gl_entries_by_account(\n\tcompany,\n\tfrom_date,\n\tto_date,\n\tfilters,\n\tgl_entries_by_account,\n\troot_lft=None,\n\troot_rgt=None,\n\troot_type=None,\n\tignore_closing_entries=False,\n\tignore_opening_entries=False,\n\tgroup_by_account=False,\n):",
      "args": [
        "company",
        "from_date",
        "to_date",
        "filters",
        "gl_entries_by_account",
        "root_lft",
        "root_rgt",
        "root_type",
        "ignore_closing_entries",
        "ignore_opening_entries",
        "group_by_account"
      ]
    },
    {
      "type": "function",
      "line_start": 123,
      "code_text": "def validate_fiscal_year(fiscal_year, from_fiscal_year, to_fiscal_year):\n\tif not fiscal_year.get(\"year_start_date\") or not fiscal_year.get(\"year_end_date\"):\n\t\tfrappe.throw(_(\"Start Year and End Year are mandatory\"))\n\n\tif getdate(fiscal_year.get(\"year_end_date\")) < getdate(fiscal_year.get(\"year_start_date\")):\n\t\tfrappe.throw(_(\"End Year cannot be before Start Year\"))",
      "args": [
        "fiscal_year",
        "from_fiscal_year",
        "to_fiscal_year"
      ]
    },
    {
      "type": "function",
      "line_start": 225,
      "code_text": "def calculate_values(\n\taccounts_by_name,\n\tgl_entries_by_account,\n\tperiod_list,\n\taccumulated_values,\n\tignore_accumulated_values_for_fy,\n):",
      "args": [
        "accounts_by_name",
        "gl_entries_by_account",
        "period_list",
        "accumulated_values",
        "ignore_accumulated_values_for_fy"
      ]
    },
    {
      "type": "function",
      "line_start": 337,
      "code_text": "def add_total_row(out, root_type, balance_must_be, period_list, company_currency):",
      "args": [
        "out",
        "root_type",
        "balance_must_be",
        "period_list",
        "company_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 626,
      "code_text": "def get_cost_centers_with_children(cost_centers):",
      "args": [
        "cost_centers"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def get_fiscal_year_data(from_fiscal_year, to_fiscal_year):",
      "args": [
        "from_fiscal_year",
        "to_fiscal_year"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def get_label(periodicity, from_date, to_date):",
      "args": [
        "periodicity",
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "function",
      "line_start": 397,
      "code_text": "def sort_accounts(accounts, is_root=False, key=\"name\"):",
      "args": [
        "accounts",
        "is_root",
        "key"
      ]
    },
    {
      "type": "function",
      "line_start": 687,
      "code_text": "def get_filtered_list_for_consolidated_report(filters, period_list):",
      "args": [
        "filters",
        "period_list"
      ]
    },
    {
      "type": "function",
      "line_start": 362,
      "code_text": "def get_accounts(company, root_type):",
      "args": [
        "company",
        "root_type"
      ]
    },
    {
      "type": "function",
      "line_start": 491,
      "code_text": "def get_accounting_entries(\n\tdoctype,\n\tfrom_date,\n\tto_date,\n\tfilters,\n\troot_lft=None,\n\troot_rgt=None,\n\troot_type=None,\n\tignore_closing_entries=None,\n\tperiod_closing_voucher=None,\n\tignore_opening_entries=False,\n\tgroup_by_account=False,\n):",
      "args": [
        "doctype",
        "from_date",
        "to_date",
        "filters",
        "root_lft",
        "root_rgt",
        "root_type",
        "ignore_closing_entries",
        "period_closing_voucher",
        "ignore_opening_entries",
        "group_by_account"
      ]
    },
    {
      "type": "function",
      "line_start": 696,
      "code_text": "def compute_growth_view_data(data, columns):",
      "args": [
        "data",
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def validate_dates(from_date, to_date):\n\tif not from_date or not to_date:\n\t\tfrappe.throw(_(\"From Date and To Date are mandatory\"))\n\n\tif to_date < from_date:\n\t\tfrappe.throw(_(\"To Date cannot be less than From Date\"))",
      "args": [
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def get_months(start_date, end_date):\n\tdiff = (12 * end_date.year + end_date.month) - (12 * start_date.year + start_date.month)\n\treturn diff + 1",
      "args": [
        "start_date",
        "end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 218,
      "code_text": "def get_appropriate_currency(company, filters=None):\n\tif filters and filters.get(\"presentation_currency\"):\n\t\treturn filters[\"presentation_currency\"]\n\telse:\n\t\treturn frappe.get_cached_value(\"Company\", company, \"default_currency\")",
      "args": [
        "company",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 557,
      "code_text": "def get_account_filter_query(root_lft, root_rgt, root_type, gl_entry):",
      "args": [
        "root_lft",
        "root_rgt",
        "root_type",
        "gl_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 571,
      "code_text": "def apply_additional_conditions(doctype, query, from_date, ignore_closing_entries, filters):",
      "args": [
        "doctype",
        "query",
        "from_date",
        "ignore_closing_entries",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 722,
      "code_text": "def compute_margin_view_data(data, columns, accumulated_values):",
      "args": [
        "data",
        "columns",
        "accumulated_values"
      ]
    }
  ],
  "erpnext\\accounts\\report\\sales_register\\sales_register.py": [
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def execute(filters=None):\n\treturn _execute(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 170,
      "code_text": "def get_columns(invoice_list, additional_table_columns, include_payments=False):",
      "args": [
        "invoice_list",
        "additional_table_columns",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 472,
      "code_text": "def get_conditions(filters, query, doctype):",
      "args": [
        "filters",
        "query",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 416,
      "code_text": "def get_invoices(filters, additional_query_columns):",
      "args": [
        "filters",
        "additional_query_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 621,
      "code_text": "def get_mode_of_payments(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def _execute(filters, additional_table_columns=None):",
      "args": [
        "filters",
        "additional_table_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 485,
      "code_text": "def get_payments(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 339,
      "code_text": "def get_account_columns(invoice_list, include_payments):",
      "args": [
        "invoice_list",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 515,
      "code_text": "def get_internal_invoice_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 533,
      "code_text": "def get_invoice_tax_map(invoice_list, invoice_income_map, income_accounts, include_payments=False):",
      "args": [
        "invoice_list",
        "invoice_income_map",
        "income_accounts",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 498,
      "code_text": "def get_invoice_income_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 561,
      "code_text": "def get_invoice_so_dn_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 596,
      "code_text": "def get_invoice_cc_wh_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    }
  ],
  "erpnext\\accounts\\report\\payment_period_based_on_invoice_date\\payment_period_based_on_invoice_date.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 154,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def get_invoice_posting_date_map(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\purchase_register\\purchase_register.py": [
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def execute(filters=None):\n\treturn _execute(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 154,
      "code_text": "def get_columns(invoice_list, additional_table_columns, include_payments=False):",
      "args": [
        "invoice_list",
        "additional_table_columns",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 436,
      "code_text": "def get_conditions(filters, query, doctype):",
      "args": [
        "filters",
        "query",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 378,
      "code_text": "def get_invoices(filters, additional_query_columns):",
      "args": [
        "filters",
        "additional_query_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def _execute(filters=None, additional_table_columns=None):",
      "args": [
        "filters",
        "additional_table_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 567,
      "code_text": "def get_account_details(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 445,
      "code_text": "def get_payments(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 300,
      "code_text": "def get_account_columns(invoice_list, include_payments):",
      "args": [
        "invoice_list",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 479,
      "code_text": "def get_internal_invoice_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 497,
      "code_text": "def get_invoice_tax_map(invoice_list, invoice_expense_map, expense_accounts, include_payments=False):",
      "args": [
        "invoice_list",
        "invoice_expense_map",
        "expense_accounts",
        "include_payments"
      ]
    },
    {
      "type": "function",
      "line_start": 458,
      "code_text": "def get_invoice_expense_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 529,
      "code_text": "def get_invoice_po_pr_map(invoice_list):",
      "args": [
        "invoice_list"
      ]
    }
  ],
  "erpnext\\accounts\\report\\pos_register\\pos_register.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 170,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_pos_entries(filters, group_by_field):",
      "args": [
        "filters",
        "group_by_field"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def concat_mode_of_payments(pos_entries):\n\tmode_of_payments = get_mode_of_payments(set(d.pos_invoice for d in pos_entries))\n\tfor entry in pos_entries:\n\t\tif mode_of_payments.get(entry.pos_invoice):\n\t\t\tentry.mode_of_payment = \", \".join(mode_of_payments.get(entry.pos_invoice, []))",
      "args": [
        "pos_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 91,
      "code_text": "def add_subtotal_row(data, group_invoices, group_by_field, group_by_value):",
      "args": [
        "data",
        "group_invoices",
        "group_by_field",
        "group_by_value"
      ]
    },
    {
      "type": "function",
      "line_start": 155,
      "code_text": "def get_group_by_field(group_by):",
      "args": [
        "group_by"
      ]
    }
  ],
  "erpnext\\stock\\report\\batch_wise_balance_history\\batch_wise_balance_history.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 247,
      "code_text": "def get_item_details(filters):\n\titem_map = {}\n\tfor d in (frappe.qb.from_(\"Item\").select(\"name\", \"item_name\", \"description\", \"stock_uom\")).run(as_dict=1):\n\t\titem_map.setdefault(d.name, d)\n\n\treturn item_map",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_stock_ledger_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def get_stock_closing_balance(stk_cl_obj, filters):",
      "args": [
        "stk_cl_obj",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 118,
      "code_text": "def get_stock_ledger_entries_for_batch_no(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 167,
      "code_text": "def get_stock_ledger_entries_for_batch_bundle(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 218,
      "code_text": "def get_item_warehouse_batch_map(filters, float_precision):",
      "args": [
        "filters",
        "float_precision"
      ]
    }
  ],
  "erpnext\\selling\\report\\payment_terms_status_for_sales_order\\payment_terms_status_for_sales_order.py": [
    {
      "type": "function",
      "line_start": 305,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 126,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_descendants_of(doctype, group_name):",
      "args": [
        "doctype",
        "group_name"
      ]
    },
    {
      "type": "function",
      "line_start": 266,
      "code_text": "def prepare_chart(s_orders):",
      "args": [
        "s_orders"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_customers_or_items(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 140,
      "code_text": "def build_filter_criterions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 173,
      "code_text": "def get_so_with_invoices(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def set_payment_terms_statuses(sales_orders, invoices, filters):",
      "args": [
        "sales_orders",
        "invoices",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 287,
      "code_text": "def filter_on_calculated_status(filters, sales_orders):\n\tif filters.status and sales_orders:\n\t\treturn [x for x in sales_orders if x.status in filters.status]\n\treturn sales_orders",
      "args": [
        "filters",
        "sales_orders"
      ]
    },
    {
      "type": "function",
      "line_start": 293,
      "code_text": "def filter_for_immediate_upcoming_term(filters, sales_orders):",
      "args": [
        "filters",
        "sales_orders"
      ]
    }
  ],
  "erpnext\\accounts\\report\\sales_payment_summary\\sales_payment_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 103,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 211,
      "code_text": "def get_invoices(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 177,
      "code_text": "def get_mode_of_payments(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 222,
      "code_text": "def get_mode_of_payment_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_pos_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_pos_sales_payment_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_sales_payment_data(filters, columns):",
      "args": [
        "filters",
        "columns"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_pos_invoice_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def get_sales_invoice_data(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\item_prices\\item_prices.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 46,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_item_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 194,
      "code_text": "def get_valuation_rate():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_price_list():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 135,
      "code_text": "def get_last_purchase_rate():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def get_item_bom_rate():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withholding_category\\test_tax_withholding_category.py": [
    {
      "type": "function",
      "line_start": 938,
      "code_text": "def create_sales_invoice(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 905,
      "code_text": "def create_purchase_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 971,
      "code_text": "def create_payment_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 871,
      "code_text": "def create_purchase_invoice(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1183,
      "code_text": "def create_tax_withholding_category(\n\tcategory_name,\n\trate,\n\tfrom_date,\n\tto_date,\n\taccount,\n\tsingle_threshold=0,\n\tcumulative_threshold=0,\n\tround_off_tax_amount=0,\n\tconsider_party_ledger_amount=0,\n\ttax_on_excess_amount=0,\n):",
      "args": [
        "category_name",
        "rate",
        "from_date",
        "to_date",
        "account",
        "single_threshold",
        "cumulative_threshold",
        "round_off_tax_amount",
        "consider_party_ledger_amount",
        "tax_on_excess_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 997,
      "code_text": "def create_records():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1218,
      "code_text": "def create_lower_deduction_certificate(\n\tsupplier, tax_withholding_category, tax_rate, certificate_no, limit, valid_from=None, valid_upto=None\n):",
      "args": [
        "supplier",
        "tax_withholding_category",
        "tax_rate",
        "certificate_no",
        "limit",
        "valid_from",
        "valid_upto"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class UnitTestTaxWithholdingCategory(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestTaxWithholdingCategory(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\t# create relevant supplier, etc\n\t\tcreate_records()\n\t\tcreate_tax_withholding_category_records()\n\t\tmake_pan_no_field()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_cumulative_threshold_tds(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef test_tds_with_account_changed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_single_threshold_tds(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef test_tax_withholding_category_checks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef test_cumulative_threshold_with_party_ledger_amount_on_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef test_cumulative_threshold_with_tax_on_excess_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef test_cumulative_threshold_tcs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 297,
      "code_text": "\tdef test_tcs_on_unallocated_advance_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 351,
      "code_text": "\tdef test_tcs_on_allocated_advance_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 391,
      "code_text": "\tdef test_tds_calculation_on_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 425,
      "code_text": "\tdef test_tds_calculation_on_net_total_partial_tds(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 501,
      "code_text": "\tdef test_tds_deduction_for_po_via_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 535,
      "code_text": "\tdef test_multi_category_single_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 560,
      "code_text": "\tdef test_tax_withholding_category_voucher_display(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 613,
      "code_text": "\tdef test_tax_withholding_via_payment_entry_for_advances(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 645,
      "code_text": "\tdef test_lower_deduction_certificate_application(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef test_ldc_at_0_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 722,
      "code_text": "\tdef set_previous_fy_and_tax_category(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 764,
      "code_text": "\tdef test_tds_across_fiscal_year(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 850,
      "code_text": "def cancel_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1080,
      "code_text": "def create_tax_withholding_category_records():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1239,
      "code_text": "def make_pan_no_field():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice\\test_sales_invoice.py": [
    {
      "type": "function",
      "line_start": 4423,
      "code_text": "def create_sales_invoice(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 4401,
      "code_text": "def check_gl_entries(doc, voucher_no, expected_gle, posting_date, voucher_type=\"Sales Invoice\"):",
      "args": [
        "doc",
        "voucher_no",
        "expected_gle",
        "posting_date",
        "voucher_type"
      ]
    },
    {
      "type": "function",
      "line_start": 4508,
      "code_text": "def create_sales_invoice_against_cost_center(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 4390,
      "code_text": "def set_advance_flag(company, flag, default_account):",
      "args": [
        "company",
        "flag",
        "default_account"
      ]
    },
    {
      "type": "function",
      "line_start": 4573,
      "code_text": "def get_taxes_and_charges():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 4643,
      "code_text": "def create_internal_supplier(supplier_name, represents_company, allowed_to_interact_with):",
      "args": [
        "supplier_name",
        "represents_company",
        "allowed_to_interact_with"
      ]
    },
    {
      "type": "function",
      "line_start": 4554,
      "code_text": "def get_outstanding_amount(against_voucher_type, against_voucher, account, party, party_type):",
      "args": [
        "against_voucher_type",
        "against_voucher",
        "account",
        "party",
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 4677,
      "code_text": "def add_taxes(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 50,
      "code_text": "class UnitTestSalesInvoice(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 59,
      "code_text": "class TestSalesInvoice(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef make(self):\n\t\tw = frappe.copy_doc(self.globalTestRecords[\"Sales Invoice\"][0])\n\t\tw.is_pos = 0\n\t\tw.insert()\n\t\tw.submit()\n\t\treturn w",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.enterClassContext(cls.change_settings(\"Selling Settings\", validate_selling_price=0))\n\t\tunlink_payment_on_cancel_of_invoice()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef tearDownClass(self):\n\t\tunlink_payment_on_cancel_of_invoice(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef test_sales_invoice_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef test_timestamp_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef test_sales_invoice_change_naming_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_add_terms_after_save(self):\n\t\tsi = frappe.copy_doc(self.globalTestRecords[\"Sales Invoice\"][2])\n\t\tsi.insert()\n\n\t\tself.assertTrue(si.payment_schedule)\n\t\tself.assertEqual(getdate(si.payment_schedule[0].due_date), getdate(si.due_date))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef test_sales_invoice_calculation_base_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef test_payment_entry_unlink_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef test_payment_entry_unlink_against_standalone_credit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef test_sales_invoice_calculation_export_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef test_sales_invoice_with_discount_and_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 372,
      "code_text": "\tdef test_sales_invoice_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 453,
      "code_text": "\tdef test_discount_amount_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 516,
      "code_text": "\tdef test_tax_calculation_with_multiple_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 544,
      "code_text": "\tdef test_tax_calculation_with_item_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 610,
      "code_text": "\tdef test_tax_calculation_with_multiple_items_and_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 643,
      "code_text": "\tdef test_inclusive_rate_validations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 660,
      "code_text": "\tdef test_sales_invoice_calculation_base_currency_with_tax_inclusive_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 734,
      "code_text": "\tdef test_sales_invoice_calculation_export_currency_with_tax_inclusive_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 820,
      "code_text": "\tdef test_outstanding(self):\n\t\tw = self.make()\n\t\tself.assertEqual(w.outstanding_amount, w.base_rounded_total)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 824,
      "code_text": "\tdef test_rounded_total_with_cash_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 846,
      "code_text": "\tdef test_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 865,
      "code_text": "\tdef test_outstanding_on_cost_center_allocation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 913,
      "code_text": "\tdef test_sales_invoice_gl_entry_without_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 954,
      "code_text": "\tdef test_pos_gl_entry_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1002,
      "code_text": "\tdef test_pos_returns_with_repayment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1032,
      "code_text": "\tdef test_pos_change_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1075,
      "code_text": "\tdef test_auto_write_off_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1118,
      "code_text": "\tdef test_ledger_entries_of_return_pos_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1156,
      "code_text": "\tdef test_pos_with_no_gl_entry_for_change_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1209,
      "code_text": "\tdef validate_pos_gl_entry(self, si, pos, cash_amount, validate_without_change_gle=False):",
      "args": [
        "self",
        "si",
        "pos",
        "cash_amount",
        "validate_without_change_gle"
      ]
    },
    {
      "type": "method",
      "line_start": 1268,
      "code_text": "\tdef test_bin_details_of_packed_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1308,
      "code_text": "\tdef test_pos_si_without_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1321,
      "code_text": "\tdef test_sales_invoice_gl_entry_with_perpetual_inventory_no_item_code(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1350,
      "code_text": "\tdef test_sales_invoice_gl_entry_with_perpetual_inventory_non_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1374,
      "code_text": "\tdef _insert_purchase_receipt(self):\n\t\tpr = frappe.copy_doc(self.globalTestRecords[\"Purchase Receipt\"][0])\n\t\tpr.naming_series = \"_T-Purchase Receipt-\"\n\t\tpr.insert()\n\t\tpr.submit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1380,
      "code_text": "\tdef _insert_delivery_note(self):\n\t\tdn = frappe.copy_doc(self.globalTestRecords[\"Delivery Note\"][0])\n\t\tdn.naming_series = \"_T-Delivery Note-\"\n\t\tdn.insert()\n\t\tdn.submit()\n\t\treturn dn",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1390,
      "code_text": "\tdef test_sales_invoice_with_advance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1433,
      "code_text": "\tdef test_serialized(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1469,
      "code_text": "\tdef test_serialized_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1480,
      "code_text": "\tdef test_serial_numbers_against_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1502,
      "code_text": "\tdef test_return_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1590,
      "code_text": "\tdef test_zero_qty_return_invoice_with_stock_effect(self):\n\t\tcr_note = create_sales_invoice(qty=-1, rate=300, is_return=1, do_not_submit=True)\n\t\tcr_note.update_stock = True\n\t\tcr_note.items[0].qty = 0\n\t\tself.assertRaises(frappe.ValidationError, cr_note.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1596,
      "code_text": "\tdef test_return_invoice_with_account_mismatch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1609,
      "code_text": "\tdef test_gle_made_when_asset_is_returned(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1641,
      "code_text": "\tdef test_incoming_rate_for_stand_alone_credit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1666,
      "code_text": "\tdef test_discount_on_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1730,
      "code_text": "\tdef test_multi_currency_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1787,
      "code_text": "\tdef test_gle_in_transaction_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1830,
      "code_text": "\tdef test_invalid_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1883,
      "code_text": "\tdef test_create_so_with_margin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1894,
      "code_text": "\tdef test_outstanding_amount_after_advance_jv_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1934,
      "code_text": "\tdef test_outstanding_amount_after_advance_payment_entry_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2016,
      "code_text": "\tdef test_multiple_uom_in_selling(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2053,
      "code_text": "\tdef test_item_wise_tax_breakup(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2077,
      "code_text": "\tdef create_si_to_test_tax_breakup(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2117,
      "code_text": "\tdef test_company_monthly_sales(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2130,
      "code_text": "\tdef test_rounding_adjustment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2174,
      "code_text": "\tdef test_rounding_adjustment_2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2231,
      "code_text": "\tdef test_rounding_adjustment_3(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2321,
      "code_text": "\tdef test_sales_invoice_with_shipping_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2339,
      "code_text": "\tdef test_create_invoice_without_terms(self):\n\t\tsi = create_sales_invoice(do_not_save=1)\n\t\tself.assertFalse(si.get(\"payment_schedule\"))\n\n\t\tsi.insert()\n\t\tself.assertTrue(si.get(\"payment_schedule\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2346,
      "code_text": "\tdef test_duplicate_due_date_in_terms(self):\n\t\tsi = create_sales_invoice(do_not_save=1)\n\t\tsi.append(\"payment_schedule\", dict(due_date=\"2017-01-01\", invoice_portion=50.00, payment_amount=50))\n\t\tsi.append(\"payment_schedule\", dict(due_date=\"2017-01-01\", invoice_portion=50.00, payment_amount=50))\n\n\t\tself.assertRaises(frappe.ValidationError, si.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2353,
      "code_text": "\tdef test_credit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2378,
      "code_text": "\tdef test_sales_invoice_with_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2406,
      "code_text": "\tdef test_sales_invoice_with_project_link(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2449,
      "code_text": "\tdef test_sales_invoice_without_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2472,
      "code_text": "\tdef test_deferred_revenue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2518,
      "code_text": "\tdef test_deferred_revenue_missing_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2526,
      "code_text": "\tdef test_fixed_deferred_revenue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2580,
      "code_text": "\tdef test_inter_company_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2609,
      "code_text": "\tdef test_inter_company_transaction_without_default_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2663,
      "code_text": "\tdef test_sle_for_target_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2694,
      "code_text": "\tdef test_internal_transfer_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2768,
      "code_text": "\tdef test_internal_transfer_gl_precision_issues(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2839,
      "code_text": "\tdef test_item_tax_net_range(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2886,
      "code_text": "\tdef test_sales_invoice_with_discount_accounting_enabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2903,
      "code_text": "\tdef test_additional_discount_for_sales_invoice_with_discount_accounting_enabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2966,
      "code_text": "\tdef test_asset_depreciation_on_sale_with_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2992,
      "code_text": "\tdef test_asset_depreciation_on_sale_without_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3023,
      "code_text": "\tdef test_depreciation_on_return_of_sold_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3052,
      "code_text": "\tdef test_sales_invoice_against_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3097,
      "code_text": "\tdef test_sales_invoice_against_supplier_usd_with_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3175,
      "code_text": "\tdef test_sales_invoice_cancel_with_common_party_advance_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3219,
      "code_text": "\tdef test_payment_statuses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3265,
      "code_text": "\tdef test_update_invoice_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3301,
      "code_text": "\tdef test_sales_commission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3337,
      "code_text": "\tdef test_sales_invoice_submission_post_account_freezing_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3346,
      "code_text": "\tdef test_over_billing_case_against_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3379,
      "code_text": "\tdef test_multi_currency_deferred_revenue_via_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3451,
      "code_text": "\tdef test_standalone_serial_no_return(self):\n\t\tsi = create_sales_invoice(\n\t\t\titem_code=\"_Test Serialized Item With Series\", update_stock=True, is_return=True, qty=-1\n\t\t)\n\t\tsi.reload()\n\t\tself.assertTrue(get_serial_nos_from_bundle(si.items[0].serial_and_batch_bundle))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3458,
      "code_text": "\tdef test_sales_invoice_with_disabled_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3495,
      "code_text": "\tdef test_gain_loss_with_advance_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3554,
      "code_text": "\tdef test_batch_expiry_for_sales_invoice_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3585,
      "code_text": "\tdef test_sales_invoice_with_payable_tax_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3601,
      "code_text": "\tdef test_advance_entries_as_liability(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3658,
      "code_text": "\tdef test_sales_invoice_without_customer_group_and_territory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3676,
      "code_text": "\tdef test_sales_return_negative_rate(self):\n\t\tsi = create_sales_invoice(is_return=1, qty=-2, rate=-10, do_not_save=True)\n\t\tself.assertRaises(frappe.ValidationError, si.save)\n\n\t\tsi.items[0].rate = 10\n\t\tsi.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3683,
      "code_text": "\tdef test_partial_allocation_on_advance_as_liability(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3770,
      "code_text": "\tdef test_loyalty_points_redemption_with_shopping_cart(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3829,
      "code_text": "\tdef test_pulling_advance_based_on_debit_to(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3856,
      "code_text": "\tdef test_taxes_merging_from_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3955,
      "code_text": "\tdef test_pos_returns_without_update_outstanding_for_self(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3989,
      "code_text": "\tdef test_validation_on_opening_invoice_with_rounding(self):\n\t\tsi = create_sales_invoice(qty=1, rate=99.98, do_not_submit=True)\n\t\tsi.is_opening = \"Yes\"\n\t\tsi.items[0].income_account = \"Temporary Opening - _TC\"\n\t\tsi.save()\n\t\tself.assertRaises(frappe.ValidationError, si.submit)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3996,
      "code_text": "\tdef _create_opening_roundoff_account(self, company_name):",
      "args": [
        "self",
        "company_name"
      ]
    },
    {
      "type": "method",
      "line_start": 4023,
      "code_text": "\tdef test_opening_invoice_with_rounding_adjustment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4040,
      "code_text": "\tdef _create_opening_invoice_with_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4064,
      "code_text": "\tdef test_rounding_validation_for_opening_with_inclusive_tax(self):\n\t\tsi = self._create_opening_invoice_with_inclusive_tax()\n\t\t# 'Round Off for Opening' not set in Company master\n\t\t# Ledger level validation must be thrown\n\t\tself.assertRaises(frappe.ValidationError, si.submit)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4070,
      "code_text": "\tdef test_ledger_entries_on_opening_invoice_with_rounding_loss_by_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4092,
      "code_text": "\tdef test_common_party_with_foreign_currency_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4174,
      "code_text": "\tdef test_common_party_with_different_currency_in_debtor_and_creditor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4255,
      "code_text": "\tdef test_invoice_remarks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4263,
      "code_text": "\tdef test_gl_voucher_subtype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4282,
      "code_text": "\tdef test_total_billed_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4297,
      "code_text": "\tdef test_total_billed_amount_with_different_projects(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4322,
      "code_text": "\tdef test_pos_returns_with_party_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4346,
      "code_text": "\tdef test_create_return_invoice_for_self_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4375,
      "code_text": "\tdef test_prevents_fully_returned_invoice_with_zero_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 4601,
      "code_text": "def create_internal_parties():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 4664,
      "code_text": "def setup_accounts():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\budget_variance_report\\budget_variance_report.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 339,
      "code_text": "def get_chart_data(filters, columns, data):",
      "args": [
        "filters",
        "columns",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 323,
      "code_text": "def get_fiscal_years(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def get_final_data(dimension, dimension_items, filters, period_month_ranges, data, DCC_allocation):",
      "args": [
        "dimension",
        "dimension_items",
        "filters",
        "period_month_ranges",
        "data",
        "DCC_allocation"
      ]
    },
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def get_cost_centers(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 167,
      "code_text": "def get_dimension_target_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 210,
      "code_text": "def get_target_distribution_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 236,
      "code_text": "def get_actual_details(name, filters):",
      "args": [
        "name",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 292,
      "code_text": "def get_dimension_account_month_map(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\bank_clearance_summary\\bank_clearance_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def get_entries_for_bank_clearance_summary(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_partner_transaction_summary\\sales_partner_transaction_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def get_conditions(filters, date_field):",
      "args": [
        "filters",
        "date_field"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_person_commission_summary\\sales_person_commission_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def get_conditions(filters, date_field):",
      "args": [
        "filters",
        "date_field"
      ]
    },
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_partner_commission_summary\\sales_partner_commission_summary.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 93,
      "code_text": "def get_conditions(filters, date_field):",
      "args": [
        "filters",
        "date_field"
      ]
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\available_stock_for_packing_items\\available_stock_for_packing_items.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def get_item_details():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_item_warehouse_quantity_map():",
      "args": []
    }
  ],
  "erpnext\\stock\\report\\product_bundle_balance\\product_bundle_balance.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 199,
      "code_text": "def get_stock_balance(filters, items):\n\tsle = get_stock_ledger_entries(filters, items)\n\tstock_balance = frappe._dict()\n\tfor d in sle:\n\t\tstock_balance.setdefault(d.item_code, frappe._dict())[d.warehouse] = d\n\treturn stock_balance",
      "args": [
        "filters",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 207,
      "code_text": "def get_stock_ledger_entries(filters, items):",
      "args": [
        "filters",
        "items"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\sales_order\\test_sales_order.py": [
    {
      "type": "function",
      "line_start": 2410,
      "code_text": "def make_sales_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 2471,
      "code_text": "def get_reserved_qty(item_code=\"_Test Item\", warehouse=\"_Test Warehouse - _TC\"):\n\treturn flt(frappe.db.get_value(\"Bin\", {\"item_code\": item_code, \"warehouse\": warehouse}, \"reserved_qty\"))",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 2396,
      "code_text": "def automatically_fetch_payment_terms(enable=1):\n\taccounts_settings = frappe.get_doc(\"Accounts Settings\")\n\taccounts_settings.automatically_fetch_payment_terms = enable\n\taccounts_settings.save()",
      "args": [
        "enable"
      ]
    },
    {
      "type": "function",
      "line_start": 2460,
      "code_text": "def create_dn_against_so(so, delivered_qty=0, do_not_submit=False):",
      "args": [
        "so",
        "delivered_qty",
        "do_not_submit"
      ]
    },
    {
      "type": "function",
      "line_start": 2402,
      "code_text": "def compare_payment_schedules(doc, doc1, doc2):\n\tfor index, schedule in enumerate(doc1.get(\"payment_schedule\")):\n\t\tdoc.assertEqual(schedule.payment_term, doc2.payment_schedule[index].payment_term)\n\t\tdoc.assertEqual(getdate(schedule.due_date), doc2.payment_schedule[index].due_date)\n\t\tdoc.assertEqual(schedule.invoice_portion, doc2.payment_schedule[index].invoice_portion)\n\t\tdoc.assertEqual(schedule.payment_amount, doc2.payment_schedule[index].payment_amount)",
      "args": [
        "doc",
        "doc1",
        "doc2"
      ]
    },
    {
      "type": "class",
      "line_start": 37,
      "code_text": "class TestSalesOrder(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.unlink_setting = int(\n\t\t\tfrappe.db.get_single_value(\"Accounts Settings\", \"unlink_advance_payment_on_cancelation_of_order\")\n\t\t)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef tearDownClass(cls) -> None:\n\t\t# reset config to previous state\n\t\tfrappe.db.set_single_value(\n\t\t\t\"Accounts Settings\", \"unlink_advance_payment_on_cancelation_of_order\", cls.unlink_setting\n\t\t)\n\t\tsuper().tearDownClass()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef setUp(self):\n\t\tself.create_customer(\"_Test Customer Credit\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()\n\t\tfrappe.set_user(\"Administrator\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef test_sales_order_with_negative_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef test_sales_order_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef test_make_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef test_make_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef test_make_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_so_billed_amount_against_return_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef test_make_sales_invoice_with_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef test_update_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef test_return_against_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 266,
      "code_text": "\tdef test_reserved_qty_for_partial_delivery(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef test_reserved_qty_for_over_delivery(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 310,
      "code_text": "\tdef test_reserved_qty_for_over_delivery_via_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 341,
      "code_text": "\tdef test_reserved_qty_for_partial_delivery_with_packing_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 381,
      "code_text": "\tdef test_sales_order_on_hold(self):\n\t\tso = make_sales_order(item_code=\"_Test Product Bundle Item\")\n\t\tso.db_set(\"status\", \"On Hold\")\n\t\tsi = make_sales_invoice(so.name)\n\t\tself.assertRaises(frappe.ValidationError, create_dn_against_so, so.name)\n\t\tself.assertRaises(frappe.ValidationError, si.submit)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef test_reserved_qty_for_over_delivery_with_packing_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 412,
      "code_text": "\tdef test_update_child_adding_new_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 454,
      "code_text": "\tdef test_update_child_removing_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 496,
      "code_text": "\tdef test_update_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 521,
      "code_text": "\tdef test_update_child_with_precision(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 539,
      "code_text": "\tdef test_update_child_perm(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 555,
      "code_text": "\tdef test_update_child_qty_rate_with_workflow(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef test_material_request_for_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 610,
      "code_text": "\tdef test_bin_details_of_packed_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 646,
      "code_text": "\tdef test_update_child_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 693,
      "code_text": "\tdef test_update_child_with_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 801,
      "code_text": "\tdef test_warehouse_user(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 832,
      "code_text": "\tdef test_block_delivery_note_against_cancelled_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 844,
      "code_text": "\tdef test_service_type_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 859,
      "code_text": "\tdef test_mix_type_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 873,
      "code_text": "\tdef test_auto_insert_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 940,
      "code_text": "\tdef test_drop_shipping(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1032,
      "code_text": "\tdef test_drop_shipping_partial_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1091,
      "code_text": "\tdef test_drop_shipping_full_for_default_suppliers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1132,
      "code_text": "\tdef test_product_bundles_in_so_are_replaced_with_bundle_items_in_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1163,
      "code_text": "\tdef test_purchase_order_updates_packed_item_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1198,
      "code_text": "\tdef test_reserved_qty_for_closing_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1221,
      "code_text": "\tdef test_create_so_with_margin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1239,
      "code_text": "\tdef test_terms_auto_added(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1248,
      "code_text": "\tdef test_terms_not_copied(self):\n\t\tso = make_sales_order()\n\t\tself.assertTrue(so.get(\"payment_schedule\"))\n\n\t\tsi = make_sales_invoice(so.name)\n\t\tself.assertFalse(si.get(\"payment_schedule\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1255,
      "code_text": "\tdef test_terms_copied(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1266,
      "code_text": "\tdef test_make_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1304,
      "code_text": "\tdef test_advance_payment_entry_unlink_against_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1329,
      "code_text": "\tdef test_advance_paid_upon_payment_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1355,
      "code_text": "\tdef test_cancel_sales_order_after_cancel_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1387,
      "code_text": "\tdef test_work_order_pop_up_from_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1441,
      "code_text": "\tdef test_request_for_raw_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1487,
      "code_text": "\tdef test_so_optional_blanket_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1505,
      "code_text": "\tdef test_so_cancellation_when_si_drafted(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1517,
      "code_text": "\tdef test_so_cancellation_after_si_submission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1530,
      "code_text": "\tdef test_so_cancellation_after_dn_submission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1543,
      "code_text": "\tdef test_so_cancellation_after_maintenance_schedule_submission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1556,
      "code_text": "\tdef test_so_cancellation_after_maintenance_visit_submission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1570,
      "code_text": "\tdef test_so_cancellation_after_work_order_submission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1583,
      "code_text": "\tdef test_payment_terms_are_fetched_when_creating_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1606,
      "code_text": "\tdef test_zero_amount_sales_order_billing_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1630,
      "code_text": "\tdef test_so_billing_status_with_crnote_against_sales_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1689,
      "code_text": "\tdef test_so_back_updated_from_wo_via_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1735,
      "code_text": "\tdef test_sales_order_with_shipping_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1760,
      "code_text": "\tdef test_sales_order_partial_advance_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1823,
      "code_text": "\tdef test_delivered_item_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1848,
      "code_text": "\tdef test_packed_items_for_partial_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1919,
      "code_text": "\tdef test_expired_rate_for_packed_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1979,
      "code_text": "\tdef test_sales_order_advance_payment_status(self, mocked_get_payment_url):",
      "args": [
        "self",
        "mocked_get_payment_url"
      ]
    },
    {
      "type": "method",
      "line_start": 2037,
      "code_text": "\tdef test_pick_list_without_rejected_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2114,
      "code_text": "\tdef test_pick_list_for_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2154,
      "code_text": "\tdef test_auto_update_price_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2188,
      "code_text": "\tdef test_delivery_note_rate_on_change_of_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2227,
      "code_text": "\tdef test_credit_limit_on_so_reopning(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2250,
      "code_text": "\tdef test_warehouse_mapping_based_on_stock_reservation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2363,
      "code_text": "\tdef test_item_tax_transfer_from_sales_to_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 2478,
      "code_text": "def make_sales_order_workflow():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\item_wise_sales_register\\item_wise_sales_register.py": [
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def execute(filters=None):\n\treturn _execute(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def get_columns(additional_table_columns, filters):",
      "args": [
        "additional_table_columns",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 410,
      "code_text": "def get_items(filters, additional_query_columns, additional_conditions=None):",
      "args": [
        "filters",
        "additional_query_columns",
        "additional_conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def _execute(filters=None, additional_table_columns=None, additional_conditions=None):",
      "args": [
        "filters",
        "additional_table_columns",
        "additional_conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 799,
      "code_text": "def add_sub_total_row(item, total_row_map, group_by_value, tax_columns):",
      "args": [
        "item",
        "total_row_map",
        "group_by_value",
        "tax_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 527,
      "code_text": "def get_tax_accounts(\n\titem_list,\n\tcolumns,\n\tcompany_currency,\n\tdoctype=\"Sales Invoice\",\n\ttax_doctype=\"Sales Taxes and Charges\",\n):",
      "args": [
        "item_list",
        "columns",
        "company_currency",
        "doctype",
        "tax_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 706,
      "code_text": "def add_total_row(\n\tdata,\n\tfilters,\n\tprev_group_by_value,\n\titem,\n\ttotal_row_map,\n\tgroup_by_field,\n\tsubtotal_display_field,\n\tgrand_total,\n\ttax_columns,\n):",
      "args": [
        "data",
        "filters",
        "prev_group_by_value",
        "item",
        "total_row_map",
        "group_by_field",
        "subtotal_display_field",
        "grand_total",
        "tax_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 345,
      "code_text": "def apply_conditions(query, si, sii, filters, additional_conditions=None):",
      "args": [
        "query",
        "si",
        "sii",
        "filters",
        "additional_conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def get_income_account(row):",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 394,
      "code_text": "def apply_order_by_conditions(query, si, ii, filters):",
      "args": [
        "query",
        "si",
        "ii",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 514,
      "code_text": "def get_grand_total(filters, doctype):",
      "args": [
        "filters",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 785,
      "code_text": "def get_group_by_and_display_fields(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 493,
      "code_text": "def get_delivery_notes_against_sales_order(item_list):",
      "args": [
        "item_list"
      ]
    },
    {
      "type": "function",
      "line_start": 755,
      "code_text": "def get_display_value(filters, group_by_field, item):",
      "args": [
        "filters",
        "group_by_field",
        "item"
      ]
    }
  ],
  "erpnext\\controllers\\trends.py": [
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_data(filters, conditions):",
      "args": [
        "filters",
        "conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def get_columns(filters, trans):",
      "args": [
        "filters",
        "trans"
      ]
    },
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 272,
      "code_text": "def get_period_date_ranges(period, fiscal_year=None, year_start_date=None):",
      "args": [
        "period",
        "fiscal_year",
        "year_start_date"
      ]
    },
    {
      "type": "function",
      "line_start": 216,
      "code_text": "def get_mon(dt):\n\treturn getdate(dt).strftime(\"%b\")",
      "args": [
        "dt"
      ]
    },
    {
      "type": "function",
      "line_start": 220,
      "code_text": "def period_wise_columns_query(filters, trans):",
      "args": [
        "filters",
        "trans"
      ]
    },
    {
      "type": "function",
      "line_start": 247,
      "code_text": "def get_period_wise_columns(bet_dates, period, pwc):",
      "args": [
        "bet_dates",
        "period",
        "pwc"
      ]
    },
    {
      "type": "function",
      "line_start": 260,
      "code_text": "def get_period_wise_query(bet_dates, trans_date, query_details):",
      "args": [
        "bet_dates",
        "trans_date",
        "query_details"
      ]
    },
    {
      "type": "function",
      "line_start": 295,
      "code_text": "def get_period_month_ranges(period, fiscal_year):",
      "args": [
        "period",
        "fiscal_year"
      ]
    },
    {
      "type": "function",
      "line_start": 310,
      "code_text": "def based_wise_columns_query(based_on, trans):",
      "args": [
        "based_on",
        "trans"
      ]
    },
    {
      "type": "function",
      "line_start": 381,
      "code_text": "def group_wise_column(group_by):\n\tif group_by:\n\t\treturn [group_by + \":Link/\" + group_by + \":120\"]\n\telse:\n\t\treturn []",
      "args": [
        "group_by"
      ]
    }
  ],
  "erpnext\\accounts\\report\\tax_withholding_details\\tax_withholding_details.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 170,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def validate_filters(filters):\n\t\"\"\"Validate if dates are properly set\"\"\"\n\tfilters = frappe._dict(filters or {})\n\tif filters.from_date > filters.to_date:\n\t\tfrappe.throw(_(\"From Date must be before To Date\"))",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 396,
      "code_text": "def get_doc_info(vouchers, doctype, tax_category_map, net_total_map=None):",
      "args": [
        "vouchers",
        "doctype",
        "tax_category_map",
        "net_total_map"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_result(filters, tds_docs, tds_accounts, tax_category_map, journal_entry_party_map, net_total_map):",
      "args": [
        "filters",
        "tds_docs",
        "tds_accounts",
        "tax_category_map",
        "journal_entry_party_map",
        "net_total_map"
      ]
    },
    {
      "type": "function",
      "line_start": 278,
      "code_text": "def get_tds_docs(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 456,
      "code_text": "def get_tax_withholding_rates(tax_withholding, posting_date):",
      "args": [
        "tax_withholding",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def get_party_pan_map(party_type):",
      "args": [
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def get_gle_map(documents):",
      "args": [
        "documents"
      ]
    },
    {
      "type": "function",
      "line_start": 338,
      "code_text": "def get_tds_docs_query(filters, bank_accounts, tds_accounts):",
      "args": [
        "filters",
        "bank_accounts",
        "tds_accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 378,
      "code_text": "def get_journal_entry_party_map(journal_entries):",
      "args": [
        "journal_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 441,
      "code_text": "def get_tax_rate_map(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\warehouse_wise_item_balance_age_and_value\\warehouse_wise_item_balance_age_and_value.py": [
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 93,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 107,
      "code_text": "def validate_filters(filters):\n\tif not (filters.get(\"item_code\") or filters.get(\"warehouse\")):\n\t\tsle_count = flt(frappe.qb.from_(\"Stock Ledger Entry\").select(Count(\"name\")).run()[0][0])\n\t\tif sle_count > 500000:\n\t\t\tfrappe.throw(_(\"Please set filter based on Item or Warehouse\"))",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 114,
      "code_text": "def get_warehouse_list(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_itemwise_brand(items):\n\treturn frappe.get_all(\"Item\", filters={\"name\": (\"in\", items)}, fields=[\"name\", \"brand\"], as_list=1)",
      "args": [
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 134,
      "code_text": "def add_warehouse_column(columns, warehouse_list):\n\tif len(warehouse_list) > 1:\n\t\tcolumns += [_(\"Total Qty\") + \":Int:120\"]\n\n\tfor wh in warehouse_list:\n\t\tcolumns += [_(wh.name) + \":Int:100\"]",
      "args": [
        "columns",
        "warehouse_list"
      ]
    },
    {
      "type": "function",
      "line_start": 142,
      "code_text": "def get_item_warehouse_map(filters, sle):",
      "args": [
        "filters",
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 194,
      "code_text": "def get_group_by_key(row) -> tuple:\n\treturn (row.company, row.item_code, row.warehouse)",
      "args": [
        "row"
      ]
    }
  ],
  "erpnext\\accounts\\report\\gross_profit\\gross_profit.py": [
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 251,
      "code_text": "def get_columns(group_wise_columns, filters):",
      "args": [
        "group_wise_columns",
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 462,
      "code_text": "class GrossProfitGenerator:"
    },
    {
      "type": "function",
      "line_start": 173,
      "code_text": "def get_data_when_grouped_by_invoice(columns, gross_profit_data, filters, group_wise_columns, data):",
      "args": [
        "columns",
        "gross_profit_data",
        "filters",
        "group_wise_columns",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 221,
      "code_text": "def get_data_when_not_grouped_by_invoice(gross_profit_data, filters, group_wise_columns, data):",
      "args": [
        "gross_profit_data",
        "filters",
        "group_wise_columns",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 437,
      "code_text": "def get_column_names():",
      "args": []
    },
    {
      "type": "method",
      "line_start": 463,
      "code_text": "\tdef __init__(self, filters=None):",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 479,
      "code_text": "\tdef process(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef update_return_invoices(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 588,
      "code_text": "\tdef get_average_rate_based_on_group_by(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 623,
      "code_text": "\tdef set_average_based_on_payment_term_portion(self, new_row, row, invoice_portion, aggr=False):",
      "args": [
        "self",
        "new_row",
        "row",
        "invoice_portion",
        "aggr"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef is_not_invoice_row(self, row):\n\t\treturn (self.filters.get(\"group_by\") == \"Invoice\" and row.indent != 0.0) or self.filters.get(\n\t\t\t\"group_by\"\n\t\t) != \"Invoice\"",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef set_average_rate(self, new_row):",
      "args": [
        "self",
        "new_row"
      ]
    },
    {
      "type": "method",
      "line_start": 644,
      "code_text": "\tdef set_average_gross_profit(self, new_row):",
      "args": [
        "self",
        "new_row"
      ]
    },
    {
      "type": "method",
      "line_start": 652,
      "code_text": "\tdef get_returned_invoice_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 673,
      "code_text": "\tdef skip_row(self, row):\n\t\tif self.filters.get(\"group_by\") != \"Invoice\":\n\t\t\tif not row.get(scrub(self.filters.get(\"group_by\", \"\"))):\n\t\t\t\treturn True\n\n\t\treturn False",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 680,
      "code_text": "\tdef get_buying_amount_from_product_bundle(self, row, product_bundle):",
      "args": [
        "self",
        "row",
        "product_bundle"
      ]
    },
    {
      "type": "method",
      "line_start": 692,
      "code_text": "\tdef calculate_buying_amount_from_sle(self, row, my_sle, parenttype, parent, item_row, item_code):",
      "args": [
        "self",
        "row",
        "my_sle",
        "parenttype",
        "parent",
        "item_row",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 708,
      "code_text": "\tdef get_buying_amount(self, row, item_code):",
      "args": [
        "self",
        "row",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 751,
      "code_text": "\tdef get_buying_amount_from_so_dn(self, sales_order, so_detail, item_code):",
      "args": [
        "self",
        "sales_order",
        "so_detail",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 769,
      "code_text": "\tdef get_average_buying_rate(self, row, item_code):",
      "args": [
        "self",
        "row",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 791,
      "code_text": "\tdef get_last_purchase_rate(self, item_code, row):",
      "args": [
        "self",
        "item_code",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 820,
      "code_text": "\tdef load_invoice_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 942,
      "code_text": "\tdef get_delivery_notes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 965,
      "code_text": "\tdef group_items_by_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 992,
      "code_text": "\tdef get_invoice_row(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 1022,
      "code_text": "\tdef get_bundle_item_row(self, row, item):",
      "args": [
        "self",
        "row",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1053,
      "code_text": "\tdef get_stock_ledger_entries(self, item_code, warehouse):",
      "args": [
        "self",
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 1084,
      "code_text": "\tdef load_product_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1111,
      "code_text": "\tdef load_non_stock_items(self):\n\t\tself.non_stock_items = frappe.db.sql_list(\n\t\t\t\"\"\"select name from tabItem\n\t\t\twhere is_stock_item=0\"\"\"\n\t\t)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\production_plan_summary\\production_plan_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tdata = get_data(filters)\n\tcolumns = get_column(filters)\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def get_column(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_purchase_order_details(filters, order_details):",
      "args": [
        "filters",
        "order_details"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_production_plan_item_details(filters, data, order_details):",
      "args": [
        "filters",
        "data",
        "order_details"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_production_plan_sub_assembly_item_details(filters, row, production_plan_doc, data, order_details):",
      "args": [
        "filters",
        "row",
        "production_plan_doc",
        "data",
        "order_details"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def get_work_order_details(filters, order_details):",
      "args": [
        "filters",
        "order_details"
      ]
    }
  ],
  "erpnext\\accounts\\report\\item_wise_purchase_register\\item_wise_purchase_register.py": [
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def execute(filters=None):\n\treturn _execute(filters)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def get_columns(additional_table_columns, filters):",
      "args": [
        "additional_table_columns",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 311,
      "code_text": "def get_items(filters, additional_table_columns):",
      "args": [
        "filters",
        "additional_table_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def _execute(filters=None, additional_table_columns=None):",
      "args": [
        "filters",
        "additional_table_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 291,
      "code_text": "def apply_conditions(query, pi, pii, filters):",
      "args": [
        "query",
        "pi",
        "pii",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 382,
      "code_text": "def get_aii_accounts():\n\treturn dict(frappe.db.sql(\"select name, stock_received_but_not_billed from tabCompany\"))",
      "args": []
    },
    {
      "type": "function",
      "line_start": 386,
      "code_text": "def get_purchase_receipts_against_purchase_order(item_list):",
      "args": [
        "item_list"
      ]
    }
  ],
  "erpnext\\accounts\\report\\tds_computation_summary\\tds_computation_summary.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 91,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def validate_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def group_by_party_and_category(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_final_result(party_category_wise_map):\n\tout = []\n\tfor _key, value in party_category_wise_map.items():\n\t\tout.append(value)\n\n\treturn out",
      "args": [
        "party_category_wise_map"
      ]
    }
  ],
  "erpnext\\accounts\\report\\bank_reconciliation_statement\\bank_reconciliation_statement.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def get_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_journal_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_payment_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 234,
      "code_text": "def get_balance_row(label, amount, account_currency):",
      "args": [
        "label",
        "amount",
        "account_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def get_pos_entries(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 195,
      "code_text": "def get_amounts_not_reflected_in_system(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def get_entries_for_bank_reconciliation_statement(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 207,
      "code_text": "def get_amounts_not_reflected_in_system_for_bank_reconciliation_statement(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\available_serial_no\\available_serial_no.py": [
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 142,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 310,
      "code_text": "def get_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 116,
      "code_text": "def update_available_serial_nos(available_serial_nos, sle):",
      "args": [
        "available_serial_nos",
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_opening_balance_data(filters, columns, sl_entries):",
      "args": [
        "filters",
        "columns",
        "sl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def process_stock_ledger_entries(\n\tfilters, sl_entries, item_details, opening_row, actual_qty, stock_value, precision\n):",
      "args": [
        "filters",
        "sl_entries",
        "item_details",
        "opening_row",
        "actual_qty",
        "stock_value",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def update_stock_ledger_entry(\n\tsle, item_details, filters, actual_qty, stock_value, batch_balance_dict, precision\n):",
      "args": [
        "sle",
        "item_details",
        "filters",
        "actual_qty",
        "stock_value",
        "batch_balance_dict",
        "precision"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\purchase_receipt\\test_purchase_receipt.py": [
    {
      "type": "function",
      "line_start": 4330,
      "code_text": "def make_purchase_receipt(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 4227,
      "code_text": "def get_gl_entries(voucher_type, voucher_no, skip_cancelled=False, as_dict=True):",
      "args": [
        "voucher_type",
        "voucher_no",
        "skip_cancelled",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 4290,
      "code_text": "def get_items(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 4182,
      "code_text": "def prepare_data_for_internal_transfer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 4217,
      "code_text": "def get_sl_entries(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 4247,
      "code_text": "def get_taxes(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class UnitTestPurchaseReceipt(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class TestPurchaseReceipt(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.db.set_single_value(\"Buying Settings\", \"allow_multiple_items\", 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_purchase_receipt_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_purchase_receipt_received_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef test_reverse_purchase_receipt_sle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef test_make_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef test_purchase_receipt_no_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef test_batched_serial_no_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef test_duplicate_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 326,
      "code_text": "\tdef test_purchase_receipt_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 365,
      "code_text": "\tdef test_serial_no_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef test_rejected_warehouse_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 385,
      "code_text": "\tdef test_rejected_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef test_purchase_return_partial(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 500,
      "code_text": "\tdef test_purchase_return_full(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 532,
      "code_text": "\tdef test_purchase_return_for_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 578,
      "code_text": "\tdef test_purchase_receipt_for_rejected_gle_without_accepted_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 617,
      "code_text": "\tdef test_purchase_return_for_serialized_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 646,
      "code_text": "\tdef test_purchase_return_for_multi_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 669,
      "code_text": "\tdef test_closed_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 681,
      "code_text": "\tdef test_pr_billing_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 739,
      "code_text": "\tdef test_serial_no_against_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 779,
      "code_text": "\tdef test_auto_asset_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 832,
      "code_text": "\tdef test_purchase_return_with_submitted_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 862,
      "code_text": "\tdef test_purchase_receipt_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 895,
      "code_text": "\tdef test_purchase_receipt_cost_center_with_balance_sheet_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 920,
      "code_text": "\tdef test_make_purchase_invoice_from_pr_for_returned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 946,
      "code_text": "\tdef test_make_purchase_invoice_from_pr_with_returned_qty_duplicate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 981,
      "code_text": "\tdef test_stock_transfer_from_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1023,
      "code_text": "\tdef test_stock_transfer_from_purchase_receipt_with_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1116,
      "code_text": "\tdef test_po_to_pi_and_po_to_pr_worflow_full(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1137,
      "code_text": "\tdef test_po_to_pi_and_po_to_pr_worflow_partial(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1164,
      "code_text": "\tdef test_purchase_receipt_with_exchange_rate_difference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1211,
      "code_text": "\tdef test_payment_terms_are_fetched_when_creating_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1247,
      "code_text": "\tdef test_neg_to_positive(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1275,
      "code_text": "\tdef test_backdated_transaction_for_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1361,
      "code_text": "\tdef test_backdated_transaction_for_internal_transfer_in_trasit_warehouse_for_purchase_receipt(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1468,
      "code_text": "\tdef test_backdated_transaction_for_internal_transfer_in_trasit_warehouse_for_purchase_invoice(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1589,
      "code_text": "\tdef test_batch_expiry_for_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1620,
      "code_text": "\tdef test_disable_last_purchase_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1663,
      "code_text": "\tdef test_validate_received_qty_for_internal_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1733,
      "code_text": "\tdef test_internal_pr_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1815,
      "code_text": "\tdef test_internal_pr_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1872,
      "code_text": "\tdef test_purchase_return_valuation_with_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1918,
      "code_text": "\tdef test_return_from_rejected_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1955,
      "code_text": "\tdef test_purchase_receipt_with_backdated_landed_cost_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2102,
      "code_text": "\tdef test_purchase_receipt_provisional_accounting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2145,
      "code_text": "\tdef test_purchase_return_status_with_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2171,
      "code_text": "\tdef test_purchase_return_with_zero_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2227,
      "code_text": "\tdef non_internal_transfer_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2242,
      "code_text": "\tdef test_use_serial_batch_fields_for_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2337,
      "code_text": "\tdef test_sle_qty_after_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2426,
      "code_text": "\tdef test_auto_set_batch_based_on_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2454,
      "code_text": "\tdef test_pr_billed_amount_against_return_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2489,
      "code_text": "\tdef test_valuation_taxes_lcv_repost_after_billing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2537,
      "code_text": "\tdef test_purchase_receipt_with_use_serial_batch_field_for_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2619,
      "code_text": "\tdef test_internal_transfer_with_serial_batch_items_and_their_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2756,
      "code_text": "\tdef test_internal_transfer_with_serial_batch_items_without_use_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2897,
      "code_text": "\tdef test_purchase_receipt_bill_for_rejected_quantity_in_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2931,
      "code_text": "\tdef test_zero_valuation_rate_for_batched_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2975,
      "code_text": "\tdef test_purchase_return_from_accepted_and_rejected_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3024,
      "code_text": "\tdef test_manufacturing_and_expiry_date_for_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3053,
      "code_text": "\tdef test_purchase_return_from_rejected_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3083,
      "code_text": "\tdef test_tax_account_heads_on_lcv_and_item_repost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3201,
      "code_text": "\tdef create_lcv(self, receipt_document_type, receipt_document, company, expense_account, charges=50):",
      "args": [
        "self",
        "receipt_document_type",
        "receipt_document",
        "company",
        "expense_account",
        "charges"
      ]
    },
    {
      "type": "method",
      "line_start": 3233,
      "code_text": "\tdef test_tax_account_heads_on_item_repost_without_lcv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3337,
      "code_text": "\tdef test_do_not_use_batchwise_valuation_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3396,
      "code_text": "\tdef test_status_mapping(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3412,
      "code_text": "\tdef test_internal_transfer_for_batch_items_with_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3528,
      "code_text": "\tdef test_internal_transfer_for_batch_items_with_cancel_use_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3644,
      "code_text": "\tdef test_sles_with_same_posting_datetime_and_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3709,
      "code_text": "\tdef test_same_stock_and_transaction_uom_conversion_factor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3724,
      "code_text": "\tdef test_purchase_receipt_return_valuation_without_use_serial_batch_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3828,
      "code_text": "\tdef test_purchase_receipt_return_valuation_with_use_serial_batch_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 3952,
      "code_text": "\tdef test_purchase_return_partial_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4000,
      "code_text": "\tdef test_do_not_allow_to_inward_same_serial_no_multiple_times(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4036,
      "code_text": "\tdef test_seral_no_return_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4069,
      "code_text": "\tdef test_batch_no_return_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4103,
      "code_text": "\tdef test_pr_status_based_on_invoices_with_update_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 4133,
      "code_text": "\tdef test_recreate_stock_ledgers(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\financial_ratios\\financial_ratios.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def get_columns(period_list):",
      "args": [
        "period_list"
      ]
    },
    {
      "type": "function",
      "line_start": 283,
      "code_text": "def calculate_ratio(value, denominator, precision):\n\tif flt(denominator):\n\t\treturn flt(flt(value) / denominator, precision)\n\treturn 0",
      "args": [
        "value",
        "denominator",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_gl_data(filters, period_list, years):",
      "args": [
        "filters",
        "period_list",
        "years"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def setup_filters(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_ratios_data(filters, period_list, years):",
      "args": [
        "filters",
        "period_list",
        "years"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def add_liquidity_ratios(data, years, current_asset, current_liability, quick_asset):",
      "args": [
        "data",
        "years",
        "current_asset",
        "current_liability",
        "quick_asset"
      ]
    },
    {
      "type": "function",
      "line_start": 164,
      "code_text": "def add_solvency_ratios(\n\tdata, years, total_asset, total_liability, net_sales, cogs, total_income, total_expense\n):",
      "args": [
        "data",
        "years",
        "total_asset",
        "total_liability",
        "net_sales",
        "cogs",
        "total_income",
        "total_expense"
      ]
    },
    {
      "type": "function",
      "line_start": 196,
      "code_text": "def add_turnover_ratios(data, years, period_list, filters, total_asset, net_sales, cogs, direct_expense):",
      "args": [
        "data",
        "years",
        "period_list",
        "filters",
        "total_asset",
        "net_sales",
        "cogs",
        "direct_expense"
      ]
    },
    {
      "type": "function",
      "line_start": 226,
      "code_text": "def update_balances(\n\tratio_dict,\n\ttotal_dict,\n\taccount_type,\n\tyear,\n\troot_type_data,\n\troot_type,\n\tnet_dict=None,\n\ttotal_net=0,\n):",
      "args": [
        "ratio_dict",
        "total_dict",
        "account_type",
        "year",
        "root_type_data",
        "root_type",
        "net_dict",
        "total_net"
      ]
    },
    {
      "type": "function",
      "line_start": 262,
      "code_text": "def avg_ratio_balance(account_type, period_list, precision, filters):",
      "args": [
        "account_type",
        "period_list",
        "precision",
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_partner_target_variance_based_on_item_group\\item_group_wise_sales_target_variance.py": [
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_data(filters, period_list, partner_doctype):",
      "args": [
        "filters",
        "period_list",
        "partner_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_columns(filters, period_list, partner_doctype):",
      "args": [
        "filters",
        "period_list",
        "partner_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 155,
      "code_text": "def prepare_data(\n\tfilters,\n\tsales_users_data,\n\tsales_user_wise_item_groups,\n\tactual_data,\n\tdate_field,\n\tperiod_list,\n\tsales_field,\n):",
      "args": [
        "filters",
        "sales_users_data",
        "sales_user_wise_item_groups",
        "actual_data",
        "date_field",
        "period_list",
        "sales_field"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get_data_column(filters, partner_doctype):",
      "args": [
        "filters",
        "partner_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 212,
      "code_text": "def get_item_group_parent_child_map():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 231,
      "code_text": "def get_actual_data(filters, sales_users_or_territory_data, date_field, sales_field):",
      "args": [
        "filters",
        "sales_users_or_territory_data",
        "date_field",
        "sales_field"
      ]
    },
    {
      "type": "function",
      "line_start": 266,
      "code_text": "def get_parents_data(filters, partner_doctype):",
      "args": [
        "filters",
        "partner_doctype"
      ]
    }
  ],
  "erpnext\\crm\\report\\campaign_efficiency\\campaign_efficiency.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns(\"utm_campaign\")\n\tdata = get_lead_data(filters or {}, \"utm_campaign\")\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_columns(based_on):",
      "args": [
        "based_on"
      ]
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_lead_data(filters, based_on):",
      "args": [
        "filters",
        "based_on"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_filter_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_lead_quotation_count(leads):",
      "args": [
        "leads"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_lead_opp_count(leads):",
      "args": [
        "leads"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_quotation_ordered_count(leads):",
      "args": [
        "leads"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_order_amount(leads):",
      "args": [
        "leads"
      ]
    }
  ],
  "erpnext\\stock\\report\\itemwise_recommended_reorder_level\\itemwise_recommended_reorder_level.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def get_filtered_query(filters, table, query):",
      "args": [
        "filters",
        "table",
        "query"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_item_info(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_consumed_items(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_delivered_items(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_gl_to_payment_ledger.py": [
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def create_accounting_dimension_fields():\n\tdimensions_and_defaults = get_dimensions()\n\tif dimensions_and_defaults:\n\t\tfor dimension in dimensions_and_defaults[0]:\n\t\t\tmake_dimension_in_accounting_doctypes(dimension, [\"Payment Ledger Entry\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def generate_name_and_calculate_amount(gl_entries, start, receivable_accounts):",
      "args": [
        "gl_entries",
        "start",
        "receivable_accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def build_insert_query():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def insert_chunk_into_payment_ledger(insert_query, gl_entries):",
      "args": [
        "insert_query",
        "gl_entries"
      ]
    }
  ],
  "erpnext\\accounts\\report\\cheques_and_deposits_incorrectly_cleared\\cheques_and_deposits_incorrectly_cleared.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns = get_columns()\n\tdata = build_data(filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def build_payment_entry_dict(row: dict) -> dict:",
      "args": [
        "row: dict"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def build_journal_entry_dict(row: dict) -> dict:",
      "args": [
        "row: dict"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def build_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_amounts_not_reflected_in_system_for_bank_reconciliation_statement(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_stock_calculated\\bom_stock_calculated.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_report_data(last_purchase_rate, required_qty, row, manufacture_details):",
      "args": [
        "last_purchase_rate",
        "required_qty",
        "row",
        "manufacture_details"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_bom_data(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_manufacturer_records():",
      "args": []
    }
  ],
  "erpnext\\regional\\report\\irs_1099\\irs_1099.py": [
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def irs_1099_print(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_payer_address_html(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_street_address_html(party_type, party):",
      "args": [
        "party_type",
        "party"
      ]
    }
  ],
  "erpnext\\selling\\report\\inactive_customers\\inactive_customers.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_sales_details(doctype):",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def get_last_sales_amt(customer, doctype):",
      "args": [
        "customer",
        "doctype"
      ]
    }
  ],
  "erpnext\\stock\\report\\supplier_wise_sales_analytics\\supplier_wise_sales_analytics.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_consumed_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_suppliers_details(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 172,
      "code_text": "def get_material_transfer_vouchers():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\report\\work_order_stock_report\\work_order_stock_report.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\two_list = get_work_orders()\n\tdata = get_item_list(wo_list, filters)\n\tcolumns = get_columns()\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_item_list(wo_list, filters):",
      "args": [
        "wo_list",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_work_orders():",
      "args": []
    }
  ],
  "erpnext\\stock\\report\\stock_projected_qty\\stock_projected_qty.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 229,
      "code_text": "def get_bin_list(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 274,
      "code_text": "def get_item_map(item_code, include_uom):",
      "args": [
        "item_code",
        "include_uom"
      ]
    }
  ],
  "erpnext\\stock\\report\\total_stock_summary\\total_stock_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def get_total_stock(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\crm\\report\\lead_conversion_time\\lead_conversion_time.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def get_communication_details(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_stock_report\\bom_stock_report.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_columns():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_bom_stock(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\share_balance\\share_balance.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_all_shares(shareholder):\n\treturn frappe.get_doc(\"Shareholder\", shareholder).share_balance",
      "args": [
        "shareholder"
      ]
    }
  ],
  "erpnext\\selling\\report\\customer_credit_balance\\customer_credit_balance.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_columns(customer_naming_type):",
      "args": [
        "customer_naming_type"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_details(filters):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\share_ledger\\share_ledger.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def get_columns(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def get_all_transfers(date, shareholder):",
      "args": [
        "date",
        "shareholder"
      ]
    }
  ],
  "erpnext\\crm\\report\\lead_owner_efficiency\\lead_owner_efficiency.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\tcolumns = get_columns()\n\tdata = get_lead_data(filters, \"Lead Owner\")\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_columns():",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\sales_order\\sales_order.py": [
    {
      "type": "function",
      "line_start": 1098,
      "code_text": "def make_sales_invoice(source_name, target_doc=None, ignore_permissions=False):",
      "args": [
        "source_name",
        "target_doc",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 946,
      "code_text": "def make_delivery_note(source_name, target_doc=None, kwargs=None):",
      "args": [
        "source_name",
        "target_doc",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1671,
      "code_text": "def create_pick_list(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 784,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 841,
      "code_text": "def make_material_request(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 919,
      "code_text": "def make_project(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1414,
      "code_text": "def make_purchase_order(source_name, selected_items=None, target_doc=None):",
      "args": [
        "source_name",
        "selected_items",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1244,
      "code_text": "def get_events(start, end, filters=None):",
      "args": [
        "start",
        "end",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1191,
      "code_text": "def make_maintenance_schedule(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1603,
      "code_text": "def update_status(status, name):\n\tso = frappe.get_doc(\"Sales Order\", name)\n\tso.update_status(status)",
      "args": [
        "status",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 1217,
      "code_text": "def make_maintenance_visit(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1281,
      "code_text": "def make_purchase_order_for_default_supplier(source_name, selected_items=None, target_doc=None):",
      "args": [
        "source_name",
        "selected_items",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1564,
      "code_text": "def is_product_bundle(item_code):\n\treturn frappe.db.exists(\"Product Bundle\", {\"name\": item_code, \"disabled\": 0})",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1765,
      "code_text": "def get_work_order_items(sales_order, for_raw_material_request=0):",
      "args": [
        "sales_order",
        "for_raw_material_request"
      ]
    },
    {
      "type": "class",
      "line_start": 49,
      "code_text": "class WarehouseRequired(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 777,
      "code_text": "def get_unreserved_qty(item: object, reserved_qty_details: dict) -> float:\n\t\"\"\"Returns the unreserved quantity for the Sales Order Item.\"\"\"\n\n\texisting_reserved_qty = reserved_qty_details.get(item.name, 0)\n\treturn item.stock_qty - flt(item.delivered_qty) * item.get(\"conversion_factor\", 1) - existing_reserved_qty",
      "args": [
        "item: object",
        "reserved_qty_details: dict"
      ]
    },
    {
      "type": "function",
      "line_start": 1746,
      "code_text": "def update_produced_qty_in_so_item(sales_order, sales_order_item):",
      "args": [
        "sales_order",
        "sales_order_item"
      ]
    },
    {
      "type": "class",
      "line_start": 53,
      "code_text": "class SalesOrder(SellingController):"
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef onload(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 204,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 243,
      "code_text": "\tdef enable_auto_reserve_stock(self):\n\t\tif self.is_new() and frappe.db.get_single_value(\"Stock Settings\", \"auto_reserve_stock\"):\n\t\t\tself.reserve_stock = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef validate_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef validate_for_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 301,
      "code_text": "\tdef product_bundle_has_stock_item(self, product_bundle):",
      "args": [
        "self",
        "product_bundle"
      ]
    },
    {
      "type": "method",
      "line_start": 312,
      "code_text": "\tdef validate_sales_mntc_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 324,
      "code_text": "\tdef validate_delivery_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef validate_proj_cust(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 360,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 379,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef update_enquiry_status(self, prevdoc, flag):",
      "args": [
        "self",
        "prevdoc",
        "flag"
      ]
    },
    {
      "type": "method",
      "line_start": 403,
      "code_text": "\tdef update_prevdoc_status(self, flag=None):",
      "args": [
        "self",
        "flag"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef validate_drop_ship(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.delivered_by_supplier and not d.supplier:\n\t\t\t\tfrappe.throw(_(\"Row #{0}: Set Supplier for item {1}\").format(d.idx, d.item_code))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 469,
      "code_text": "\tdef update_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 478,
      "code_text": "\tdef check_credit_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef check_nextdoc_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 506,
      "code_text": "\tdef check_modified_date(self):\n\t\tmod_db = frappe.db.get_value(\"Sales Order\", self.name, \"modified\")\n\t\tdate_diff = frappe.db.sql(f\"select TIMEDIFF('{mod_db}', '{cstr(self.modified)}')\")\n\t\tif date_diff and date_diff[0][0]:\n\t\t\tfrappe.throw(_(\"{0} {1} has been modified. Please refresh.\").format(self.doctype, self.name))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 512,
      "code_text": "\tdef update_status(self, status):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 523,
      "code_text": "\tdef update_reserved_qty(self, so_item_rows=None):",
      "args": [
        "self",
        "so_item_rows"
      ]
    },
    {
      "type": "method",
      "line_start": 548,
      "code_text": "\tdef on_update(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef on_update_after_submit(self):\n\t\tself.calculate_commission()\n\t\tself.calculate_contribution()\n\t\tself.check_credit_limit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 556,
      "code_text": "\tdef before_update_after_submit(self):\n\t\tself.validate_po()\n\t\tself.validate_drop_ship()\n\t\tself.validate_supplier_after_submit()\n\t\tself.validate_delivery_date()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 562,
      "code_text": "\tdef validate_supplier_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 579,
      "code_text": "\tdef update_delivery_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 605,
      "code_text": "\tdef update_picking_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 633,
      "code_text": "\tdef set_indicator(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 647,
      "code_text": "\tdef on_recurring(self, reference_doc, auto_repeat_doc):",
      "args": [
        "self",
        "reference_doc",
        "auto_repeat_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 678,
      "code_text": "\tdef validate_serial_no_based_delivery(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 713,
      "code_text": "\tdef validate_reserved_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 722,
      "code_text": "\tdef has_unreserved_stock(self) -> bool:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 738,
      "code_text": "\tdef create_stock_reservation_entries(\n\t\tself,\n\t\titems_details: list[dict] | None = None,",
      "args": [
        "self",
        "items_details",
        "from_voucher_type",
        "notify"
      ]
    },
    {
      "type": "method",
      "line_start": 758,
      "code_text": "\tdef cancel_stock_reservation_entries(self, sre_list=None, notify=True) -> None:",
      "args": [
        "self",
        "sre_list",
        "notify"
      ]
    },
    {
      "type": "method",
      "line_start": 769,
      "code_text": "\tdef set_missing_values(self, for_validate=False):\n\t\tsuper().set_missing_values(for_validate)\n\n\t\tif self.delivery_date:\n\t\t\tfor item in self.items:\n\t\t\t\titem.delivery_date = self.delivery_date",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "function",
      "line_start": 801,
      "code_text": "def is_enable_cutoff_date_on_bulk_delivery_note_creation():\n\treturn frappe.db.get_single_value(\"Selling Settings\", \"enable_cutoff_date_on_bulk_delivery_note_creation\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 806,
      "code_text": "def close_or_unclose_sales_orders(names, status):",
      "args": [
        "names",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 827,
      "code_text": "def get_requested_item_qty(sales_order):",
      "args": [
        "sales_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1550,
      "code_text": "def set_delivery_date(items, sales_order):",
      "args": [
        "items",
        "sales_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1569,
      "code_text": "def make_work_orders(items, sales_order, company, project=None):",
      "args": [
        "items",
        "sales_order",
        "company",
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 1609,
      "code_text": "def make_raw_material_request(items, company, sales_order, project=None):",
      "args": [
        "items",
        "company",
        "sales_order",
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 1664,
      "code_text": "def make_inter_company_purchase_order(source_name, target_doc=None):\n\tfrom erpnext.accounts.doctype.sales_invoice.sales_invoice import make_inter_company_transaction\n\n\treturn make_inter_company_transaction(\"Sales Order\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1820,
      "code_text": "def get_stock_reservation_status():\n\treturn frappe.db.get_single_value(\"Stock Settings\", \"enable_stock_reservation\")",
      "args": []
    }
  ],
  "erpnext\\controllers\\tests\\test_subcontracting_controller.py": [
    {
      "type": "function",
      "line_start": 1395,
      "code_text": "def get_subcontracting_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1181,
      "code_text": "def make_stock_in_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1231,
      "code_text": "def make_stock_transfer_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1391,
      "code_text": "def set_backflush_based_on(based_on):\n\tfrappe.db.set_single_value(\"Buying Settings\", \"backflush_raw_materials_of_subcontract_based_on\", based_on)",
      "args": [
        "based_on"
      ]
    },
    {
      "type": "function",
      "line_start": 1432,
      "code_text": "def get_rm_items(supplied_items):",
      "args": [
        "supplied_items"
      ]
    },
    {
      "type": "function",
      "line_start": 1167,
      "code_text": "def get_supplied_items(scr_doc):",
      "args": [
        "scr_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1296,
      "code_text": "def make_subcontracted_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1319,
      "code_text": "def make_raw_materials():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1349,
      "code_text": "def make_service_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1366,
      "code_text": "def make_bom_for_subcontracted_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1341,
      "code_text": "def make_service_item(item, properties=None):\n\tif properties is None:\n\t\tproperties = {}\n\tif not frappe.db.exists(\"Item\", item):\n\t\tproperties.update({\"is_stock_item\": 0})\n\t\tmake_item(item, properties)",
      "args": [
        "item",
        "properties"
      ]
    },
    {
      "type": "function",
      "line_start": 1145,
      "code_text": "def add_second_row_in_scr(scr):",
      "args": [
        "scr"
      ]
    },
    {
      "type": "function",
      "line_start": 1451,
      "code_text": "def make_subcontracted_item(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1207,
      "code_text": "def update_item_details(child_row, details):",
      "args": [
        "child_row",
        "details"
      ]
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestSubcontractingController(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef setUp(self):\n\t\tmake_subcontracted_items()\n\t\tmake_raw_materials()\n\t\tmake_service_items()\n\t\tmake_bom_for_subcontracted_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef test_remove_empty_rows(self):\n\t\tsco = get_subcontracting_order()\n\t\tlen_before = len(sco.service_items)\n\t\tsco.service_items[0].item_code = None\n\t\tsco.remove_empty_rows()\n\t\tself.assertEqual((len_before - 1), len(sco.service_items))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_calculate_additional_costs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef test_create_raw_materials_supplied(self):\n\t\tsco = get_subcontracting_order()\n\t\tsco.supplied_items = None\n\t\tsco.create_raw_materials_supplied()\n\t\tself.assertIsNotNone(sco.supplied_items)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef test_sco_with_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef test_sco_with_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef test_subcontracting_with_same_components_different_fg(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 285,
      "code_text": "\tdef test_return_non_consumed_batch_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 358,
      "code_text": "\tdef test_return_non_consumed_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 416,
      "code_text": "\tdef test_item_with_batch_based_on_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 532,
      "code_text": "\tdef test_item_with_batch_based_on_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 649,
      "code_text": "\tdef test_partial_transfer_serial_no_components_based_on_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 727,
      "code_text": "\tdef test_incorrect_serial_no_components_based_on_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 798,
      "code_text": "\tdef delete_bundle_from_scr(scr):\n\t\tfor row in scr.supplied_items:\n\t\t\tif not row.serial_and_batch_bundle:\n\t\t\t\tcontinue\n\n\t\t\tfrappe.delete_doc(\"Serial and Batch Bundle\", row.serial_and_batch_bundle)",
      "args": [
        "scr"
      ]
    },
    {
      "type": "method",
      "line_start": 805,
      "code_text": "\tdef test_partial_transfer_batch_based_on_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 876,
      "code_text": "\tdef test_sco_supplied_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 927,
      "code_text": "\tdef test_sco_with_material_transfer_with_use_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1006,
      "code_text": "\tdef test_subcontracting_with_same_components_different_fg_with_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1083,
      "code_text": "\tdef test_return_non_consumed_materials_with_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice\\sales_invoice.py": [
    {
      "type": "function",
      "line_start": 2114,
      "code_text": "def make_delivery_note(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2066,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 2160,
      "code_text": "def make_sales_return(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Sales Invoice\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2576,
      "code_text": "def update_address(doc, address_field, address_display_field, address_name):",
      "args": [
        "doc",
        "address_field",
        "address_display_field",
        "address_name"
      ]
    },
    {
      "type": "function",
      "line_start": 2263,
      "code_text": "def make_inter_company_transaction(doctype, source_name, target_doc=None):",
      "args": [
        "doctype",
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2605,
      "code_text": "def create_invoice_discounting(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 54,
      "code_text": "class SalesInvoice(SellingController):"
    },
    {
      "type": "function",
      "line_start": 2097,
      "code_text": "def make_maintenance_schedule(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1951,
      "code_text": "def is_overdue(doc, total):",
      "args": [
        "doc",
        "total"
      ]
    },
    {
      "type": "function",
      "line_start": 2001,
      "code_text": "def validate_inter_company_party(doctype, party, company, inter_company_reference):",
      "args": [
        "doctype",
        "party",
        "company",
        "inter_company_reference"
      ]
    },
    {
      "type": "function",
      "line_start": 2043,
      "code_text": "def update_linked_doc(doctype, name, inter_company_reference):",
      "args": [
        "doctype",
        "name",
        "inter_company_reference"
      ]
    },
    {
      "type": "function",
      "line_start": 2053,
      "code_text": "def unlink_inter_company_doc(doctype, name, inter_company_reference):",
      "args": [
        "doctype",
        "name",
        "inter_company_reference"
      ]
    },
    {
      "type": "function",
      "line_start": 2082,
      "code_text": "def get_bank_cash_account(mode_of_payment, company):",
      "args": [
        "mode_of_payment",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2254,
      "code_text": "def make_inter_company_purchase_invoice(source_name, target_doc=None):\n\treturn make_inter_company_transaction(\"Sales Invoice\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2549,
      "code_text": "def update_taxes(\n\tdoc,\n\tparty=None,\n\tparty_type=None,\n\tcompany=None,\n\tdoctype=None,\n\tparty_address=None,\n\tcompany_address=None,\n\tshipping_address_name=None,\n\tmaster_doctype=None,\n):",
      "args": [
        "doc",
        "party",
        "party_type",
        "company",
        "doctype",
        "party_address",
        "company_address",
        "shipping_address_name",
        "master_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 1943,
      "code_text": "def get_total_in_party_account_currency(doc):\n\ttotal_fieldname = \"grand_total\" if doc.disable_rounded_total else \"rounded_total\"\n\tif doc.party_account_currency != doc.currency:\n\t\ttotal_fieldname = \"base_\" + total_fieldname\n\n\treturn flt(doc.get(total_fieldname), doc.precision(total_fieldname))",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2166,
      "code_text": "def get_inter_company_details(doc, doctype):",
      "args": [
        "doc",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 2622,
      "code_text": "def update_multi_mode_option(doc, pos_profile):",
      "args": [
        "doc",
        "pos_profile"
      ]
    },
    {
      "type": "function",
      "line_start": 2697,
      "code_text": "def create_dunning(source_name, target_doc=None, ignore_permissions=False):",
      "args": [
        "source_name",
        "target_doc",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 2203,
      "code_text": "def get_internal_party(parties, link_doctype, doc):",
      "args": [
        "parties",
        "link_doctype",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2227,
      "code_text": "def validate_inter_company_transaction(doc, doctype):",
      "args": [
        "doc",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 2259,
      "code_text": "def make_regional_gl_entries(gl_entries, doc):\n\treturn gl_entries",
      "args": [
        "gl_entries",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2443,
      "code_text": "def set_purchase_references(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2530,
      "code_text": "def get_pd_details(doctype, sd_detail_map, sd_detail_field):",
      "args": [
        "doctype",
        "sd_detail_map",
        "sd_detail_field"
      ]
    },
    {
      "type": "function",
      "line_start": 2587,
      "code_text": "def get_loyalty_programs(customer):",
      "args": [
        "customer"
      ]
    },
    {
      "type": "function",
      "line_start": 2748,
      "code_text": "def check_if_return_invoice_linked_with_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 257,
      "code_text": "\tdef set_indicator(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 275,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef validate_accounts(self):\n\t\tself.validate_write_off_account()\n\t\tself.validate_account_for_change_amount()\n\t\tself.validate_income_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef validate_for_repost(self):\n\t\tself.validate_write_off_account()\n\t\tself.validate_account_for_change_amount()\n\t\tself.validate_income_account()\n\t\tvalidate_docs_for_voucher_types([\"Sales Invoice\"])\n\t\tvalidate_docs_for_deferred_accounting([self.name], [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 360,
      "code_text": "\tdef validate_fixed_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 377,
      "code_text": "\tdef validate_item_cost_centers(self):\n\t\tfor item in self.items:\n\t\t\titem.validate_cost_center(self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 381,
      "code_text": "\tdef validate_income_account(self):\n\t\tfor item in self.get(\"items\"):\n\t\t\tvalidate_account_head(item.idx, item.income_account, self.company, _(\"Income\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 385,
      "code_text": "\tdef set_tax_withholding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 417,
      "code_text": "\tdef before_save(self):\n\t\tself.set_account_for_mode_of_payment()\n\t\tself.set_paid_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 421,
      "code_text": "\tdef before_submit(self):\n\t\tself.add_remarks()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 424,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 498,
      "code_text": "\tdef validate_pos_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 511,
      "code_text": "\tdef validate_pos_paid_amount(self):\n\t\tif len(self.payments) == 0 and self.is_pos and flt(self.grand_total) > 0:\n\t\t\tfrappe.throw(_(\"At least one mode of payment is required for POS invoice.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef check_if_consolidated_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 531,
      "code_text": "\tdef before_cancel(self):\n\t\tself.check_if_consolidated_invoice()\n\n\t\tsuper().before_cancel()\n\t\tself.update_time_sheet(None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 537,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 601,
      "code_text": "\tdef update_status_updater_args(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 645,
      "code_text": "\tdef check_credit_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 665,
      "code_text": "\tdef unlink_sales_invoice_from_timesheets(self):\n\t\tfor row in self.timesheets:\n\t\t\ttimesheet = frappe.get_doc(\"Timesheet\", row.time_sheet)\n\t\t\ttimesheet.unlink_sales_invoice(self.name)\n\t\t\ttimesheet.flags.ignore_validate_update_after_submit = True\n\t\t\ttimesheet.db_update_all()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 673,
      "code_text": "\tdef set_missing_values(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 707,
      "code_text": "\tdef update_time_sheet(self, sales_invoice):",
      "args": [
        "self",
        "sales_invoice"
      ]
    },
    {
      "type": "method",
      "line_start": 718,
      "code_text": "\tdef update_time_sheet_detail(self, timesheet, args, sales_invoice):",
      "args": [
        "self",
        "timesheet",
        "args",
        "sales_invoice"
      ]
    },
    {
      "type": "method",
      "line_start": 727,
      "code_text": "\tdef on_update_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 746,
      "code_text": "\tdef set_paid_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 757,
      "code_text": "\tdef set_account_for_mode_of_payment(self):\n\t\tfor payment in self.payments:\n\t\t\tif not payment.account:\n\t\t\t\tpayment.account = get_bank_cash_account(payment.mode_of_payment, self.company).get(\"account\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 762,
      "code_text": "\tdef validate_time_sheets_are_submitted(self):\n\t\tfor data in self.timesheets:\n\t\t\tif data.time_sheet:\n\t\t\t\tstatus = frappe.db.get_value(\"Timesheet\", data.time_sheet, \"status\")\n\t\t\t\tif status not in [\"Submitted\", \"Payslip\"]:\n\t\t\t\t\tfrappe.throw(_(\"Timesheet {0} is already completed or cancelled\").format(data.time_sheet))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 769,
      "code_text": "\tdef set_pos_fields(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 868,
      "code_text": "\tdef get_company_abbr(self):\n\t\treturn frappe.db.sql(\"select abbr from tabCompany where name=%s\", self.company)[0][0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 871,
      "code_text": "\tdef validate_debit_to_acc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 906,
      "code_text": "\tdef clear_unallocated_mode_of_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 915,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 960,
      "code_text": "\tdef set_against_income_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 968,
      "code_text": "\tdef force_set_against_income_account(self):\n\t\tself.set_against_income_account()\n\t\tfrappe.db.set_value(self.doctype, self.name, \"against_income_account\", self.against_income_account)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 972,
      "code_text": "\tdef add_remarks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 982,
      "code_text": "\tdef validate_auto_set_posting_time(self):\n\t\t# Don't auto set the posting date and time if invoice is amended\n\t\tif self.is_new() and self.amended_from:\n\t\t\tself.set_posting_time = 1\n\n\t\tself.validate_posting_time()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 989,
      "code_text": "\tdef so_dn_required(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1009,
      "code_text": "\tdef validate_proj_cust(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1020,
      "code_text": "\tdef validate_pos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1028,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1039,
      "code_text": "\tdef validate_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1052,
      "code_text": "\tdef allow_write_off_only_on_pos(self):\n\t\tif not self.is_pos and self.write_off_account:\n\t\t\tself.write_off_account = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1056,
      "code_text": "\tdef validate_write_off_account(self):\n\t\tif flt(self.write_off_amount) and not self.write_off_account:\n\t\t\tself.write_off_account = frappe.get_cached_value(\"Company\", self.company, \"write_off_account\")\n\n\t\tif flt(self.write_off_amount) and not self.write_off_account:\n\t\t\tmsgprint(_(\"Please enter Write Off Account\"), raise_exception=1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1063,
      "code_text": "\tdef validate_account_for_change_amount(self):\n\t\tif flt(self.change_amount) and not self.account_for_change_amount:\n\t\t\tmsgprint(_(\"Please enter Account for Change Amount\"), raise_exception=1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1067,
      "code_text": "\tdef validate_dropship_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1079,
      "code_text": "\tdef update_current_stock(self):\n\t\tfor item in self.items:\n\t\t\titem.set_actual_qty()\n\n\t\tfor packed_item in self.packed_items:\n\t\t\tpacked_item.set_actual_and_projected_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1086,
      "code_text": "\tdef update_packing_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1094,
      "code_text": "\tdef set_billing_hours_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1104,
      "code_text": "\tdef update_timesheet_billing_for_project(self):\n\t\tif not self.timesheets and self.project and self.is_auto_fetch_timesheet_enabled():\n\t\t\tself.add_timesheet_data()\n\t\telse:\n\t\t\tself.calculate_billing_amount_for_timesheet()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1111,
      "code_text": "\tdef is_auto_fetch_timesheet_enabled(self):\n\t\treturn frappe.db.get_single_value(\"Projects Settings\", \"fetch_timesheet_in_sales_invoice\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1115,
      "code_text": "\tdef add_timesheet_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1133,
      "code_text": "\tdef calculate_billing_amount_for_timesheet(self):\n\t\tdef timesheet_sum(field):\n\t\t\treturn sum((ts.get(field) or 0.0) for ts in self.timesheets)\n\n\t\tself.total_billing_amount = timesheet_sum(\"billing_amount\")\n\t\tself.total_billing_hours = timesheet_sum(\"billing_hours\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1140,
      "code_text": "\tdef get_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1162,
      "code_text": "\tdef set_income_account_for_fixed_assets(self):\n\t\tfor item in self.items:\n\t\t\titem.set_income_account_for_fixed_asset(self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1166,
      "code_text": "\tdef check_prev_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1180,
      "code_text": "\tdef make_gl_entries(self, gl_entries=None, from_repost=False):",
      "args": [
        "self",
        "gl_entries",
        "from_repost"
      ]
    },
    {
      "type": "method",
      "line_start": 1222,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None):",
      "args": [
        "self",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 1250,
      "code_text": "\tdef make_customer_gl_entry(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1292,
      "code_text": "\tdef make_tax_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1323,
      "code_text": "\tdef make_internal_transfer_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1341,
      "code_text": "\tdef make_item_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1445,
      "code_text": "\tdef get_asset(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1458,
      "code_text": "\tdef enable_discount_accounting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1466,
      "code_text": "\tdef set_asset_status(self, asset):\n\t\tif self.is_return:\n\t\t\tasset.set_status()\n\t\telse:\n\t\t\tasset.set_status(\"Sold\" if self.docstatus == 1 else None)",
      "args": [
        "self",
        "asset"
      ]
    },
    {
      "type": "method",
      "line_start": 1472,
      "code_text": "\tdef make_loyalty_point_redemption_gle(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1506,
      "code_text": "\tdef make_pos_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1564,
      "code_text": "\tdef get_gle_for_change_amount(self) -> list[dict]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1605,
      "code_text": "\tdef make_write_off_gl_entry(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1661,
      "code_text": "\tdef make_gle_for_rounding_adjustment(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1712,
      "code_text": "\tdef update_billing_status_in_dn(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 1738,
      "code_text": "\tdef on_recurring(self, reference_doc, auto_repeat_doc):\n\t\tself.set(\"write_off_amount\", reference_doc.get(\"write_off_amount\"))\n\t\tself.due_date = None",
      "args": [
        "self",
        "reference_doc",
        "auto_repeat_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1742,
      "code_text": "\tdef update_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1753,
      "code_text": "\tdef verify_payment_amount_is_positive(self):\n\t\tfor entry in self.payments:\n\t\t\tif entry.amount < 0:\n\t\t\t\tfrappe.throw(_(\"Row #{0} (Payment Table): Amount must be positive\").format(entry.idx))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1758,
      "code_text": "\tdef verify_payment_amount_is_negative(self):\n\t\tfor entry in self.payments:\n\t\t\tif entry.amount > 0:\n\t\t\t\tfrappe.throw(_(\"Row #{0} (Payment Table): Amount must be negative\").format(entry.idx))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1764,
      "code_text": "\tdef make_loyalty_point_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1804,
      "code_text": "\tdef delete_loyalty_point_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1829,
      "code_text": "\tdef set_loyalty_program_tier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1839,
      "code_text": "\tdef get_returned_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1852,
      "code_text": "\tdef apply_loyalty_points(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1896,
      "code_text": "\tdef set_status(self, update=False, status=None, update_modified=True):",
      "args": [
        "self",
        "update",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "function",
      "line_start": 1977,
      "code_text": "def get_discounting_status(sales_invoice):",
      "args": [
        "sales_invoice"
      ]
    },
    {
      "type": "function",
      "line_start": 2412,
      "code_text": "def get_received_items(reference_name, doctype, reference_fieldname):",
      "args": [
        "reference_name",
        "doctype",
        "reference_fieldname"
      ]
    },
    {
      "type": "function",
      "line_start": 2476,
      "code_text": "def update_pi_items(\n\tdoc,\n\tdetail_field,\n\tparent_field,\n\tsales_item_map,\n\tpurchase_item_map,\n\tparent_child_map,\n\twarehouse_map,\n):",
      "args": [
        "doc",
        "detail_field",
        "parent_field",
        "sales_item_map",
        "purchase_item_map",
        "parent_child_map",
        "warehouse_map"
      ]
    },
    {
      "type": "function",
      "line_start": 2496,
      "code_text": "def update_pr_items(doc, sales_item_map, purchase_item_map, parent_child_map, warehouse_map):\n\tfor item in doc.get(\"items\"):\n\t\titem.warehouse = warehouse_map.get(sales_item_map.get(item.delivery_note_item))\n\t\tif not item.warehouse and item.get(\"purchase_order\") and item.get(\"purchase_order_item\"):\n\t\t\titem.warehouse = frappe.db.get_value(\"Purchase Order Item\", item.purchase_order_item, \"warehouse\")",
      "args": [
        "doc",
        "sales_item_map",
        "purchase_item_map",
        "parent_child_map",
        "warehouse_map"
      ]
    },
    {
      "type": "function",
      "line_start": 2503,
      "code_text": "def get_delivery_note_details(internal_reference):\n\tsi_item_details = frappe.get_all(\n\t\t\"Delivery Note Item\", fields=[\"name\", \"so_detail\"], filters={\"parent\": internal_reference}\n\t)\n\n\treturn {d.name: d.so_detail for d in si_item_details if d.so_detail}",
      "args": [
        "internal_reference"
      ]
    },
    {
      "type": "function",
      "line_start": 2511,
      "code_text": "def get_sales_invoice_details(internal_reference):",
      "args": [
        "internal_reference"
      ]
    },
    {
      "type": "function",
      "line_start": 2652,
      "code_text": "def get_all_mode_of_payments(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2663,
      "code_text": "def get_mode_of_payments_info(mode_of_payments, company):",
      "args": [
        "mode_of_payments",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2685,
      "code_text": "def get_mode_of_payment_info(mode_of_payment, company):",
      "args": [
        "mode_of_payment",
        "company"
      ]
    }
  ],
  "erpnext\\stock\\serial_batch_bundle.py": [
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_serial_nos_from_bundle(serial_and_batch_bundle, serial_nos=None):\n\treturn get_serial_nos(serial_and_batch_bundle, serial_nos=serial_nos)",
      "args": [
        "serial_and_batch_bundle",
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 411,
      "code_text": "def get_serial_nos(serial_and_batch_bundle, serial_nos=None):",
      "args": [
        "serial_and_batch_bundle",
        "serial_nos"
      ]
    },
    {
      "type": "class",
      "line_start": 836,
      "code_text": "class SerialBatchCreation:"
    },
    {
      "type": "function",
      "line_start": 592,
      "code_text": "def is_rejected(voucher_type, voucher_detail_no, warehouse):",
      "args": [
        "voucher_type",
        "voucher_detail_no",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 483,
      "code_text": "class SerialNoValuation(DeprecatedSerialNoValuation):"
    },
    {
      "type": "class",
      "line_start": 601,
      "code_text": "class BatchNoValuation(DeprecatedBatchNoValuation):"
    },
    {
      "type": "function",
      "line_start": 427,
      "code_text": "def get_batches_from_bundle(serial_and_batch_bundle, batches=None):",
      "args": [
        "serial_and_batch_bundle",
        "batches"
      ]
    },
    {
      "type": "function",
      "line_start": 756,
      "code_text": "def get_batch_nos(serial_and_batch_bundle):",
      "args": [
        "serial_and_batch_bundle"
      ]
    },
    {
      "type": "function",
      "line_start": 1234,
      "code_text": "def get_serial_nos_batch(serial_nos):",
      "args": [
        "serial_nos"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class SerialBatchBundle:"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef __init__(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef process_serial_and_batch_bundle(self):\n\t\tif self.item_details.has_serial_no:\n\t\t\tself.process_serial_no()\n\t\telif self.item_details.has_batch_no:\n\t\t\tself.process_batch_no()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef set_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef process_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef is_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef make_serial_batch_no_bundle_for_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef make_serial_batch_no_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef validate_actual_qty(self, sn_doc):",
      "args": [
        "self",
        "sn_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef validate_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef set_serial_and_batch_bundle(self, sn_doc):",
      "args": [
        "self",
        "sn_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 200,
      "code_text": "\tdef child_doctype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef is_rejected_entry(self):\n\t\treturn is_rejected(self.sle.voucher_type, self.sle.voucher_detail_no, self.sle.warehouse)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef process_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef validate_item_and_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 259,
      "code_text": "\tdef delink_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef post_process(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 308,
      "code_text": "\tdef cancel_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 316,
      "code_text": "\tdef is_pos_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 327,
      "code_text": "\tdef submit_serial_and_batch_bundle(self):\n\t\tdoc = frappe.get_doc(\"Serial and Batch Bundle\", self.sle.serial_and_batch_bundle)\n\t\tself.validate_actual_qty(doc)\n\n\t\tdoc.flags.ignore_voucher_validation = True\n\t\tdoc.submit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 334,
      "code_text": "\tdef set_warehouse_and_status_in_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 391,
      "code_text": "\tdef set_batch_no_in_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 451,
      "code_text": "def get_serial_or_batch_nos(bundle):",
      "args": [
        "bundle"
      ]
    },
    {
      "type": "method",
      "line_start": 484,
      "code_text": "\tdef __init__(self, **kwargs):\n\t\tfor key, value in kwargs.items():\n\t\t\tsetattr(self, key, value)\n\n\t\tself.calculate_stock_value_change()\n\t\tself.calculate_valuation_rate()",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 491,
      "code_text": "\tdef calculate_stock_value_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 512,
      "code_text": "\tdef get_incoming_rate_from_bundle(self, serial_no) -> float:",
      "args": [
        "self",
        "serial_no"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef get_serial_nos(self):\n\t\tif self.sle.get(\"serial_nos\"):\n\t\t\treturn self.sle.serial_nos\n\n\t\treturn get_serial_nos(self.sle.serial_and_batch_bundle)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 557,
      "code_text": "\tdef calculate_valuation_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 582,
      "code_text": "\tdef is_rejected_entry(self):\n\t\treturn is_rejected(self.sle.voucher_type, self.sle.voucher_detail_no, self.sle.warehouse)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 585,
      "code_text": "\tdef get_incoming_rate(self):\n\t\treturn abs(flt(self.stock_value_change) / flt(self.sle.actual_qty))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 588,
      "code_text": "\tdef get_incoming_rate_of_serial_no(self, serial_no):\n\t\treturn self.serial_no_incoming_rate.get(serial_no, 0.0)",
      "args": [
        "self",
        "serial_no"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef __init__(self, **kwargs):",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 611,
      "code_text": "\tdef calculate_avg_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef get_batch_no_ledgers(self) -> list[dict]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 685,
      "code_text": "\tdef prepare_batches(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 710,
      "code_text": "\tdef get_batch_nos(self) -> list:\n\t\tif self.sle.get(\"batch_nos\"):\n\t\t\treturn self.sle.batch_nos\n\n\t\treturn get_batch_nos(self.sle.serial_and_batch_bundle)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 716,
      "code_text": "\tdef set_stock_value_difference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 732,
      "code_text": "\tdef calculate_valuation_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 742,
      "code_text": "\tdef get_incoming_rate(self):\n\t\tif not self.sle.actual_qty:\n\t\t\tself.sle.actual_qty = self.get_actual_qty()\n\n\t\treturn abs(flt(self.stock_value_change) / flt(self.sle.actual_qty))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 748,
      "code_text": "\tdef get_actual_qty(self):\n\t\ttotal_qty = 0.0\n\t\tfor batch_no in self.available_qty:\n\t\t\ttotal_qty += self.available_qty[batch_no]\n\n\t\treturn total_qty",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 773,
      "code_text": "def get_empty_batches_based_work_order(work_order, item_code):",
      "args": [
        "work_order",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 796,
      "code_text": "def get_batches_from_work_order(work_order, item_code):",
      "args": [
        "work_order",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 807,
      "code_text": "def get_batches_from_stock_entries(work_order, item_code):",
      "args": [
        "work_order",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 825,
      "code_text": "def set_batch_details_from_package(ids, batches):",
      "args": [
        "ids",
        "batches"
      ]
    },
    {
      "type": "method",
      "line_start": 837,
      "code_text": "\tdef __init__(self, args):\n\t\tself.set(args)\n\t\tself.set_item_details()\n\t\tself.set_other_details()",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 842,
      "code_text": "\tdef set(self, args):\n\t\tself.__dict__ = {}\n\t\tfor key, value in args.items():\n\t\t\tsetattr(self, key, value)\n\t\t\tself.__dict__[key] = value",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 848,
      "code_text": "\tdef get(self, key):\n\t\treturn self.__dict__.get(key)",
      "args": [
        "self",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 851,
      "code_text": "\tdef set_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 869,
      "code_text": "\tdef set_other_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 883,
      "code_text": "\tdef duplicate_package(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 909,
      "code_text": "\tdef remove_returned_serial_nos(self, package):",
      "args": [
        "self",
        "package"
      ]
    },
    {
      "type": "method",
      "line_start": 918,
      "code_text": "\tdef make_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 955,
      "code_text": "\tdef add_serial_nos_for_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 965,
      "code_text": "\tdef update_serial_and_batch_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 977,
      "code_text": "\tdef validate_qty(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 988,
      "code_text": "\tdef set_auto_serial_batch_entries_for_outward(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1023,
      "code_text": "\tdef set_auto_serial_batch_entries_for_inward(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1039,
      "code_text": "\tdef make_serial_no_if_not_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1048,
      "code_text": "\tdef make_serial_nos(self, serial_nos):",
      "args": [
        "self",
        "serial_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 1092,
      "code_text": "\tdef set_serial_batch_entries(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1131,
      "code_text": "\tdef create_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1162,
      "code_text": "\tdef get_auto_created_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1219,
      "code_text": "def get_serial_or_batch_items(items):",
      "args": [
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 1245,
      "code_text": "def update_batch_qty(voucher_type, voucher_no, via_landed_cost_voucher=False):",
      "args": [
        "voucher_type",
        "voucher_no",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "function",
      "line_start": 1269,
      "code_text": "def throw_negative_batch_validation(batch_no, warehouse, qty):",
      "args": [
        "batch_no",
        "warehouse",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 1278,
      "code_text": "def get_distinct_batches(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_entry\\payment_entry.py": [
    {
      "type": "function",
      "line_start": 2960,
      "code_text": "def get_payment_entry(\n\tdt,\n\tdn,\n\tparty_amount=None,\n\tbank_account=None,\n\tbank_amount=None,\n\tparty_type=None,\n\tpayment_type=None,\n\treference_date=None,\n\tignore_permissions=False,\n\tcreated_from_payment_request=False,\n):",
      "args": [
        "dt",
        "dn",
        "party_amount",
        "bank_account",
        "bank_amount",
        "party_type",
        "payment_type",
        "reference_date",
        "ignore_permissions",
        "created_from_payment_request"
      ]
    },
    {
      "type": "function",
      "line_start": 2780,
      "code_text": "def get_party_details(company, party_type, party, date, cost_center=None):",
      "args": [
        "company",
        "party_type",
        "party",
        "date",
        "cost_center"
      ]
    },
    {
      "type": "function",
      "line_start": 2808,
      "code_text": "def get_account_details(account, date, cost_center=None):",
      "args": [
        "account",
        "date",
        "cost_center"
      ]
    },
    {
      "type": "function",
      "line_start": 3307,
      "code_text": "def get_bank_cash_account(doc, bank_account, ignore_permissions=False):",
      "args": [
        "doc",
        "bank_account",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 2334,
      "code_text": "def validate_inclusive_tax(tax, doc):",
      "args": [
        "tax",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 2310,
      "code_text": "def get_payment_request_outstanding_set_in_references(references=None):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 2365,
      "code_text": "def get_outstanding_reference_documents(args, validate=False):",
      "args": [
        "args",
        "validate"
      ]
    },
    {
      "type": "function",
      "line_start": 2869,
      "code_text": "def get_reference_details(\n\treference_doctype, reference_name, party_account_currency, party_type=None, party=None\n):",
      "args": [
        "reference_doctype",
        "reference_name",
        "party_account_currency",
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 3175,
      "code_text": "def allocate_open_payment_requests_to_references(references=None, precision=None):",
      "args": [
        "references",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 3295,
      "code_text": "def update_accounting_dimensions(pe, doc):",
      "args": [
        "pe",
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 60,
      "code_text": "class InvalidPaymentEntry(ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 64,
      "code_text": "class PaymentEntry(AccountsController):"
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tif not self.is_new():\n\t\t\tself.setup_party_account_field()",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef setup_party_account_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef before_save(self):\n\t\tself.set_matched_unset_payment_requests_to_response()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef validate_for_repost(self):\n\t\tvalidate_docs_for_voucher_types([\"Payment Entry\"])\n\t\tvalidate_docs_for_deferred_accounting([self.name], [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef on_update_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef set_liability_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 295,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 318,
      "code_text": "\tdef update_payment_requests(self, cancel=False):\n\t\tfrom erpnext.accounts.doctype.payment_request.payment_request import (\n\t\t\tupdate_payment_requests_as_per_pe_references,\n\t\t)\n\n\t\tupdate_payment_requests_as_per_pe_references(self.references, cancel=cancel)",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 325,
      "code_text": "\tdef update_outstanding_amounts(self):\n\t\tself.set_missing_ref_details(force=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef validate_duplicate_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 341,
      "code_text": "\tdef set_bank_account_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef validate_payment_type_with_outstanding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 363,
      "code_text": "\tdef validate_allocated_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 382,
      "code_text": "\tdef validate_allocated_amount_as_per_payment_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 403,
      "code_text": "\tdef term_based_allocation_enabled_for_reference(\n\t\tself, reference_doctype: str, reference_name: str",
      "args": [
        "self",
        "reference_doctype: str",
        "reference_name: str"
      ]
    },
    {
      "type": "method",
      "line_start": 417,
      "code_text": "\tdef validate_allocated_amount_with_latest_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 502,
      "code_text": "\tdef delink_advance_entry_references(self):\n\t\tfor reference in self.references:\n\t\t\tif reference.reference_doctype in (\"Sales Invoice\", \"Purchase Invoice\"):\n\t\t\t\tdoc = frappe.get_doc(reference.reference_doctype, reference.reference_name)\n\t\t\t\tdoc.delink_advance_entries(self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 508,
      "code_text": "\tdef set_missing_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 561,
      "code_text": "\tdef set_missing_ref_details(\n\t\tself,\n\t\tforce: bool = False,",
      "args": [
        "self",
        "force: bool",
        "update_ref_details_only_for",
        "reference_exchange_details"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef validate_payment_type(self):\n\t\tif self.payment_type not in (\"Receive\", \"Pay\", \"Internal Transfer\"):\n\t\t\tfrappe.throw(_(\"Payment Type must be one of Receive, Pay and Internal Transfer\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 611,
      "code_text": "\tdef validate_party_details(self):\n\t\tif self.party and not frappe.db.exists(self.party_type, self.party):\n\t\t\tfrappe.throw(_(\"{0} {1} does not exist\").format(_(self.party_type), self.party))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 615,
      "code_text": "\tdef set_exchange_rate(self, ref_doc=None):\n\t\tself.set_source_exchange_rate(ref_doc)\n\t\tself.set_target_exchange_rate(ref_doc)",
      "args": [
        "self",
        "ref_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 619,
      "code_text": "\tdef set_source_exchange_rate(self, ref_doc=None):",
      "args": [
        "self",
        "ref_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef set_target_exchange_rate(self, ref_doc=None):",
      "args": [
        "self",
        "ref_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 643,
      "code_text": "\tdef validate_mandatory(self):\n\t\tfor field in (\"paid_amount\", \"received_amount\", \"source_exchange_rate\", \"target_exchange_rate\"):\n\t\t\tif not self.get(field):\n\t\t\t\tfrappe.throw(_(\"{0} is mandatory\").format(self.meta.get_label(field)))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 648,
      "code_text": "\tdef validate_reference_documents(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 715,
      "code_text": "\tdef get_valid_reference_doctypes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 723,
      "code_text": "\tdef validate_paid_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 751,
      "code_text": "\tdef validate_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 782,
      "code_text": "\tdef update_payment_schedule(self, cancel=0):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 896,
      "code_text": "\tdef get_allocated_amount_in_transaction_currency(\n\t\tself, allocated_amount, reference_doctype, reference_docname\n\t):",
      "args": [
        "self",
        "allocated_amount",
        "reference_doctype",
        "reference_docname"
      ]
    },
    {
      "type": "method",
      "line_start": 921,
      "code_text": "\tdef set_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 931,
      "code_text": "\tdef set_total_in_words(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 946,
      "code_text": "\tdef set_tax_withholding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 997,
      "code_text": "\tdef calculate_tax_withholding_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1016,
      "code_text": "\tdef get_order_wise_tax_withholding_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1033,
      "code_text": "\tdef apply_taxes(self):\n\t\tself.initialize_taxes()\n\t\tself.determine_exclusive_rate()\n\t\tself.calculate_taxes()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1038,
      "code_text": "\tdef set_amounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1046,
      "code_text": "\tdef validate_amounts(self):\n\t\tself.validate_received_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1049,
      "code_text": "\tdef validate_received_amount(self):\n\t\tif self.paid_from_account_currency == self.paid_to_account_currency:\n\t\t\tif self.paid_amount < self.received_amount:\n\t\t\t\tfrappe.throw(_(\"Received Amount cannot be greater than Paid Amount\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1054,
      "code_text": "\tdef set_received_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1062,
      "code_text": "\tdef set_amounts_after_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1091,
      "code_text": "\tdef set_amounts_in_company_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1104,
      "code_text": "\tdef calculate_base_allocated_amount_for_reference(self, d) -> float:",
      "args": [
        "self",
        "d"
      ]
    },
    {
      "type": "method",
      "line_start": 1148,
      "code_text": "\tdef set_total_allocated_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1161,
      "code_text": "\tdef set_unallocated_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1190,
      "code_text": "\tdef set_exchange_gain_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1238,
      "code_text": "\tdef set_difference_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1261,
      "code_text": "\tdef get_included_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1276,
      "code_text": "\tdef clear_unallocated_reference_document_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1284,
      "code_text": "\tdef set_title(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1294,
      "code_text": "\tdef validate_transaction_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1302,
      "code_text": "\tdef set_remarks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1351,
      "code_text": "\tdef set_transaction_currency_and_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1363,
      "code_text": "\tdef build_gl_map(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1376,
      "code_text": "\tdef make_gl_entries(self, cancel=0, adv_adj=0):",
      "args": [
        "self",
        "cancel",
        "adv_adj"
      ]
    },
    {
      "type": "method",
      "line_start": 1387,
      "code_text": "\tdef add_party_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1511,
      "code_text": "\tdef make_advance_gl_entries(\n\t\tself, entry: object | dict = None, cancel: bool = 0, update_outstanding: str = \"Yes\"",
      "args": [
        "self",
        "entry",
        "cancel: bool",
        "update_outstanding: str"
      ]
    },
    {
      "type": "method",
      "line_start": 1523,
      "code_text": "\tdef add_advance_gl_entries(self, gl_entries: list, entry: object | dict | None):",
      "args": [
        "self",
        "gl_entries: list",
        "entry"
      ]
    },
    {
      "type": "method",
      "line_start": 1541,
      "code_text": "\tdef get_dr_and_account_for_advances(self, reference):",
      "args": [
        "self",
        "reference"
      ]
    },
    {
      "type": "method",
      "line_start": 1561,
      "code_text": "\tdef add_advance_gl_for_reference(self, gl_entries, invoice):",
      "args": [
        "self",
        "gl_entries",
        "invoice"
      ]
    },
    {
      "type": "method",
      "line_start": 1640,
      "code_text": "\tdef add_bank_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1677,
      "code_text": "\tdef add_tax_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1742,
      "code_text": "\tdef add_deductions_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1766,
      "code_text": "\tdef get_party_account_for_taxes(self):\n\t\tif self.payment_type == \"Receive\":\n\t\t\treturn self.paid_to\n\t\telif self.payment_type in (\"Pay\", \"Internal Transfer\"):\n\t\t\treturn self.paid_from",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1772,
      "code_text": "\tdef get_value_in_transaction_currency(self, account_currency, gl_dict, field):",
      "args": [
        "self",
        "account_currency",
        "gl_dict",
        "field"
      ]
    },
    {
      "type": "method",
      "line_start": 1780,
      "code_text": "\tdef update_advance_paid(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1793,
      "code_text": "\tdef on_recurring(self, reference_doc, auto_repeat_doc):\n\t\tself.reference_no = reference_doc.name\n\t\tself.reference_date = nowdate()",
      "args": [
        "self",
        "reference_doc",
        "auto_repeat_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1797,
      "code_text": "\tdef calculate_deductions(self, tax_details):\n\t\treturn {\n\t\t\t\"account\": tax_details[\"tax\"][\"account_head\"],\n\t\t\t\"cost_center\": frappe.get_cached_value(\"Company\", self.company, \"cost_center\"),\n\t\t\t\"amount\": self.total_allocated_amount * (tax_details[\"tax\"][\"rate\"] / 100),\n\t\t}",
      "args": [
        "self",
        "tax_details"
      ]
    },
    {
      "type": "method",
      "line_start": 1804,
      "code_text": "\tdef set_gain_or_loss(self, account_details=None):",
      "args": [
        "self",
        "account_details"
      ]
    },
    {
      "type": "method",
      "line_start": 1820,
      "code_text": "\tdef get_exchange_rate(self):\n\t\treturn self.source_exchange_rate if self.payment_type == \"Receive\" else self.target_exchange_rate",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1823,
      "code_text": "\tdef initialize_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1838,
      "code_text": "\tdef determine_exclusive_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1857,
      "code_text": "\tdef calculate_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1910,
      "code_text": "\tdef get_current_tax_amount(self, tax):",
      "args": [
        "self",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 1937,
      "code_text": "\tdef get_current_tax_fraction(self, tax):",
      "args": [
        "self",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 1959,
      "code_text": "\tdef set_matched_unset_payment_requests_to_response(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1977,
      "code_text": "\tdef allocate_amount_to_references(self, paid_amount, paid_amount_change, allocate_payment_amount):",
      "args": [
        "self",
        "paid_amount",
        "paid_amount_change",
        "allocate_payment_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 2149,
      "code_text": "\tdef set_matched_payment_requests(self, matched_payment_requests):",
      "args": [
        "self",
        "matched_payment_requests"
      ]
    },
    {
      "type": "function",
      "line_start": 2182,
      "code_text": "def get_matched_payment_request_of_references(references=None):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 2237,
      "code_text": "def get_references_outstanding_amount(references=None):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 2254,
      "code_text": "def get_outstanding_of_references_with_payment_term(references=None):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 2285,
      "code_text": "def get_outstanding_of_references_with_no_payment_term(references):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 2531,
      "code_text": "def split_invoices_based_on_payment_terms(outstanding_invoices, company) -> list:",
      "args": [
        "outstanding_invoices",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2561,
      "code_text": "def get_currency_data(outstanding_invoices: list, company: str | None = None) -> dict:",
      "args": [
        "outstanding_invoices: list",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2583,
      "code_text": "def get_split_invoice_rows(invoice: dict, payment_term_template: str, exc_rates: dict) -> list:",
      "args": [
        "invoice: dict",
        "payment_term_template: str",
        "exc_rates: dict"
      ]
    },
    {
      "type": "function",
      "line_start": 2630,
      "code_text": "def get_orders_to_be_billed(\n\tposting_date,\n\tparty_type,\n\tparty,\n\tcompany,\n\tparty_account_currency,\n\tcompany_currency,\n\tcost_center=None,\n\tfilters=None,\n):",
      "args": [
        "posting_date",
        "party_type",
        "party",
        "company",
        "party_account_currency",
        "company_currency",
        "cost_center",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 2722,
      "code_text": "def get_negative_outstanding_invoices(\n\tparty_type,\n\tparty,\n\tparty_account,\n\tparty_account_currency,\n\tcompany_currency,\n\tcost_center=None,\n\tcondition=None,\n):",
      "args": [
        "party_type",
        "party",
        "party_account",
        "party_account_currency",
        "company_currency",
        "cost_center",
        "condition"
      ]
    },
    {
      "type": "function",
      "line_start": 2831,
      "code_text": "def get_company_defaults(company):\n\tfields = [\"write_off_account\", \"exchange_gain_loss_account\", \"cost_center\"]\n\treturn frappe.get_cached_value(\"Company\", company, fields, as_dict=1)",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2836,
      "code_text": "def get_outstanding_on_journal_entry(voucher_no, party_type, party):",
      "args": [
        "voucher_no",
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 3128,
      "code_text": "def get_open_payment_requests_for_references(references=None):",
      "args": [
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 3324,
      "code_text": "def set_party_type(dt):\n\tif dt in (\"Sales Invoice\", \"Sales Order\", \"Dunning\"):\n\t\tparty_type = \"Customer\"\n\telif dt in (\"Purchase Invoice\", \"Purchase Order\"):\n\t\tparty_type = \"Supplier\"\n\treturn party_type",
      "args": [
        "dt"
      ]
    },
    {
      "type": "function",
      "line_start": 3332,
      "code_text": "def set_party_account(dt, dn, doc, party_type):",
      "args": [
        "dt",
        "dn",
        "doc",
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 3342,
      "code_text": "def set_party_account_currency(dt, party_account, doc):\n\tif dt not in (\"Sales Invoice\", \"Purchase Invoice\"):\n\t\tparty_account_currency = get_account_currency(party_account)\n\telse:\n\t\tparty_account_currency = doc.get(\"party_account_currency\") or get_account_currency(party_account)\n\treturn party_account_currency",
      "args": [
        "dt",
        "party_account",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3350,
      "code_text": "def set_payment_type(dt, doc):",
      "args": [
        "dt",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3362,
      "code_text": "def set_grand_total_and_outstanding_amount(party_amount, dt, party_account_currency, doc):",
      "args": [
        "party_amount",
        "dt",
        "party_account_currency",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3384,
      "code_text": "def set_paid_amount_and_received_amount(\n\tdt, party_account_currency, bank, outstanding_amount, payment_type, bank_amount, doc\n):",
      "args": [
        "dt",
        "party_account_currency",
        "bank",
        "outstanding_amount",
        "payment_type",
        "bank_amount",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3414,
      "code_text": "def apply_early_payment_discount(paid_amount, received_amount, doc, party_account_currency, reference_date):",
      "args": [
        "paid_amount",
        "received_amount",
        "doc",
        "party_account_currency",
        "reference_date"
      ]
    },
    {
      "type": "function",
      "line_start": 3452,
      "code_text": "def set_pending_discount_loss(pe, doc, discount_amount, base_total_discount_loss, party_account_currency):",
      "args": [
        "pe",
        "doc",
        "discount_amount",
        "base_total_discount_loss",
        "party_account_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 3480,
      "code_text": "def split_early_payment_discount_loss(pe, doc, valid_discounts) -> float:",
      "args": [
        "pe",
        "doc",
        "valid_discounts"
      ]
    },
    {
      "type": "function",
      "line_start": 3494,
      "code_text": "def get_total_discount_percent(doc, valid_discounts) -> float:",
      "args": [
        "doc",
        "valid_discounts"
      ]
    },
    {
      "type": "function",
      "line_start": 3515,
      "code_text": "def add_income_discount_loss(pe, doc, total_discount_percent) -> float:",
      "args": [
        "pe",
        "doc",
        "total_discount_percent"
      ]
    },
    {
      "type": "function",
      "line_start": 3533,
      "code_text": "def add_tax_discount_loss(pe, doc, total_discount_percentage) -> float:",
      "args": [
        "pe",
        "doc",
        "total_discount_percentage"
      ]
    },
    {
      "type": "function",
      "line_start": 3568,
      "code_text": "def get_reference_as_per_payment_terms(\n\tpayment_schedule, dt, dn, doc, grand_total, outstanding_amount, party_account_currency\n):",
      "args": [
        "payment_schedule",
        "dt",
        "dn",
        "doc",
        "grand_total",
        "outstanding_amount",
        "party_account_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 3605,
      "code_text": "def get_paid_amount(dt, dn, party_type, party, account, due_date):",
      "args": [
        "dt",
        "dn",
        "party_type",
        "party",
        "account",
        "due_date"
      ]
    },
    {
      "type": "function",
      "line_start": 3630,
      "code_text": "def make_payment_order(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3665,
      "code_text": "def add_regional_gl_entries(gl_entries, doc):\n\treturn",
      "args": [
        "gl_entries",
        "doc"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\pick_list\\pick_list.py": [
    {
      "type": "function",
      "line_start": 1168,
      "code_text": "def create_delivery_note(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1369,
      "code_text": "def get_item_details(item_code, uom=None):",
      "args": [
        "item_code",
        "uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1389,
      "code_text": "def get_cost_center(for_item, from_doctype, company):",
      "args": [
        "for_item",
        "from_doctype",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1464,
      "code_text": "def update_common_item_properties(item, location):",
      "args": [
        "item",
        "location"
      ]
    },
    {
      "type": "function",
      "line_start": 1478,
      "code_text": "def get_rejected_warehouses():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 797,
      "code_text": "def update_pick_list_status(pick_list):\n\tif pick_list:\n\t\tdoc = frappe.get_doc(\"Pick List\", pick_list)\n\t\tdoc.run_method(\"update_status\")",
      "args": [
        "pick_list"
      ]
    },
    {
      "type": "function",
      "line_start": 803,
      "code_text": "def get_picked_items_qty(items) -> list[dict]:",
      "args": [
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 823,
      "code_text": "def validate_item_locations(pick_list):\n\tif not pick_list.locations:\n\t\tfrappe.throw(_(\"Add items in the Item Locations table\"))",
      "args": [
        "pick_list"
      ]
    },
    {
      "type": "function",
      "line_start": 883,
      "code_text": "def get_available_item_locations(\n\titem_code,\n\tfrom_warehouses,\n\trequired_qty,\n\tcompany,\n\tignore_validation=False,\n\tpicked_item_details=None,\n\tconsider_rejected_warehouses=False,\n):",
      "args": [
        "item_code",
        "from_warehouses",
        "required_qty",
        "company",
        "ignore_validation",
        "picked_item_details",
        "consider_rejected_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1094,
      "code_text": "def get_available_item_locations_for_batched_item(\n\titem_code,\n\tfrom_warehouses,\n\tconsider_rejected_warehouses=False,\n):",
      "args": [
        "item_code",
        "from_warehouses",
        "consider_rejected_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1240,
      "code_text": "def map_pl_locations(pick_list, item_mapper, delivery_note, sales_order=None):",
      "args": [
        "pick_list",
        "item_mapper",
        "delivery_note",
        "sales_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1378,
      "code_text": "def update_delivery_note_item(source, target, delivery_note):",
      "args": [
        "source",
        "target",
        "delivery_note"
      ]
    },
    {
      "type": "function",
      "line_start": 1404,
      "code_text": "def stock_entry_exists(pick_list_name):\n\treturn frappe.db.exists(\"Stock Entry\", {\"pick_list\": pick_list_name})",
      "args": [
        "pick_list_name"
      ]
    },
    {
      "type": "class",
      "line_start": 35,
      "code_text": "class PickList(Document):"
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef onload(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef validate(self):\n\t\tself.validate_expired_batches()\n\t\tself.validate_for_qty()\n\t\tself.validate_stock_qty()\n\t\tself.check_serial_no_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef before_save(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef validate_stock_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef check_serial_no_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef validate_sales_order_percentage(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef before_submit(self):\n\t\tself.validate_sales_order()\n\t\tself.validate_picked_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef validate_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef validate_picked_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef validate_expired_batches(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 236,
      "code_text": "\tdef make_bundle_using_old_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 266,
      "code_text": "\tdef on_update_after_submit(self) -> None:\n\t\tif self.has_reserved_stock():\n\t\t\tmsg = _(\n\t\t\t\t\"The Pick List having Stock Reservation Entries cannot be updated. If you need to make changes, we recommend canceling the existing Stock Reservation Entries before updating the Pick List.\"\n\t\t\t)\n\t\t\tfrappe.throw(msg)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 286,
      "code_text": "\tdef delink_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef on_update(self):\n\t\tif self.get(\"locations\"):\n\t\t\tself.linked_serial_and_batch_bundle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef linked_serial_and_batch_bundle(self):\n\t\tfor row in self.get(\"locations\"):\n\t\t\tif row.serial_and_batch_bundle:\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\"Serial and Batch Bundle\", row.serial_and_batch_bundle\n\t\t\t\t).set_serial_and_batch_values(self, row)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef on_trash(self):\n\t\tself.remove_serial_and_batch_bundle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 316,
      "code_text": "\tdef remove_serial_and_batch_bundle(self):\n\t\tfor row in self.locations:\n\t\t\tif row.serial_and_batch_bundle:\n\t\t\t\tfrappe.delete_doc(\"Serial and Batch Bundle\", row.serial_and_batch_bundle)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 321,
      "code_text": "\tdef validate_serial_and_batch_bundle(self):\n\t\tfor row in self.locations:\n\t\t\tif row.serial_and_batch_bundle:\n\t\t\t\tdoc = frappe.get_doc(\"Serial and Batch Bundle\", row.serial_and_batch_bundle)\n\t\t\t\tif doc.docstatus == 0:\n\t\t\t\t\tdoc.submit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef update_status(self, status=None, update_modified=True):",
      "args": [
        "self",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 343,
      "code_text": "\tdef update_reference_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 359,
      "code_text": "\tdef update_packed_items_qty(self, packed_items):",
      "args": [
        "self",
        "packed_items"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef update_sales_order_item_qty(self, so_items):",
      "args": [
        "self",
        "so_items"
      ]
    },
    {
      "type": "method",
      "line_start": 393,
      "code_text": "\tdef update_sales_order_picking_status(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 403,
      "code_text": "\tdef create_stock_reservation_entries(self, notify=True) -> None:",
      "args": [
        "self",
        "notify"
      ]
    },
    {
      "type": "method",
      "line_start": 430,
      "code_text": "\tdef cancel_stock_reservation_entries(self, notify=True) -> None:",
      "args": [
        "self",
        "notify"
      ]
    },
    {
      "type": "method",
      "line_start": 441,
      "code_text": "\tdef validate_picked_qty(self, data):",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef set_item_locations(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 547,
      "code_text": "\tdef aggregate_item_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 581,
      "code_text": "\tdef validate_for_qty(self):\n\t\tif self.purpose == \"Material Transfer for Manufacture\" and (\n\t\t\tself.for_qty is None or self.for_qty == 0\n\t\t):\n\t\t\tfrappe.throw(_(\"Qty of Finished Goods Item should be greater than 0.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 587,
      "code_text": "\tdef before_print(self, settings=None):\n\t\tif self.group_same_items:\n\t\t\tself.group_similar_items()",
      "args": [
        "self",
        "settings"
      ]
    },
    {
      "type": "method",
      "line_start": 591,
      "code_text": "\tdef group_similar_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 615,
      "code_text": "\tdef update_bundle_picked_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 630,
      "code_text": "\tdef get_picked_items_details(self, items):",
      "args": [
        "self",
        "items"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef update_picked_item_from_current_pick_list(self, picked_items):",
      "args": [
        "self",
        "picked_items"
      ]
    },
    {
      "type": "method",
      "line_start": 701,
      "code_text": "\tdef _get_pick_list_items(self, items):",
      "args": [
        "self",
        "items"
      ]
    },
    {
      "type": "method",
      "line_start": 736,
      "code_text": "\tdef _get_product_bundles(self) -> dict[str, str]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 749,
      "code_text": "\tdef _get_product_bundle_qty_map(self, bundles: list[str]) -> dict[str, dict[str, float]]:",
      "args": [
        "self",
        "bundles"
      ]
    },
    {
      "type": "method",
      "line_start": 757,
      "code_text": "\tdef _compute_picked_qty_for_bundle(self, bundle_row, bundle_items) -> int:",
      "args": [
        "self",
        "bundle_row",
        "bundle_items"
      ]
    },
    {
      "type": "method",
      "line_start": 772,
      "code_text": "\tdef has_unreserved_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 784,
      "code_text": "\tdef has_reserved_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 828,
      "code_text": "def get_items_with_location_and_quantity(item_doc, item_location_map, docstatus):",
      "args": [
        "item_doc",
        "item_location_map",
        "docstatus"
      ]
    },
    {
      "type": "function",
      "line_start": 938,
      "code_text": "def get_locations_based_on_required_qty(locations, required_qty):",
      "args": [
        "locations",
        "required_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 953,
      "code_text": "def validate_picked_materials(item_code, required_qty, locations, picked_item_details=None):",
      "args": [
        "item_code",
        "required_qty",
        "locations",
        "picked_item_details"
      ]
    },
    {
      "type": "function",
      "line_start": 979,
      "code_text": "def filter_locations_by_picked_materials(locations, picked_item_details) -> list[dict]:",
      "args": [
        "locations",
        "picked_item_details"
      ]
    },
    {
      "type": "function",
      "line_start": 1006,
      "code_text": "def get_available_item_locations_for_serial_and_batched_item(\n\titem_code,\n\tfrom_warehouses,\n\trequired_qty,\n\tcompany,\n\tconsider_rejected_warehouses=False,\n):",
      "args": [
        "item_code",
        "from_warehouses",
        "required_qty",
        "company",
        "consider_rejected_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1045,
      "code_text": "def get_available_item_locations_for_serialized_item(\n\titem_code,\n\tfrom_warehouses,\n\tcompany,\n\tconsider_rejected_warehouses=False,\n):",
      "args": [
        "item_code",
        "from_warehouses",
        "company",
        "consider_rejected_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1138,
      "code_text": "def get_available_item_locations_for_other_item(\n\titem_code,\n\tfrom_warehouses,\n\tcompany,\n\tconsider_rejected_warehouses=False,\n):",
      "args": [
        "item_code",
        "from_warehouses",
        "company",
        "consider_rejected_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1195,
      "code_text": "def create_dn_wo_so(pick_list):",
      "args": [
        "pick_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1212,
      "code_text": "def create_dn_with_so(sales_dict, pick_list):",
      "args": [
        "sales_dict",
        "pick_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1272,
      "code_text": "def add_product_bundles_to_delivery_note(pick_list: \"PickList\", delivery_note, item_mapper) -> None:",
      "args": [
        "pick_list",
        "delivery_note",
        "item_mapper"
      ]
    },
    {
      "type": "function",
      "line_start": 1289,
      "code_text": "def update_packed_item_details(pick_list: \"PickList\", delivery_note) -> None:",
      "args": [
        "pick_list",
        "delivery_note"
      ]
    },
    {
      "type": "function",
      "line_start": 1315,
      "code_text": "def create_stock_entry(pick_list):",
      "args": [
        "pick_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1341,
      "code_text": "def get_pending_work_orders(doctype, txt, searchfield, start, page_length, filters, as_dict):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_length",
        "filters",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 1361,
      "code_text": "def target_document_exists(pick_list_name, purpose):\n\tif purpose == \"Delivery\":\n\t\treturn frappe.db.exists(\"Delivery Note\", {\"pick_list\": pick_list_name, \"docstatus\": 1})\n\n\treturn stock_entry_exists(pick_list_name)",
      "args": [
        "pick_list_name",
        "purpose"
      ]
    },
    {
      "type": "function",
      "line_start": 1398,
      "code_text": "def set_delivery_note_missing_values(target):\n\ttarget.run_method(\"set_missing_values\")\n\ttarget.run_method(\"set_po_nos\")\n\ttarget.run_method(\"calculate_taxes_and_totals\")",
      "args": [
        "target"
      ]
    },
    {
      "type": "function",
      "line_start": 1408,
      "code_text": "def update_stock_entry_based_on_work_order(pick_list, stock_entry):",
      "args": [
        "pick_list",
        "stock_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 1439,
      "code_text": "def update_stock_entry_based_on_material_request(pick_list, stock_entry):",
      "args": [
        "pick_list",
        "stock_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 1454,
      "code_text": "def update_stock_entry_items_with_no_reference(pick_list, stock_entry):",
      "args": [
        "pick_list",
        "stock_entry"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\serial_and_batch_bundle\\test_serial_and_batch_bundle.py": [
    {
      "type": "function",
      "line_start": 905,
      "code_text": "def get_batch_from_bundle(bundle):\n\tfrom erpnext.stock.serial_batch_bundle import get_batch_nos\n\n\tbatches = get_batch_nos(bundle)\n\n\treturn next(iter(batches.keys()))",
      "args": [
        "bundle"
      ]
    },
    {
      "type": "function",
      "line_start": 913,
      "code_text": "def get_serial_nos_from_bundle(bundle):\n\tfrom erpnext.stock.serial_batch_bundle import get_serial_nos\n\n\tserial_nos = get_serial_nos(bundle)\n\treturn sorted(serial_nos) if serial_nos else []",
      "args": [
        "bundle"
      ]
    },
    {
      "type": "function",
      "line_start": 920,
      "code_text": "def make_serial_batch_bundle(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class UnitTestSerialAndBatchBundle(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestSerialandBatchBundle(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef test_naming_for_sabb(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef test_inward_outward_serial_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef test_inward_outward_batch_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef test_old_batch_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef test_old_serial_no_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 402,
      "code_text": "\tdef test_batch_not_belong_to_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef test_auto_delete_draft_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 507,
      "code_text": "\tdef test_serial_and_batch_bundle_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 545,
      "code_text": "\tdef test_auto_cancel_serial_and_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 565,
      "code_text": "\tdef test_batch_duplicate_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 583,
      "code_text": "\tdef test_serial_no_duplicate_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef test_duplicate_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 619,
      "code_text": "\tdef test_serial_no_valuation_for_legacy_ledgers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 724,
      "code_text": "\tdef test_pick_serial_nos_for_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 779,
      "code_text": "\tdef test_auto_create_serial_and_batch_bundle_for_outward_for_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 830,
      "code_text": "\tdef test_voucher_detail_no(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_invoice\\test_purchase_invoice.py": [
    {
      "type": "function",
      "line_start": 2858,
      "code_text": "def make_purchase_invoice(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 2788,
      "code_text": "def check_gl_entries(\n\tdoc,\n\tvoucher_no,\n\texpected_gle,\n\tposting_date,\n\tvoucher_type=\"Purchase Invoice\",\n\tadditional_columns=None,\n):",
      "args": [
        "doc",
        "voucher_no",
        "expected_gle",
        "posting_date",
        "voucher_type",
        "additional_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 2852,
      "code_text": "def unlink_payment_on_cancel_of_invoice(enable=1):\n\taccounts_settings = frappe.get_doc(\"Accounts Settings\")\n\taccounts_settings.unlink_payment_on_cancellation_of_invoice = enable\n\taccounts_settings.save()",
      "args": [
        "enable"
      ]
    },
    {
      "type": "function",
      "line_start": 2777,
      "code_text": "def set_advance_flag(company, flag, default_account):",
      "args": [
        "company",
        "flag",
        "default_account"
      ]
    },
    {
      "type": "function",
      "line_start": 3035,
      "code_text": "def toggle_provisional_accounting_setting(**args):\n\targs = frappe._dict(args)\n\tcompany = frappe.get_doc(\"Company\", args.company or \"_Test Company\")\n\tcompany.enable_provisional_accounting_for_non_stock_items = args.enable or 0\n\tcompany.default_provisional_account = args.provisional_account\n\tcompany.save()",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 3023,
      "code_text": "def setup_provisional_accounting(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 2828,
      "code_text": "def create_tax_witholding_category(category_name, company, account):",
      "args": [
        "category_name",
        "company",
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 2948,
      "code_text": "def make_purchase_invoice_against_cost_center(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 45,
      "code_text": "class TestPurchaseInvoice(IntegrationTestCase, StockTestMixin):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tunlink_payment_on_cancel_of_invoice()\n\t\tfrappe.db.set_single_value(\"Buying Settings\", \"allow_multiple_items\", 1)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef tearDownClass(cls):\n\t\tunlink_payment_on_cancel_of_invoice(0)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_purchase_invoice_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef test_purchase_invoice_received_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_update_received_qty_in_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_gl_entries_without_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef test_gl_entries_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef test_terms_added_after_save(self):\n\t\tpi = frappe.copy_doc(self.globalTestRecords[\"Purchase Invoice\"][1])\n\t\tpi.insert()\n\t\tself.assertTrue(pi.payment_schedule)\n\t\tself.assertEqual(pi.payment_schedule[0].due_date, pi.due_date)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef test_payment_entry_unlink_against_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_purchase_invoice_for_blocked_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 200,
      "code_text": "\tdef test_purchase_invoice_for_blocked_supplier_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef test_purchase_invoice_for_blocked_supplier_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef test_purchase_invoice_for_blocked_supplier_payment_today_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef test_purchase_invoice_for_blocked_supplier_payment_past_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef test_purchase_invoice_blocked_invoice_must_be_in_future(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef test_purchase_invoice_temporary_blocked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef test_purchase_invoice_explicit_block(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef test_gl_entries_with_perpetual_inventory_against_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 329,
      "code_text": "\tdef check_gle_for_pi(self, pi):",
      "args": [
        "self",
        "pi"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef test_purchase_invoice_with_exchange_rate_difference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 386,
      "code_text": "\tdef test_purchase_invoice_with_exchange_rate_difference_for_non_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef test_purchase_invoice_change_naming_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 449,
      "code_text": "\tdef test_gl_entries_for_non_stock_items_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 479,
      "code_text": "\tdef test_purchase_invoice_calculation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef test_purchase_invoice_with_advance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef test_invoice_with_advance_and_multi_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 626,
      "code_text": "\tdef test_total_purchase_cost_for_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 663,
      "code_text": "\tdef test_return_purchase_invoice_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 701,
      "code_text": "\tdef test_standalone_return_using_pi(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 728,
      "code_text": "\tdef test_return_with_lcv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 768,
      "code_text": "\tdef test_multi_currency_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 832,
      "code_text": "\tdef test_purchase_invoice_update_stock_gl_entry_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 866,
      "code_text": "\tdef test_purchase_invoice_for_is_paid_and_update_stock_gl_entry_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 906,
      "code_text": "\tdef test_auto_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 931,
      "code_text": "\tdef test_update_stock_and_purchase_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 959,
      "code_text": "\tdef test_rejected_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 987,
      "code_text": "\tdef test_outstanding_amount_after_advance_jv_cancelation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1020,
      "code_text": "\tdef test_outstanding_amount_after_advance_payment_entry_cancelation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1072,
      "code_text": "\tdef test_purchase_invoice_with_shipping_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1090,
      "code_text": "\tdef test_make_pi_without_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1099,
      "code_text": "\tdef test_duplicate_due_date_in_terms(self):\n\t\tpi = make_purchase_invoice(do_not_save=1)\n\t\tpi.append(\"payment_schedule\", dict(due_date=\"2017-01-01\", invoice_portion=50.00, payment_amount=50))\n\t\tpi.append(\"payment_schedule\", dict(due_date=\"2017-01-01\", invoice_portion=50.00, payment_amount=50))\n\n\t\tself.assertRaises(frappe.ValidationError, pi.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1106,
      "code_text": "\tdef test_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1134,
      "code_text": "\tdef test_purchase_invoice_with_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1162,
      "code_text": "\tdef test_purchase_invoice_without_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1185,
      "code_text": "\tdef test_purchase_invoice_with_project_link(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1226,
      "code_text": "\tdef test_deferred_expense_via_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1297,
      "code_text": "\tdef test_gain_loss_with_advance_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1500,
      "code_text": "\tdef test_purchase_invoice_advance_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1601,
      "code_text": "\tdef test_purchase_gl_with_tax_withholding_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1656,
      "code_text": "\tdef test_provisional_accounting_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1699,
      "code_text": "\tdef test_provisional_accounting_entry_for_over_billing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1748,
      "code_text": "\tdef test_provisional_accounting_entry_for_partial_billing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1787,
      "code_text": "\tdef test_adjust_incoming_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1895,
      "code_text": "\tdef test_adjust_incoming_rate_for_rejected_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1941,
      "code_text": "\tdef test_item_less_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1960,
      "code_text": "\tdef test_batch_expiry_for_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1991,
      "code_text": "\tdef test_advance_entries_as_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2048,
      "code_text": "\tdef test_gl_entries_for_standalone_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2068,
      "code_text": "\tdef test_payment_allocation_for_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2114,
      "code_text": "\tdef test_offsetting_entries_for_accounting_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2168,
      "code_text": "\tdef test_repost_accounting_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2197,
      "code_text": "\tdef test_create_purchase_invoice_without_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2208,
      "code_text": "\tdef test_purchase_invoice_without_supplier_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2233,
      "code_text": "\tdef test_default_cost_center_for_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2257,
      "code_text": "\tdef test_debit_note_with_account_mismatch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2272,
      "code_text": "\tdef test_debit_note_without_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2292,
      "code_text": "\tdef test_purchase_invoice_with_use_serial_batch_field_for_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2378,
      "code_text": "\tdef test_make_pr_and_pi_from_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2428,
      "code_text": "\tdef test_adjust_incoming_rate_from_pi_with_multi_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2484,
      "code_text": "\tdef test_adjust_incoming_rate_from_pi_with_multi_currency_and_partial_billing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2554,
      "code_text": "\tdef test_opening_invoice_rounding_adjustment_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2563,
      "code_text": "\tdef _create_opening_roundoff_account(self, company_name):",
      "args": [
        "self",
        "company_name"
      ]
    },
    {
      "type": "method",
      "line_start": 2590,
      "code_text": "\tdef test_ledger_entries_of_opening_invoice_with_rounding_adjustment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2613,
      "code_text": "\tdef test_last_purchase_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2631,
      "code_text": "\tdef test_invoice_against_returned_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2659,
      "code_text": "\tdef test_trx_currency_debit_credit_for_high_precision(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2689,
      "code_text": "\tdef test_prevents_fully_returned_invoice_with_zero_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2703,
      "code_text": "\tdef test_apply_discount_on_grand_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2737,
      "code_text": "\tdef test_apply_discount_on_grand_total_with_previous_row_total_tax(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\utils.py": [
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def get_fiscal_year(\n\tdate=None,\n\tfiscal_year=None,\n\tlabel=\"Date\",\n\tverbose=1,\n\tcompany=None,\n\tas_dict=False,\n\tboolean=None,\n\traise_on_missing=True,\n):",
      "args": [
        "date",
        "fiscal_year",
        "label",
        "verbose",
        "company",
        "as_dict",
        "boolean",
        "raise_on_missing"
      ]
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def get_balance_on(\n\taccount=None,\n\tdate=None,\n\tparty_type=None,\n\tparty=None,\n\tcompany=None,\n\tin_account_currency=True,\n\tcost_center=None,\n\tignore_account_permission=False,\n\taccount_type=None,\n\tstart_date=None,\n):",
      "args": [
        "account",
        "date",
        "party_type",
        "party",
        "company",
        "in_account_currency",
        "cost_center",
        "ignore_account_permission",
        "account_type",
        "start_date"
      ]
    },
    {
      "type": "function",
      "line_start": 1236,
      "code_text": "def get_children(doctype, parent, company, is_root=False, include_disabled=False):",
      "args": [
        "doctype",
        "parent",
        "company",
        "is_root",
        "include_disabled"
      ]
    },
    {
      "type": "function",
      "line_start": 1110,
      "code_text": "def get_currency_precision():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def get_fiscal_years(\n\ttransaction_date=None,\n\tfiscal_year=None,\n\tlabel=\"Date\",\n\tverbose=1,\n\tcompany=None,\n\tas_dict=False,\n\tboolean=None,\n\traise_on_missing=True,\n):",
      "args": [
        "transaction_date",
        "fiscal_year",
        "label",
        "verbose",
        "company",
        "as_dict",
        "boolean",
        "raise_on_missing"
      ]
    },
    {
      "type": "function",
      "line_start": 805,
      "code_text": "def cancel_exchange_gain_loss_journal(\n\tparent_doc: dict | object, referenced_dt: str | None = None, referenced_dn: str | None = None",
      "args": [
        "parent_doc",
        "referenced_dt",
        "referenced_dn"
      ]
    },
    {
      "type": "function",
      "line_start": 1867,
      "code_text": "def update_voucher_outstanding(voucher_type, voucher_no, account, party_type, party):",
      "args": [
        "voucher_type",
        "voucher_no",
        "account",
        "party_type",
        "party"
      ]
    },
    {
      "type": "class",
      "line_start": 43,
      "code_text": "class FiscalYearError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 314,
      "code_text": "def get_count_on(account, fieldname, date):",
      "args": [
        "account",
        "fieldname",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def validate_fiscal_year(date, fiscal_year, company, label=\"Date\", doc=None):",
      "args": [
        "date",
        "fiscal_year",
        "company",
        "label",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1440,
      "code_text": "def repost_gle_for_stock_vouchers(\n\tstock_vouchers: list[tuple[str, str]],",
      "args": [
        "stock_vouchers",
        "posting_date: str",
        "company",
        "warehouse_account",
        "repost_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1660,
      "code_text": "def get_stock_and_account_balance(account=None, posting_date=None, company=None):",
      "args": [
        "account",
        "posting_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1848,
      "code_text": "def create_payment_ledger_entry(\n\tgl_entries, cancel=0, adv_adj=0, update_outstanding=\"Yes\", from_repost=0, partial_cancel=False\n):",
      "args": [
        "gl_entries",
        "cancel",
        "adv_adj",
        "update_outstanding",
        "from_repost",
        "partial_cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 966,
      "code_text": "def unlink_ref_doc_from_payment_entries(ref_doc: object = None, payment_name: str | None = None):\n\tremove_ref_doc_link_from_jv(ref_doc.doctype, ref_doc.name, payment_name)\n\tremove_ref_doc_link_from_pe(ref_doc.doctype, ref_doc.name, payment_name)\n\tupdate_accounting_ledgers_after_reference_removal(ref_doc.doctype, ref_doc.name, payment_name)\n\tremove_ref_from_advance_section(ref_doc)",
      "args": [
        "ref_doc: object",
        "payment_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1379,
      "code_text": "def get_autoname_with_number(number_value, doc_title, company):",
      "args": [
        "number_value",
        "doc_title",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1490,
      "code_text": "def _delete_pl_entries(voucher_type, voucher_no):\n\tple = qb.DocType(\"Payment Ledger Entry\")\n\tqb.from_(ple).delete().where((ple.voucher_type == voucher_type) & (ple.voucher_no == voucher_no)).run()",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1536,
      "code_text": "def get_future_stock_vouchers(posting_date, posting_time, for_warehouses=None, for_items=None, company=None):",
      "args": [
        "posting_date",
        "posting_time",
        "for_warehouses",
        "for_items",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1719,
      "code_text": "def create_err_and_its_journals(companies: list | None = None) -> None:",
      "args": [
        "companies"
      ]
    },
    {
      "type": "class",
      "line_start": 1936,
      "code_text": "class QueryPaymentLedger:"
    },
    {
      "type": "function",
      "line_start": 2189,
      "code_text": "def create_gain_loss_journal(\n\tcompany,\n\tposting_date,\n\tparty_type,\n\tparty,\n\tparty_account,\n\tgain_loss_account,\n\texc_gain_loss,\n\tdr_or_cr,\n\treverse_dr_or_cr,\n\tref1_dt,\n\tref1_dn,\n\tref1_detail_no,\n\tref2_dt,\n\tref2_dn,\n\tref2_detail_no,\n\tcost_center,\n\tdimensions,\n) -> str:",
      "args": [
        "company",
        "posting_date",
        "party_type",
        "party",
        "party_account",
        "gain_loss_account",
        "exc_gain_loss",
        "dr_or_cr",
        "reverse_dr_or_cr",
        "ref1_dt",
        "ref1_dn",
        "ref1_detail_no",
        "ref2_dt",
        "ref2_dn",
        "ref2_detail_no",
        "cost_center",
        "dimensions"
      ]
    },
    {
      "type": "class",
      "line_start": 47,
      "code_text": "class PaymentEntryUnlinkError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 467,
      "code_text": "def reconcile_against_document(\n\targs, skip_ref_details_update_for_pe=False, active_dimensions=None\n):  # nosemgrep",
      "args": [
        "args",
        "skip_ref_details_update_for_pe",
        "active_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 855,
      "code_text": "def get_linked_exchange_gain_loss_journal(referenced_dt: str, referenced_dn: str, je_docstatus: int) -> list:",
      "args": [
        "referenced_dt: str",
        "referenced_dn: str",
        "je_docstatus: int"
      ]
    },
    {
      "type": "function",
      "line_start": 1006,
      "code_text": "def convert_to_list(result):\n\t\"\"\"\n\tConvert tuple to list\n\t\"\"\"\n\treturn [x[0] for x in result]",
      "args": [
        "result"
      ]
    },
    {
      "type": "function",
      "line_start": 1074,
      "code_text": "def get_company_default(company, fieldname, ignore_validation=False):",
      "args": [
        "company",
        "fieldname",
        "ignore_validation"
      ]
    },
    {
      "type": "function",
      "line_start": 1135,
      "code_text": "def get_outstanding_invoices(\n\tparty_type,\n\tparty,\n\taccount,\n\tcommon_filter=None,\n\tposting_date=None,\n\tmin_outstanding=None,\n\tmax_outstanding=None,\n\taccounting_dimensions=None,\n\tvouchers=None,  # list of dicts [{'voucher_type': '', 'voucher_no': ''}] for filtering",
      "args": [
        "party_type",
        "party",
        "account",
        "common_filter",
        "posting_date",
        "min_outstanding",
        "max_outstanding",
        "accounting_dimensions",
        "vouchers",
        "limit",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1362,
      "code_text": "def validate_field_number(doctype_name, docname, number_value, company, field_name):",
      "args": [
        "doctype_name",
        "docname",
        "number_value",
        "company",
        "field_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1428,
      "code_text": "def update_gl_entries_after(\n\tposting_date,\n\tposting_time,\n\tfor_warehouses=None,\n\tfor_items=None,\n\twarehouse_account=None,\n\tcompany=None,\n):",
      "args": [
        "posting_date",
        "posting_time",
        "for_warehouses",
        "for_items",
        "warehouse_account",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1500,
      "code_text": "def _delete_accounting_ledger_entries(voucher_type, voucher_no):\n\t\"\"\"\n\tRemove entries from both General and Payment Ledger for specified Voucher\n\t\"\"\"\n\t_delete_gl_entries(voucher_type, voucher_no)\n\t_delete_pl_entries(voucher_type, voucher_no)",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1508,
      "code_text": "def sort_stock_vouchers_by_posting_date(\n\tstock_vouchers: list[tuple[str, str]], company=None",
      "args": [
        "stock_vouchers",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1566,
      "code_text": "def get_voucherwise_gl_entries(future_stock_vouchers, posting_date):",
      "args": [
        "future_stock_vouchers",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 1623,
      "code_text": "def get_stock_accounts(company, voucher_type=None, voucher_no=None, accounts=None):",
      "args": [
        "company",
        "voucher_type",
        "voucher_no",
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 1711,
      "code_text": "def check_and_delete_linked_reports(report):\n\t\"\"\"Check if reports are referenced in Desktop Icon\"\"\"\n\ticons = frappe.get_all(\"Desktop Icon\", fields=[\"name\"], filters={\"_report\": report})\n\tif icons:\n\t\tfor icon in icons:\n\t\t\tfrappe.delete_doc(\"Desktop Icon\", icon)",
      "args": [
        "report"
      ]
    },
    {
      "type": "function",
      "line_start": 2266,
      "code_text": "def get_party_types_from_account_type(account_type):\n\treturn frappe.db.get_all(\"Party Type\", {\"account_type\": account_type}, pluck=\"name\")",
      "args": [
        "account_type"
      ]
    },
    {
      "type": "function",
      "line_start": 2270,
      "code_text": "def run_ledger_health_checks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 2311,
      "code_text": "def sync_auto_reconcile_config(auto_reconciliation_job_trigger: int = 15):",
      "args": [
        "auto_reconciliation_job_trigger: int"
      ]
    },
    {
      "type": "function",
      "line_start": 128,
      "code_text": "def _get_fiscal_years(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 159,
      "code_text": "def get_fiscal_year_filter_field(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 400,
      "code_text": "def add_ac(args=None):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 432,
      "code_text": "def add_cc(args=None):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 457,
      "code_text": "def _build_dimensions_dict_for_exc_gain_loss(\n\tentry: dict | object = None, active_dimensions: list | None = None",
      "args": [
        "entry",
        "active_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 563,
      "code_text": "def check_if_advance_entry_modified(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 631,
      "code_text": "def validate_allocated_amount(args):\n\tprecision = args.get(\"precision\") or frappe.db.get_single_value(\"System Settings\", \"currency_precision\")\n\tif args.get(\"allocated_amount\") < 0:\n\t\tthrow(_(\"Allocated amount cannot be negative\"))\n\telif flt(args.get(\"allocated_amount\"), precision) > flt(args.get(\"unadjusted_amount\"), precision):\n\t\tthrow(_(\"Allocated amount cannot be greater than unadjusted amount\"))",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 639,
      "code_text": "def update_reference_in_journal_entry(d, journal_entry, do_not_save=False):",
      "args": [
        "d",
        "journal_entry",
        "do_not_save"
      ]
    },
    {
      "type": "function",
      "line_start": 715,
      "code_text": "def update_reference_in_payment_entry(\n\td, payment_entry, do_not_save=False, skip_ref_details_update_for_pe=False, dimensions_dict=None\n):",
      "args": [
        "d",
        "payment_entry",
        "do_not_save",
        "skip_ref_details_update_for_pe",
        "dimensions_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 830,
      "code_text": "def delete_exchange_gain_loss_journal(\n\tparent_doc: dict | object, referenced_dt: str | None = None, referenced_dn: str | None = None",
      "args": [
        "parent_doc",
        "referenced_dt",
        "referenced_dn"
      ]
    },
    {
      "type": "function",
      "line_start": 882,
      "code_text": "def cancel_common_party_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 922,
      "code_text": "def update_accounting_ledgers_after_reference_removal(\n\tref_type: str | None = None, ref_no: str | None = None, payment_name: str | None = None",
      "args": [
        "ref_type",
        "ref_no",
        "payment_name"
      ]
    },
    {
      "type": "function",
      "line_start": 958,
      "code_text": "def remove_ref_from_advance_section(ref_doc: object = None):\n\t# TODO: this might need some testing\n\tif ref_doc.doctype in (\"Sales Invoice\", \"Purchase Invoice\"):\n\t\tref_doc.set(\"advances\", [])\n\t\tadv_type = qb.DocType(f\"{ref_doc.doctype} Advance\")\n\t\tqb.from_(adv_type).delete().where(adv_type.parent == ref_doc.name).run()",
      "args": [
        "ref_doc: object"
      ]
    },
    {
      "type": "function",
      "line_start": 973,
      "code_text": "def remove_ref_doc_link_from_jv(\n\tref_type: str | None = None, ref_no: str | None = None, payment_name: str | None = None",
      "args": [
        "ref_type",
        "ref_no",
        "payment_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1013,
      "code_text": "def remove_ref_doc_link_from_pe(\n\tref_type: str | None = None, ref_no: str | None = None, payment_name: str | None = None",
      "args": [
        "ref_type",
        "ref_no",
        "payment_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1087,
      "code_text": "def fix_total_debit_credit():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1119,
      "code_text": "def get_held_invoices(party_type, party):",
      "args": [
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 1214,
      "code_text": "def get_account_name(account_type=None, root_type=None, is_group=None, account_currency=None, company=None):",
      "args": [
        "account_type",
        "root_type",
        "is_group",
        "account_currency",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1230,
      "code_text": "def get_companies():\n\t\"\"\"get a list of companies based on permission\"\"\"\n\treturn [d.name for d in frappe.get_list(\"Company\", fields=[\"name\"], order_by=\"name\")]",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1266,
      "code_text": "def get_account_balances(accounts, company):",
      "args": [
        "accounts",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1284,
      "code_text": "def create_payment_gateway_account(gateway, payment_channel=\"Email\", company=None):",
      "args": [
        "gateway",
        "payment_channel",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1342,
      "code_text": "def update_cost_center(docname, cost_center_name, cost_center_number, company, merge):",
      "args": [
        "docname",
        "cost_center_name",
        "cost_center_number",
        "company",
        "merge"
      ]
    },
    {
      "type": "function",
      "line_start": 1390,
      "code_text": "def parse_naming_series_variable(doc, variable):",
      "args": [
        "doc",
        "variable"
      ]
    },
    {
      "type": "function",
      "line_start": 1410,
      "code_text": "def get_coa(doctype, parent, is_root=None, chart=None):",
      "args": [
        "doctype",
        "parent",
        "is_root",
        "chart"
      ]
    },
    {
      "type": "function",
      "line_start": 1495,
      "code_text": "def _delete_gl_entries(voucher_type, voucher_no):\n\tgle = qb.DocType(\"GL Entry\")\n\tqb.from_(gle).delete().where((gle.voucher_type == voucher_type) & (gle.voucher_no == voucher_no)).run()",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1597,
      "code_text": "def compare_existing_and_expected_gle(existing_gle, expected_gle, precision):",
      "args": [
        "existing_gle",
        "expected_gle",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 1697,
      "code_text": "def get_journal_entry(account, stock_adjustment_account, amount):",
      "args": [
        "account",
        "stock_adjustment_account",
        "amount"
      ]
    },
    {
      "type": "function",
      "line_start": 1739,
      "code_text": "def auto_create_exchange_rate_revaluation_daily() -> None:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1751,
      "code_text": "def auto_create_exchange_rate_revaluation_weekly() -> None:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1763,
      "code_text": "def auto_create_exchange_rate_revaluation_monthly() -> None:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1775,
      "code_text": "def get_payment_ledger_entries(gl_entries, cancel=0):",
      "args": [
        "gl_entries",
        "cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 1909,
      "code_text": "def delink_original_entry(pl_entry, partial_cancel=False):",
      "args": [
        "pl_entry",
        "partial_cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 1941,
      "code_text": "\tdef __init__(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1955,
      "code_text": "\tdef reset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1964,
      "code_text": "\tdef query_for_outstanding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2149,
      "code_text": "\tdef get_voucher_outstandings(\n\t\tself,\n\t\tvouchers=None,\n\t\tcommon_filter=None,\n\t\tposting_date=None,\n\t\tmin_outstanding=None,\n\t\tmax_outstanding=None,\n\t\tget_payments=False,\n\t\tget_invoices=False,\n\t\taccounting_dimensions=None,\n\t\tlimit=None,\n\t\tvoucher_no=None,\n\t):",
      "args": [
        "self",
        "vouchers",
        "common_filter",
        "posting_date",
        "min_outstanding",
        "max_outstanding",
        "get_payments",
        "get_invoices",
        "accounting_dimensions",
        "limit",
        "voucher_no"
      ]
    }
  ],
  "erpnext\\accounts\\report\\cash_flow\\cash_flow.py": [
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 264,
      "code_text": "def get_chart_data(columns, data, currency):",
      "args": [
        "columns",
        "data",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 255,
      "code_text": "def get_report_summary(summary_data, currency):",
      "args": [
        "summary_data",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 227,
      "code_text": "def add_total_row_account(out, data, label, period_list, currency, summary_data, filters, consolidated=False):",
      "args": [
        "out",
        "data",
        "label",
        "period_list",
        "currency",
        "summary_data",
        "filters",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def get_cash_flow_accounts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 161,
      "code_text": "def get_account_type_based_data(company, account_type, period_list, accumulated_values, filters):",
      "args": [
        "company",
        "account_type",
        "period_list",
        "accumulated_values",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 182,
      "code_text": "def get_account_type_based_gl_data(company, filters=None):",
      "args": [
        "company",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 216,
      "code_text": "def get_start_date(period, accumulated_values, company):",
      "args": [
        "period",
        "accumulated_values",
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry\\journal_entry.py": [
    {
      "type": "function",
      "line_start": 1398,
      "code_text": "def get_payment_entry(ref_doc, args):",
      "args": [
        "ref_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1623,
      "code_text": "def get_exchange_rate(\n\tposting_date,\n\taccount=None,\n\taccount_currency=None,\n\tcompany=None,\n\treference_type=None,\n\treference_name=None,\n\tdebit=None,\n\tcredit=None,\n\texchange_rate=None,\n):",
      "args": [
        "posting_date",
        "account",
        "account_currency",
        "company",
        "reference_type",
        "reference_name",
        "debit",
        "credit",
        "exchange_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 1265,
      "code_text": "def get_default_bank_cash_account(\n\tcompany, account_type=None, mode_of_payment=None, account=None, ignore_permissions=False\n):",
      "args": [
        "company",
        "account_type",
        "mode_of_payment",
        "account",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 1360,
      "code_text": "def get_payment_entry_against_invoice(\n\tdt, dn, amount=None, debit_in_account_currency=None, journal_entry=False, bank_account=None\n):",
      "args": [
        "dt",
        "dn",
        "amount",
        "debit_in_account_currency",
        "journal_entry",
        "bank_account"
      ]
    },
    {
      "type": "class",
      "line_start": 37,
      "code_text": "class StockAccountInvalidTransaction(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1688,
      "code_text": "def make_reverse_journal_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 41,
      "code_text": "class JournalEntry(AccountsController):"
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef validate_advance_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 167,
      "code_text": "\tdef validate_for_repost(self):\n\t\tvalidate_docs_for_voucher_types([\"Journal Entry\"])\n\t\tvalidate_docs_for_deferred_accounting([self.name], [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef submit(self):\n\t\tif len(self.accounts) > 100:\n\t\t\tmsgprint(_(\"The task has been enqueued as a background job.\"), alert=True)\n\t\t\tself.queue_action(\"submit\", timeout=4600)\n\t\telse:\n\t\t\treturn self._submit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 178,
      "code_text": "\tdef cancel(self):\n\t\tif len(self.accounts) > 100:\n\t\t\tmsgprint(_(\"The task has been enqueued as a background job.\"), alert=True)\n\t\t\tself.queue_action(\"cancel\", timeout=4600)\n\t\telse:\n\t\t\treturn self._cancel()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef before_submit(self):\n\t\t# Do not validate while importing via data import\n\t\tif not frappe.flags.in_import:\n\t\t\tself.validate_total_debit_and_credit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef on_update_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef get_title(self):\n\t\treturn self.pay_to_recd_from or self.accounts[0].account",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef update_advance_paid(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef validate_inter_company_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 263,
      "code_text": "\tdef validate_depr_entry_voucher_type(self):\n\t\tif (\n\t\t\tany(d.account_type == \"Depreciation\" for d in self.get(\"accounts\"))\n\t\t\tand self.voucher_type != \"Depreciation Entry\"\n\t\t):\n\t\t\tfrappe.throw(_(\"Journal Entry type should be set as Depreciation Entry for asset depreciation\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 270,
      "code_text": "\tdef validate_stock_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef apply_tax_withholding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 372,
      "code_text": "\tdef update_asset_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 400,
      "code_text": "\tdef update_inter_company_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef update_invoice_discounting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 453,
      "code_text": "\tdef update_booked_depreciation(self, cancel=0):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef unlink_advance_entry_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 481,
      "code_text": "\tdef unlink_asset_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 534,
      "code_text": "\tdef unlink_inter_company_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 544,
      "code_text": "\tdef unlink_asset_adjustment_entry(self):\n\t\tfrappe.db.sql(\n\t\t\t\"\"\" update `tabAsset Value Adjustment`\n\t\t\tset journal_entry = null where journal_entry = %s\"\"\",\n\t\t\tself.name,\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef validate_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 571,
      "code_text": "\tdef check_credit_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 599,
      "code_text": "\tdef validate_cheque_info(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 610,
      "code_text": "\tdef validate_entries_for_advance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef system_generated_gain_loss(self):\n\t\treturn (\n\t\t\tself.voucher_type == \"Exchange Gain Or Loss\" and self.multi_currency and self.is_system_generated\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 641,
      "code_text": "\tdef validate_against_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 698,
      "code_text": "\tdef validate_reference_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 799,
      "code_text": "\tdef validate_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 836,
      "code_text": "\tdef validate_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 858,
      "code_text": "\tdef set_against_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 881,
      "code_text": "\tdef validate_debit_credit_amount(self):\n\t\tif not (self.voucher_type == \"Exchange Gain Or Loss\" and self.multi_currency):\n\t\t\tfor d in self.get(\"accounts\"):\n\t\t\t\tif not flt(d.debit) and not flt(d.credit):\n\t\t\t\t\tfrappe.throw(_(\"Row {0}: Both Debit and Credit values cannot be zero\").format(d.idx))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 887,
      "code_text": "\tdef validate_total_debit_and_credit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 896,
      "code_text": "\tdef set_total_debit_credit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 909,
      "code_text": "\tdef validate_multi_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 931,
      "code_text": "\tdef set_amounts_in_company_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 944,
      "code_text": "\tdef set_exchange_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 978,
      "code_text": "\tdef create_remarks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1037,
      "code_text": "\tdef set_print_format_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1068,
      "code_text": "\tdef set_total_amount(self, amt, currency):\n\t\tself.total_amount = amt\n\t\tself.total_amount_currency = currency\n\t\tfrom frappe.utils import money_in_words\n\n\t\tself.total_amount_in_words = money_in_words(amt, currency)",
      "args": [
        "self",
        "amt",
        "currency"
      ]
    },
    {
      "type": "method",
      "line_start": 1075,
      "code_text": "\tdef build_gl_map(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1137,
      "code_text": "\tdef make_gl_entries(self, cancel=0, adv_adj=0):",
      "args": [
        "self",
        "cancel",
        "adv_adj"
      ]
    },
    {
      "type": "method",
      "line_start": 1160,
      "code_text": "\tdef get_balance(self, difference_account=None):",
      "args": [
        "self",
        "difference_account"
      ]
    },
    {
      "type": "method",
      "line_start": 1195,
      "code_text": "\tdef get_outstanding_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1225,
      "code_text": "\tdef get_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1245,
      "code_text": "\tdef validate_credit_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1259,
      "code_text": "\tdef validate_empty_accounts_table(self):\n\t\tif not self.get(\"accounts\"):\n\t\t\tfrappe.throw(_(\"Accounts table cannot be blank.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1315,
      "code_text": "def get_payment_entry_against_order(\n\tdt, dn, amount=None, debit_in_account_currency=None, journal_entry=False, bank_account=None\n):",
      "args": [
        "dt",
        "dn",
        "amount",
        "debit_in_account_currency",
        "journal_entry",
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 1474,
      "code_text": "def get_against_jv(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1505,
      "code_text": "def get_outstanding(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1565,
      "code_text": "def get_party_account_and_currency(company, party_type, party):",
      "args": [
        "company",
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 1578,
      "code_text": "def get_account_details_and_party_type(account, date, company, debit=None, credit=None, exchange_rate=None):",
      "args": [
        "account",
        "date",
        "company",
        "debit",
        "credit",
        "exchange_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 1667,
      "code_text": "def get_average_exchange_rate(account):",
      "args": [
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 1678,
      "code_text": "def make_inter_company_journal_entry(name, voucher_type, company):",
      "args": [
        "name",
        "voucher_type",
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\report\\balance_sheet\\balance_sheet.py": [
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 228,
      "code_text": "def get_chart_data(filters, columns, asset, liability, equity, currency):",
      "args": [
        "filters",
        "columns",
        "asset",
        "liability",
        "equity",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 179,
      "code_text": "def get_report_summary(\n\tperiod_list,\n\tasset,\n\tliability,\n\tequity,\n\tprovisional_profit_loss,\n\tcurrency,\n\tfilters,\n\tconsolidated=False,\n):",
      "args": [
        "period_list",
        "asset",
        "liability",
        "equity",
        "provisional_profit_loss",
        "currency",
        "filters",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def get_provisional_profit_loss(\n\tasset, liability, equity, period_list, company, currency=None, consolidated=False\n):",
      "args": [
        "asset",
        "liability",
        "equity",
        "period_list",
        "company",
        "currency",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def check_opening_balance(asset, liability, equity):",
      "args": [
        "asset",
        "liability",
        "equity"
      ]
    }
  ],
  "erpnext\\accounts\\report\\profit_and_loss_statement\\profit_and_loss_statement.py": [
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 163,
      "code_text": "def get_chart_data(filters, columns, income, expense, net_profit_loss, currency):",
      "args": [
        "filters",
        "columns",
        "income",
        "expense",
        "net_profit_loss",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_report_summary(\n\tperiod_list, periodicity, income, expense, net_profit_loss, currency, filters, consolidated=False\n):",
      "args": [
        "period_list",
        "periodicity",
        "income",
        "expense",
        "net_profit_loss",
        "currency",
        "filters",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 135,
      "code_text": "def get_net_profit_loss(income, expense, period_list, company, currency=None, consolidated=False):",
      "args": [
        "income",
        "expense",
        "period_list",
        "company",
        "currency",
        "consolidated"
      ]
    }
  ],
  "erpnext\\controllers\\accounts_controller.py": [
    {
      "type": "function",
      "line_start": 3576,
      "code_text": "def update_child_qty_rate(parent_doctype, trans_items, parent_doctype_name, child_docname=\"items\"):",
      "args": [
        "parent_doctype",
        "trans_items",
        "parent_doctype_name",
        "child_docname"
      ]
    },
    {
      "type": "function",
      "line_start": 3367,
      "code_text": "def get_due_date(term, posting_date=None, bill_date=None):",
      "args": [
        "term",
        "posting_date",
        "bill_date"
      ]
    },
    {
      "type": "class",
      "line_start": 80,
      "code_text": "class InvalidQtyError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 97,
      "code_text": "class AccountsController(TransactionBase):"
    },
    {
      "type": "function",
      "line_start": 2907,
      "code_text": "def get_taxes_and_charges(master_doctype, master_name):",
      "args": [
        "master_doctype",
        "master_name"
      ]
    },
    {
      "type": "function",
      "line_start": 2927,
      "code_text": "def validate_conversion_rate(currency, conversion_rate, conversion_rate_label, company):",
      "args": [
        "currency",
        "conversion_rate",
        "conversion_rate_label",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2965,
      "code_text": "def validate_account_head(idx: int, account: str, company: str, context: str | None = None) -> None:",
      "args": [
        "idx: int",
        "account: str",
        "company: str",
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 2940,
      "code_text": "def validate_taxes_and_charges(tax):",
      "args": [
        "tax"
      ]
    },
    {
      "type": "function",
      "line_start": 2999,
      "code_text": "def validate_inclusive_tax(tax, doc):",
      "args": [
        "tax",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3114,
      "code_text": "def get_advance_payment_entries_for_regional(*args, **kwargs):\n\treturn get_advance_payment_entries(*args, **kwargs)",
      "args": [
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 3175,
      "code_text": "def get_common_query(\n\tparty_type,\n\tparty,\n\tparty_account,\n\tdefault_advance_account,\n\tlimit,\n\tcondition,\n):",
      "args": [
        "party_type",
        "party",
        "party_account",
        "default_advance_account",
        "limit",
        "condition"
      ]
    },
    {
      "type": "function",
      "line_start": 3263,
      "code_text": "def update_invoice_status():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 3320,
      "code_text": "def get_payment_terms(\n\tterms_template, posting_date=None, grand_total=None, base_grand_total=None, bill_date=None\n):",
      "args": [
        "terms_template",
        "posting_date",
        "grand_total",
        "base_grand_total",
        "bill_date"
      ]
    },
    {
      "type": "function",
      "line_start": 3379,
      "code_text": "def get_discount_date(term, posting_date=None, bill_date=None):",
      "args": [
        "term",
        "posting_date",
        "bill_date"
      ]
    },
    {
      "type": "function",
      "line_start": 3917,
      "code_text": "def merge_taxes(source_taxes, target_doc):",
      "args": [
        "source_taxes",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3954,
      "code_text": "def validate_einvoice_fields(doc):\n\tpass",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 76,
      "code_text": "class AccountMissingError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef get_print_settings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef company_currency(self):\n\t\tif not hasattr(self, \"__company_currency\"):\n\t\t\tself.__company_currency = erpnext.get_company_currency(self.company)\n\n\t\treturn self.__company_currency",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef onload(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef remove_bundle_for_non_stock_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef ensure_supplier_is_not_blocked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef validate_against_voucher_outstanding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 305,
      "code_text": "\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \"letter_head\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\"Company\", self.company, \"default_letter_head\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef init_internal_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef _remove_references_in_unreconcile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef _remove_references_in_repost_doctypes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 383,
      "code_text": "\tdef _remove_advance_payment_ledger_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 427,
      "code_text": "\tdef remove_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 442,
      "code_text": "\tdef validate_company_in_accounting_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 459,
      "code_text": "\tdef validate_company(self, dimension_list, child=None):",
      "args": [
        "self",
        "dimension_list",
        "child"
      ]
    },
    {
      "type": "method",
      "line_start": 475,
      "code_text": "\tdef validate_party_address_and_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 493,
      "code_text": "\tdef validate_party_address(self, party, party_type, billing_address, shipping_address=None):",
      "args": [
        "self",
        "party",
        "party_type",
        "billing_address",
        "shipping_address"
      ]
    },
    {
      "type": "method",
      "line_start": 505,
      "code_text": "\tdef validate_party_contact(self, party, party_type):",
      "args": [
        "self",
        "party",
        "party_type"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef validate_return_against_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 530,
      "code_text": "\tdef validate_deferred_income_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef validate_auto_repeat_subscription_dates(self):\n\t\tif self.get(\"from_date\") and self.get(\"to_date\") and getdate(self.from_date) > getdate(self.to_date):\n\t\t\tfrappe.throw(_(\"To Date cannot be before From Date\"), title=_(\"Invalid Auto Repeat Date\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 555,
      "code_text": "\tdef validate_deferred_start_and_end_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 575,
      "code_text": "\tdef validate_invoice_documents_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 596,
      "code_text": "\tdef validate_non_invoice_documents_schedule(self):\n\t\tself.set_payment_schedule()\n\t\tself.validate_payment_schedule_dates()\n\t\tself.validate_payment_schedule_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 601,
      "code_text": "\tdef validate_all_documents_schedule(self):\n\t\tif self.doctype in (\"Sales Invoice\", \"Purchase Invoice\"):\n\t\t\tself.validate_invoice_documents_schedule()\n\t\telif self.doctype in (\"Quotation\", \"Purchase Order\", \"Sales Order\"):\n\t\t\tself.validate_non_invoice_documents_schedule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef before_print(self, settings=None):",
      "args": [
        "self",
        "settings"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef calculate_paid_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 654,
      "code_text": "\tdef set_missing_values(self, for_validate=False):\n\t\tif frappe.flags.in_test:\n\t\t\tfor fieldname in [\"posting_date\", \"transaction_date\"]:\n\t\t\t\tif self.meta.get_field(fieldname) and not self.get(fieldname):\n\t\t\t\t\tself.set(fieldname, today())\n\t\t\t\t\tbreak",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 661,
      "code_text": "\tdef calculate_taxes_and_totals(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 675,
      "code_text": "\tdef validate_date_with_fiscal_year(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 692,
      "code_text": "\tdef validate_party_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 715,
      "code_text": "\tdef validate_inter_company_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 741,
      "code_text": "\tdef disable_pricing_rule_on_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 749,
      "code_text": "\tdef disable_tax_included_prices_for_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 765,
      "code_text": "\tdef validate_due_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 790,
      "code_text": "\tdef set_price_list_currency(self, buying_or_selling):",
      "args": [
        "self",
        "buying_or_selling"
      ]
    },
    {
      "type": "method",
      "line_start": 838,
      "code_text": "\tdef set_missing_item_details(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 973,
      "code_text": "\tdef apply_pricing_rule_on_items(self, item, pricing_rule_args):",
      "args": [
        "self",
        "item",
        "pricing_rule_args"
      ]
    },
    {
      "type": "method",
      "line_start": 1016,
      "code_text": "\tdef set_pricing_rule_details(self, item_row, args):",
      "args": [
        "self",
        "item_row",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 1032,
      "code_text": "\tdef set_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1047,
      "code_text": "\tdef is_pos_profile_changed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1055,
      "code_text": "\tdef set_taxes_and_charges(self):\n\t\tif frappe.db.get_single_value(\"Accounts Settings\", \"add_taxes_from_item_tax_template\"):\n\t\t\tif hasattr(self, \"taxes_and_charges\") and not self.get(\"taxes\") and not self.get(\"is_pos\"):\n\t\t\t\tif tax_master_doctype := self.meta.get_field(\"taxes_and_charges\").options:\n\t\t\t\t\tself.append_taxes_from_master(tax_master_doctype)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1061,
      "code_text": "\tdef append_taxes_from_master(self, tax_master_doctype=None):\n\t\tif self.get(\"taxes_and_charges\"):\n\t\t\tif not tax_master_doctype:\n\t\t\t\ttax_master_doctype = self.meta.get_field(\"taxes_and_charges\").options\n\n\t\t\tself.extend(\"taxes\", get_taxes_and_charges(tax_master_doctype, self.get(\"taxes_and_charges\")))",
      "args": [
        "self",
        "tax_master_doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 1068,
      "code_text": "\tdef append_taxes_from_item_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1095,
      "code_text": "\tdef get_tax_row(self, account_head):\n\t\tfor row in self.taxes:\n\t\t\tif row.account_head == account_head:\n\t\t\t\treturn row",
      "args": [
        "self",
        "account_head"
      ]
    },
    {
      "type": "method",
      "line_start": 1100,
      "code_text": "\tdef set_other_charges(self):\n\t\tself.set(\"taxes\", [])\n\t\tself.set_taxes()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1104,
      "code_text": "\tdef validate_enabled_taxes_and_charges(self):\n\t\ttaxes_and_charges_doctype = self.meta.get_options(\"taxes_and_charges\")\n\t\tif self.taxes_and_charges and frappe.get_cached_value(\n\t\t\ttaxes_and_charges_doctype, self.taxes_and_charges, \"disabled\"\n\t\t):\n\t\t\tfrappe.throw(_(\"{0} '{1}' is disabled\").format(taxes_and_charges_doctype, self.taxes_and_charges))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1111,
      "code_text": "\tdef validate_tax_account_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1122,
      "code_text": "\tdef get_gl_dict(self, args, account_currency=None, item=None):",
      "args": [
        "self",
        "args",
        "account_currency",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1217,
      "code_text": "\tdef get_voucher_subtype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1246,
      "code_text": "\tdef get_value_in_transaction_currency(self, account_currency, gl_dict, field):\n\t\tif account_currency == self.get(\"currency\"):\n\t\t\treturn gl_dict.get(field + \"_in_account_currency\")\n\t\telse:\n\t\t\treturn flt(gl_dict.get(field, 0) / self.get(\"conversion_rate\", 1))",
      "args": [
        "self",
        "account_currency",
        "gl_dict",
        "field"
      ]
    },
    {
      "type": "method",
      "line_start": 1252,
      "code_text": "\tdef validate_zero_qty_for_return_invoices_with_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1264,
      "code_text": "\tdef validate_qty_is_not_zero(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1278,
      "code_text": "\tdef validate_account_currency(self, account, account_currency=None):",
      "args": [
        "self",
        "account",
        "account_currency"
      ]
    },
    {
      "type": "method",
      "line_start": 1290,
      "code_text": "\tdef clear_unallocated_advances(self, childtype, parentfield):",
      "args": [
        "self",
        "childtype",
        "parentfield"
      ]
    },
    {
      "type": "method",
      "line_start": 1301,
      "code_text": "\tdef apply_shipping_rule(self):\n\t\tif self.shipping_rule:\n\t\t\tshipping_rule = frappe.get_doc(\"Shipping Rule\", self.shipping_rule)\n\t\t\tshipping_rule.apply(self)\n\t\t\tself.calculate_taxes_and_totals()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1307,
      "code_text": "\tdef get_shipping_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1322,
      "code_text": "\tdef set_advances(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1357,
      "code_text": "\tdef get_advance_entries(self, include_unallocated=True):",
      "args": [
        "self",
        "include_unallocated"
      ]
    },
    {
      "type": "method",
      "line_start": 1404,
      "code_text": "\tdef is_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1414,
      "code_text": "\tdef should_show_taxes_as_table_in_print(self):\n\t\treturn cint(frappe.db.get_single_value(\"Accounts Settings\", \"show_taxes_as_table_in_print\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1417,
      "code_text": "\tdef validate_advance_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1436,
      "code_text": "\tdef set_advance_gain_or_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1454,
      "code_text": "\tdef make_precision_loss_gl_entry(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1485,
      "code_text": "\tdef gain_loss_journal_already_booked(\n\t\tself,\n\t\tgain_loss_account,\n\t\texc_gain_loss,\n\t\tref2_dt,\n\t\tref2_dn,\n\t\tref2_detail_no,\n\t) -> bool:",
      "args": [
        "self",
        "gain_loss_account",
        "exc_gain_loss",
        "ref2_dt",
        "ref2_dn",
        "ref2_detail_no"
      ]
    },
    {
      "type": "method",
      "line_start": 1523,
      "code_text": "\tdef make_exchange_gain_loss_journal(\n\t\tself, args: dict | None = None, dimensions_dict: dict | None = None",
      "args": [
        "self",
        "args",
        "dimensions_dict"
      ]
    },
    {
      "type": "method",
      "line_start": 1679,
      "code_text": "\tdef is_payable_account(self, reference_doctype, account):",
      "args": [
        "self",
        "reference_doctype",
        "account"
      ]
    },
    {
      "type": "method",
      "line_start": 1687,
      "code_text": "\tdef update_against_document_in_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1755,
      "code_text": "\tdef cancel_system_generated_credit_debit_notes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1773,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1804,
      "code_text": "\tdef unlink_ref_doc_from_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1832,
      "code_text": "\tdef get_tax_map(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1840,
      "code_text": "\tdef get_amount_and_base_amount(self, item, enable_discount_accounting):",
      "args": [
        "self",
        "item",
        "enable_discount_accounting"
      ]
    },
    {
      "type": "method",
      "line_start": 1857,
      "code_text": "\tdef get_tax_amounts(self, tax, enable_discount_accounting):",
      "args": [
        "self",
        "tax",
        "enable_discount_accounting"
      ]
    },
    {
      "type": "method",
      "line_start": 1872,
      "code_text": "\tdef make_discount_gl_entries(self, gl_entries):",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 1946,
      "code_text": "\tdef validate_multiple_billing(self, ref_dt, item_ref_dn, based_on):",
      "args": [
        "self",
        "ref_dt",
        "item_ref_dn",
        "based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 2017,
      "code_text": "\tdef get_billing_reference_details(self, reference_names, reference_doctype, based_on):",
      "args": [
        "self",
        "reference_names",
        "reference_doctype",
        "based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 2027,
      "code_text": "\tdef get_billed_amount_for_item(self, item, item_ref_dn, based_on):",
      "args": [
        "self",
        "item",
        "item_ref_dn",
        "based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 2069,
      "code_text": "\tdef throw_overbill_exception(self, item, max_allowed_amt):\n\t\tfrappe.throw(\n\t\t\t_(\n\t\t\t\t\"Cannot overbill for Item {0} in row {1} more than {2}. To allow over-billing, please set allowance in Accounts Settings\"\n\t\t\t).format(item.item_code, item.idx, max_allowed_amt)\n\t\t)",
      "args": [
        "self",
        "item",
        "max_allowed_amt"
      ]
    },
    {
      "type": "method",
      "line_start": 2076,
      "code_text": "\tdef get_company_default(self, fieldname, ignore_validation=False):\n\t\tfrom erpnext.accounts.utils import get_company_default\n\n\t\treturn get_company_default(self.company, fieldname, ignore_validation=ignore_validation)",
      "args": [
        "self",
        "fieldname",
        "ignore_validation"
      ]
    },
    {
      "type": "method",
      "line_start": 2081,
      "code_text": "\tdef get_stock_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2091,
      "code_text": "\tdef calculate_total_advance_from_ledger(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2105,
      "code_text": "\tdef set_total_advance_paid(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2144,
      "code_text": "\tdef set_advance_payment_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2174,
      "code_text": "\tdef company_abbr(self):\n\t\tif not hasattr(self, \"_abbr\"):\n\t\t\tself._abbr = frappe.get_cached_value(\"Company\", self.company, \"abbr\")\n\n\t\treturn self._abbr",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2180,
      "code_text": "\tdef raise_missing_debit_credit_account_error(self, party_type, party):",
      "args": [
        "self",
        "party_type",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 2205,
      "code_text": "\tdef validate_party(self):\n\t\tparty_type, party = self.get_party()\n\t\tvalidate_party_frozen_disabled(party_type, party)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2209,
      "code_text": "\tdef get_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2232,
      "code_text": "\tdef validate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2254,
      "code_text": "\tdef validate_party_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2280,
      "code_text": "\tdef delink_advance_entries(self, linked_doc_name):",
      "args": [
        "self",
        "linked_doc_name"
      ]
    },
    {
      "type": "method",
      "line_start": 2297,
      "code_text": "\tdef group_similar_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2331,
      "code_text": "\tdef set_payment_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2427,
      "code_text": "\tdef get_order_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2442,
      "code_text": "\tdef linked_order_has_payment_terms(self, po_or_so, fieldname, doctype):",
      "args": [
        "self",
        "po_or_so",
        "fieldname",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 2451,
      "code_text": "\tdef all_items_have_same_po_or_so(self, po_or_so, fieldname):\n\t\tfor item in self.get(\"items\"):\n\t\t\tif item.get(fieldname) != po_or_so:\n\t\t\t\treturn False\n\n\t\treturn True",
      "args": [
        "self",
        "po_or_so",
        "fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 2458,
      "code_text": "\tdef linked_order_has_payment_terms_template(self, po_or_so, doctype):\n\t\treturn frappe.get_value(doctype, po_or_so, \"payment_terms_template\")",
      "args": [
        "self",
        "po_or_so",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 2461,
      "code_text": "\tdef linked_order_has_payment_schedule(self, po_or_so):\n\t\treturn frappe.get_all(\"Payment Schedule\", filters={\"parent\": po_or_so})",
      "args": [
        "self",
        "po_or_so"
      ]
    },
    {
      "type": "method",
      "line_start": 2464,
      "code_text": "\tdef fetch_payment_terms_from_order(\n\t\tself, po_or_so, po_or_so_doctype, grand_total, base_grand_total, automatically_fetch_payment_terms\n\t):",
      "args": [
        "self",
        "po_or_so",
        "po_or_so_doctype",
        "grand_total",
        "base_grand_total",
        "automatically_fetch_payment_terms"
      ]
    },
    {
      "type": "method",
      "line_start": 2510,
      "code_text": "\tdef set_due_date(self):\n\t\tdue_dates = [d.due_date for d in self.get(\"payment_schedule\") if d.due_date]\n\t\tif due_dates:\n\t\t\tself.due_date = max(due_dates)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2515,
      "code_text": "\tdef validate_payment_schedule_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2538,
      "code_text": "\tdef validate_payment_schedule_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2591,
      "code_text": "\tdef is_rounded_total_disabled(self):\n\t\tif self.meta.get_field(\"disable_rounded_total\"):\n\t\t\treturn self.disable_rounded_total\n\t\telse:\n\t\t\treturn frappe.db.get_single_value(\"Global Defaults\", \"disable_rounded_total\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2597,
      "code_text": "\tdef set_inter_company_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2617,
      "code_text": "\tdef is_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2634,
      "code_text": "\tdef process_common_party_accounting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2644,
      "code_text": "\tdef get_common_party_link(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2653,
      "code_text": "\tdef create_advance_and_reconcile(self, party_link):",
      "args": [
        "self",
        "party_link"
      ]
    },
    {
      "type": "method",
      "line_start": 2758,
      "code_text": "\tdef check_conversion_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2774,
      "code_text": "\tdef check_finance_books(self, item, asset):",
      "args": [
        "self",
        "item",
        "asset"
      ]
    },
    {
      "type": "method",
      "line_start": 2785,
      "code_text": "\tdef check_if_fields_updated(self, fields_to_check, child_tables):",
      "args": [
        "self",
        "fields_to_check",
        "child_tables"
      ]
    },
    {
      "type": "method",
      "line_start": 2806,
      "code_text": "\tdef repost_accounting_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2814,
      "code_text": "\tdef get_advance_payment_doctypes(self) -> list:\n\t\treturn frappe.get_hooks(\"advance_payment_receivable_doctypes\") + frappe.get_hooks(\n\t\t\t\"advance_payment_payable_doctypes\"\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2819,
      "code_text": "\tdef make_advance_payment_ledger_for_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2847,
      "code_text": "\tdef make_advance_payment_ledger_for_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2870,
      "code_text": "\tdef make_advance_payment_ledger_entries(self):\n\t\tif self.docstatus != 0:\n\t\t\tif self.doctype == \"Journal Entry\":\n\t\t\t\tself.make_advance_payment_ledger_for_journal()\n\t\t\telif self.doctype == \"Payment Entry\":\n\t\t\t\tself.make_advance_payment_ledger_for_payment()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2877,
      "code_text": "\tdef set_transaction_currency_and_rate_in_gl_map(self, gl_entries):\n\t\tfor x in gl_entries:\n\t\t\tx[\"transaction_currency\"] = self.currency\n\t\t\tx[\"transaction_exchange_rate\"] = self.get(\"conversion_rate\") or 1",
      "args": [
        "self",
        "gl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 2884,
      "code_text": "def get_tax_rate(account_head):\n\treturn frappe.get_cached_value(\"Account\", account_head, [\"tax_rate\", \"account_name\"], as_dict=True)",
      "args": [
        "account_head"
      ]
    },
    {
      "type": "function",
      "line_start": 2889,
      "code_text": "def get_default_taxes_and_charges(master_doctype, tax_template=None, company=None):",
      "args": [
        "master_doctype",
        "tax_template",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 2984,
      "code_text": "def validate_cost_center(tax, doc):",
      "args": [
        "tax",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3029,
      "code_text": "def set_balance_in_account_currency(\n\tgl_dict, account_currency=None, conversion_rate=None, company_currency=None\n):",
      "args": [
        "gl_dict",
        "account_currency",
        "conversion_rate",
        "company_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 3055,
      "code_text": "def get_advance_journal_entries(\n\tparty_type,\n\tparty,\n\tparty_account,\n\tamount_field,\n\torder_doctype,\n\torder_list,\n\tinclude_unallocated=True,\n):",
      "args": [
        "party_type",
        "party",
        "party_account",
        "amount_field",
        "order_doctype",
        "order_list",
        "include_unallocated"
      ]
    },
    {
      "type": "function",
      "line_start": 3118,
      "code_text": "def get_advance_payment_entries(\n\tparty_type,\n\tparty,\n\tparty_account,\n\torder_doctype,\n\torder_list=None,\n\tdefault_advance_account=None,\n\tinclude_unallocated=True,\n\tagainst_all_orders=False,\n\tlimit=None,\n\tcondition=None,\n):",
      "args": [
        "party_type",
        "party",
        "party_account",
        "order_doctype",
        "order_list",
        "default_advance_account",
        "include_unallocated",
        "against_all_orders",
        "limit",
        "condition"
      ]
    },
    {
      "type": "function",
      "line_start": 3337,
      "code_text": "def get_payment_term_details(\n\tterm, posting_date=None, grand_total=None, base_grand_total=None, bill_date=None\n):",
      "args": [
        "term",
        "posting_date",
        "grand_total",
        "base_grand_total",
        "bill_date"
      ]
    },
    {
      "type": "function",
      "line_start": 3391,
      "code_text": "def get_supplier_block_status(party_name):",
      "args": [
        "party_name"
      ]
    },
    {
      "type": "function",
      "line_start": 3405,
      "code_text": "def set_child_tax_template_and_map(item, child_item, parent_doc):",
      "args": [
        "item",
        "child_item",
        "parent_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3424,
      "code_text": "def add_taxes_from_tax_template(child_item, parent_doc, db_insert=True):",
      "args": [
        "child_item",
        "parent_doc",
        "db_insert"
      ]
    },
    {
      "type": "function",
      "line_start": 3453,
      "code_text": "def set_order_defaults(parent_doctype, parent_doctype_name, child_doctype, child_docname, trans_item):",
      "args": [
        "parent_doctype",
        "parent_doctype_name",
        "child_doctype",
        "child_docname",
        "trans_item"
      ]
    },
    {
      "type": "function",
      "line_start": 3490,
      "code_text": "def validate_child_on_delete(row, parent):",
      "args": [
        "row",
        "parent"
      ]
    },
    {
      "type": "function",
      "line_start": 3527,
      "code_text": "def update_bin_on_delete(row, doctype):",
      "args": [
        "row",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 3550,
      "code_text": "def validate_and_delete_children(parent, data) -> bool:",
      "args": [
        "parent",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 3905,
      "code_text": "def check_if_child_table_updated(child_table_before_update, child_table_after_update, fields_to_check):",
      "args": [
        "child_table_before_update",
        "child_table_after_update",
        "fields_to_check"
      ]
    },
    {
      "type": "function",
      "line_start": 3949,
      "code_text": "def validate_regional(doc):\n\tpass",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3959,
      "code_text": "def update_gl_dict_with_regional_fields(doc, gl_dict):\n\tpass",
      "args": [
        "doc",
        "gl_dict"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\update_closing_balances.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def get_gl_entries(pcv_list):",
      "args": [
        "pcv_list"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def process_grouped_pcvs(pcvs, gl_entries):",
      "args": [
        "pcvs",
        "gl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_period_closing_vouchers():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def get_gle_fields():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\accounts_receivable\\accounts_receivable.py": [
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def execute(filters=None):\n\targs = {\n\t\t\"account_type\": \"Receivable\",\n\t\t\"naming_by\": [\"Selling Settings\", \"cust_master_name\"],\n\t}\n\treturn ReceivablePayableReport(filters).run(args)",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 43,
      "code_text": "class ReceivablePayableReport:"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef __init__(self, filters=None):",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef run(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef set_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef build_voucher_dict(self, ple):",
      "args": [
        "self",
        "ple"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef init_voucher_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef get_invoices(self, ple):",
      "args": [
        "self",
        "ple"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef init_subtotal_row(self, party):\n\t\tif not self.total_row_map.get(party):\n\t\t\tself.total_row_map.setdefault(party, {\"party\": party, \"bold\": 1})\n\n\t\t\tfor field in self.get_currency_fields():\n\t\t\t\tself.total_row_map[party][field] = 0.0",
      "args": [
        "self",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef get_currency_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef get_voucher_balance(self, ple):",
      "args": [
        "self",
        "ple"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef update_voucher_balance(self, ple):",
      "args": [
        "self",
        "ple"
      ]
    },
    {
      "type": "method",
      "line_start": 280,
      "code_text": "\tdef update_sub_total_row(self, row, party):",
      "args": [
        "self",
        "row",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 288,
      "code_text": "\tdef append_subtotal_row(self, party):",
      "args": [
        "self",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef build_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef append_row(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 363,
      "code_text": "\tdef set_invoice_details(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 377,
      "code_text": "\tdef set_delivery_notes(self, row):\n\t\tdelivery_notes = self.delivery_notes.get(row.voucher_no, [])\n\t\tif delivery_notes:\n\t\t\trow.delivery_notes = \", \".join(delivery_notes)",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 382,
      "code_text": "\tdef build_delivery_note_map(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef get_invoice_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 487,
      "code_text": "\tdef set_party_details(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 499,
      "code_text": "\tdef allocate_outstanding_based_on_payment_terms(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 512,
      "code_text": "\tdef get_payment_terms(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 554,
      "code_text": "\tdef append_payment_term(self, row, d, term, company_currency):",
      "args": [
        "self",
        "row",
        "d",
        "term",
        "company_currency"
      ]
    },
    {
      "type": "method",
      "line_start": 579,
      "code_text": "\tdef allocate_closing_to_term(self, row, term, key):",
      "args": [
        "self",
        "row",
        "term",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 589,
      "code_text": "\tdef allocate_extra_payments_or_credits(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 605,
      "code_text": "\tdef get_future_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 615,
      "code_text": "\tdef get_future_payments_from_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 644,
      "code_text": "\tdef get_future_payments_from_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 695,
      "code_text": "\tdef allocate_future_payments(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 727,
      "code_text": "\tdef get_return_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 749,
      "code_text": "\tdef set_ageing(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 767,
      "code_text": "\tdef get_ageing_data(self, entry_date, row):",
      "args": [
        "self",
        "entry_date",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 781,
      "code_text": "\tdef get_ple_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 836,
      "code_text": "\tdef get_sales_invoices_or_customers_based_on_sales_person(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 856,
      "code_text": "\tdef prepare_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 874,
      "code_text": "\tdef get_cost_center_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 882,
      "code_text": "\tdef add_common_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 909,
      "code_text": "\tdef add_customer_filters(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 944,
      "code_text": "\tdef add_supplier_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 964,
      "code_text": "\tdef get_hierarchical_filters(self, doctype, key):",
      "args": [
        "self",
        "doctype",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 974,
      "code_text": "\tdef add_accounting_dimensions_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 992,
      "code_text": "\tdef is_invoice(self, ple):\n\t\tif ple.voucher_type in (\"Sales Invoice\", \"Purchase Invoice\"):\n\t\t\treturn True",
      "args": [
        "self",
        "ple"
      ]
    },
    {
      "type": "method",
      "line_start": 996,
      "code_text": "\tdef get_party_details(self, party):",
      "args": [
        "self",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 1017,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1142,
      "code_text": "\tdef add_column(self, label, fieldname=None, fieldtype=\"Currency\", options=None, width=120):",
      "args": [
        "self",
        "label",
        "fieldname",
        "fieldtype",
        "options",
        "width"
      ]
    },
    {
      "type": "method",
      "line_start": 1154,
      "code_text": "\tdef setup_ageing_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1169,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1183,
      "code_text": "\tdef get_exchange_rate_revaluations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1201,
      "code_text": "def get_customer_group_with_children(customer_groups):",
      "args": [
        "customer_groups"
      ]
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_receipt\\subcontracting_receipt.py": [
    {
      "type": "function",
      "line_start": 707,
      "code_text": "def make_purchase_receipt(source_name, target_doc=None, save=False, submit=False, notify=False):",
      "args": [
        "source_name",
        "target_doc",
        "save",
        "submit",
        "notify"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class SubcontractingReceipt(SubcontractingController):"
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef onload(self):\n\t\tself.set_onload(\n\t\t\t\"backflush_based_on\",\n\t\t\tfrappe.db.get_single_value(\"Buying Settings\", \"backflush_raw_materials_of_subcontract_based_on\"),\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef before_validate(self):\n\t\tsuper().before_validate()\n\t\tself.validate_items_qty()\n\t\tself.set_items_bom()\n\t\tself.set_items_cost_center()\n\t\tself.set_items_expense_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef on_update(self):\n\t\tfor table_field in [\"items\", \"supplied_items\"]:\n\t\t\tif self.get(table_field):\n\t\t\t\tself.set_serial_and_batch_bundle(table_field)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 166,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 186,
      "code_text": "\tdef reset_raw_materials(self):\n\t\tself.supplied_items = []\n\t\tself.create_raw_materials_supplied()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef validate_closed_subcontracting_order(self):\n\t\tfor item in self.items:\n\t\t\tif item.subcontracting_order:\n\t\t\t\tcheck_on_hold_or_closed_status(\"Subcontracting Order\", item.subcontracting_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef update_job_card(self):\n\t\tfor row in self.get(\"items\"):\n\t\t\tif row.job_card:\n\t\t\t\tdoc = frappe.get_doc(\"Job Card\", row.job_card)\n\t\t\t\tdoc.set_manufactured_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef get_manufactured_qty(self, job_card):",
      "args": [
        "self",
        "job_card"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef validate_items_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef set_items_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef set_items_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef set_items_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef reset_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 270,
      "code_text": "\tdef get_scrap_items(self, recalculate_rate=False):",
      "args": [
        "self",
        "recalculate_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef remove_scrap_items(self, recalculate_rate=False):",
      "args": [
        "self",
        "recalculate_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 324,
      "code_text": "\tdef set_missing_values(self):\n\t\tself.set_available_qty_for_consumption()\n\t\tself.calculate_additional_costs()\n\t\tself.calculate_items_qty_and_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 329,
      "code_text": "\tdef set_available_qty_for_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef calculate_items_qty_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 417,
      "code_text": "\tdef validate_scrap_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef validate_accepted_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 456,
      "code_text": "\tdef validate_available_qty_for_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 476,
      "code_text": "\tdef update_status_updater_args(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 503,
      "code_text": "\tdef update_status(self, status=None, update_modified=False):",
      "args": [
        "self",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 528,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None):",
      "args": [
        "self",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 539,
      "code_text": "\tdef make_item_gl_entries(self, gl_entries, warehouse_account=None):",
      "args": [
        "self",
        "gl_entries",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 694,
      "code_text": "\tdef auto_create_purchase_receipt(self):\n\t\tif frappe.db.get_single_value(\"Buying Settings\", \"auto_create_purchase_receipt\"):\n\t\t\tmake_purchase_receipt(self, save=True, notify=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 700,
      "code_text": "def make_subcontract_return(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Subcontracting Receipt\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 822,
      "code_text": "def add_po_items_to_pr(scr_doc, target_doc):",
      "args": [
        "scr_doc",
        "target_doc"
      ]
    }
  ],
  "erpnext\\stock\\report\\delivery_note_trends\\delivery_note_trends.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_chart_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\report\\purchase_order_trends\\purchase_order_trends.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def get_chart_data(data, conditions, filters):",
      "args": [
        "data",
        "conditions",
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_order_trends\\sales_order_trends.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def get_chart_data(data, conditions, filters):",
      "args": [
        "data",
        "conditions",
        "filters"
      ]
    }
  ],
  "erpnext\\selling\\report\\quotation_trends\\quotation_trends.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_chart_data(data, conditions, filters):",
      "args": [
        "data",
        "conditions",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\report\\purchase_receipt_trends\\purchase_receipt_trends.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_chart_data(data, filters):",
      "args": [
        "data",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\packing_slip\\packing_slip.py": [
    {
      "type": "function",
      "line_start": 206,
      "code_text": "def item_details(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class PackingSlip(StatusUpdater):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef __init__(self, *args, **kwargs) -> None:",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_prevdoc_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_prevdoc_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef validate_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef validate_case_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef validate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef set_missing_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef get_recommended_case_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef calculate_net_total_pkg(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset\\test_asset.py": [
    {
      "type": "function",
      "line_start": 1709,
      "code_text": "def create_asset(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1678,
      "code_text": "def get_gl_entries(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 1689,
      "code_text": "def create_asset_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1826,
      "code_text": "def set_depreciation_settings_in_company(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1771,
      "code_text": "def create_asset_category(enable_cwip=1):",
      "args": [
        "enable_cwip"
      ]
    },
    {
      "type": "function",
      "line_start": 1800,
      "code_text": "def create_fixed_asset_item(item_code=None, auto_create_assets=1, is_grouped_asset=0):",
      "args": [
        "item_code",
        "auto_create_assets",
        "is_grouped_asset"
      ]
    },
    {
      "type": "class",
      "line_start": 45,
      "code_text": "class AssetSetup(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.rollback()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "class",
      "line_start": 60,
      "code_text": "class TestAsset(AssetSetup):"
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_asset_category_is_fetched(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef test_gross_purchase_amount_is_mandatory(self):\n\t\tasset = create_asset(item_code=\"Macbook Pro\", do_not_save=1)\n\t\tasset.gross_purchase_amount = 0\n\n\t\tself.assertRaises(frappe.MandatoryError, asset.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef test_pr_or_pi_mandatory_if_not_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef test_available_for_use_date_is_after_purchase_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_item_exists(self):\n\t\tasset = create_asset(item_code=\"MacBook\", do_not_save=1)\n\n\t\tself.assertRaises(frappe.ValidationError, asset.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef test_validate_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef test_purchase_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef test_purchase_of_grouped_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef test_is_fixed_asset_set(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef test_scrap_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef test_gle_made_by_asset_sale(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef test_gle_made_by_asset_sale_for_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 447,
      "code_text": "\tdef test_asset_with_maintenance_required_status_after_sale(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 475,
      "code_text": "\tdef test_asset_splitting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 539,
      "code_text": "\tdef test_expense_head(self):\n\t\tpr = make_purchase_receipt(item_code=\"Macbook Pro\", qty=2, rate=200000.0, location=\"Test Location\")\n\t\tdoc = make_invoice(pr.name)\n\n\t\tself.assertEqual(\"Asset Received But Not Billed - _TC\", doc.items[0].expense_account)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 546,
      "code_text": "\tdef test_cwip_accounting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 626,
      "code_text": "\tdef test_asset_cwip_toggling_cases(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 703,
      "code_text": "class TestDepreciationMethods(AssetSetup):"
    },
    {
      "type": "method",
      "line_start": 704,
      "code_text": "\tdef test_schedule_for_straight_line_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 729,
      "code_text": "\tdef test_schedule_for_straight_line_method_with_daily_prorata_based(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 764,
      "code_text": "\tdef test_schedule_for_straight_line_method_for_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef test_schedule_for_double_declining_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 813,
      "code_text": "\tdef test_schedule_for_double_declining_method_for_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 838,
      "code_text": "\tdef test_schedule_for_prorated_straight_line_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 869,
      "code_text": "\tdef test_depreciation_entry_for_wdv_without_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 901,
      "code_text": "\tdef test_pro_rata_depreciation_entry_for_wdv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 933,
      "code_text": "\tdef test_monthly_depreciation_by_wdv_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 966,
      "code_text": "class TestDepreciationBasics(AssetSetup):"
    },
    {
      "type": "method",
      "line_start": 967,
      "code_text": "\tdef test_depreciation_without_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 989,
      "code_text": "\tdef test_depreciation_with_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1012,
      "code_text": "\tdef test_get_depreciation_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1035,
      "code_text": "\tdef test_make_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1055,
      "code_text": "\tdef test_set_accumulated_depreciation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1074,
      "code_text": "\tdef test_check_is_pro_rata(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1109,
      "code_text": "\tdef test_expected_value_after_useful_life_greater_than_purchase_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1124,
      "code_text": "\tdef test_depreciation_start_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1137,
      "code_text": "\tdef test_opening_accumulated_depreciation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1153,
      "code_text": "\tdef test_opening_booked_depreciations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1169,
      "code_text": "\tdef test_number_of_depreciations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1202,
      "code_text": "\tdef test_depreciation_start_date_is_before_purchase_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1215,
      "code_text": "\tdef test_depreciation_start_date_is_before_available_for_use_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1228,
      "code_text": "\tdef test_finance_books_are_present_if_calculate_depreciation_is_enabled(self):\n\t\tasset = create_asset(item_code=\"Macbook Pro\", do_not_save=1)\n\t\tasset.calculate_depreciation = 1\n\n\t\tself.assertRaises(frappe.ValidationError, asset.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1234,
      "code_text": "\tdef test_post_depreciation_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1257,
      "code_text": "\tdef test_depr_entry_posting_when_depr_expense_account_is_an_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1287,
      "code_text": "\tdef test_depr_entry_posting_when_depr_expense_account_is_an_income_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1327,
      "code_text": "\tdef test_clear_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1350,
      "code_text": "\tdef test_clear_depr_schedule_for_multiple_finance_books(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1404,
      "code_text": "\tdef test_depreciation_schedules_are_set_up_for_multiple_finance_books(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1438,
      "code_text": "\tdef test_depreciation_entry_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1464,
      "code_text": "\tdef test_asset_expected_value_after_useful_life(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1487,
      "code_text": "\tdef test_gle_made_by_depreciation_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1524,
      "code_text": "\tdef test_expected_value_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1543,
      "code_text": "\tdef test_asset_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1552,
      "code_text": "\tdef test_depreciation_on_final_day_of_the_month(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1578,
      "code_text": "\tdef test_manual_depreciation_for_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1608,
      "code_text": "\tdef test_manual_depreciation_for_depreciable_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1641,
      "code_text": "\tdef test_manual_depreciation_with_incorrect_jv_voucher_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1664,
      "code_text": "\tdef test_multi_currency_asset_pr_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1840,
      "code_text": "def enable_cwip_accounting(asset_category, enable=1):\n\tfrappe.db.set_value(\"Asset Category\", asset_category, \"enable_cwip_accounting\", enable)",
      "args": [
        "asset_category",
        "enable"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_balance\\stock_balance.py": [
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def execute(filters: StockBalanceFilter | None = None):\n\treturn StockBalanceReport(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class StockBalanceFilter(TypedDict):"
    },
    {
      "type": "function",
      "line_start": 628,
      "code_text": "def filter_items_with_no_transactions(\n\tiwb_map, float_precision: float, inventory_dimensions: list | None = None",
      "args": [
        "iwb_map",
        "float_precision: float",
        "inventory_dimensions"
      ]
    },
    {
      "type": "class",
      "line_start": 44,
      "code_text": "class StockBalanceReport:"
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef __init__(self, filters: StockBalanceFilter | None) -> None:",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef set_company_currency(self) -> None:\n\t\tif self.filters.get(\"company\"):\n\t\t\tself.company_currency = erpnext.get_company_currency(self.filters.get(\"company\"))\n\t\telse:\n\t\t\tself.company_currency = frappe.db.get_single_value(\"Global Defaults\", \"default_currency\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef prepare_opening_stock(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef get_entries_from_stock_closing_balance(self) -> list:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef filter_fields(self) -> list[str]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef prepare_sle_query(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef prepare_item_warehouse_map_for_current_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef prepare_new_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 269,
      "code_text": "\tdef get_sre_reserved_qty_details(self) -> dict:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef prepare_item_warehouse_map(self, entry, group_by_key):",
      "args": [
        "self",
        "entry",
        "group_by_key"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef initialize_data(self, group_by_key, entry):",
      "args": [
        "self",
        "group_by_key",
        "entry"
      ]
    },
    {
      "type": "method",
      "line_start": 337,
      "code_text": "\tdef get_group_by_key(self, row) -> tuple:",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef apply_inventory_dimensions_filters(self, query, sle) -> str:",
      "args": [
        "self",
        "query",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 359,
      "code_text": "\tdef apply_warehouse_filters(self, query, sle) -> str:",
      "args": [
        "self",
        "query",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 373,
      "code_text": "\tdef apply_items_filters(self, query, item_table) -> str:",
      "args": [
        "self",
        "query",
        "item_table"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef apply_date_filters(self, query, sle) -> str:",
      "args": [
        "self",
        "query",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 397,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 530,
      "code_text": "\tdef add_additional_uom_columns(self):\n\t\tif not self.filters.get(\"include_uom\"):\n\t\t\treturn\n\n\t\tconversion_factors = self.get_itemwise_conversion_factor()\n\t\tadd_additional_uom_columns(self.columns, self.data, self.filters.include_uom, conversion_factors)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 537,
      "code_text": "\tdef get_itemwise_conversion_factor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 561,
      "code_text": "\tdef get_variant_values_for(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 584,
      "code_text": "\tdef get_opening_vouchers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 616,
      "code_text": "\tdef get_inventory_dimension_fields():\n\t\treturn [dimension.fieldname for dimension in get_inventory_dimensions()]",
      "args": []
    },
    {
      "type": "method",
      "line_start": 620,
      "code_text": "\tdef get_opening_fifo_queue(report_data):\n\t\topening_fifo_queue = report_data.get(\"opening_fifo_queue\") or []\n\t\tfor row in opening_fifo_queue:\n\t\t\trow[1] = getdate(row[1])\n\n\t\treturn opening_fifo_queue",
      "args": [
        "report_data"
      ]
    },
    {
      "type": "function",
      "line_start": 666,
      "code_text": "def get_variants_attributes() -> list[str]:\n\t\"\"\"Return all item variant attributes.\"\"\"\n\treturn frappe.get_all(\"Item Attribute\", pluck=\"name\")",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\customer_ledger_summary\\customer_ledger_summary.py": [
    {
      "type": "function",
      "line_start": 465,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 459,
      "code_text": "def get_children(doctype, value):\n\tchildren = get_descendants_of(doctype, value)\n\n\treturn [value, *children]",
      "args": [
        "doctype",
        "value"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class PartyLedgerSummaryReport:"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})\n\t\tself.filters.from_date = getdate(self.filters.from_date or nowdate())\n\t\tself.filters.to_date = getdate(self.filters.to_date or nowdate())",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef run(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef validate_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef update_hierarchical_filters(self):\n\t\tfor doctype in TREE_DOCTYPES:\n\t\t\tkey = scrub(doctype)\n\t\t\tif self.filters.get(key):\n\t\t\t\tself.filters[key] = get_children(doctype, self.filters[key])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef get_party_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef get_party_conditions(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef get_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef prepare_conditions(self, query):",
      "args": [
        "self",
        "query"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef get_return_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 379,
      "code_text": "\tdef get_party_adjustment_amounts(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\deferred_revenue_and_expense\\deferred_revenue_and_expense.py": [
    {
      "type": "function",
      "line_start": 433,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 223,
      "code_text": "class Deferred_Revenue_and_Expense_Report:"
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class Deferred_Item:"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef __init__(self, item, inv, gle_entries):",
      "args": [
        "self",
        "item",
        "inv",
        "gle_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef report_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef get_amount(self, entry):",
      "args": [
        "self",
        "entry"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef get_item_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef calculate_amount(self, start_date, end_date):",
      "args": [
        "self",
        "start_date",
        "end_date"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef make_dummy_gle(self, name, date, amount):",
      "args": [
        "self",
        "name",
        "date",
        "amount"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef simulate_future_posting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef calculate_item_revenue_expense_for_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 162,
      "code_text": "class Deferred_Invoice:"
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef __init__(self, invoice, items, filters, period_list):",
      "args": [
        "self",
        "invoice",
        "items",
        "filters",
        "period_list"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef calculate_invoice_revenue_expense_for_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef estimate_future(self):\n\t\t\"\"\"\n\t\tcreate dummy GL entries for upcoming months for all items in invoice\n\t\t\"\"\"\n\t\t[item.simulate_future_posting() for item in self.items]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef report_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef __init__(self, filters=None):",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef get_period_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 267,
      "code_text": "\tdef get_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 335,
      "code_text": "\tdef estimate_future(self):\n\t\t\"\"\"\n\t\tFor all Invoices estimate upcoming postings\n\t\t\"\"\"\n\t\tfor x in self.deferred_invoices:\n\t\t\tx.estimate_future()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 342,
      "code_text": "\tdef calculate_revenue_and_expense(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 357,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 371,
      "code_text": "\tdef generate_report_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef prepare_chart(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef run(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_analytics\\sales_analytics.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 53,
      "code_text": "class Analytics:"
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def append_report(dt, org, new):",
      "args": [
        "dt",
        "org",
        "new"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef __init__(self, filters=None):",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef update_company_list_for_parent_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef get_sales_transactions_based_on_order_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef get_sales_transactions_based_on_customers_or_suppliers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef get_sales_transactions_based_on_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef get_sales_transactions_based_on_customer_or_territory_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef get_sales_transactions_based_on_item_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 341,
      "code_text": "\tdef get_sales_transactions_based_on_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 363,
      "code_text": "\tdef get_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 386,
      "code_text": "\tdef get_rows_by_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 407,
      "code_text": "\tdef get_periodic_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef get_period(self, posting_date):",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 434,
      "code_text": "\tdef get_period_date_ranges(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 464,
      "code_text": "\tdef get_groups(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 488,
      "code_text": "\tdef get_teams(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 505,
      "code_text": "\tdef get_supplier_parent_child_map(self):\n\t\tself.parent_child_map = frappe._dict(\n\t\t\tfrappe.db.sql(\"\"\" select name, supplier_group from `tabSupplier`\"\"\")\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 510,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_quotation\\supplier_quotation.py": [
    {
      "type": "function",
      "line_start": 264,
      "code_text": "def make_purchase_invoice(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 205,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 285,
      "code_text": "def make_quotation(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 222,
      "code_text": "def make_purchase_order(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class SupplierQuotation(BuyingController):"
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"status\", \"Submitted\")\n\t\tself.update_rfq_supplier_status(1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")\n\t\tself.update_rfq_supplier_status(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef on_trash(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef validate_valid_till(self):\n\t\tif self.valid_till and getdate(self.valid_till) < getdate(self.transaction_date):\n\t\t\tfrappe.throw(_(\"Valid till Date cannot be before Transaction Date\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef update_rfq_supplier_status(self, include_me):",
      "args": [
        "self",
        "include_me"
      ]
    },
    {
      "type": "function",
      "line_start": 308,
      "code_text": "def set_expired_status():",
      "args": []
    }
  ],
  "erpnext\\crm\\report\\sales_pipeline_analytics\\sales_pipeline_analytics.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute(filters=None):\n\treturn SalesPipelineAnalytics(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class SalesPipelineAnalytics:"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef validate_filters(self):\n\t\tif not self.filters.from_date:\n\t\t\tfrappe.throw(_(\"From Date is mandatory\"))\n\n\t\tif not self.filters.to_date:\n\t\t\tfrappe.throw(_(\"To Date is mandatory\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef get_columns(self):\n\t\tself.columns = []\n\n\t\tself.set_range_columns()\n\t\tself.set_pipeline_based_on_column()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef set_range_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef set_pipeline_based_on_column(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef get_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef get_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef get_periodic_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef set_formatted_data(self, period, value, count_or_amount, assigned_to):",
      "args": [
        "self",
        "period",
        "value",
        "count_or_amount",
        "assigned_to"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef check_for_assigned_to(self, period, value, count_or_amount, assigned_to, info):",
      "args": [
        "self",
        "period",
        "value",
        "count_or_amount",
        "assigned_to",
        "info"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef get_month_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef append_to_dataset(self, datasets):",
      "args": [
        "self",
        "datasets"
      ]
    },
    {
      "type": "method",
      "line_start": 267,
      "code_text": "\tdef append_data(self, pipeline_by, period_by):",
      "args": [
        "self",
        "pipeline_by",
        "period_by"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef get_default_currency(self):\n\t\tcompany = self.filters.get(\"company\")\n\t\treturn frappe.db.get_value(\"Company\", company, [\"default_currency\"])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef get_currency_rate(self, from_currency, to_currency):",
      "args": [
        "self",
        "from_currency",
        "to_currency"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef convert_to_base_currency(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry\\stock_entry.py": [
    {
      "type": "function",
      "line_start": 2949,
      "code_text": "def make_stock_in_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3208,
      "code_text": "def get_supplied_items(\n\tsubcontract_order, rm_detail_field=\"sco_rm_detail\", subcontract_order_field=\"subcontracting_order\"\n):",
      "args": [
        "subcontract_order",
        "rm_detail_field",
        "subcontract_order_field"
      ]
    },
    {
      "type": "class",
      "line_start": 58,
      "code_text": "class FinishedGoodError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 83,
      "code_text": "class StockEntry(StockController):"
    },
    {
      "type": "function",
      "line_start": 3156,
      "code_text": "def get_warehouse_details(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 3383,
      "code_text": "def create_serial_and_batch_bundle(parent_doc, row, child, type_of_transaction=None):",
      "args": [
        "parent_doc",
        "row",
        "child",
        "type_of_transaction"
      ]
    },
    {
      "type": "function",
      "line_start": 3261,
      "code_text": "def get_available_materials(work_order) -> dict:",
      "args": [
        "work_order"
      ]
    },
    {
      "type": "class",
      "line_start": 62,
      "code_text": "class IncorrectValuationRateError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 66,
      "code_text": "class DuplicateEntryForWorkOrderError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 70,
      "code_text": "class OperationsNotCompleteError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 74,
      "code_text": "class MaxSampleAlreadyRetainedError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef onload(self):\n\t\tfor item in self.get(\"items\"):\n\t\t\titem.update(get_bin_details(item.item_code, item.s_warehouse))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef before_validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 303,
      "code_text": "\tdef on_update(self):\n\t\tself.set_serial_and_batch_bundle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef set_job_card_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 316,
      "code_text": "\tdef validate_job_card_fg_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 330,
      "code_text": "\tdef validate_job_card_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef validate_work_order_status(self):\n\t\tpro_doc = frappe.get_doc(\"Work Order\", self.work_order)\n\t\tif pro_doc.status == \"Completed\":\n\t\t\tfrappe.throw(_(\"Cannot cancel transaction for Completed Work Order.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef validate_purpose(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 369,
      "code_text": "\tdef delete_linked_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 381,
      "code_text": "\tdef set_transfer_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 394,
      "code_text": "\tdef update_cost_in_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 429,
      "code_text": "\tdef validate_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 479,
      "code_text": "\tdef validate_fg_completed_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 513,
      "code_text": "\tdef validate_difference_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 536,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef validate_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 623,
      "code_text": "\tdef check_if_operations_completed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 661,
      "code_text": "\tdef check_duplicate_entry_for_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 697,
      "code_text": "\tdef set_actual_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 740,
      "code_text": "\tdef validate_component_and_quantities(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 772,
      "code_text": "\tdef get_matched_items(self, item_code):\n\t\tfor row in self.items:\n\t\t\tif row.item_code == item_code or row.original_item == item_code:\n\t\t\t\treturn row\n\n\t\treturn {}",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 780,
      "code_text": "\tdef get_stock_and_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 790,
      "code_text": "\tdef calculate_rate_and_amount(self, reset_outgoing_rate=True, raise_error_if_no_rate=True):",
      "args": [
        "self",
        "reset_outgoing_rate",
        "raise_error_if_no_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 798,
      "code_text": "\tdef set_basic_rate(self, reset_outgoing_rate=True, raise_error_if_no_rate=True):",
      "args": [
        "self",
        "reset_outgoing_rate",
        "raise_error_if_no_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 859,
      "code_text": "\tdef set_rate_for_outgoing_items(self, reset_outgoing_rate=True, raise_error_if_no_rate=True):",
      "args": [
        "self",
        "reset_outgoing_rate",
        "raise_error_if_no_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 875,
      "code_text": "\tdef get_args_for_incoming_rate(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 894,
      "code_text": "\tdef get_basic_rate_for_repacked_items(self, finished_item_qty, outgoing_items_cost):",
      "args": [
        "self",
        "finished_item_qty",
        "outgoing_items_cost"
      ]
    },
    {
      "type": "method",
      "line_start": 904,
      "code_text": "\tdef get_basic_rate_for_manufactured_item(self, finished_item_qty, outgoing_items_cost=0) -> float:",
      "args": [
        "self",
        "finished_item_qty",
        "outgoing_items_cost"
      ]
    },
    {
      "type": "method",
      "line_start": 971,
      "code_text": "\tdef distribute_additional_costs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 995,
      "code_text": "\tdef update_valuation_rate(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.transfer_qty:\n\t\t\t\td.amount = flt(flt(d.basic_amount) + flt(d.additional_cost), d.precision(\"amount\"))\n\t\t\t\t# Do not round off valuation rate to avoid precision loss\n\t\t\t\td.valuation_rate = flt(d.basic_rate) + (flt(d.additional_cost) / flt(d.transfer_qty))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1002,
      "code_text": "\tdef set_total_incoming_outgoing_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1012,
      "code_text": "\tdef set_total_amount(self):\n\t\tself.total_amount = None\n\t\tif self.purpose not in [\"Manufacture\", \"Repack\"]:\n\t\t\tself.total_amount = sum([flt(item.amount) for item in self.get(\"items\")])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1017,
      "code_text": "\tdef set_stock_entry_type(self):\n\t\tif self.purpose:\n\t\t\tself.stock_entry_type = frappe.get_cached_value(\n\t\t\t\t\"Stock Entry Type\", {\"purpose\": self.purpose, \"is_standard\": 1}, \"name\"\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1023,
      "code_text": "\tdef set_purpose_for_stock_entry(self):\n\t\tif self.stock_entry_type and not self.purpose:\n\t\t\tself.purpose = frappe.get_cached_value(\"Stock Entry Type\", self.stock_entry_type, \"purpose\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1027,
      "code_text": "\tdef make_serial_and_batch_bundle_for_outward(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1089,
      "code_text": "\tdef validate_subcontract_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1252,
      "code_text": "\tdef validate_bom(self):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.bom_no and d.is_finished_item:\n\t\t\t\titem_code = d.original_item or d.item_code\n\t\t\t\tvalidate_bom_no(item_code, d.bom_no)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1258,
      "code_text": "\tdef validate_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1271,
      "code_text": "\tdef validate_closed_subcontracting_order(self):\n\t\tif self.get(\"subcontracting_order\"):\n\t\t\tcheck_on_hold_or_closed_status(\"Subcontracting Order\", self.subcontracting_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1275,
      "code_text": "\tdef mark_finished_and_scrap_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1298,
      "code_text": "\tdef get_finished_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1307,
      "code_text": "\tdef validate_finished_goods(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1371,
      "code_text": "\tdef update_stock_ledger(self, allow_negative_stock=False):",
      "args": [
        "self",
        "allow_negative_stock"
      ]
    },
    {
      "type": "method",
      "line_start": 1387,
      "code_text": "\tdef get_finished_item_row(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1396,
      "code_text": "\tdef validate_serial_batch_bundle_type(self, serial_and_batch_bundle):",
      "args": [
        "self",
        "serial_and_batch_bundle"
      ]
    },
    {
      "type": "method",
      "line_start": 1408,
      "code_text": "\tdef get_sle_for_source_warehouse(self, sl_entries, finished_item_row):",
      "args": [
        "self",
        "sl_entries",
        "finished_item_row"
      ]
    },
    {
      "type": "method",
      "line_start": 1447,
      "code_text": "\tdef make_serial_and_batch_bundle_for_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1469,
      "code_text": "\tdef get_sle_for_target_warehouse(self, sl_entries, finished_item_row):",
      "args": [
        "self",
        "sl_entries",
        "finished_item_row"
      ]
    },
    {
      "type": "method",
      "line_start": 1512,
      "code_text": "\tdef get_gl_entries(self, warehouse_account):",
      "args": [
        "self",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 1590,
      "code_text": "\tdef update_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1626,
      "code_text": "\tdef make_stock_reserve_for_wip_and_fg(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1634,
      "code_text": "\tdef cancel_stock_reserve_for_wip_and_fg(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1642,
      "code_text": "\tdef is_stock_reserve_for_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1653,
      "code_text": "\tdef get_item_details(self, args: ItemDetailsCtx = None, for_update=False):",
      "args": [
        "self",
        "args: ItemDetailsCtx",
        "for_update"
      ]
    },
    {
      "type": "method",
      "line_start": 1770,
      "code_text": "\tdef set_items_for_stock_in(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1794,
      "code_text": "\tdef get_items_for_disassembly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1816,
      "code_text": "\tdef get_items_from_manufacture_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1844,
      "code_text": "\tdef get_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1961,
      "code_text": "\tdef set_serial_batch_from_reserved_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1994,
      "code_text": "\tdef get_available_reserved_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2019,
      "code_text": "\tdef get_reserved_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2042,
      "code_text": "\tdef set_scrap_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2051,
      "code_text": "\tdef set_process_loss_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2086,
      "code_text": "\tdef set_work_order_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2101,
      "code_text": "\tdef load_items_from_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2141,
      "code_text": "\tdef set_batchwise_finished_goods(self, args, item):",
      "args": [
        "self",
        "args",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 2149,
      "code_text": "\tdef add_batchwise_finished_good(self, batches, args, item):",
      "args": [
        "self",
        "batches",
        "args",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 2172,
      "code_text": "\tdef add_finished_goods(self, args, item):\n\t\tself.add_to_stock_entry_detail({item.name: args}, bom_no=self.bom_no)",
      "args": [
        "self",
        "args",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 2175,
      "code_text": "\tdef get_bom_raw_materials(self, qty):",
      "args": [
        "self",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 2209,
      "code_text": "\tdef get_bom_scrap_material(self, qty):",
      "args": [
        "self",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 2256,
      "code_text": "\tdef get_scrap_items_from_job_card(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2300,
      "code_text": "\tdef get_completed_job_card_qty(self):\n\t\treturn flt(min([d.completed_qty for d in self.pro_doc.operations]))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2303,
      "code_text": "\tdef get_used_scrap_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2321,
      "code_text": "\tdef get_unconsumed_raw_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2359,
      "code_text": "\tdef add_transfered_raw_materials_in_items(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2395,
      "code_text": "\tdef update_batches_to_be_consume(self, batches, row, qty):",
      "args": [
        "self",
        "batches",
        "row",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 2421,
      "code_text": "\tdef update_item_in_stock_entry_detail(self, row, item, qty) -> None:",
      "args": [
        "self",
        "row",
        "item",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 2463,
      "code_text": "\tdef get_serial_nos_based_on_transferred_batch(batch_no, serial_nos) -> list:",
      "args": [
        "batch_no",
        "serial_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 2472,
      "code_text": "\tdef get_pending_raw_materials(self, backflush_based_on=None):",
      "args": [
        "self",
        "backflush_based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 2523,
      "code_text": "\tdef get_pro_order_required_items(self, backflush_based_on=None):",
      "args": [
        "self",
        "backflush_based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 2572,
      "code_text": "\tdef get_job_card_item_codes(self, job_card=None):",
      "args": [
        "self",
        "job_card"
      ]
    },
    {
      "type": "method",
      "line_start": 2581,
      "code_text": "\tdef add_to_stock_entry_detail(self, item_dict, bom_no=None):",
      "args": [
        "self",
        "item_dict",
        "bom_no"
      ]
    },
    {
      "type": "method",
      "line_start": 2637,
      "code_text": "\tdef validate_with_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2667,
      "code_text": "\tdef validate_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2691,
      "code_text": "\tdef update_subcontract_order_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2731,
      "code_text": "\tdef update_transferred_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2792,
      "code_text": "\tdef update_quality_inspection(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2807,
      "code_text": "\tdef set_material_request_transfer_status(self, status):",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 2824,
      "code_text": "\tdef set_serial_no_batch_for_finished_good(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2855,
      "code_text": "\tdef get_available_serial_nos(self) -> list[str]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2874,
      "code_text": "\tdef update_subcontracting_order_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2882,
      "code_text": "\tdef update_pick_list_status(self):\n\t\tfrom erpnext.stock.doctype.pick_list.pick_list import update_pick_list_status\n\n\t\tupdate_pick_list_status(self.pick_list)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2887,
      "code_text": "\tdef set_missing_values(self):\n\t\t\"Updates rate and availability of all the items of mapped doc.\"\n\t\tself.set_transfer_qty()\n\t\tself.set_actual_qty()\n\t\tself.calculate_rate_and_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 2895,
      "code_text": "def move_sample_to_retention_warehouse(company, items):",
      "args": [
        "company",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 3000,
      "code_text": "def get_work_order_details(work_order, company):",
      "args": [
        "work_order",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 3014,
      "code_text": "def get_operating_cost_per_unit(work_order=None, bom_no=None):",
      "args": [
        "work_order",
        "bom_no"
      ]
    },
    {
      "type": "function",
      "line_start": 3044,
      "code_text": "def get_used_alternative_items(\n\tsubcontract_order=None, subcontract_order_field=\"subcontracting_order\", work_order=None\n):",
      "args": [
        "subcontract_order",
        "subcontract_order_field",
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 3075,
      "code_text": "def get_valuation_rate_for_finished_good_entry(work_order):",
      "args": [
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 3097,
      "code_text": "def get_uom_details(item_code, uom, qty):",
      "args": [
        "item_code",
        "uom",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 3114,
      "code_text": "def get_expired_batch_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 3136,
      "code_text": "def get_expired_batches():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 3178,
      "code_text": "def validate_sample_quantity(item_code, sample_quantity, qty, batch_no=None):",
      "args": [
        "item_code",
        "sample_quantity",
        "qty",
        "batch_no"
      ]
    },
    {
      "type": "function",
      "line_start": 3247,
      "code_text": "def get_items_from_subcontract_order(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 3320,
      "code_text": "def get_stock_entry_data(work_order):",
      "args": [
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 3443,
      "code_text": "def get_batchwise_serial_nos(item_code, row):",
      "args": [
        "item_code",
        "row"
      ]
    }
  ],
  "erpnext\\accounts\\report\\delivered_items_to_be_billed\\delivered_items_to_be_billed.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\tcolumns = get_column()\n\targs = get_args()\n\tdata = get_ordered_to_be_billed_data(args, filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_column():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_args():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\received_items_to_be_billed\\received_items_to_be_billed.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute(filters=None):\n\tcolumns = get_column()\n\targs = get_args()\n\tdata = get_ordered_to_be_billed_data(args, filters)\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_column():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_args():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\item\\item.py": [
    {
      "type": "function",
      "line_start": 1303,
      "code_text": "def get_item_details(item_code, company=None):",
      "args": [
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1274,
      "code_text": "def get_item_defaults(item_code, company):",
      "args": [
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1098,
      "code_text": "def get_timeline_data(doctype: str, name: str) -> dict[int, int]:",
      "args": [
        "doctype: str",
        "name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 1087,
      "code_text": "def make_item_price(item, price_list_name, item_price):",
      "args": [
        "item",
        "price_list_name",
        "item_price"
      ]
    },
    {
      "type": "class",
      "line_start": 54,
      "code_text": "class Item(Document):"
    },
    {
      "type": "function",
      "line_start": 1415,
      "code_text": "def get_child_warehouses(warehouse):\n\tfrom erpnext.stock.doctype.warehouse.warehouse import get_child_warehouses\n\n\treturn get_child_warehouses(warehouse)",
      "args": [
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1315,
      "code_text": "def get_uom_conv_factor(uom, stock_uom):",
      "args": [
        "uom",
        "stock_uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1113,
      "code_text": "def validate_end_of_life(item_code, end_of_life=None, disabled=None):",
      "args": [
        "item_code",
        "end_of_life",
        "disabled"
      ]
    },
    {
      "type": "function",
      "line_start": 1143,
      "code_text": "def get_last_purchase_details(item_code, doc_name=None, conversion_rate=1.0):",
      "args": [
        "item_code",
        "doc_name",
        "conversion_rate"
      ]
    },
    {
      "type": "class",
      "line_start": 50,
      "code_text": "class DataValidationError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1126,
      "code_text": "def validate_is_stock_item(item_code, is_stock_item=None):\n\tif not is_stock_item:\n\t\tis_stock_item = frappe.db.get_value(\"Item\", item_code, \"is_stock_item\")\n\n\tif is_stock_item != 1:\n\t\tfrappe.throw(_(\"Item {0} is not a stock Item\").format(item_code))",
      "args": [
        "item_code",
        "is_stock_item"
      ]
    },
    {
      "type": "function",
      "line_start": 1203,
      "code_text": "def get_purchase_voucher_details(doctype, item_code, document_name=None):",
      "args": [
        "doctype",
        "item_code",
        "document_name"
      ]
    },
    {
      "type": "class",
      "line_start": 42,
      "code_text": "class StockExistsForTemplate(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 46,
      "code_text": "class InvalidBarcode(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1239,
      "code_text": "def check_stock_uom_with_bin(item, stock_uom):",
      "args": [
        "item",
        "stock_uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1361,
      "code_text": "def get_item_attribute(parent, attribute_value=\"\"):",
      "args": [
        "parent",
        "attribute_value"
      ]
    },
    {
      "type": "function",
      "line_start": 1383,
      "code_text": "def validate_item_default_company_links(item_defaults: list[ItemDefault]) -> None:",
      "args": [
        "item_defaults"
      ]
    },
    {
      "type": "function",
      "line_start": 1408,
      "code_text": "def get_asset_naming_series():\n\tfrom erpnext.assets.doctype.asset.asset import get_asset_naming_series\n\n\treturn get_asset_naming_series()",
      "args": []
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class DuplicateReorderRows(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef onload(self):\n\t\tself.set_onload(\"stock_exists\", self.stock_ledger_created())\n\t\tself.set_onload(\"asset_naming_series\", get_asset_naming_series())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 172,
      "code_text": "\tdef after_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef on_update(self):\n\t\tself.update_variants()\n\t\tself.update_item_price()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef validate_description(self):\n\t\t\"\"\"Clean HTML description if set\"\"\"\n\t\tif cint(frappe.db.get_single_value(\"Stock Settings\", \"clean_description_html\")):\n\t\t\tself.description = clean_html(self.description)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef validate_customer_provided_part(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef add_price(self, price_list=None):",
      "args": [
        "self",
        "price_list"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef set_opening_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef validate_fixed_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef validate_retain_sample(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 326,
      "code_text": "\tdef clear_retain_sample(self):\n\t\tif not self.has_batch_no:\n\t\t\tself.retain_sample = False\n\n\t\tif not self.retain_sample:\n\t\t\tself.sample_quantity = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef add_default_uom_in_conversion_factor_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef validate_item_tax_net_rate_range(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 357,
      "code_text": "\tdef update_template_tables(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 377,
      "code_text": "\tdef validate_conversion_factor(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 394,
      "code_text": "\tdef validate_item_type(self):\n\t\tif self.has_serial_no == 1 and self.is_stock_item == 0 and not self.is_fixed_asset:\n\t\t\tfrappe.throw(_(\"'Has Serial No' can not be 'Yes' for non-stock item\"))\n\n\t\tif self.has_serial_no == 0 and self.serial_no_series:\n\t\t\tself.serial_no_series = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 401,
      "code_text": "\tdef validate_naming_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 411,
      "code_text": "\tdef check_for_active_boms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 419,
      "code_text": "\tdef fill_customer_code(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 427,
      "code_text": "\tdef check_item_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 442,
      "code_text": "\tdef validate_barcode(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 476,
      "code_text": "\tdef validate_warehouse_for_reorder(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef stock_ledger_created(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 526,
      "code_text": "\tdef update_item_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 544,
      "code_text": "\tdef on_trash(self):\n\t\tfrappe.db.sql(\"\"\"delete from tabBin where item_code=%s\"\"\", self.name)\n\t\tfrappe.db.sql(\"delete from `tabItem Price` where item_code=%s\", self.name)\n\t\tfor variant_of in frappe.get_all(\"Item\", filters={\"variant_of\": self.name}):\n\t\t\tfrappe.delete_doc(\"Item\", variant_of.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 550,
      "code_text": "\tdef before_rename(self, old_name, new_name, merge=False):",
      "args": [
        "self",
        "old_name",
        "new_name",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 559,
      "code_text": "\tdef after_rename(self, old_name, new_name, merge):",
      "args": [
        "self",
        "old_name",
        "new_name",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 593,
      "code_text": "\tdef delete_old_bins(self, old_name):\n\t\tfrappe.db.delete(\"Bin\", {\"item_code\": old_name})",
      "args": [
        "self",
        "old_name"
      ]
    },
    {
      "type": "method",
      "line_start": 596,
      "code_text": "\tdef validate_duplicate_item_in_stock_reconciliation(self, old_name, new_name):",
      "args": [
        "self",
        "old_name",
        "new_name"
      ]
    },
    {
      "type": "method",
      "line_start": 625,
      "code_text": "\tdef validate_properties_before_merge(self, new_name):",
      "args": [
        "self",
        "new_name"
      ]
    },
    {
      "type": "method",
      "line_start": 638,
      "code_text": "\tdef validate_duplicate_product_bundles_before_merge(self, old_name, new_name):",
      "args": [
        "self",
        "old_name",
        "new_name"
      ]
    },
    {
      "type": "method",
      "line_start": 652,
      "code_text": "\tdef set_last_purchase_rate(self, new_name):\n\t\tlast_purchase_rate = get_last_purchase_details(new_name).get(\"base_net_rate\", 0)\n\t\tfrappe.db.set_value(\"Item\", new_name, \"last_purchase_rate\", last_purchase_rate)",
      "args": [
        "self",
        "new_name"
      ]
    },
    {
      "type": "method",
      "line_start": 656,
      "code_text": "\tdef recalculate_bin_qty(self, new_name):",
      "args": [
        "self",
        "new_name"
      ]
    },
    {
      "type": "method",
      "line_start": 678,
      "code_text": "\tdef update_bom_item_desc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 710,
      "code_text": "\tdef validate_item_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 718,
      "code_text": "\tdef update_defaults_from_item_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 769,
      "code_text": "\tdef update_variants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 790,
      "code_text": "\tdef validate_has_variants(self):\n\t\tif not self.has_variants and frappe.db.get_value(\"Item\", self.name, \"has_variants\"):\n\t\t\tif frappe.db.exists(\"Item\", {\"variant_of\": self.name}):\n\t\t\t\tfrappe.throw(_(\"Item has variants.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 795,
      "code_text": "\tdef validate_attributes_in_variants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 864,
      "code_text": "\tdef validate_stock_exists_for_template_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 885,
      "code_text": "\tdef validate_variant_based_on_change(self):\n\t\tif not self.is_new() and (\n\t\t\tself.variant_of or (self.has_variants and frappe.get_all(\"Item\", {\"variant_of\": self.name}))\n\t\t):\n\t\t\tif self.variant_based_on != frappe.db.get_value(\"Item\", self.name, \"variant_based_on\"):\n\t\t\t\tfrappe.throw(_(\"Variant Based On cannot be changed\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 892,
      "code_text": "\tdef validate_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 911,
      "code_text": "\tdef validate_uom_conversion_factor(self):\n\t\tif self.uoms:\n\t\t\tfor d in self.uoms:\n\t\t\t\tvalue = get_uom_conv_factor(d.uom, self.stock_uom)\n\t\t\t\tif value:\n\t\t\t\t\td.conversion_factor = value",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 918,
      "code_text": "\tdef validate_attributes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 937,
      "code_text": "\tdef validate_variant_attributes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 959,
      "code_text": "\tdef cant_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 994,
      "code_text": "\tdef _get_linked_submitted_documents(self, changed_fields: list[str]) -> dict[str, str] | None:",
      "args": [
        "self",
        "changed_fields"
      ]
    },
    {
      "type": "method",
      "line_start": 1051,
      "code_text": "\tdef validate_auto_reorder_enabled_in_stock_settings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1062,
      "code_text": "def convert_erpnext_to_barcodenumber(erpnext_number, barcode):",
      "args": [
        "erpnext_number",
        "barcode"
      ]
    },
    {
      "type": "function",
      "line_start": 1134,
      "code_text": "def validate_cancelled_item(item_code, docstatus=None):\n\tif docstatus is None:\n\t\tdocstatus = frappe.db.get_value(\"Item\", item_code, \"docstatus\")\n\n\tif docstatus == 2:\n\t\tfrappe.throw(_(\"Item {0} is cancelled\").format(item_code))",
      "args": [
        "item_code",
        "docstatus"
      ]
    },
    {
      "type": "function",
      "line_start": 1287,
      "code_text": "def set_item_default(item_code, company, fieldname, value):",
      "args": [
        "item_code",
        "company",
        "fieldname",
        "value"
      ]
    },
    {
      "type": "function",
      "line_start": 1373,
      "code_text": "def update_variants(variants, template, publish_progress=True):",
      "args": [
        "variants",
        "template",
        "publish_progress"
      ]
    }
  ],
  "erpnext\\crm\\report\\opportunity_summary_by_sales_stage\\opportunity_summary_by_sales_stage.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute(filters=None):\n\treturn OpportunitySummaryBySalesStage(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class OpportunitySummaryBySalesStage:"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef run(self):\n\t\tself.get_columns()\n\t\tself.get_data()\n\t\tself.get_chart_data()\n\t\treturn self.columns, self.data, None, self.chart",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef set_sales_stage_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef get_data_query(self, based_on, data_based_on):",
      "args": [
        "self",
        "based_on",
        "data_based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef get_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 143,
      "code_text": "\tdef get_formatted_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef set_formatted_data_based_on_sales_stage(self, based_on, sales_stage, count):\n\t\tself.formatted_data.setdefault(based_on, frappe._dict()).setdefault(sales_stage, 0)\n\t\tself.formatted_data[based_on][sales_stage] += count",
      "args": [
        "self",
        "based_on",
        "sales_stage",
        "count"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef get_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef get_exchange_rate(self, from_currency, to_currency):",
      "args": [
        "self",
        "from_currency",
        "to_currency"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef get_default_currency(self):\n\t\tcompany = self.filters.get(\"company\")\n\t\treturn frappe.db.get_value(\"Company\", company, \"default_currency\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 231,
      "code_text": "\tdef convert_to_base_currency(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\production_planning_report\\production_planning_report.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\treturn ProductionPlanReport(filters).execute_report()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class ProductionPlanReport:"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})\n\t\tself.raw_materials_dict = {}\n\t\tself.data = []",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef execute_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef get_open_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef get_raw_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef get_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef get_bin_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef get_purchase_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef prepare_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 263,
      "code_text": "\tdef update_raw_materials(self, data, key):",
      "args": [
        "self",
        "data",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef pick_materials_from_warehouses(self, args, order_data, warehouses):",
      "args": [
        "self",
        "args",
        "order_data",
        "warehouses"
      ]
    },
    {
      "type": "method",
      "line_start": 334,
      "code_text": "\tdef get_args(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\regional\\report\\vat_audit_report\\vat_audit_report.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):\n\treturn VATAuditReport(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class VATAuditReport:"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})\n\t\tself.columns = []\n\t\tself.data = []\n\t\tself.doctypes = [\"Purchase Invoice\", \"Sales Invoice\"]",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef get_sa_vat_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef get_invoice_data(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef get_invoice_items(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef get_items_based_on_tax_rate(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef get_item_amount_map(self, parent, item_code, tax_data):",
      "args": [
        "self",
        "parent",
        "item_code",
        "tax_data"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef get_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef get_data(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef get_consolidated_data(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\report\\issue_analytics\\issue_analytics.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):\n\treturn IssueAnalytics(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class IssueAnalytics:"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef __init__(self, filters=None):\n\t\t\"\"\"Issue Analytics Report\"\"\"\n\t\tself.filters = frappe._dict(filters or {})\n\t\tself.get_period_date_ranges()",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef run(self):\n\t\tself.get_columns()\n\t\tself.get_data()\n\t\tself.get_chart_data()\n\n\t\treturn self.columns, self.data, None, self.chart",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef get_data(self):\n\t\tself.get_issues()\n\t\tself.get_rows()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef get_period(self, date):",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef get_period_date_ranges(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef get_issues(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef get_common_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef get_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef get_periodic_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef get_chart_data(self):\n\t\tlength = len(self.columns)\n\t\tlabels = [d.get(\"label\") for d in self.columns[1 : length - 1]]\n\t\tself.chart = {\"data\": {\"labels\": labels, \"datasets\": []}, \"type\": \"line\"}",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\exponential_smoothing_forecasting\\exponential_smoothing_forecasting.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):\n\treturn ForecastingReport(filters).execute_report()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class ExponentialSmoothingForecast:"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef forecast_future_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class ForecastingReport(ExponentialSmoothingForecast):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef __init__(self, filters=None):",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef execute_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef prepare_periodical_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef get_data_for_forecast(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef prepare_final_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 143,
      "code_text": "\tdef add_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef get_summary_data(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\report\\issue_summary\\issue_summary.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):\n\treturn IssueSummary(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class IssueSummary:"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef get_data(self):\n\t\tself.get_issues()\n\t\tself.get_rows()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef get_issues(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef get_common_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef get_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef get_summary_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef get_metrics_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef get_chart_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 340,
      "code_text": "\tdef get_report_summary(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\general_and_payment_ledger_comparison\\general_and_payment_ledger_comparison.py": [
    {
      "type": "function",
      "line_start": 268,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class General_Payment_Ledger_Comparison:"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = filters\n\t\tself.gle = []\n\t\tself.ple = []",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef get_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef generate_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef get_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef get_ple(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef compare(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef generate_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\gross_and_net_profit_report\\gross_and_net_profit_report.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def get_revenue(data, period_list, include_in_gross=1):",
      "args": [
        "data",
        "period_list",
        "include_in_gross"
      ]
    },
    {
      "type": "function",
      "line_start": 163,
      "code_text": "def set_total(node, value, complete_list, totals):",
      "args": [
        "node",
        "value",
        "complete_list",
        "totals"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def remove_parent_with_no_child(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def adjust_account_totals(data, period_list):",
      "args": [
        "data",
        "period_list"
      ]
    },
    {
      "type": "function",
      "line_start": 175,
      "code_text": "def get_profit(\n\tgross_income, gross_expense, period_list, company, profit_type, currency=None, consolidated=False\n):",
      "args": [
        "gross_income",
        "gross_expense",
        "period_list",
        "company",
        "profit_type",
        "currency",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 203,
      "code_text": "def get_net_profit(\n\tnon_gross_income,\n\tgross_income,\n\tgross_expense,\n\tnon_gross_expense,\n\tperiod_list,\n\tcompany,\n\tcurrency=None,\n\tconsolidated=False,\n):",
      "args": [
        "non_gross_income",
        "gross_income",
        "gross_expense",
        "non_gross_expense",
        "period_list",
        "company",
        "currency",
        "consolidated"
      ]
    }
  ],
  "erpnext\\accounts\\report\\accounts_receivable_summary\\accounts_receivable_summary.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class AccountsReceivableSummary(ReceivablePayableReport):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef run(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef get_data(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef get_party_total(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef init_party_total(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef set_party_details(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 209,
      "code_text": "def get_gl_balance(report_date, company):",
      "args": [
        "report_date",
        "company"
      ]
    }
  ],
  "erpnext\\tests\\test_webform.py": [
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def get_data():\n\twebform_list_contexts = frappe.get_hooks(\"webform_list_context\")\n\tif webform_list_contexts:\n\t\tcontext = frappe._dict(frappe.get_attr(webform_list_contexts[0])(\"Buying\") or {})\n\tkwargs = dict(doctype=\"Order Assignment\", order_by=\"creation desc\")\n\treturn context.get_list(**kwargs)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def create_user(name, email):",
      "args": [
        "name",
        "email"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def create_custom_doctype():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def create_order_assignment(supplier, po):",
      "args": [
        "supplier",
        "po"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestWebsite(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef test_permission_for_custom_doctype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def create_webform():",
      "args": []
    }
  ],
  "erpnext\\stock\\dashboard\\warehouse_capacity_dashboard.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def get_data(\n\titem_code=None,\n\twarehouse=None,\n\tparent_warehouse=None,\n\tcompany=None,\n\tstart=0,\n\tsort_by=\"stock_capacity\",\n\tsort_order=\"desc\",\n):",
      "args": [
        "item_code",
        "warehouse",
        "parent_warehouse",
        "company",
        "start",
        "sort_by",
        "sort_order"
      ]
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def get_filters(item_code=None, warehouse=None, parent_warehouse=None, company=None):",
      "args": [
        "item_code",
        "warehouse",
        "parent_warehouse",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def get_warehouse_filter_based_on_permissions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def get_warehouse_capacity_data(filters, start):",
      "args": [
        "filters",
        "start"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\rename_issue_doctype_fields.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def convert_to_seconds(value, unit):",
      "args": [
        "value",
        "unit"
      ]
    }
  ],
  "erpnext\\accounts\\report\\payment_ledger\\payment_ledger.py": [
    {
      "type": "function",
      "line_start": 230,
      "code_text": "def execute(filters=None):\n\treturn PaymentLedger(filters).run()",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class PaymentLedger:"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = filters\n\t\tself.columns, self.data = [], []\n\t\tself.voucher_dict = OrderedDict()\n\t\tself.voucher_amount = []\n\t\tself.ple = qb.DocType(\"Payment Ledger Entry\")",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef init_voucher_dict(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef build_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef build_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef get_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef run(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\update_sla_enhancements.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def convert_to_seconds(value, unit):",
      "args": [
        "value",
        "unit"
      ]
    }
  ],
  "erpnext\\stock\\report\\delayed_item_report\\delayed_item_report.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None, consolidated=False):\n\tdata, columns = DelayedItemReport(filters).run()\n\n\treturn data, columns",
      "args": [
        "filters",
        "consolidated"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class DelayedItemReport:"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef __init__(self, filters=None):\n\t\tself.filters = frappe._dict(filters or {})",
      "args": [
        "self",
        "filters"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef run(self):\n\t\treturn self.get_columns(), self.get_data() or []",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef get_data(self, consolidated=False):",
      "args": [
        "self",
        "consolidated"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef filter_transactions_data(self, consolidated=False):",
      "args": [
        "self",
        "consolidated"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\patches\\v11_0\\refactor_naming_series.py": [
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def set_series(doctype, options, default):",
      "args": [
        "doctype",
        "options",
        "default"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_series():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_series_to_preserve(doctype):\n\tseries_to_preserve = frappe.db.sql_list(\n\t\tf\"\"\"select distinct naming_series from `tab{doctype}` where ifnull(naming_series, '') != ''\"\"\"\n\t)\n\tseries_to_preserve.sort()\n\treturn series_to_preserve",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_default_series(doctype):\n\tfield = frappe.get_meta(doctype).get_field(\"naming_series\")\n\tdefault_series = field.get(\"default\", \"\") if field else \"\"\n\treturn default_series",
      "args": [
        "doctype"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\delete_orphaned_tables.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def has_deleted_company_transactions():\n\treturn frappe.get_all(\"Transaction Deletion Record\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_child_doctypes_whose_parent_doctypes_were_affected():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def get_affected_doctypes():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def is_not_child_table(doctype):\n\treturn not bool(frappe.get_value(\"DocType\", doctype, \"istable\"))",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def remove_duplicate_items(affected_doctypes):\n\treturn list(set(affected_doctypes))",
      "args": [
        "affected_doctypes"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def check_for_new_doc_with_same_name_as_deleted_parent(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\patches\\v11_0\\refactor_autoname_naming.py": [
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def execute():\n\tseries_to_set = get_series()\n\tfor doctype, opts in series_to_set.items():\n\t\tset_series(doctype, opts[\"value\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 90,
      "code_text": "def set_series(doctype, value):\n\tdoc = frappe.db.exists(\"Property Setter\", {\"doc_type\": doctype, \"property\": \"autoname\"})\n\tif doc:\n\t\tfrappe.db.set_value(\"Property Setter\", doc, \"value\", value)\n\telse:\n\t\tmake_property_setter(doctype, \"\", \"autoname\", value, \"\", for_doctype=True)",
      "args": [
        "doctype",
        "value"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def get_series():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def get_series_to_preserve(doctype):\n\tseries_to_preserve = frappe.db.get_value(\"DocType\", doctype, \"autoname\")\n\treturn series_to_preserve",
      "args": [
        "doctype"
      ]
    }
  ],
  "erpnext\\patches\\v12_0\\move_item_tax_to_item_tax_template.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def get_item_tax_template(\n\titem_tax_templates, item_tax_map, item_code, parenttype=None, parent=None, tax_types=None\n):",
      "args": [
        "item_tax_templates",
        "item_tax_map",
        "item_code",
        "parenttype",
        "parent",
        "tax_types"
      ]
    },
    {
      "type": "function",
      "line_start": 202,
      "code_text": "def get_company(company_abbr, parenttype=None, parent=None):",
      "args": [
        "company_abbr",
        "parenttype",
        "parent"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\create_advance_payment_ledger_records.py": [
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def get_advance_doctypes() -> list:\n\treturn frappe.get_hooks(\"advance_payment_receivable_doctypes\") + frappe.get_hooks(\n\t\t\"advance_payment_payable_doctypes\"\n\t)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def make_advance_ledger_entries(vouchers: list):\n\tfor x in vouchers:\n\t\tfrappe.get_doc(x.doctype, x.name).make_advance_payment_ledger_entries()",
      "args": [
        "vouchers: list"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_payments_with_so_po_reference() -> list:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def get_journals_with_so_po_reference() -> list:",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_sub_voucher_type_in_gl_entries.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tupdate_purchase_invoices()\n\tupdate_sales_invoices()\n\tupdate_sales_debit_notes()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def update_gl_entry(doctype, invoices, value):",
      "args": [
        "doctype",
        "invoices",
        "value"
      ]
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def update_purchase_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def update_sales_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def update_sales_debit_notes():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_invoice_remarks.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tupdate_sales_invoice_remarks()\n\tupdate_purchase_invoice_remarks()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def update_sales_invoice_remarks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def update_purchase_invoice_remarks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def update_sales_invoice_gle_remarks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def update_sales_invoice_ple_remarks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 114,
      "code_text": "def update_purchase_invoice_gle_remarks():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def update_purchase_invoice_ple_remarks():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\delivery_note\\delivery_note.py": [
    {
      "type": "function",
      "line_start": 809,
      "code_text": "def make_sales_invoice(source_name, target_doc=None, args=None):",
      "args": [
        "source_name",
        "target_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 759,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 1093,
      "code_text": "def make_sales_return(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"Delivery Note\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1106,
      "code_text": "def make_inter_company_purchase_receipt(source_name, target_doc=None):\n\treturn make_inter_company_transaction(\"Delivery Note\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1110,
      "code_text": "def make_inter_company_transaction(doctype, source_name, target_doc=None):",
      "args": [
        "doctype",
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 963,
      "code_text": "def make_packing_slip(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 682,
      "code_text": "def update_billed_amount_based_on_so(so_detail, update_modified=True):",
      "args": [
        "so_detail",
        "update_modified"
      ]
    },
    {
      "type": "function",
      "line_start": 774,
      "code_text": "def get_invoiced_qty_map(delivery_note):",
      "args": [
        "delivery_note"
      ]
    },
    {
      "type": "function",
      "line_start": 790,
      "code_text": "def get_returned_qty_map(delivery_note):",
      "args": [
        "delivery_note"
      ]
    },
    {
      "type": "function",
      "line_start": 909,
      "code_text": "def make_delivery_trip(source_name, target_doc=None, kwargs=None):",
      "args": [
        "source_name",
        "target_doc",
        "kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class DeliveryNote(SellingController):"
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef onload(self):\n\t\tsuper().onload()\n\n\t\tif self.docstatus == 0:\n\t\t\tself.set_onload(\"has_unpacked_items\", self.has_unpacked_items())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef before_print(self, settings=None):",
      "args": [
        "self",
        "settings"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef set_actual_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef so_required(self):\n\t\t\"\"\"check in manage account if sales order required or not\"\"\"\n\t\tif frappe.db.get_single_value(\"Selling Settings\", \"so_required\") == \"Yes\":\n\t\t\tfor d in self.get(\"items\"):\n\t\t\t\tif not d.against_sales_order:\n\t\t\t\t\tfrappe.throw(_(\"Sales Order required for Item {0}\").format(d.item_code))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 280,
      "code_text": "\tdef validate_with_previous_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef set_serial_and_batch_bundle_from_pick_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 362,
      "code_text": "\tdef validate_references(self):\n\t\tself.validate_sales_order_references()\n\t\tself.validate_sales_invoice_references()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef validate_sales_order_references(self):\n\t\tself._validate_dependent_item_fields(\n\t\t\t\"against_sales_order\", \"so_detail\", _(\"References to Sales Orders are Incomplete\")\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 371,
      "code_text": "\tdef validate_sales_invoice_references(self):\n\t\tself._validate_dependent_item_fields(\n\t\t\t\"against_sales_invoice\", \"si_detail\", _(\"References to Sales Invoices are Incomplete\")\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef _validate_dependent_item_fields(self, field_a: str, field_b: str, error_title: str):",
      "args": [
        "self",
        "field_a: str",
        "field_b: str",
        "error_title: str"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef validate_proj_cust(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef validate_warehouse(self):\n\t\tsuper().validate_warehouse()\n\n\t\tfor d in self.get_item_list():\n\t\t\tif not d[\"warehouse\"] and frappe.get_cached_value(\"Item\", d[\"item_code\"], \"is_stock_item\") == 1:\n\t\t\t\tfrappe.throw(_(\"Warehouse required for stock Item {0}\").format(d[\"item_code\"]))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 416,
      "code_text": "\tdef update_current_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 434,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 467,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 496,
      "code_text": "\tdef validate_against_stock_reservation_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 538,
      "code_text": "\tdef check_credit_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 571,
      "code_text": "\tdef validate_packed_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 588,
      "code_text": "\tdef update_pick_list_status(self):\n\t\tfrom erpnext.stock.doctype.pick_list.pick_list import update_pick_list_status\n\n\t\tupdate_pick_list_status(self.pick_list)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 593,
      "code_text": "\tdef check_next_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 612,
      "code_text": "\tdef cancel_packing_slips(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 628,
      "code_text": "\tdef update_status(self, status):\n\t\tself.set_status(update=True, status=status)\n\t\tself.notify_update()\n\t\tclear_doctype_notifications(self)",
      "args": [
        "self",
        "status"
      ]
    },
    {
      "type": "method",
      "line_start": 633,
      "code_text": "\tdef update_billing_status(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 647,
      "code_text": "\tdef make_return_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 664,
      "code_text": "\tdef has_unpacked_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 673,
      "code_text": "\tdef get_product_bundle_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 935,
      "code_text": "def make_installation_note(source_name, target_doc=None, kwargs=None):",
      "args": [
        "source_name",
        "target_doc",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1018,
      "code_text": "def make_shipment(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1100,
      "code_text": "def update_delivery_note_status(docname, status):\n\tdn = frappe.get_doc(\"Delivery Note\", docname)\n\tdn.update_status(status)",
      "args": [
        "docname",
        "status"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\update_pos_return_ledger_entries.py": [
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def execute():\n\taffected_pos_returns = get_pos_returns_with_invalid_against_ref()\n\tfix_incorrect_against_voucher_ref(affected_pos_returns)\n\tupdate_outstanding_for_affected(affected_pos_returns)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def get_valid_against_voucher_ref(pos_returns):",
      "args": [
        "pos_returns"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def build_dict_of_valid_against_reference(pos_returns):\n\t_against_ref_dict = frappe._dict()\n\tres = get_valid_against_voucher_ref(pos_returns)\n\tfor x in res:\n\t\t_against_ref_dict[x.name] = x.return_against\n\treturn _against_ref_dict",
      "args": [
        "pos_returns"
      ]
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def fix_incorrect_against_voucher_ref(affected_pos_returns):",
      "args": [
        "affected_pos_returns"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def get_pos_returns_with_invalid_against_ref():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def update_outstanding_for_affected(affected_pos_returns):",
      "args": [
        "affected_pos_returns"
      ]
    }
  ],
  "erpnext\\stock\\report\\delayed_order_report\\delayed_order_report.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\tcolumns, data = [], []\n\n\tcolumns, data = DelayedOrderReport(filters).run()\n\n\treturn columns, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class DelayedOrderReport(DelayedItemReport):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef run(self):\n\t\treturn self.get_columns(), self.get_data(consolidated=True) or []",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef get_data(self, consolidated=False):",
      "args": [
        "self",
        "consolidated"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef get_columns(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\add_missing_fg_item_for_stock_entry.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def set_expense_account(doc):\n\tfor row in doc.items:\n\t\tif row.is_finished_item and not row.expense_account:\n\t\t\trow.expense_account = frappe.get_cached_value(\"Company\", doc.company, \"stock_adjustment_account\")",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def repost_stock_entry(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_sle_for_target_warehouse(doc, sl_entries, finished_item_row):",
      "args": [
        "doc",
        "sl_entries",
        "finished_item_row"
      ]
    },
    {
      "type": "function",
      "line_start": 113,
      "code_text": "def repost_future_sle_and_gle(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\fix_additional_cost_in_mfg_stock_entry.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tstock_entry_codes = find_broken_stock_entries()\n\n\tfor stock_entry_code in stock_entry_codes:\n\t\tpatched_stock_entry = patch_additional_cost(stock_entry_code)\n\t\tcreate_repost_item_valuation(patched_stock_entry)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def create_repost_item_valuation(stock_entry):",
      "args": [
        "stock_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def find_broken_stock_entries() -> list[StockEntryCode]:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def patch_additional_cost(code: StockEntryCode):",
      "args": [
        "code: StockEntryCode"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\delivery_note\\test_delivery_note.py": [
    {
      "type": "function",
      "line_start": 2587,
      "code_text": "def create_delivery_note(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 48,
      "code_text": "class UnitTestDeliveryNote(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 57,
      "code_text": "class TestDeliveryNote(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef test_delivery_note_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_over_billing_against_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_delivery_note_no_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef test_delivery_note_gl_entry_packing_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef test_serialize_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef check_serial_no_values(self, serial_no, field_values):\n\t\tserial_no = frappe.get_doc(\"Serial No\", serial_no)\n\t\tfor field, value in field_values.items():\n\t\t\tself.assertEqual(cstr(serial_no.get(field)), value)",
      "args": [
        "self",
        "serial_no",
        "field_values"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef test_delivery_note_return_against_denormalized_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 301,
      "code_text": "\tdef test_sales_return_for_non_bundled_items_partial(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 402,
      "code_text": "\tdef test_sales_return_for_non_bundled_items_full(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 445,
      "code_text": "\tdef test_delivery_note_return_valuation_on_different_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 476,
      "code_text": "\tdef test_sales_return_against_serial_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef test_return_single_item_from_bundled_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 647,
      "code_text": "\tdef test_return_entire_bundled_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 720,
      "code_text": "\tdef test_bin_details_of_packed_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 760,
      "code_text": "\tdef test_return_for_serialized_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 794,
      "code_text": "\tdef test_delivery_note_internal_transfer_serial_no_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 836,
      "code_text": "\tdef test_delivery_of_bundled_items_to_target_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 939,
      "code_text": "\tdef test_closed_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 962,
      "code_text": "\tdef test_sales_order_reference_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 971,
      "code_text": "\tdef test_dn_billing_status_case1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 993,
      "code_text": "\tdef test_dn_billing_status_case2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1035,
      "code_text": "\tdef test_dn_billing_status_case3(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1085,
      "code_text": "\tdef test_dn_billing_status_case4(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1108,
      "code_text": "\tdef test_delivery_trip(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1128,
      "code_text": "\tdef test_delivery_note_with_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1159,
      "code_text": "\tdef test_delivery_note_cost_center_with_balance_sheet_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1188,
      "code_text": "\tdef test_make_sales_invoice_from_dn_for_returned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1207,
      "code_text": "\tdef test_make_sales_invoice_from_dn_with_returned_qty_duplicate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1239,
      "code_text": "\tdef test_delivery_note_bundle_with_batched_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1282,
      "code_text": "\tdef test_payment_terms_are_fetched_when_creating_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1311,
      "code_text": "\tdef test_returned_qty_in_return_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1351,
      "code_text": "\tdef test_internal_transfer_with_valuation_only(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1432,
      "code_text": "\tdef test_internal_transfer_precision_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1459,
      "code_text": "\tdef test_batch_expiry_for_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1490,
      "code_text": "\tdef test_reserve_qty_on_sales_return(self):\n\t\tfrappe.db.set_single_value(\"Selling Settings\", \"dont_reserve_sales_order_qty_on_sales_return\", 0)\n\t\tself.reserved_qty_check()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1494,
      "code_text": "\tdef test_dont_reserve_qty_on_sales_return(self):\n\t\tfrappe.db.set_single_value(\"Selling Settings\", \"dont_reserve_sales_order_qty_on_sales_return\", 1)\n\t\tself.reserved_qty_check()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1498,
      "code_text": "\tdef reserved_qty_check(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1534,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()\n\t\tfrappe.db.set_single_value(\"Selling Settings\", \"dont_reserve_sales_order_qty_on_sales_return\", 0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1538,
      "code_text": "\tdef test_non_internal_transfer_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1553,
      "code_text": "\tdef test_serial_no_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1572,
      "code_text": "\tdef test_sales_return_valuation_for_moving_average(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1620,
      "code_text": "\tdef test_sales_return_valuation_for_moving_average_case2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1673,
      "code_text": "\tdef test_batch_with_non_stock_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1709,
      "code_text": "\tdef test_internal_transfer_for_non_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1728,
      "code_text": "\tdef test_use_serial_batch_fields_for_packed_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1773,
      "code_text": "\tdef test_delivery_note_legacy_serial_no_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1899,
      "code_text": "\tdef test_sales_return_batch_no_for_batched_item_in_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1928,
      "code_text": "\tdef test_partial_sales_return_batch_no_for_batched_item_in_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1975,
      "code_text": "\tdef test_sales_return_serial_no_for_serial_item_in_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2003,
      "code_text": "\tdef test_same_posting_date_and_posting_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2090,
      "code_text": "\tdef test_warranty_expiry_date_for_serial_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2124,
      "code_text": "\tdef test_batch_return_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2165,
      "code_text": "\tdef test_delivery_note_return_valuation_without_use_serial_batch_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2284,
      "code_text": "\tdef test_delivery_note_return_valuation_with_use_serial_batch_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2423,
      "code_text": "\tdef test_auto_set_serial_batch_for_draft_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2494,
      "code_text": "\tdef test_delivery_note_return_for_batch_item_with_different_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2564,
      "code_text": "\tdef test_delivery_note_per_billed_after_return(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_deferred_accounts_to_item_defaults.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def add_company_wise_item_default(item, account_type):",
      "args": [
        "item",
        "account_type"
      ]
    },
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def get_deferred_accounts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def add_to_item_defaults(item_dict):\n\tfor item in item_dict:\n\t\tadd_company_wise_item_default(item, \"deferred_expense_account\")\n\t\tadd_company_wise_item_default(item, \"deferred_revenue_account\")",
      "args": [
        "item_dict"
      ]
    }
  ],
  "erpnext\\selling\\report\\customer_acquisition_and_loyalty\\customer_acquisition_and_loyalty.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def get_customer_stats(filters, tree_view=False):",
      "args": [
        "filters",
        "tree_view"
      ]
    },
    {
      "type": "function",
      "line_start": 57,
      "code_text": "def get_data_by_time(filters, common_columns):",
      "args": [
        "filters",
        "common_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def get_data_by_territory(filters, common_columns):",
      "args": [
        "filters",
        "common_columns"
      ]
    }
  ],
  "erpnext\\patches\\v12_0\\set_priority_for_support.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def set_issue_priority():\n\t# Adds priority from issue to Issue Priority DocType as Priority is a new DocType.\n\tfor priority in frappe.get_meta(\"Issue\").get_field(\"priority\").options.split(\"\\n\"):\n\t\tif priority and not frappe.db.exists(\"Issue Priority\", priority):\n\t\t\tfrappe.get_doc({\"doctype\": \"Issue Priority\", \"name\": priority}).insert(ignore_permissions=True)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def set_priority_for_issue():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def set_priorities_service_level():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def set_priorities_service_level_agreement():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\delete_old_purchase_reports.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def delete_auto_email_reports(report):\n\t\"\"\"Check for one or multiple Auto Email Reports and delete\"\"\"\n\tauto_email_reports = frappe.db.get_values(\"Auto Email Report\", {\"report\": report}, [\"name\"])\n\tfor auto_email_report in auto_email_reports:\n\t\tfrappe.delete_doc(\"Auto Email Report\", auto_email_report[0])",
      "args": [
        "report"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def delete_links_from_desktop_icons(report):\n\t\"\"\"Check for one or multiple Desktop Icons and delete\"\"\"\n\tdesktop_icons = frappe.db.get_values(\"Desktop Icon\", {\"_report\": report}, [\"name\"])\n\tfor desktop_icon in desktop_icons:\n\t\tfrappe.delete_doc(\"Desktop Icon\", desktop_icon[0], force=True)",
      "args": [
        "report"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\delete_old_sales_reports.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def delete_auto_email_reports(report):\n\t\"\"\"Check for one or multiple Auto Email Reports and delete\"\"\"\n\tauto_email_reports = frappe.db.get_values(\"Auto Email Report\", {\"report\": report}, [\"name\"])\n\tfor auto_email_report in auto_email_reports:\n\t\tfrappe.delete_doc(\"Auto Email Report\", auto_email_report[0], force=True)",
      "args": [
        "report"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def delete_links_from_desktop_icons(report):\n\t\"\"\"Check for one or multiple Desktop Icons and delete\"\"\"\n\tdesktop_icons = frappe.db.get_values(\"Desktop Icon\", {\"_report\": report}, [\"name\"])\n\tfor desktop_icon in desktop_icons:\n\t\tfrappe.delete_doc(\"Desktop Icon\", desktop_icon[0], force=True)",
      "args": [
        "report"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\create_asset_depreciation_schedules_from_assets.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_asset_finance_books_map():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_asset_depreciation_schedules_map():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def update_depreciation_schedules(\n\tdepreciation_schedules,\n\tasset_depr_schedule_name,\n):",
      "args": [
        "depreciation_schedules",
        "asset_depr_schedule_name"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\correct_asset_value_if_je_with_workflow.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def correct_value_for_assets_with_auto_depr(fb_name=None):",
      "args": [
        "fb_name"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def correct_value_for_assets_with_manual_depr_entries():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_reports_with_range.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def execute():\n\tfor report in REFERENCE_REPORTS:\n\t\tupdate_reference_reports(report)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def update_reference_reports(reference_report):",
      "args": [
        "reference_report"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def update_report_json(report):",
      "args": [
        "report"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\reset_clearance_date_for_intracompany_payment_entries.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_reconciled_bank_transactions(intra_company_pe):",
      "args": [
        "intra_company_pe"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_intra_company_payment_entries_with_clearance_dates():\n\treturn frappe.get_all(\n\t\t\"Payment Entry\",\n\t\tfilters={\"payment_type\": \"Internal Transfer\", \"clearance_date\": [\"not in\", None]},\n\t\tpluck=\"name\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\recalculate_amount_difference_field.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def get_billed_qty_against_purchase_receipt(pr_names):",
      "args": [
        "pr_names"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\refactor_closing_stock_balance.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():\n\tif not frappe.db.has_table(\"Closing Stock Balance\"):\n\t\treturn\n\n\tadd_inventory_dimensions_to_stock_closing_balance()\n\tcreate_stock_closing_entries()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def add_inventory_dimensions_to_stock_closing_balance():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def create_stock_closing_entries():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_cost_center_allocations.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def create_new_cost_center_allocation_records(cc_allocations):",
      "args": [
        "cc_allocations"
      ]
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_existing_cost_center_allocations():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_sales_partner_type.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def insert_sales_partner_type(s):\n\tif not frappe.db.exists(\"Sales Partner Type\", s):\n\t\tfrappe.get_doc(dict(doctype=\"Sales Partner Type\", sales_partner_type=s)).insert()",
      "args": [
        "s"
      ]
    }
  ],
  "erpnext\\patches\\v11_0\\create_department_records_for_each_company.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def update_records(doctype, comp_dict):",
      "args": [
        "doctype",
        "comp_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def update_instructors(comp_dict):",
      "args": [
        "comp_dict"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\link_purchase_item_to_asset_doc.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_linked_item(doctype, parent, item_code, amount, quantity):",
      "args": [
        "doctype",
        "parent",
        "item_code",
        "amount",
        "quantity"
      ]
    }
  ],
  "erpnext\\manufacturing\\dashboard_fixtures.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def get_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_dashboards():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def get_charts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 181,
      "code_text": "def get_number_cards():",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\supplier\\patches\\migrate_supplier_portal_users.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def get_portal_user_contacts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def add_portal_users(contacts):",
      "args": [
        "contacts"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\crm_ux_cleanup.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def add_calendar_event_for_leads():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def add_calendar_event_for_opportunities():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\stock_entry_enhancements.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():\n\tcreate_stock_entry_types()\n\n\tcompany = frappe.db.get_value(\"Company\", {\"country\": \"India\"}, \"name\")\n\tif company:\n\t\tadd_gst_hsn_code_field()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def create_stock_entry_types():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def add_gst_hsn_code_field():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_bank_reconciliation_fields.py": [
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def execute():\n\t_rename_single_field(doctype=\"Bank Clearance\", old_name=\"bank_account\", new_name=\"account\")\n\t_rename_single_field(doctype=\"Bank Clearance\", old_name=\"bank_account_no\", new_name=\"bank_account\")\n\tfrappe.reload_doc(\"Accounts\", \"doctype\", \"Bank Clearance\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def _rename_single_field(**kwargs):",
      "args": [
        "**kwargs"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\add_bin_unique_constraint.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def execute():\n\tdelete_broken_bins()\n\tdelete_and_patch_duplicate_bins()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def delete_broken_bins():\n\t# delete useless bins\n\tfrappe.db.sql(\"delete from `tabBin` where item_code is null or warehouse is null\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def delete_and_patch_duplicate_bins():",
      "args": []
    }
  ],
  "erpnext\\assets\\dashboard_fixtures.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def get_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_dashboards():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_charts(fiscal_year, year_start_date, year_end_date):",
      "args": [
        "fiscal_year",
        "year_start_date",
        "year_end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_number_cards(fiscal_year, year_start_date, year_end_date):",
      "args": [
        "fiscal_year",
        "year_start_date",
        "year_end_date"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\remove_india_localisation.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def delete_docs():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def unlink_custom_fields():\n\tfrappe.db.set_value(\n\t\t\"Custom Field\",\n\t\t{\"dt\": \"Item\", \"fieldname\": \"gst_hsn_code\"},\n\t\t{\"fieldtype\": \"Data\", \"options\": \"\"},\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_1\\transfer_subscription_to_auto_repeat.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def drop_columns_from_subscription():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\rename_issue_status_hold_to_on_hold.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tif frappe.db.exists(\"DocType\", \"Issue\"):\n\t\tfrappe.reload_doc(\"support\", \"doctype\", \"issue\")\n\t\trename_status()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def rename_status():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_bank_account_field_in_journal_entry_account.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():\n\t\"\"\"Change the fieldname from bank_account_no to bank_account\"\"\"\n\tif not frappe.get_meta(\"Journal Entry Account\").has_field(\"bank_account\"):\n\t\tfrappe.reload_doc(\"Accounts\", \"doctype\", \"Journal Entry Account\")\n\t\tupdate_journal_entry_account_fieldname()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def update_journal_entry_account_fieldname():\n\t\"\"\"maps data from old field to the new field\"\"\"\n\tif frappe.db.has_column(\"Journal Entry Account\", \"bank_account_no\"):\n\t\trename_field(\"Journal Entry Account\", \"bank_account_no\", \"bank_account\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_supplier_type_to_supplier_group.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def build_tree():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\make_location_from_warehouse.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def get_parent_warehouse_name(warehouse):\n\treturn frappe.db.get_value(\"Warehouse\", warehouse, \"warehouse_name\")",
      "args": [
        "warehouse"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\update_payment_schedule_fields_in_invoices.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tinvoice_types = [\"Sales Invoice\", \"Purchase Invoice\"]\n\tfor invoice_type in invoice_types:\n\t\tinvoice = DocType(invoice_type)\n\t\tinvoice_details = frappe.qb.from_(invoice).select(invoice.conversion_rate, invoice.name)\n\t\tupdate_payment_schedule(invoice_details)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def update_payment_schedule(invoice_details):\n\tps = DocType(\"Payment Schedule\")\n\n\tfrappe.qb.update(ps).join(invoice_details).on(ps.parent == invoice_details.name).set(\n\t\tps.base_paid_amount, ps.paid_amount * invoice_details.conversion_rate\n\t).set(ps.base_outstanding, ps.outstanding * invoice_details.conversion_rate).run()",
      "args": [
        "invoice_details"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\set_payment_channel_in_payment_gateway_account.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def set_payment_channel_as_email():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\remove_exotel_integration.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def notify_existing_users():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\fix_invoice_statuses.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_correct_status(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\single_to_multi_dunning.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_accounts_closing_date():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\move_credit_limit_to_customer_credit_limit.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def move_credit_limit_to_child_table():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\delivery_note\\patches\\drop_unused_return_against_index.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def execute():\n\tfor doctype, index_fields in UNUSED_INDEXES:\n\t\ttable = f\"tab{doctype}\"\n\t\tindex_name = frappe.db.get_index_name(index_fields)\n\t\tdrop_index_if_exists(table, index_name)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def drop_index_if_exists(table: str, index: str):",
      "args": [
        "table: str",
        "index: str"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\update_posting_datetime_and_dropped_indexes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def drop_indexes():\n\tif not frappe.db.has_index(\"tabStock Ledger Entry\", \"posting_sort_index\"):\n\t\treturn\n\n\tfrappe.db.sql_ddl(\"ALTER TABLE `tabStock Ledger Entry` DROP INDEX `posting_sort_index`\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_incoterms_and_migrate_shipment.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tcreate_incoterms()\n\tmigrate_shipments()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def migrate_shipments():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\item_reposting_for_incorrect_sl_and_gl.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_creation_time():\n\treturn frappe.db.sql(\n\t\t\"\"\" SELECT create_time FROM\n\t\tINFORMATION_SCHEMA.TABLES where TABLE_NAME = \"tabRepost Item Valuation\" \"\"\",\n\t\tas_list=1,\n\t)[0][0]",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\change_autoname_for_tax_withheld_vouchers.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\set_default_action_for_quality_inspection.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_returned_qty_in_pr_dn.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_lost_reason_detail.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\change_default_pos_print_format.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.db.sql(\n\t\t\"\"\"UPDATE `tabPOS Profile` profile\n\t\tSET profile.`print_format` = 'POS Invoice'\n\t\tWHERE profile.`print_format` = 'Point of Sale'\"\"\"\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_orphaned_asset_movement_item_records.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\show_india_localisation_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v4_2\\update_requested_and_ordered_qty.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\move_customer_lead_to_dynamic_column.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_warehouse_field_in_asset_repair_consumed_item_doctype.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\migrate_checkbox_to_select_for_reconciliation_effect.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_accounting_dimensions_in_pos_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\merge_land_unit_with_location.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_proprietorship_to_individual.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfor doctype in [\"Customer\", \"Supplier\"]:\n\t\tfield = doctype.lower() + \"_type\"\n\t\tfrappe.db.set_value(doctype, {field: \"Proprietorship\"}, field, \"Individual\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_against_blanket_order_in_sales_and_purchase_order.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_asset_quantity_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tif frappe.db.count(\"Asset\"):\n\t\tfrappe.reload_doc(\"assets\", \"doctype\", \"Asset\")\n\t\tasset = frappe.qb.DocType(\"Asset\")\n\t\tfrappe.qb.update(asset).set(asset.asset_quantity, 1).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v5_7\\update_item_description_based_on_item_master.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_task_assignee_email_field_in_asset_maintenance_log.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\selling\\report\\territory_target_variance_based_on_item_group\\territory_target_variance_based_on_item_group.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\treturn get_data_column(filters, \"Territory\")",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\modify_invalid_gain_loss_gl_entries.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_accounting_dimensions_for_asset_repair.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_tds_check_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_reference_due_date_in_journal_entry.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\allow_on_submit_dimensions_for_repostable_doctypes.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():\n\tfor dt in get_allowed_types_from_settings():\n\t\tfor dimension in get_accounting_dimensions():\n\t\t\tfrappe.db.set_value(\"Custom Field\", dt + \"-\" + dimension, \"allow_on_submit\", 1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\move_branch_code_to_bank_account.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\rename_ongoing_status_in_sla_documents.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_price_or_product_discount.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\support\\report\\first_response_time_for_issues\\first_response_time_for_issues.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v15_0\\do_not_use_batchwise_valuation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\job_card_status_on_hold.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_per_billed_in_return_delivery_note.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_pos_closing_as_failed.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"accounts\", \"doctype\", \"pos_closing_entry\")\n\n\tfrappe.db.sql(\"update `tabPOS Closing Entry` set `status` = 'Failed' where `status` = 'Queued'\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\add_custom_field_for_south_africa.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\recalculate_requested_qty_in_bin.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\renamed_from_to_fields_in_project.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"projects\", \"doctype\", \"project\")\n\n\tif frappe.db.has_column(\"Project\", \"from\"):\n\t\trename_field(\"Project\", \"from\", \"from_time\")\n\t\trename_field(\"Project\", \"to\", \"to_time\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_docs_link.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\remove_barcodes_field_from_copy_fields_to_variants.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\t\"\"\"Remove barcodes field from \"Copy Fields to Variants\" table because barcodes must be unique\"\"\"\n\n\tsettings = frappe.get_doc(\"Item Variant Settings\")\n\tsettings.remove_invalid_fields_for_copy_fields_in_variants()",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\renamed_delayed_item_report.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tfor report in [\"Delayed Order Item Summary\", \"Delayed Order Summary\"]:\n\t\tif frappe.db.exists(\"Report\", report):\n\t\t\tfrappe.delete_doc(\"Report\", report)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\enable_uoms.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\requeue_failed_reposts.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_healthcare_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_saudi_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\remove_patient_medical_record_page.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():\n\tfrappe.delete_doc(\"Page\", \"medical_record\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_currency_exchange_settings_for_frankfurter.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\drop_unused_sle_index_parts.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_in_reconciliation_tool.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Payment Reconciliation\")\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Payment Reconciliation Allocation\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_in_subcontracting_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_education_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_lead_title_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\fix_percent_complete_for_projects.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\set_department_for_doctypes.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\cleanup_workspaces.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfor ws in [\"Retail\", \"Utilities\"]:\n\t\tfrappe.delete_doc_if_exists(\"Workspace\", ws)\n\n\tfor ws in [\"Integrations\", \"Settings\"]:\n\t\tfrappe.db.set_value(\"Workspace\", ws, \"public\", 0)",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\remove_modules_setup_page.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tfrappe.delete_doc(\"Page\", \"modules_setup\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\set_update_field_and_value_in_workflow_state.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\set_report_in_process_SOA.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():\n\tprocess_soa = frappe.qb.DocType(\"Process Statement Of Accounts\")\n\tq = frappe.qb.update(process_soa).set(process_soa.report, \"General Ledger\")\n\tq.run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_purchase_receipt_delivery_note_detail.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_pricing_rule_fields.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\disable_add_row_in_gross_profit.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.db.set_value(\"Report\", \"Gross Profit\", \"add_total_row\", 0)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\unhide_cost_center_field.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_0\\update_translatable_fields.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\set_is_exchange_gain_loss_in_payment_entry_deductions.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\rename_over_order_allowance_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_default_dispatch_notification_template.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_youtube_video_id.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"utilities\", \"doctype\", \"video\")\n\n\tfor video in frappe.get_all(\"Video\", fields=[\"name\", \"url\", \"youtube_video_id\"]):\n\t\tif video.url and not video.youtube_video_id:\n\t\t\tfrappe.db.set_value(\"Video\", video.name, \"youtube_video_id\", get_id_from_url(video.url))",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_produced_qty_field_in_sales_order_for_work_order.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\rename_membership_settings_to_non_profit_settings.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\check_buying_selling_in_currency_exchange.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"setup\", \"doctype\", \"currency_exchange\")\n\tfrappe.db.sql(\"\"\"update `tabCurrency Exchange` set for_buying = 1, for_selling = 1\"\"\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\create_default_energy_point_rules.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"social\", \"doctype\", \"energy_point_rule\")\n\tcreate_default_energy_point_rules()",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_index_on_nestedset_doctypes.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\update_default_supplier_in_item_defaults.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_subscription_status_in_memberships.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\set_missing_opportunity_from.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\hr_ux_cleanups.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\set_missing_title_for_quotation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_delivery_trip_status.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_tolerance_fields.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_opportunity_currency_fields.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_for_asset_capitalization.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_payment_gateway_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfor dt in (\"GoCardless Settings\", \"GoCardless Mandate\", \"Mpesa Settings\"):\n\t\tfrappe.delete_doc(\"DocType\", dt, ignore_missing=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\move_plaid_settings_to_doctype.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_duplicate_item_code_values.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_manufacturing_settings_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\trename_field(\n\t\t\"Manufacturing Settings\",\n\t\t\"set_op_cost_and_scrape_from_sub_assemblies\",\n\t\t\"set_op_cost_and_scrap_from_sub_assemblies\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\discount_accounting_separation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_permission_einvoicing.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\selling\\report\\sales_person_target_variance_based_on_item_group\\sales_person_target_variance_based_on_item_group.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\treturn get_data_column(filters, \"Sales Person\")",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v12_0\\rename_bank_reconciliation.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\remove_attribute_field_from_item_variant_setting.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\accounts_payable\\accounts_payable.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\targs = {\n\t\t\"account_type\": \"Payable\",\n\t\t\"naming_by\": [\"Buying Settings\", \"supp_master_name\"],\n\t}\n\treturn ReceivablePayableReport(filters).run(args)",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\update_pos_closing_entry_in_merge_log.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\clear_reconciliation_values_from_singles.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_0\\set_currency_in_pricing_rule.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_allow_transfer_for_manufacture.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\migrate_stripe_api.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"accounts\", \"doctype\", \"subscription_plan\")\n\trename_field(\"Subscription Plan\", \"payment_plan_id\", \"product_price_id\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_payment_entry_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_invoicing_period_in_subscription.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tsubscription = frappe.qb.DocType(\"Subscription\")\n\tfrappe.qb.update(subscription).set(\n\t\tsubscription.generate_invoice_at, \"Beginning of the current subscription period\"\n\t).where(subscription.generate_invoice_at_period_start == 1).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\remove_bank_remittance_custom_fields.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_amt_in_work_order_required_items.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\delete_report_requested_items_to_order.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_cost_center_in_child_table_of_expense_claim.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_status_in_maintenance_schedule_table.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_end_date_and_status_in_email_campaign.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_entry_type_for_journal_entry.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_expense_claim_default_account.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\healthcare_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tclick.secho(\n\t\t\"Healthcare Module is moved to a separate app and will be removed from ERPNext in version-14.\\n\"\n\t\t\"Please install the app to continue using the module: https://github.com/frappe/healthcare\",\n\t\tfg=\"yellow\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_shipment_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_dates_in_tax_withholding_category.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_sane_transfer_against.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tbom = frappe.qb.DocType(\"BOM\")\n\n\t(\n\t\tfrappe.qb.update(bom).set(bom.transfer_material_against, \"Work Order\").where(bom.with_operations == 0)\n\t).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_gpa_and_ndb_for_assdeprsch.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\make_quality_inspection_template.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\item_naming_series_not_mandatory.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_sre_from_voucher_details.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_payment_terms_outstanding.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\drop_razorpay_payload_column.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tif frappe.db.exists(\"DocType\", \"Membership\"):\n\t\tif \"webhook_payload\" in frappe.db.get_table_columns(\"Membership\"):\n\t\t\tfrappe.db.sql(\"alter table `tabMembership` drop column webhook_payload\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_quotation_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.db.sql(\n\t\t\"\"\" UPDATE `tabQuotation` set status = 'Open'\n\t\twhere docstatus = 1 and status = 'Submitted' \"\"\"\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\add_permission_in_lower_deduction.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v4_2\\repost_reserved_qty.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\enable_allow_existing_serial_no.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tif frappe.get_all(\"Company\", filters={\"country\": \"India\"}, limit=1):\n\t\tfrappe.db.set_single_value(\"Stock Settings\", \"allow_existing_serial_no\", 1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\unset_customer_supplier_based_on_type_of_item_price.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\fix_subcontracting_receipt_gl_entries.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_job_card_details.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_sla_fields.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\trim_whitespace_from_serial_nos.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\enable_scheduler_job_for_item_reposting.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"core\", \"doctype\", \"scheduled_job_type\")\n\tif frappe.db.exists(\"Scheduled Job Type\", \"repost_item_valuation.repost_entries\"):\n\t\tfrappe.db.set_value(\"Scheduled Job Type\", \"repost_item_valuation.repost_entries\", \"stopped\", 0)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\remove_bad_selling_defaults.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_received_qty_in_material_request_as_per_stock_uom.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\delete_priority_property_setter.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\add_default_buying_selling_terms_in_company.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\add_default_operations.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tmake_default_operations()",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_zero_asset_quantity_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tasset = frappe.qb.DocType(\"Asset\")\n\tfrappe.qb.update(asset).set(asset.asset_quantity, 1).where(asset.asset_quantity == 0).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_category_in_ltds_certificate.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_production_plan_status.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\fix_crm_no_of_employees.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\add_document_type_field_for_italy_einvoicing.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_cwip_and_delete_asset_settings.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_member_email_address.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\replace_supplier_item_group_with_party_specific_item.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\add_default_for_repost_settings.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\set_user_permissions_for_department.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\repost_stock_ledger_entries_for_target_warehouse.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_accounting_dimensions_in_orders.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\make_job_card.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\rearrange_company_fields.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_in_supplier_quotation.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Supplier Quotation\")\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Supplier Quotation Item\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_existing_lead_notes_as_per_the_new_format.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\change_is_subcontracted_fieldtype.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_asset_repair_field_in_stock_entry.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\set_difference_amount_in_asset_value_adjustment.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\delete_bank_reconciliation_detail.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tif frappe.db.exists(\"DocType\", \"Bank Reconciliation Detail\") and frappe.db.exists(\n\t\t\"DocType\", \"Bank Clearance Detail\"\n\t):\n\t\tfrappe.delete_doc(\"DocType\", \"Bank Reconciliation Detail\", force=1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\create_advance_payment_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\set_pick_list_status.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_query_report.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_delivery_stop_lock_field.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tif frappe.db.has_column(\"Delivery Stop\", \"lock\"):\n\t\trename_field(\"Delivery Stop\", \"lock\", \"locked\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_company_in_ldc.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():\n\tcompany = get_default_company()\n\tif company:\n\t\tfor d in frappe.get_all(\"Lower Deduction Certificate\", pluck=\"name\"):\n\t\t\tfrappe.db.set_value(\"Lower Deduction Certificate\", d, \"company\", company, update_modified=False)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_asset_status_to_work_in_progress.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_timesheet_changes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\delete_bom_browser.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tfrappe.delete_doc_if_exists(\"Page\", \"bom-browser\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_agriculture_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_asset_value_for_manual_depr_entries.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\accounts_payable_summary\\accounts_payable_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\targs = {\n\t\t\"account_type\": \"Payable\",\n\t\t\"naming_by\": [\"Buying Settings\", \"supp_master_name\"],\n\t}\n\treturn AccountsReceivableSummary(filters).run(args)",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\update_flag_for_return_invoices.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\sales_invoice_trends\\sales_invoice_trends.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\wipe_serial_no_field_for_0_qty.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\sync_auto_reconcile_config.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_uom_conversion_factor.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\set_period_start_end_date_in_pcv.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_serial_no_status.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\set_variant_based_on.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_job_card_status.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\setup_guardian_role.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tif \"Education\" in frappe.get_active_domains() and not frappe.db.exists(\"Role\", \"Guardian\"):\n\t\tdoc = frappe.new_doc(\"Role\")\n\t\tdoc.update({\"role_name\": \"Guardian\", \"desk_access\": 0})\n\n\t\tdoc.insert(ignore_permissions=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\create_irs_1099_field_united_states.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\add_item_name_in_work_orders.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\update_bank_transaction_status.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\remove_hr_and_payroll_modules.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_owner_fields_in_acc_dimension_custom_fields.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_app_name.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doctype(\"System Settings\")\n\tsettings = frappe.get_doc(\"System Settings\")\n\tsettings.db_set(\"app_name\", \"ERPNext\", commit=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_for_payment_request.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\set_packed_qty_in_draft_delivery_notes.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\fix_non_unique_represents_company.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_vehicle_no_reqd_condition.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\migrate_crm_settings.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\show_loan_management_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_purchase_receipt_amount_to_purchase_amount.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"assets\", \"doctype\", \"asset\")\n\tif frappe.db.has_column(\"Asset\", \"purchase_receipt_amount\"):\n\t\trename_field(\"Asset\", \"purchase_receipt_amount\", \"purchase_amount\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\bill_for_rejected_quantity_in_purchase_invoice.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doctype(\"Buying Settings\")\n\tbuying_settings = frappe.get_single(\"Buying Settings\")\n\tbuying_settings.bill_for_rejected_quantity_in_purchase_invoice = 0\n\tbuying_settings.save()",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\purchase_receipt_status.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_hospitality_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_actual_start_and_end_date_in_wo.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\uom_conversion_data.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\show_hr_payroll_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_asset_adjustment_doctype.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tif frappe.db.table_exists(\"Asset Adjustment\") and not frappe.db.table_exists(\"Asset Value Adjustment\"):\n\t\tfrappe.rename_doc(\"DocType\", \"Asset Adjustment\", \"Asset Value Adjustment\", force=True)\n\t\tfrappe.reload_doc(\"assets\", \"doctype\", \"asset_value_adjustment\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\shopify_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tclick.secho(\n\t\t\"Shopify Integration is moved to a separate app and will be removed from ERPNext in version-14.\\n\"\n\t\t\"Please install the app to continue using the integration: https://github.com/frappe/ecommerce_integrations\",\n\t\tfg=\"yellow\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\replace_accounting_with_accounts_in_home_settings.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.db.sql(\n\t\t\"\"\"UPDATE `tabUser` SET `home_settings` = REPLACE(`home_settings`, 'Accounting', 'Accounts')\"\"\"\n\t)\n\tfrappe.cache().delete_key(\"home_settings\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\add_disassembly_order_stock_entry_type.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\create_accounting_dimensions_in_payment_request.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Payment Request\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_production_capacity_in_workstation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\set_reserved_stock_in_bin.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_custom_field_for_finance_book.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_account_type_doctype.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.rename_doc(\"DocType\", \"Account Type\", \"Bank Account Type\", force=True)\n\tfrappe.rename_doc(\"DocType\", \"Account Subtype\", \"Bank Account Subtype\", force=True)\n\tfrappe.reload_doc(\"accounts\", \"doctype\", \"bank_account\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\add_variant_of_in_item_attribute_table.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\move_bank_account_swift_number_to_bank.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_number_of_depreciations_booked_to_opening_booked_depreciations.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tif frappe.db.has_column(\"Asset\", \"number_of_depreciations_booked\"):\n\t\trename_field(\"Asset\", \"number_of_depreciations_booked\", \"opening_number_of_booked_depreciations\")",
      "args": []
    }
  ],
  "erpnext\\stock\\report\\bom_search\\bom_search.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\loyalty_points_entry_for_pos_invoice.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rebuild_tree_for_company.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"setup\", \"doctype\", \"company\")\n\trebuild_tree(\"Company\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_project_template_tasks.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\setup_uae_vat_fields.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_brand_in_item_price.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_operation_time_based_on_operating_cost.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\selling\\report\\sales_partner_target_variance_based_on_item_group\\sales_partner_target_variance_based_on_item_group.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\treturn get_data_column(filters, \"Sales Partner\")",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\update_total_asset_cost_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_amazon_mws_doctype.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.delete_doc(\"DocType\", \"Amazon MWS Settings\", ignore_missing=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\move_target_distribution_from_parent_to_child.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\fix_debit_credit_in_transaction_currency.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_total_number_of_booked_depreciations.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\replace_pos_page_with_point_of_sale_page.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tif frappe.db.exists(\"Page\", \"point-of-sale\"):\n\t\tfrappe.rename_doc(\"Page\", \"pos\", \"point-of-sale\", 1, 1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_field_from_rate_difference_to_amount_difference.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_production_order_to_work_order.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\set_status_for_material_request_type_manufacture.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_multi_uom_in_rfq.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_maintenance_schedule_field_in_visit.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_depreciation_amount_based_on_num_days_in_month_to_daily_prorata_based.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\create_accounting_dimensions_in_missing_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_is_cancelled_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\reset_corrupt_defaults.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\non_profit_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tclick.secho(\n\t\t\"Non Profit Domain is moved to a separate app and will be removed from ERPNext in version-14.\\n\"\n\t\t\"When upgrading to ERPNext version-14, please install the app to continue using the Non Profit domain: https://github.com/frappe/non_profit\",\n\t\tfg=\"yellow\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_gst_payment_entry_fields.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_subcontracting_fields.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_total_qty_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_ecommerce_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_valid_till_date_in_supplier_quotation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_0\\fichier_des_ecritures_comptables_for_france.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"regional\", \"report\", \"fichier_des_ecritures_comptables_[fec]\")\n\tfor d in frappe.get_all(\"Company\", filters={\"country\": \"France\"}):\n\t\tinstall_country_fixtures(d.name)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\add_naming_series_to_old_projects.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\rename_daily_depreciation_to_depreciation_amount_based_on_num_days_in_month.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\hospitality_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tclick.secho(\n\t\t\"Hospitality domain is moved to a separate app and will be removed from ERPNext in version-14.\\n\"\n\t\t\"When upgrading to ERPNext version-14, please install the app to continue using the Hospitality domain: https://github.com/frappe/hospitality\",\n\t\tfg=\"yellow\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_item_group_defaults.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_reserved_qty_closed_wo.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_hub_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tdoctypes = frappe.get_all(\"DocType\", {\"module\": \"Hub Node\", \"custom\": 0}, pluck=\"name\")\n\tfor doctype in doctypes:\n\t\tfrappe.delete_doc(\"DocType\", doctype, ignore_missing=True)\n\n\tfrappe.delete_doc(\"Module Def\", \"Hub Node\", ignore_missing=True, force=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_account_type_in_party_type.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_subscription.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_deferred_settings.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():\n\taccounts_settings = frappe.get_doc(\"Accounts Settings\", \"Accounts Settings\")\n\taccounts_settings.book_deferred_entries_based_on = \"Days\"\n\taccounts_settings.book_deferred_entries_via_journal_entry = 0\n\taccounts_settings.submit_journal_entries = 0\n\taccounts_settings.save()",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_exchange_rate_settings.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"accounts\", \"doctype\", \"currency_exchange_settings\")\n\tsetup_currency_exchange()",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\stock_ledger_entry\\patches\\ensure_sle_indexes.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\t\"\"\"Ensure SLE Indexes\"\"\"\n\n\tcreate_sle_indexes()",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_price_list_currency_in_bom.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_0\\rename_price_to_rate_in_pricing_rule.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\fix_quotation_expired_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\set_purchase_receipt_row_item_to_capitalization_stock_item.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\make_italian_localization_fields.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\add_po_to_global_search.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_default_batch_size.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_batch_valuation_flag.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\enable_set_priority_for_pricing_rules.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_response_by_variance.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_reference_type_in_journal_entry_accounts.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_department_lft_rgt.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_shopify_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.delete_doc(\"DocType\", \"Shopify Settings\", ignore_missing=True)\n\tfrappe.delete_doc(\"DocType\", \"Shopify Log\", ignore_missing=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_automatically_process_deferred_accounting_in_accounts_settings.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"accounts\", \"doctype\", \"accounts_settings\")\n\n\tfrappe.db.set_single_value(\"Accounts Settings\", \"automatically_process_deferred_accounting_entry\", 1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\delete_old_bank_reconciliation_doctypes.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_overproduction_percent_field.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\make_job_card_time_logs.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\remove_unknown_links_to_prod_plan_items.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_posting_datetime.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\add_doctype_to_sla.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\stock_entry_enhancements.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\create_uae_pos_invoice_fields.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_due_date_in_gle.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_task_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\replace_pos_payment_mode_table.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\update_recipient_email_digest.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\enable_old_serial_batch_fields.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tsabb = frappe.get_all(\"Serial and Batch Bundle\", filters={\"docstatus\": (\"<\", 2)}, limit=1)\n\tif not sabb:\n\t\tfrappe.db.set_single_value(\"Stock Settings\", \"use_serial_batch_fields\", 1)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\add_standard_navbar_items.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():\n\t# Add standard navbar items for ERPNext in Navbar Settings\n\tadd_standard_navbar_items()",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_taxjar_doctypes.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\fix_number_and_frequency_for_monthly_depreciation.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\migrate_payment_request_status.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_non_profit_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_subscription_details.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_total_batch_quantity.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_partial_tds_fields.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_bom_in_so_mr.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\make_asset_finance_book_against_old_entries.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\enable_provisional_accounting.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\create_default_success_action.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"core\", \"doctype\", \"success_action\")\n\tcreate_default_success_action()",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\saudi_depreciation_warning.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v8_1\\removed_roles_from_gst_report_non_indian_account.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_market_segments.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"crm\", \"doctype\", \"market_segment\")\n\n\tfrappe.local.lang = frappe.db.get_default(\"lang\") or \"en\"\n\n\tadd_market_segments()",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\change_default_item_manufacturer_fieldtype.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\update_cc_in_process_statement_of_accounts.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\rename_pos_closing_doctype.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\enable_all_leads.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tlead = frappe.qb.DocType(\"Lead\")\n\tfrappe.qb.update(lead).set(lead.disabled, 0).set(lead.docstatus, 0).where(\n\t\tlead.disabled == 1 and lead.docstatus == 1\n\t).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\agriculture_deprecation_warning.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tclick.secho(\n\t\t\"Agriculture Domain is moved to a separate app and will be removed from ERPNext in version-14.\\n\"\n\t\t\"Please install the app to continue using the Agriculture domain: https://github.com/frappe/agriculture\",\n\t\tfg=\"yellow\",\n\t)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_work_order_qty_in_so_from_mr.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_employee_preferred_emails.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_bom_wo_fields.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\set_maintain_stock_for_bom_item.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\make_item_manufacturer.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\update_stock_uom_in_work_order_item.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\move_item_defaults_to_child_table_for_multicompany.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\supplier_ledger_summary\\supplier_ledger_summary.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute(filters=None):\n\targs = {\n\t\t\"party_type\": \"Supplier\",\n\t\t\"naming_by\": [\"Buying Settings\", \"supp_master_name\"],\n\t}\n\treturn PartyLedgerSummaryReport(filters).run(args)",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_in_sales_order_item.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tcreate_accounting_dimensions_for_doctype(doctype=\"Sales Order Item\")",
      "args": []
    }
  ],
  "erpnext\\patches\\v10_0\\item_barcode_childtable_migrate.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\update_backflush_subcontract_rm_based_on_bom.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\delete_woocommerce_settings_doctype.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():\n\tfrappe.delete_doc(\"DocType\", \"Woocommerce Settings\", ignore_missing=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\delete_datev_doctypes.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\buying\\report\\purchase_analytics\\purchase_analytics.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\treturn Analytics(filters).run()",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v11_1\\woocommerce_set_creation_user.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\rename_members_with_naming_series.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_updated_purpose_in_pick_list.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"stock\", \"doctype\", \"pick_list\")\n\tfrappe.db.sql(\n\t\t\"\"\"UPDATE `tabPick List` set purpose = 'Delivery'\n        WHERE docstatus = 1  and purpose = 'Delivery against Sales Order' \"\"\"\n\t)",
      "args": []
    }
  ],
  "erpnext\\crm\\report\\first_response_time_for_opportunity\\first_response_time_for_opportunity.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v14_0\\copy_is_subcontracted_value_to_is_old_subcontracting_flow.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def execute():\n\tfor doctype in [\"Purchase Order\", \"Purchase Receipt\", \"Purchase Invoice\"]:\n\t\ttab = frappe.qb.DocType(doctype).as_(\"tab\")\n\t\tfrappe.qb.update(tab).set(tab.is_old_subcontracting_flow, 1).where(tab.is_subcontracted == 1).run()",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_1\\delete_scheduling_tool.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():\n\tif frappe.db.exists(\"DocType\", \"Scheduling Tool\"):\n\t\tfrappe.delete_doc(\"DocType\", \"Scheduling Tool\", ignore_permissions=True)",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\convert_qi_parameter_to_link_field.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\remove_loan_management_module.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\drop_index_posting_datetime_from_sle.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v14_0\\create_accounting_dimensions_for_closing_balance.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v13_0\\set_return_against_in_pos_invoice_references.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\regional\\report\\electronic_invoice_register\\electronic_invoice_register.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):\n\treturn _execute(filters)",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v12_0\\rename_pricing_rule_child_doctypes.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def execute():\n\tfor old_doc, new_doc in doctypes.items():\n\t\tif not frappe.db.table_exists(new_doc) and frappe.db.table_exists(old_doc):\n\t\t\tfrappe.rename_doc(\"DocType\", old_doc, new_doc)\n\t\t\tfrappe.reload_doc(\"accounts\", \"doctype\", frappe.scrub(new_doc))\n\t\t\tfrappe.delete_doc(\"DocType\", old_doc)",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\set_standard_stock_entry_type.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\update_item_tax_template_company.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\migrate_to_utm_analytics.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\purchase_invoice_trends\\purchase_invoice_trends.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def execute(filters=None):",
      "args": [
        "filters"
      ]
    }
  ],
  "erpnext\\patches\\v13_0\\requeue_recoverable_reposts.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v15_0\\migrate_old_item_wise_tax_detail_data_format.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def execute():",
      "args": []
    }
  ],
  "erpnext\\patches\\v12_0\\set_italian_import_supplier_invoice_permissions.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def execute():\n\tcountries = frappe.get_all(\"Company\", fields=\"country\")\n\tcountries = [country[\"country\"] for country in countries]\n\tif \"Italy\" in countries:\n\t\tadd_permissions()",
      "args": []
    }
  ],
  "erpnext\\patches\\v11_0\\add_sales_stages.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def execute():\n\tfrappe.reload_doc(\"crm\", \"doctype\", \"sales_stage\")\n\n\tfrappe.local.lang = frappe.db.get_default(\"lang\") or \"en\"\n\n\tadd_sale_stages()",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard\\supplier_scorecard_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_invoice\\purchase_invoice_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\pick_list\\pick_list_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan\\production_plan_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\supplier\\supplier_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\workstation\\workstation_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\holiday_list\\holiday_list_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice\\sales_invoice_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card\\job_card_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\payment_request\\payment_request_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\supplier_quotation\\supplier_quotation_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\customer\\customer_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\stock_closing_entry\\stock_closing_entry_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\delivery_note\\delivery_note_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\blanket_order\\blanket_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"blanket_order\",\n\t\t\"transactions\": [{\"items\": [\"Purchase Order\", \"Sales Order\", \"Quotation\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\payment_terms_template\\payment_terms_template_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_plan\\subscription_plan_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"subscription_plan\",\n\t\t\"non_standard_fieldnames\": {\"Payment Request\": \"plan\", \"Subscription\": \"plan\"},\n\t\t\"transactions\": [{\"label\": _(\"References\"), \"items\": [\"Payment Request\", \"Subscription\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\purchase_order\\purchase_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\item_tax_template\\item_tax_template_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\assets\\doctype\\asset\\asset_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"non_standard_fieldnames\": {\"Asset Movement\": \"asset\"},\n\t\t\"transactions\": [{\"label\": _(\"Movement\"), \"items\": [\"Asset Movement\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\operation\\operation_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"operation\",\n\t\t\"transactions\": [{\"label\": _(\"Manufacture\"), \"items\": [\"BOM\", \"Work Order\", \"Job Card\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry\\stock_entry_dashboard.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\work_order\\test_work_order.py": [
    {
      "type": "function",
      "line_start": 3204,
      "code_text": "def make_wo_order_test_record(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 3198,
      "code_text": "def allow_overproduction(fieldname, percentage):\n\tdoc = frappe.get_doc(\"Manufacturing Settings\")\n\tdoc.update({fieldname: percentage})\n\tdoc.save()",
      "args": [
        "fieldname",
        "percentage"
      ]
    },
    {
      "type": "function",
      "line_start": 2910,
      "code_text": "def make_workstation(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2895,
      "code_text": "def make_operation(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 3141,
      "code_text": "def update_job_card(job_card, jc_qty=None, days=None):",
      "args": [
        "job_card",
        "jc_qty",
        "days"
      ]
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class UnitTestWorkOrder(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 47,
      "code_text": "class TestWorkOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef setUp(self):\n\t\tself.warehouse = \"_Test Warehouse 2 - _TC\"\n\t\tself.item = \"_Test Item\"\n\t\tprepare_data_for_backflush_based_on_materials_transferred()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.local.future_sle = {}\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef check_planned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef test_over_production(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef test_planned_operating_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_reserved_qty_for_partial_completion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef test_production_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef test_reserved_qty_for_production_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef test_reserved_qty_for_production_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef test_reserved_qty_for_production_on_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef test_reserved_qty_for_production_closed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef test_backflush_qty_for_overpduction_manufacture(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 297,
      "code_text": "\tdef test_reserved_qty_for_stopped_production(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 344,
      "code_text": "\tdef test_scrap_material_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef test_allow_overproduction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 404,
      "code_text": "\tdef test_over_production_for_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 421,
      "code_text": "\tdef test_work_order_with_non_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 469,
      "code_text": "\tdef test_job_card(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 520,
      "code_text": "\tdef test_work_order_material_transferred_qty_with_process_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 574,
      "code_text": "\tdef test_capcity_planning(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 608,
      "code_text": "\tdef test_work_order_with_non_transfer_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef test_cost_center_for_manufacture(self):\n\t\two_order = make_wo_order_test_record()\n\t\tste = make_stock_entry(wo_order.name, \"Material Transfer for Manufacture\", wo_order.qty)\n\t\tself.assertEqual(ste.get(\"items\")[0].get(\"cost_center\"), \"_Test Cost Center - _TC\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 639,
      "code_text": "\tdef test_operation_time_with_batch_size(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 683,
      "code_text": "\tdef test_batch_size_for_fg_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 772,
      "code_text": "\tdef test_partial_material_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 809,
      "code_text": "\tdef test_extra_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 859,
      "code_text": "\tdef test_make_stock_entry_for_customer_provided_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 892,
      "code_text": "\tdef test_valuation_rate_missing_on_make_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 922,
      "code_text": "\tdef test_wo_completion_with_pl_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 977,
      "code_text": "\tdef test_job_card_scrap_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1062,
      "code_text": "\tdef test_close_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1118,
      "code_text": "\tdef test_fix_time_operations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1161,
      "code_text": "\tdef test_partial_manufacture_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1220,
      "code_text": "\tdef test_auto_batch_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1243,
      "code_text": "\tdef test_auto_serial_no_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1278,
      "code_text": "\tdef test_auto_serial_no_batch_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1322,
      "code_text": "\tdef get_serial_nos_for_fg(self, work_order):\n\t\tserial_nos = []\n\t\tfor row in frappe.get_all(\"Serial No\", filters={\"work_order\": work_order}):\n\t\t\tserial_nos.append(row.name)\n\n\t\treturn serial_nos",
      "args": [
        "self",
        "work_order"
      ]
    },
    {
      "type": "method",
      "line_start": 1333,
      "code_text": "\tdef test_manufacture_entry_mapped_idx_with_exploded_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1363,
      "code_text": "\tdef test_work_order_multiple_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1409,
      "code_text": "\tdef test_backflushed_batch_raw_materials_based_on_transferred(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1481,
      "code_text": "\tdef test_backflushed_serial_no_raw_materials_based_on_transferred(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1528,
      "code_text": "\tdef test_backflushed_serial_no_batch_raw_materials_based_on_transferred(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1613,
      "code_text": "\tdef test_backflushed_batch_raw_materials_based_on_transferred_autosabb(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1679,
      "code_text": "\tdef test_backflushed_serial_no_raw_materials_based_on_transferred_autosabb(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1746,
      "code_text": "\tdef test_backflushed_serial_no_batch_raw_materials_based_on_transferred_autosabb(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1804,
      "code_text": "\tdef test_non_consumed_material_return_against_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1871,
      "code_text": "\tdef test_workstation_type_for_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1941,
      "code_text": "\tdef test_job_card_extra_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2021,
      "code_text": "\tdef test_operating_cost_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2097,
      "code_text": "\tdef test_op_cost_and_scrap_based_on_sub_assemblies(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2146,
      "code_text": "\tdef test_get_rm_cost_from_consumption_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2189,
      "code_text": "\tdef test_capcity_planning_for_workstation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2264,
      "code_text": "\tdef test_partial_material_consumption_with_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2327,
      "code_text": "\tdef test_disassemby_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2376,
      "code_text": "\tdef test_components_alternate_item_for_bom_based_manufacture_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2429,
      "code_text": "\tdef test_components_qty_for_bom_based_manufacture_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2482,
      "code_text": "\tdef test_components_as_per_bom_for_manufacture_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2532,
      "code_text": "\tdef test_wip_skip(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2563,
      "code_text": "\tdef test_serial_no_status_for_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2610,
      "code_text": "\tdef test_stock_reservation_for_serialized_raw_material(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2661,
      "code_text": "\tdef test_stock_reservation_for_batched_raw_material(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2720,
      "code_text": "\tdef test_auto_stock_reservation_for_batched_raw_material(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2791,
      "code_text": "\tdef test_work_order_valuation_auto_pick(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 2855,
      "code_text": "def make_stock_in_entries_and_get_batches(rm_item, source_warehouse, wip_warehouse):",
      "args": [
        "rm_item",
        "source_warehouse",
        "wip_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 2927,
      "code_text": "def prepare_boms_for_sub_assembly_test():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 2962,
      "code_text": "def prepare_data_for_workstation_type_check():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 3052,
      "code_text": "def prepare_data_for_backflush_based_on_materials_transferred():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 3185,
      "code_text": "def get_scrap_item_details(bom_no):",
      "args": [
        "bom_no"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withholding_category\\tax_withholding_category_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\"fieldname\": \"tax_withholding_category\", \"transactions\": [{\"items\": [\"Supplier\"]}]}",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\batch\\batch_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\purchase_receipt\\purchase_receipt_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order\\subcontracting_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"subcontracting_order\",\n\t\t\"transactions\": [{\"label\": _(\"Reference\"), \"items\": [\"Subcontracting Receipt\", \"Stock Entry\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\fiscal_year\\fiscal_year_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\payment_term\\payment_term_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\sales_person\\sales_person_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\invoice_discounting\\invoice_discounting_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\vehicle\\vehicle_dashboard.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"license_plate\",\n\t\t\"non_standard_fieldnames\": {\"Delivery Trip\": \"vehicle\"},\n\t\t\"transactions\": [{\"items\": [\"Vehicle Log\"]}, {\"items\": [\"Delivery Trip\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\sales_taxes_and_charges_template\\sales_taxes_and_charges_template_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\sales_order\\sales_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_taxes_and_charges_template\\purchase_taxes_and_charges_template_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\support\\doctype\\issue\\issue_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\"fieldname\": \"issue\", \"transactions\": [{\"label\": _(\"Activity\"), \"items\": [\"Task\"]}]}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\finance_book\\finance_book_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\item\\item_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\company\\company_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\payment_order\\payment_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"payment_order\",\n\t\t\"transactions\": [{\"items\": [\"Payment Entry\", \"Journal Entry\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\routing\\routing_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\"fieldname\": \"routing\", \"transactions\": [{\"items\": [\"BOM\"]}]}",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\material_request\\material_request_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\request_for_quotation\\request_for_quotation_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom\\bom_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\payment_gateway_account\\payment_gateway_account_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"payment_gateway_account\",\n\t\t\"non_standard_fieldnames\": {\"Subscription Plan\": \"payment_gateway\"},\n\t\t\"transactions\": [{\"items\": [\"Payment Request\"]}, {\"items\": [\"Subscription Plan\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\tax_category\\tax_category_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\promotional_scheme\\promotional_scheme_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"promotional_scheme\",\n\t\t\"transactions\": [{\"label\": _(\"Reference\"), \"items\": [\"Pricing Rule\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\quotation\\quotation_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\crm\\doctype\\lead\\lead_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\shipping_rule\\shipping_rule_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_program\\loyalty_program_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"loyalty_program\",\n\t\t\"transactions\": [{\"items\": [\"Sales Invoice\", \"Customer\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\shareholder\\shareholder_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"shareholder\",\n\t\t\"non_standard_fieldnames\": {\"Share Transfer\": \"to_shareholder\"},\n\t\t\"transactions\": [{\"items\": [\"Share Transfer\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\work_order\\work_order_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center\\cost_center_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"cost_center\",\n\t\t\"reports\": [{\"label\": _(\"Reports\"), \"items\": [\"Budget Variance Report\", \"General Ledger\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\exchange_rate_revaluation\\exchange_rate_revaluation_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():\n\treturn {\"fieldname\": \"reference_name\", \"transactions\": [{\"items\": [\"Journal Entry\"]}]}",
      "args": []
    }
  ],
  "erpnext\\stock\\dashboard\\item_dashboard.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def get_data(\n\titem_code=None, warehouse=None, item_group=None, start=0, sort_by=\"actual_qty\", sort_order=\"desc\"\n):",
      "args": [
        "item_code",
        "warehouse",
        "item_group",
        "start",
        "sort_by",
        "sort_order"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\opportunity\\opportunity_dashboard.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation\\process_payment_reconciliation_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\monthly_distribution\\monthly_distribution_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\bank\\bank_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"bank\",\n\t\t\"transactions\": [{\"label\": _(\"Bank Details\"), \"items\": [\"Bank Account\", \"Bank Guarantee\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_receipt\\subcontracting_receipt_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\share_type\\share_type_dashboard.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():\n\treturn {\n\t\t\"fieldname\": \"share_type\",\n\t\t\"transactions\": [{\"label\": _(\"References\"), \"items\": [\"Share Transfer\", \"Shareholder\"]}],\n\t}",
      "args": []
    }
  ],
  "erpnext\\config\\projects.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_data():",
      "args": []
    }
  ],
  "erpnext\\buying\\doctype\\purchase_order\\test_purchase_order.py": [
    {
      "type": "function",
      "line_start": 1369,
      "code_text": "def create_purchase_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1426,
      "code_text": "def get_ordered_qty(item_code=\"_Test Item\", warehouse=\"_Test Warehouse - _TC\"):\n\treturn flt(frappe.db.get_value(\"Bin\", {\"item_code\": item_code, \"warehouse\": warehouse}, \"ordered_qty\"))",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1299,
      "code_text": "def prepare_data_for_internal_transfer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1342,
      "code_text": "def make_pr_against_po(po, received_qty=0):\n\tpr = make_purchase_receipt(po)\n\tpr.get(\"items\")[0].qty = received_qty or 5\n\tpr.insert()\n\tpr.submit()\n\treturn pr",
      "args": [
        "po",
        "received_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 1418,
      "code_text": "def create_pr_against_po(po, received_qty=4):\n\tpr = make_purchase_receipt(po)\n\tpr.get(\"items\")[0].qty = received_qty\n\tpr.insert()\n\tpr.submit()\n\treturn pr",
      "args": [
        "po",
        "received_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 1430,
      "code_text": "def get_requested_qty(item_code=\"_Test Item\", warehouse=\"_Test Warehouse - _TC\"):\n\treturn flt(frappe.db.get_value(\"Bin\", {\"item_code\": item_code, \"warehouse\": warehouse}, \"indented_qty\"))",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 31,
      "code_text": "class UnitTestPurchaseOrder(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 40,
      "code_text": "class TestPurchaseOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef test_purchase_order_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef test_make_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef test_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef test_ordered_qty_against_pi_with_update_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef test_update_remove_child_linked_to_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef test_update_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef test_update_child_adding_new_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef test_update_child_removing_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef test_update_child_perm(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 317,
      "code_text": "\tdef test_update_child_with_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 425,
      "code_text": "\tdef test_update_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 458,
      "code_text": "\tdef test_return_against_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 498,
      "code_text": "\tdef test_purchase_order_invoice_receipt_workflow(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 527,
      "code_text": "\tdef test_make_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 538,
      "code_text": "\tdef test_purchase_order_on_hold(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 546,
      "code_text": "\tdef test_make_purchase_invoice_with_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 577,
      "code_text": "\tdef test_warehouse_company_validation(self):\n\t\tfrom erpnext.stock.utils import InvalidWarehouseCompany\n\n\t\tpo = create_purchase_order(company=\"_Test Company 1\", do_not_save=True)\n\t\tself.assertRaises(InvalidWarehouseCompany, po.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 583,
      "code_text": "\tdef test_uom_integer_validation(self):\n\t\tfrom erpnext.utilities.transaction_base import UOMMustBeIntegerError\n\n\t\tpo = create_purchase_order(qty=3.4, do_not_save=True)\n\t\tself.assertRaises(UOMMustBeIntegerError, po.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 589,
      "code_text": "\tdef test_ordered_qty_for_closing_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 611,
      "code_text": "\tdef test_group_same_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 627,
      "code_text": "\tdef test_make_po_without_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef test_po_for_blocked_supplier_all(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 647,
      "code_text": "\tdef test_po_for_blocked_supplier_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 658,
      "code_text": "\tdef test_po_for_blocked_supplier_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 677,
      "code_text": "\tdef test_po_for_blocked_supplier_payments_with_today_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 697,
      "code_text": "\tdef test_po_for_blocked_supplier_payments_past_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 717,
      "code_text": "\tdef test_default_payment_terms(self):\n\t\tdue_date = get_due_date_from_template(\"_Test Payment Term Template 1\", \"2023-02-03\", None).strftime(\n\t\t\t\"%Y-%m-%d\"\n\t\t)\n\t\tself.assertEqual(due_date, \"2023-03-31\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 723,
      "code_text": "\tdef test_terms_are_not_copied_if_automatically_fetch_payment_terms_is_unchecked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 736,
      "code_text": "\tdef test_terms_copied(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 750,
      "code_text": "\tdef test_advance_payment_entry_unlink_against_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 772,
      "code_text": "\tdef create_account(self, account_name, company, currency, parent):",
      "args": [
        "self",
        "account_name",
        "company",
        "currency",
        "parent"
      ]
    },
    {
      "type": "method",
      "line_start": 790,
      "code_text": "\tdef test_advance_payment_with_separate_party_account_enabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 823,
      "code_text": "\tdef test_advance_paid_upon_payment_entry_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 860,
      "code_text": "\tdef test_schedule_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 874,
      "code_text": "\tdef test_po_optional_blanket_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 892,
      "code_text": "\tdef test_blanket_order_on_po_close_and_open(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 916,
      "code_text": "\tdef test_payment_terms_are_fetched_when_creating_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 943,
      "code_text": "\tdef test_internal_transfer_flow(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1022,
      "code_text": "\tdef test_variant_item_po(self):\n\t\tpo = create_purchase_order(item_code=\"_Test Variant Item\", qty=1, rate=100, do_not_save=1)\n\n\t\tself.assertRaises(frappe.ValidationError, po.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1027,
      "code_text": "\tdef test_update_items_for_subcontracting_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1092,
      "code_text": "\tdef test_new_sc_flow(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1160,
      "code_text": "\tdef test_auto_create_subcontracting_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1191,
      "code_text": "\tdef test_purchase_order_advance_payment_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1219,
      "code_text": "\tdef test_po_billed_amount_against_return_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1252,
      "code_text": "def create_po_for_sc_testing():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1350,
      "code_text": "def get_same_items():",
      "args": []
    }
  ],
  "erpnext\\stock\\utils.py": [
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_stock_balance(\n\titem_code,\n\twarehouse,\n\tposting_date=None,\n\tposting_time=None,\n\twith_valuation_rate=False,\n\twith_serial_no=False,\n\tinventory_dimensions_dict=None,\n):",
      "args": [
        "item_code",
        "warehouse",
        "posting_date",
        "posting_time",
        "with_valuation_rate",
        "with_serial_no",
        "inventory_dimensions_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 214,
      "code_text": "def get_or_make_bin(item_code: str, warehouse: str) -> str:",
      "args": [
        "item_code: str",
        "warehouse: str"
      ]
    },
    {
      "type": "function",
      "line_start": 654,
      "code_text": "def get_combine_datetime(posting_date, posting_time):",
      "args": [
        "posting_date",
        "posting_time"
      ]
    },
    {
      "type": "function",
      "line_start": 204,
      "code_text": "def get_bin(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def get_incoming_rate(args, raise_error_if_no_rate=True):",
      "args": [
        "args",
        "raise_error_if_no_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def get_valuation_method(item_code):\n\t\"\"\"get valuation method from item or default\"\"\"\n\tval_method = frappe.db.get_value(\"Item\", item_code, \"valuation_method\", cache=True)\n\tif not val_method:\n\t\tval_method = frappe.db.get_single_value(\"Stock Settings\", \"valuation_method\", cache=True) or \"FIFO\"\n\treturn val_method",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 545,
      "code_text": "def is_reposting_item_valuation_in_progress():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class InvalidWarehouseCompany(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def get_stock_value_on(\n\twarehouses: list | str | None = None,",
      "args": [
        "warehouses",
        "posting_date",
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 425,
      "code_text": "def validate_warehouse_company(warehouse, company):",
      "args": [
        "warehouse",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 585,
      "code_text": "def scan_barcode(search_value: str) -> BarcodeScanResult:",
      "args": [
        "search_value: str"
      ]
    },
    {
      "type": "function",
      "line_start": 223,
      "code_text": "def _create_bin(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 391,
      "code_text": "def _get_fifo_lifo_rate(previous_stock_queue, qty, method):",
      "args": [
        "previous_stock_queue",
        "qty",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 405,
      "code_text": "def get_valid_serial_nos(sr_nos, qty=0, item_code=\"\"):",
      "args": [
        "sr_nos",
        "qty",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 439,
      "code_text": "def validate_disabled_warehouse(warehouse):",
      "args": [
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 448,
      "code_text": "def update_included_uom_in_report(columns, result, include_uom, conversion_factors):",
      "args": [
        "columns",
        "result",
        "include_uom",
        "conversion_factors"
      ]
    },
    {
      "type": "function",
      "line_start": 642,
      "code_text": "def _update_item_info(scan_result: dict[str, str | None]) -> dict[str, str | None]:",
      "args": [
        "scan_result"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class PendingRepostingError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 161,
      "code_text": "def get_serial_nos_data(serial_nos):\n\tfrom erpnext.stock.doctype.serial_no.serial_no import get_serial_nos\n\n\treturn get_serial_nos(serial_nos)",
      "args": [
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def get_latest_stock_qty(item_code, warehouse=None):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 434,
      "code_text": "def is_group_warehouse(warehouse):\n\tif frappe.db.get_value(\"Warehouse\", warehouse, \"is_group\", cache=True):\n\t\tfrappe.throw(_(\"Group node warehouse is not allowed to select for transactions\"))",
      "args": [
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 530,
      "code_text": "def get_incoming_outgoing_rate_for_cancel(item_code, voucher_type, voucher_no, voucher_detail_no):",
      "args": [
        "item_code",
        "voucher_type",
        "voucher_no",
        "voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 555,
      "code_text": "def check_pending_reposting(posting_date: str, throw_error: bool = True) -> bool:",
      "args": [
        "posting_date: str",
        "throw_error: bool"
      ]
    },
    {
      "type": "function",
      "line_start": 670,
      "code_text": "def get_default_stock_uom() -> str | None:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_stock_value_from_bin(warehouse=None, item_code=None):",
      "args": [
        "warehouse",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 192,
      "code_text": "def get_latest_stock_balance():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 331,
      "code_text": "def get_batch_incoming_rate(item_code, warehouse, batch_no, posting_date, posting_time, creation=None):",
      "args": [
        "item_code",
        "warehouse",
        "batch_no",
        "posting_date",
        "posting_time",
        "creation"
      ]
    },
    {
      "type": "function",
      "line_start": 359,
      "code_text": "def get_avg_purchase_rate(serial_nos):",
      "args": [
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 381,
      "code_text": "def get_fifo_rate(previous_stock_queue, qty):\n\t\"\"\"get FIFO (average) Rate from Queue\"\"\"\n\treturn _get_fifo_lifo_rate(previous_stock_queue, qty, \"FIFO\")",
      "args": [
        "previous_stock_queue",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 386,
      "code_text": "def get_lifo_rate(previous_stock_queue, qty):\n\t\"\"\"get LIFO (average) Rate from Queue\"\"\"\n\treturn _get_fifo_lifo_rate(previous_stock_queue, qty, \"LIFO\")",
      "args": [
        "previous_stock_queue",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 498,
      "code_text": "def add_additional_uom_columns(columns, result, include_uom, conversion_factors):",
      "args": [
        "columns",
        "result",
        "include_uom",
        "conversion_factors"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan\\test_production_plan.py": [
    {
      "type": "function",
      "line_start": 1977,
      "code_text": "def make_bom(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1914,
      "code_text": "def create_production_plan(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class UnitTestProductionPlan(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 34,
      "code_text": "class TestProductionPlan(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef test_production_plan_mr_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef test_production_plan_start_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef test_production_plan_for_existing_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_production_plan_with_non_stock_item(self):\n\t\t\"Test if MR Planning table includes Non Stock RM.\"\n\t\tpln = create_production_plan(item_code=\"Test Production Item 1\", include_non_stock_items=1)\n\t\tself.assertTrue(len(pln.mr_items), 3)\n\t\tpln.cancel()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef test_production_plan_without_multi_level(self):\n\t\t\"Test MR Planning table for non exploded BOM.\"\n\t\tpln = create_production_plan(item_code=\"Test Production Item 1\", use_multi_level_bom=0)\n\t\tself.assertTrue(len(pln.mr_items), 2)\n\t\tpln.cancel()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef test_production_plan_without_multi_level_for_existing_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef test_production_plan_sales_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef test_donot_allow_to_make_multiple_pp_against_same_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef test_so_based_bill_of_material(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 340,
      "code_text": "\tdef test_production_plan_with_non_active_bom_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 362,
      "code_text": "\tdef test_production_plan_combine_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 426,
      "code_text": "\tdef test_production_plan_subassembly_default_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 451,
      "code_text": "\tdef test_production_plan_for_subcontracting_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 559,
      "code_text": "\tdef test_production_plan_for_mr_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 630,
      "code_text": "\tdef test_production_plan_combine_subassembly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 674,
      "code_text": "\tdef test_pp_to_mr_customer_provided(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 695,
      "code_text": "\tdef test_production_plan_with_multi_level_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 742,
      "code_text": "\tdef test_get_warehouse_list_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 756,
      "code_text": "\tdef test_get_warehouse_list_single(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 767,
      "code_text": "\tdef test_get_sales_order_with_variant(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 822,
      "code_text": "\tdef test_multiple_work_order_for_production_plan_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 882,
      "code_text": "\tdef test_production_plan_pending_qty_with_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 933,
      "code_text": "\tdef test_production_plan_pending_qty_independent_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 971,
      "code_text": "\tdef test_qty_based_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 982,
      "code_text": "\tdef test_production_plan_planned_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1001,
      "code_text": "\tdef test_temporary_name_relinking(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1031,
      "code_text": "\tdef test_produced_qty_for_multi_level_bom_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1082,
      "code_text": "\tdef test_material_request_item_for_purchase_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1116,
      "code_text": "\tdef test_material_request_for_sub_assembly_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1144,
      "code_text": "\tdef test_resered_qty_for_production_plan_for_material_requests(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1166,
      "code_text": "\tdef test_resered_qty_for_production_plan_for_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1219,
      "code_text": "\tdef test_resered_qty_for_production_plan_for_less_rm_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1262,
      "code_text": "\tdef test_resered_qty_for_production_plan_for_material_requests_with_multi_UOM(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1308,
      "code_text": "\tdef test_from_warehouse_for_purchase_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1341,
      "code_text": "\tdef test_skip_available_qty_for_sub_assembly_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1386,
      "code_text": "\tdef test_sub_assembly_and_their_raw_materials_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1415,
      "code_text": "\tdef test_transfer_and_purchase_mrp_for_purchase_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1476,
      "code_text": "\tdef test_mr_qty_for_complex_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1549,
      "code_text": "\tdef test_mr_qty_for_same_rm_with_different_sub_assemblies(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1577,
      "code_text": "\tdef test_reserve_sub_assembly_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1664,
      "code_text": "\tdef test_material_request_qty_purchase_and_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1713,
      "code_text": "\tdef test_unreserve_qty_on_closing_of_pp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1754,
      "code_text": "\tdef test_min_order_qty_in_pp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1776,
      "code_text": "\tdef test_fg_item_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1812,
      "code_text": "\tdef test_parent_warehouse_for_sub_assembly_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1854,
      "code_text": "\tdef test_calculation_of_sub_assembly_items(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom\\bom.py": [
    {
      "type": "function",
      "line_start": 1169,
      "code_text": "def get_list_context(context):\n\tcontext.title = _(\"Bill of Materials\")",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 1318,
      "code_text": "def get_children(parent=None, is_root=False, **filters):",
      "args": [
        "parent",
        "is_root",
        "**filters"
      ]
    },
    {
      "type": "function",
      "line_start": 1113,
      "code_text": "def get_valuation_rate(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 1174,
      "code_text": "def get_bom_items_as_dict(\n\tbom,\n\tcompany,\n\tqty=1,\n\tfetch_exploded=1,\n\tfetch_scrap_items=0,\n\tinclude_non_stock_items=False,\n\tfetch_qty_in_stock_uom=True,\n):",
      "args": [
        "bom",
        "company",
        "qty",
        "fetch_exploded",
        "fetch_scrap_items",
        "include_non_stock_items",
        "fetch_qty_in_stock_uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1552,
      "code_text": "def item_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class BOMTree:"
    },
    {
      "type": "class",
      "line_start": 102,
      "code_text": "class BOM(WebsiteGenerator):"
    },
    {
      "type": "function",
      "line_start": 1292,
      "code_text": "def validate_bom_no(item, bom_no):",
      "args": [
        "item",
        "bom_no"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class BOMRecursionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1078,
      "code_text": "def get_bom_item_rate(args, bom_doc):",
      "args": [
        "args",
        "bom_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1285,
      "code_text": "def get_bom_items(bom, company, qty=1, fetch_exploded=1):\n\titems = get_bom_items_as_dict(bom, company, qty, fetch_exploded, include_non_stock_items=True).values()\n\titems = list(items)\n\titems.sort(key=functools.cmp_to_key(lambda a, b: a.item_code > b.item_code and 1 or -1))\n\treturn items",
      "args": [
        "bom",
        "company",
        "qty",
        "fetch_exploded"
      ]
    },
    {
      "type": "function",
      "line_start": 1641,
      "code_text": "def get_op_cost_from_sub_assemblies(bom_no, op_cost=0):",
      "args": [
        "bom_no",
        "op_cost"
      ]
    },
    {
      "type": "function",
      "line_start": 1659,
      "code_text": "def get_scrap_items_from_sub_assemblies(bom_no, company, qty, scrap_items=None):",
      "args": [
        "bom_no",
        "company",
        "qty",
        "scrap_items"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef __init__(self, name: str, is_bom: bool = True, exploded_qty: float = 1.0, qty: float = 1) -> None:",
      "args": [
        "self",
        "name: str",
        "is_bom: bool",
        "exploded_qty: float",
        "qty: float"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef __create_tree(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef level_order_traversal(self) -> list[\"BOMTree\"]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef __str__(self) -> str:\n\t\treturn (\n\t\t\tf\"{self.item_code}{' - ' + self.name if self.is_bom else ''} qty(per unit): {self.qty}\"\n\t\t\tf\" exploded_qty: {self.exploded_qty}\"\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 95,
      "code_text": "\tdef __repr__(self, level: int = 0) -> str:\n\t\trep = \"\u2503  \" * (level - 1) + \"\u2523\u2501 \" * (level > 0) + str(self) + \"\\n\"\n\t\tfor child in self.child_items:\n\t\t\trep += child.__repr__(level=level + 1)\n\t\treturn rep",
      "args": [
        "self",
        "level: int"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 213,
      "code_text": "\tdef get_index_for_bom(self, existing_boms):\n\t\tindex = 1\n\t\tif existing_boms:\n\t\t\tindex = self.get_next_version_index(existing_boms)\n\n\t\treturn index",
      "args": [
        "self",
        "existing_boms"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef onload(self):\n\t\tsuper().onload()\n\n\t\tself.set_onload_for_muulti_level_bom()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef set_onload_for_muulti_level_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef get_next_version_index(existing_boms: list[str]) -> int:",
      "args": [
        "existing_boms"
      ]
    },
    {
      "type": "method",
      "line_start": 257,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 285,
      "code_text": "\tdef set_default_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef get_context(self, context):\n\t\tcontext.parents = [{\"name\": \"boms\", \"title\": _(\"All BOMs\")}]",
      "args": [
        "self",
        "context"
      ]
    },
    {
      "type": "method",
      "line_start": 305,
      "code_text": "\tdef on_update(self):\n\t\tfrappe.cache().hdel(\"bom_children\", self.name)\n\t\tself.check_recursion()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef on_submit(self):\n\t\tself.manage_default_bom()\n\t\tself.update_bom_creator_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 313,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef update_bom_creator_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 338,
      "code_text": "\tdef on_update_after_submit(self):\n\t\tself.validate_bom_links()\n\t\tself.manage_default_bom()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 342,
      "code_text": "\tdef get_item_det(self, item_code):",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 351,
      "code_text": "\tdef get_routing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 378,
      "code_text": "\tdef set_bom_material_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 406,
      "code_text": "\tdef set_bom_scrap_items_detail(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef get_bom_material_detail(self, args=None):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 463,
      "code_text": "\tdef validate_bom_currency(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 471,
      "code_text": "\tdef get_rm_rate(self, arg):",
      "args": [
        "self",
        "arg"
      ]
    },
    {
      "type": "method",
      "line_start": 505,
      "code_text": "\tdef update_cost(self, update_parent=True, from_child_bom=False, update_hour_rate=True, save=True):",
      "args": [
        "self",
        "update_parent",
        "from_child_bom",
        "update_hour_rate",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 538,
      "code_text": "\tdef update_parent_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 548,
      "code_text": "\tdef get_bom_unitcost(self, bom_no):",
      "args": [
        "self",
        "bom_no"
      ]
    },
    {
      "type": "method",
      "line_start": 557,
      "code_text": "\tdef manage_default_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 581,
      "code_text": "\tdef clear_operations(self):\n\t\tif not self.with_operations:\n\t\t\tself.set(\"operations\", [])\n\n\t\tif not self.with_operations and self.track_semi_finished_goods:\n\t\t\tself.track_semi_finished_goods = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 588,
      "code_text": "\tdef clear_inspection(self):\n\t\tif not self.inspection_required:\n\t\t\tself.quality_inspection_template = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 592,
      "code_text": "\tdef validate_main_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 606,
      "code_text": "\tdef validate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 616,
      "code_text": "\tdef update_stock_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 626,
      "code_text": "\tdef validate_uom_is_interger(self):\n\t\tfrom erpnext.utilities.transaction_base import validate_uom_is_integer\n\n\t\tvalidate_uom_is_integer(self, \"uom\", \"qty\", \"BOM Item\")\n\t\tvalidate_uom_is_integer(self, \"stock_uom\", \"stock_qty\", \"BOM Item\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 632,
      "code_text": "\tdef set_conversion_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 640,
      "code_text": "\tdef set_plc_conversion_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 648,
      "code_text": "\tdef validate_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 662,
      "code_text": "\tdef check_recursion(self, bom_list=None):",
      "args": [
        "self",
        "bom_list"
      ]
    },
    {
      "type": "method",
      "line_start": 689,
      "code_text": "\tdef set_materials_based_on_operation_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 698,
      "code_text": "\tdef add_raw_materials(self, operation_row_id, items):",
      "args": [
        "self",
        "operation_row_id",
        "items"
      ]
    },
    {
      "type": "method",
      "line_start": 714,
      "code_text": "\tdef add_materials_from_bom(self, finished_good, bom_no, operation_row_id, qty=None):",
      "args": [
        "self",
        "finished_good",
        "bom_no",
        "operation_row_id",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 732,
      "code_text": "\tdef traverse_tree(self, bom_list=None):",
      "args": [
        "self",
        "bom_list"
      ]
    },
    {
      "type": "method",
      "line_start": 759,
      "code_text": "\tdef calculate_cost(self, save_updates=False, update_hour_rate=False):",
      "args": [
        "self",
        "save_updates",
        "update_hour_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 778,
      "code_text": "\tdef calculate_op_cost(self, update_hour_rate=False):",
      "args": [
        "self",
        "update_hour_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 803,
      "code_text": "\tdef update_rate_and_time(self, row, update_hour_rate=False):",
      "args": [
        "self",
        "row",
        "update_hour_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 822,
      "code_text": "\tdef calculate_rm_cost(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 859,
      "code_text": "\tdef calculate_sm_cost(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 880,
      "code_text": "\tdef calculate_exploded_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 893,
      "code_text": "\tdef get_rm_rate_map(self) -> dict[str, float]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 913,
      "code_text": "\tdef update_exploded_items(self, save=True):\n\t\t\"\"\"Update Flat BOM, following will be correct data\"\"\"\n\t\tself.get_exploded_items()\n\t\tself.add_exploded_items(save=save)",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 918,
      "code_text": "\tdef get_exploded_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 943,
      "code_text": "\tdef company_currency(self):\n\t\treturn erpnext.get_company_currency(self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 946,
      "code_text": "\tdef add_to_cur_exploded_items(self, args):\n\t\tif self.cur_exploded_items.get(args.item_code):\n\t\t\tself.cur_exploded_items[args.item_code][\"stock_qty\"] += args.stock_qty\n\t\telse:\n\t\t\tself.cur_exploded_items[args.item_code] = args",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 952,
      "code_text": "\tdef get_child_exploded_items(self, bom_no, stock_qty, operation=None):",
      "args": [
        "self",
        "bom_no",
        "stock_qty",
        "operation"
      ]
    },
    {
      "type": "method",
      "line_start": 997,
      "code_text": "\tdef add_exploded_items(self, save=True):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 1015,
      "code_text": "\tdef validate_bom_links(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1028,
      "code_text": "\tdef validate_transfer_against(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1037,
      "code_text": "\tdef set_routing_operations(self):\n\t\tif self.routing and self.with_operations and not self.operations:\n\t\t\tself.get_routing()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1041,
      "code_text": "\tdef validate_operations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1059,
      "code_text": "\tdef get_tree_representation(self) -> BOMTree:\n\t\t\"\"\"Get a complete tree representation preserving order of child items.\"\"\"\n\t\treturn BOMTree(self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1063,
      "code_text": "\tdef set_process_loss_qty(self):\n\t\tif self.process_loss_percentage:\n\t\t\tself.process_loss_qty = flt(self.quantity) * flt(self.process_loss_percentage) / 100",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1067,
      "code_text": "\tdef validate_scrap_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1359,
      "code_text": "def add_additional_cost(stock_entry, work_order):",
      "args": [
        "stock_entry",
        "work_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1376,
      "code_text": "def add_non_stock_items_cost(stock_entry, work_order, expense_account):",
      "args": [
        "stock_entry",
        "work_order",
        "expense_account"
      ]
    },
    {
      "type": "function",
      "line_start": 1408,
      "code_text": "def add_operations_cost(stock_entry, work_order=None, expense_account=None):",
      "args": [
        "stock_entry",
        "work_order",
        "expense_account"
      ]
    },
    {
      "type": "function",
      "line_start": 1496,
      "code_text": "def get_bom_diff(bom1, bom2):",
      "args": [
        "bom1",
        "bom2"
      ]
    },
    {
      "type": "function",
      "line_start": 1603,
      "code_text": "def make_variant_bom(source_name, bom_no, item, variant_items, target_doc=None):",
      "args": [
        "source_name",
        "bom_no",
        "item",
        "variant_items",
        "target_doc"
      ]
    }
  ],
  "erpnext\\stock\\stock_ledger.py": [
    {
      "type": "function",
      "line_start": 1645,
      "code_text": "def get_stock_ledger_entries(\n\tprevious_sle,\n\toperator=None,\n\torder=\"desc\",\n\tlimit=None,\n\tfor_update=False,\n\tdebug=False,\n\tcheck_serial_no=True,\n\textra_cond=None,\n):",
      "args": [
        "previous_sle",
        "operator",
        "order",
        "limit",
        "for_update",
        "debug",
        "check_serial_no",
        "extra_cond"
      ]
    },
    {
      "type": "function",
      "line_start": 1624,
      "code_text": "def get_previous_sle(args, for_update=False, extra_cond=None):",
      "args": [
        "args",
        "for_update",
        "extra_cond"
      ]
    },
    {
      "type": "function",
      "line_start": 1760,
      "code_text": "def get_valuation_rate(\n\titem_code,\n\twarehouse,\n\tvoucher_type,\n\tvoucher_no,\n\tallow_zero_rate=False,\n\tcurrency=None,\n\tcompany=None,\n\traise_error_if_no_rate=True,\n\tbatch_no=None,\n\tserial_and_batch_bundle=None,\n):",
      "args": [
        "item_code",
        "warehouse",
        "voucher_type",
        "voucher_no",
        "allow_zero_rate",
        "currency",
        "company",
        "raise_error_if_no_rate",
        "batch_no",
        "serial_and_batch_bundle"
      ]
    },
    {
      "type": "class",
      "line_start": 48,
      "code_text": "class NegativeStockError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 2197,
      "code_text": "def is_negative_stock_allowed(*, item_code: str | None = None) -> bool:\n\tif cint(frappe.db.get_single_value(\"Stock Settings\", \"allow_negative_stock\", cache=True)):\n\t\treturn True\n\tif item_code and cint(frappe.db.get_value(\"Item\", item_code, \"allow_negative_stock\", cache=True)):\n\t\treturn True\n\treturn False",
      "args": []
    },
    {
      "type": "function",
      "line_start": 307,
      "code_text": "def get_reposting_data(file_path) -> dict:",
      "args": [
        "file_path"
      ]
    },
    {
      "type": "class",
      "line_start": 523,
      "code_text": "class update_entries_after:"
    },
    {
      "type": "function",
      "line_start": 2239,
      "code_text": "def get_stock_value_difference(item_code, warehouse, posting_date, posting_time, voucher_no=None):",
      "args": [
        "item_code",
        "warehouse",
        "posting_date",
        "posting_time",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 225,
      "code_text": "def make_entry(args, allow_negative_stock=False, via_landed_cost_voucher=False):",
      "args": [
        "args",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_items_to_be_repost(voucher_type=None, voucher_no=None, doc=None, reposting_data=None):",
      "args": [
        "voucher_type",
        "voucher_no",
        "doc",
        "reposting_data"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def make_sl_entries(sl_entries, allow_negative_stock=False, via_landed_cost_voucher=False):",
      "args": [
        "sl_entries",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "function",
      "line_start": 216,
      "code_text": "def set_as_cancel(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def repost_future_sle(\n\targs=None,\n\tvoucher_type=None,\n\tvoucher_no=None,\n\tallow_negative_stock=None,\n\tvia_landed_cost_voucher=False,\n\tdoc=None,\n):",
      "args": [
        "args",
        "voucher_type",
        "voucher_no",
        "allow_negative_stock",
        "via_landed_cost_voucher",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 429,
      "code_text": "def create_file(doc, compressed_content):",
      "args": [
        "doc",
        "compressed_content"
      ]
    },
    {
      "type": "function",
      "line_start": 504,
      "code_text": "def get_affected_transactions(doc, reposting_data=None) -> set[tuple[str, str]]:",
      "args": [
        "doc",
        "reposting_data"
      ]
    },
    {
      "type": "function",
      "line_start": 1580,
      "code_text": "def get_previous_sle_of_current_voucher(args, operator=\"<\", exclude_current_voucher=False):",
      "args": [
        "args",
        "operator",
        "exclude_current_voucher"
      ]
    },
    {
      "type": "function",
      "line_start": 2047,
      "code_text": "def is_negative_with_precision(neg_sle, is_batch=False):",
      "args": [
        "neg_sle",
        "is_batch"
      ]
    },
    {
      "type": "function",
      "line_start": 2151,
      "code_text": "def validate_reserved_serial_nos(item_code, warehouse, serial_nos):",
      "args": [
        "item_code",
        "warehouse",
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 2167,
      "code_text": "def validate_reserved_batch_nos(item_code, warehouse, batch_nos):",
      "args": [
        "item_code",
        "warehouse",
        "batch_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 2205,
      "code_text": "def get_incoming_rate_for_inter_company_transfer(sle) -> float:",
      "args": [
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 2227,
      "code_text": "def is_internal_transfer(sle):",
      "args": [
        "sle"
      ]
    },
    {
      "type": "class",
      "line_start": 52,
      "code_text": "class SerialNoExistsInFutureTransaction(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def repost_current_voucher(args, allow_negative_stock=False, via_landed_cost_voucher=False):",
      "args": [
        "args",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_args_for_future_sle(row):",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 159,
      "code_text": "def validate_serial_no(sle):",
      "args": [
        "sle"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def validate_cancellation(kargs):",
      "args": [
        "kargs"
      ]
    },
    {
      "type": "function",
      "line_start": 337,
      "code_text": "def validate_item_warehouse(args):\n\tfor field in [\"item_code\", \"warehouse\", \"posting_date\", \"posting_time\"]:\n\t\tif args.get(field) in [None, \"\"]:\n\t\t\tvalidation_msg = f\"The field {frappe.unscrub(field)} is required for the reposting\"\n\t\t\tfrappe.throw(_(validation_msg))",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 344,
      "code_text": "def update_args_in_repost_item_valuation(doc, index, args, distinct_item_warehouses, affected_transactions):",
      "args": [
        "doc",
        "index",
        "args",
        "distinct_item_warehouses",
        "affected_transactions"
      ]
    },
    {
      "type": "function",
      "line_start": 397,
      "code_text": "def get_reposting_file_name(dt, dn):",
      "args": [
        "dt",
        "dn"
      ]
    },
    {
      "type": "function",
      "line_start": 409,
      "code_text": "def create_json_gz_file(data, doc, file_name=None) -> str:",
      "args": [
        "data",
        "doc",
        "file_name"
      ]
    },
    {
      "type": "function",
      "line_start": 471,
      "code_text": "def get_distinct_item_warehouse(args=None, doc=None, reposting_data=None):",
      "args": [
        "args",
        "doc",
        "reposting_data"
      ]
    },
    {
      "type": "function",
      "line_start": 494,
      "code_text": "def parse_distinct_items_and_warehouses(distinct_items_and_warehouses):",
      "args": [
        "distinct_items_and_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 518,
      "code_text": "def get_current_index(doc=None):\n\tif doc and doc.current_index:\n\t\treturn doc.current_index",
      "args": [
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 538,
      "code_text": "\tdef __init__(\n\t\tself,\n\t\targs,\n\t\tallow_zero_rate=False,\n\t\tallow_negative_stock=None,\n\t\tvia_landed_cost_voucher=False,\n\t\tverbose=1,\n\t):",
      "args": [
        "self",
        "args",
        "allow_zero_rate",
        "allow_negative_stock",
        "via_landed_cost_voucher",
        "verbose"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef get_reserved_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 592,
      "code_text": "\tdef set_precision(self):\n\t\tself.flt_precision = cint(frappe.db.get_default(\"float_precision\")) or 2\n\t\tself.currency_precision = get_field_precision(\n\t\t\tfrappe.get_meta(\"Stock Ledger Entry\").get_field(\"stock_value\")\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 598,
      "code_text": "\tdef initialize_previous_data(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef build(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 658,
      "code_text": "\tdef has_stock_reco_with_serial_batch(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 667,
      "code_text": "\tdef process_sle_against_current_timestamp(self):\n\t\tsl_entries = self.get_sle_against_current_voucher()\n\t\tfor sle in sl_entries:\n\t\t\tself.process_sle(sle)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 672,
      "code_text": "\tdef get_sle_against_current_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 697,
      "code_text": "\tdef get_future_entries_to_fix(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 705,
      "code_text": "\tdef get_dependent_entries_to_fix(self, entries_to_fix, sle):",
      "args": [
        "self",
        "entries_to_fix",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 724,
      "code_text": "\tdef update_distinct_item_warehouses(self, dependant_sle):",
      "args": [
        "self",
        "dependant_sle"
      ]
    },
    {
      "type": "method",
      "line_start": 759,
      "code_text": "\tdef is_dependent_voucher_reposted(self, dependant_sle) -> bool:",
      "args": [
        "self",
        "dependant_sle"
      ]
    },
    {
      "type": "method",
      "line_start": 780,
      "code_text": "\tdef get_dependent_voucher_detail_nos(self, key):\n\t\tif \"dependent_voucher_detail_nos\" not in self.distinct_item_warehouses[key]:\n\t\t\tself.distinct_item_warehouses[key].dependent_voucher_detail_nos = []\n\n\t\treturn self.distinct_item_warehouses[key].dependent_voucher_detail_nos",
      "args": [
        "self",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef validate_previous_sle_qty(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 804,
      "code_text": "\tdef process_sle(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 921,
      "code_text": "\tdef get_serialized_values(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 967,
      "code_text": "\tdef reset_actual_qty_for_stock_reco(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 983,
      "code_text": "\tdef update_serial_no_status(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1008,
      "code_text": "\tdef calculate_valuation_for_serial_batch_bundle(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1031,
      "code_text": "\tdef get_outgoing_rate_for_batched_item(self, sle):\n\t\tif self.wh_data.qty_after_transaction == 0:\n\t\t\treturn 0\n\n\t\treturn flt(self.wh_data.stock_value) / flt(self.wh_data.qty_after_transaction)",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1037,
      "code_text": "\tdef validate_negative_stock(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1053,
      "code_text": "\tdef get_dynamic_incoming_outgoing_rate(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1063,
      "code_text": "\tdef has_landed_cost_based_on_pi(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1071,
      "code_text": "\tdef get_incoming_outgoing_rate_from_transaction(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1180,
      "code_text": "\tdef update_outgoing_rate_on_transaction(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1199,
      "code_text": "\tdef update_rate_on_stock_entry(self, sle, outgoing_rate):\n\t\tfrappe.db.set_value(\"Stock Entry Detail\", sle.voucher_detail_no, \"basic_rate\", outgoing_rate)\n\n\t\t# Update outgoing item's rate, recalculate FG Item's rate and total incoming/outgoing amount\n\t\tif not sle.dependant_sle_voucher_detail_no or self.is_manufacture_entry_with_sabb(sle):\n\t\t\tself.recalculate_amounts_in_stock_entry(sle.voucher_no, sle.voucher_detail_no)",
      "args": [
        "self",
        "sle",
        "outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 1206,
      "code_text": "\tdef is_manufacture_entry_with_sabb(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1218,
      "code_text": "\tdef recalculate_amounts_in_stock_entry(self, voucher_no, voucher_detail_no):",
      "args": [
        "self",
        "voucher_no",
        "voucher_detail_no"
      ]
    },
    {
      "type": "method",
      "line_start": 1231,
      "code_text": "\tdef update_rate_on_delivery_and_sales_return(self, sle, outgoing_rate):",
      "args": [
        "self",
        "sle",
        "outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 1247,
      "code_text": "\tdef update_rate_on_purchase_receipt(self, sle, outgoing_rate):",
      "args": [
        "self",
        "sle",
        "outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 1267,
      "code_text": "\tdef update_rate_on_subcontracting_receipt(self, sle, outgoing_rate):",
      "args": [
        "self",
        "sle",
        "outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 1283,
      "code_text": "\tdef update_rate_on_stock_reconciliation(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1316,
      "code_text": "\tdef get_incoming_value_for_serial_nos(self, sle, serial_nos):",
      "args": [
        "self",
        "sle",
        "serial_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 1350,
      "code_text": "\tdef get_moving_average_values(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1389,
      "code_text": "\tdef update_queue_values(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1437,
      "code_text": "\tdef update_batched_values(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1475,
      "code_text": "\tdef check_if_allow_zero_valuation_rate(self, voucher_type, voucher_detail_no):",
      "args": [
        "self",
        "voucher_type",
        "voucher_detail_no"
      ]
    },
    {
      "type": "method",
      "line_start": 1488,
      "code_text": "\tdef get_fallback_rate(self, sle) -> float:",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1501,
      "code_text": "\tdef get_sle_before_datetime(self, args):\n\t\t\"\"\"get previous stock ledger entry before current time-bucket\"\"\"\n\t\tsle = get_stock_ledger_entries(args, \"<\", \"desc\", \"limit 1\", for_update=False)\n\t\tsle = sle[0] if sle else frappe._dict()\n\t\treturn sle",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 1507,
      "code_text": "\tdef get_sle_after_datetime(self, args):\n\t\t\"\"\"get Stock Ledger Entries after a particular datetime, for reposting\"\"\"\n\t\treturn get_stock_ledger_entries(args, \">\", \"asc\", for_update=True, check_serial_no=False)",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 1511,
      "code_text": "\tdef raise_exceptions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1557,
      "code_text": "\tdef update_bin_data(self, sle):",
      "args": [
        "self",
        "sle"
      ]
    },
    {
      "type": "method",
      "line_start": 1569,
      "code_text": "\tdef update_bin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1717,
      "code_text": "def get_sle_by_voucher_detail_no(voucher_detail_no, excluded_sle=None):",
      "args": [
        "voucher_detail_no",
        "excluded_sle"
      ]
    },
    {
      "type": "function",
      "line_start": 1735,
      "code_text": "def get_batch_incoming_rate(item_code, warehouse, batch_no, posting_date, posting_time, creation=None):",
      "args": [
        "item_code",
        "warehouse",
        "batch_no",
        "posting_date",
        "posting_time",
        "creation"
      ]
    },
    {
      "type": "function",
      "line_start": 1880,
      "code_text": "def update_qty_in_future_sle(args, allow_negative_stock=False):",
      "args": [
        "args",
        "allow_negative_stock"
      ]
    },
    {
      "type": "function",
      "line_start": 1917,
      "code_text": "def get_stock_reco_qty_shift(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 1944,
      "code_text": "def get_next_stock_reco(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1986,
      "code_text": "def get_datetime_limit_condition(detail):",
      "args": [
        "detail"
      ]
    },
    {
      "type": "function",
      "line_start": 1999,
      "code_text": "def validate_negative_qty_in_future_sle(args, allow_negative_stock=False):",
      "args": [
        "args",
        "allow_negative_stock"
      ]
    },
    {
      "type": "function",
      "line_start": 2063,
      "code_text": "def get_future_sle_with_negative_qty(sle_args):",
      "args": [
        "sle_args"
      ]
    },
    {
      "type": "function",
      "line_start": 2085,
      "code_text": "def get_future_sle_with_negative_batch_qty(sle_args):",
      "args": [
        "sle_args"
      ]
    },
    {
      "type": "function",
      "line_start": 2111,
      "code_text": "def validate_reserved_stock(kwargs):",
      "args": [
        "kwargs"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\serial_and_batch_bundle\\serial_and_batch_bundle.py": [
    {
      "type": "function",
      "line_start": 1741,
      "code_text": "def get_available_serial_nos(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2112,
      "code_text": "def get_auto_batch_nos(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2214,
      "code_text": "def get_available_batches(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1431,
      "code_text": "def item_query(doctype, txt, searchfield, start, page_len, filters, as_dict=False):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 1319,
      "code_text": "def make_serial_nos(item_code, serial_nos):",
      "args": [
        "item_code",
        "serial_nos"
      ]
    },
    {
      "type": "class",
      "line_start": 34,
      "code_text": "class SerialNoExistsInFutureTransactionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class BatchNegativeStockError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1371,
      "code_text": "def make_batch_nos(item_code, batch_nos):",
      "args": [
        "item_code",
        "batch_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 2281,
      "code_text": "def get_voucher_wise_serial_batch_from_bundle(**kwargs) -> dict[str, dict]:",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 42,
      "code_text": "class SerialNoDuplicateError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1219,
      "code_text": "def get_serial_batch_from_csv(item_code, file_path):",
      "args": [
        "item_code",
        "file_path"
      ]
    },
    {
      "type": "function",
      "line_start": 1288,
      "code_text": "def get_serial_batch_from_data(item_code, kwargs):",
      "args": [
        "item_code",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1446,
      "code_text": "def get_serial_batch_ledgers(item_code=None, docstatus=None, voucher_no=None, name=None, child_row=None):",
      "args": [
        "item_code",
        "docstatus",
        "voucher_no",
        "name",
        "child_row"
      ]
    },
    {
      "type": "function",
      "line_start": 1613,
      "code_text": "def get_type_of_transaction(parent_doc, child_row):",
      "args": [
        "parent_doc",
        "child_row"
      ]
    },
    {
      "type": "class",
      "line_start": 46,
      "code_text": "class SerialNoWarehouseError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 50,
      "code_text": "class SerialandBatchBundle(Document):"
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef validate_voucher_detail_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef allow_existing_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef reset_serial_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 204,
      "code_text": "\tdef set_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef validate_serial_nos_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef validate_serial_nos_duplicate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 293,
      "code_text": "\tdef throw_error_message(self, message, exception=frappe.ValidationError):\n\t\tfrappe.throw(_(message), exception, title=_(\"Error\"))",
      "args": [
        "self",
        "message",
        "exception"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef set_incoming_rate(self, parent=None, row=None, save=False, allow_negative_stock=False):",
      "args": [
        "self",
        "parent",
        "row",
        "save",
        "allow_negative_stock"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef set_valuation_rate_for_return_entry(self, return_against, row, save=False):",
      "args": [
        "self",
        "return_against",
        "row",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef validate_returned_serial_batch_no(self, return_against, row, original_inv_details):",
      "args": [
        "self",
        "return_against",
        "row",
        "original_inv_details"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef get_valuation_rate_for_return_entry(self, return_against):",
      "args": [
        "self",
        "return_against"
      ]
    },
    {
      "type": "method",
      "line_start": 422,
      "code_text": "\tdef calculate_total_qty(self, save=True):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 436,
      "code_text": "\tdef get_serial_nos(self):\n\t\treturn [d.serial_no for d in self.entries if d.serial_no]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef update_valuation_rate(self, valuation_rate=None, save=False):",
      "args": [
        "self",
        "valuation_rate",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 449,
      "code_text": "\tdef set_incoming_rate_for_outward_transaction(self, row=None, save=False, allow_negative_stock=False):",
      "args": [
        "self",
        "row",
        "save",
        "allow_negative_stock"
      ]
    },
    {
      "type": "method",
      "line_start": 488,
      "code_text": "\tdef validate_negative_batch(self, batch_no, available_qty):",
      "args": [
        "self",
        "batch_no",
        "available_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 497,
      "code_text": "\tdef is_stock_reco_for_valuation_adjustment(self, available_qty):",
      "args": [
        "self",
        "available_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 509,
      "code_text": "\tdef get_sle_for_outward_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 536,
      "code_text": "\tdef get_return_against(self, parent=None):",
      "args": [
        "self",
        "parent"
      ]
    },
    {
      "type": "method",
      "line_start": 563,
      "code_text": "\tdef set_incoming_rate_for_inward_transaction(self, row=None, save=False):",
      "args": [
        "self",
        "row",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef set_serial_and_batch_values(self, parent, row, qty_field=None):",
      "args": [
        "self",
        "parent",
        "row",
        "qty_field"
      ]
    },
    {
      "type": "method",
      "line_start": 649,
      "code_text": "\tdef validate_voucher_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 669,
      "code_text": "\tdef check_future_entries_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 724,
      "code_text": "\tdef reset_qty(self, row, qty_field=None):",
      "args": [
        "self",
        "row",
        "qty_field"
      ]
    },
    {
      "type": "method",
      "line_start": 753,
      "code_text": "\tdef validate_quantity(self, row, qty_field=None):",
      "args": [
        "self",
        "row",
        "qty_field"
      ]
    },
    {
      "type": "method",
      "line_start": 767,
      "code_text": "\tdef get_qty_field(self, row, qty_field=None) -> str:",
      "args": [
        "self",
        "row",
        "qty_field"
      ]
    },
    {
      "type": "method",
      "line_start": 778,
      "code_text": "\tdef set_is_outward(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 788,
      "code_text": "\tdef set_warehouse(self):\n\t\tfor row in self.entries:\n\t\t\tif row.warehouse != self.warehouse:\n\t\t\t\trow.warehouse = self.warehouse",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 793,
      "code_text": "\tdef calculate_qty_and_amount(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 816,
      "code_text": "\tdef calculate_outgoing_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 832,
      "code_text": "\tdef validate_serial_and_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 886,
      "code_text": "\tdef validate_serial_batch_no(self, serial_batches):",
      "args": [
        "self",
        "serial_batches"
      ]
    },
    {
      "type": "method",
      "line_start": 902,
      "code_text": "\tdef validate_incorrect_serial_nos(self, serial_nos):",
      "args": [
        "self",
        "serial_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 915,
      "code_text": "\tdef validate_incorrect_batch_nos(self, batch_nos):",
      "args": [
        "self",
        "batch_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 926,
      "code_text": "\tdef validate_serial_and_batch_no_for_returned(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 976,
      "code_text": "\tdef get_orignal_document_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 987,
      "code_text": "\tdef validate_duplicate_serial_and_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1008,
      "code_text": "\tdef before_cancel(self):\n\t\tself.delink_serial_and_batch_bundle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1011,
      "code_text": "\tdef delink_serial_and_batch_bundle(self):\n\t\tsles = frappe.get_all(\"Stock Ledger Entry\", filters={\"serial_and_batch_bundle\": self.name})\n\n\t\tfor sle in sles:\n\t\t\tfrappe.db.set_value(\"Stock Ledger Entry\", sle.name, \"serial_and_batch_bundle\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1018,
      "code_text": "\tdef child_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1035,
      "code_text": "\tdef delink_refernce_from_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1073,
      "code_text": "\tdef delink_reference_from_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1083,
      "code_text": "\tdef validate_serial_and_batch_data(self):\n\t\tif not self.voucher_no:\n\t\t\tfrappe.throw(_(\"Voucher No is mandatory\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1087,
      "code_text": "\tdef before_submit(self):\n\t\tself.validate_serial_and_batch_data()\n\t\tself.validate_serial_and_batch_no_for_returned()\n\t\tself.set_purchase_document_no()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1092,
      "code_text": "\tdef on_submit(self):\n\t\tself.validate_serial_nos_inventory()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1095,
      "code_text": "\tdef set_purchase_document_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1114,
      "code_text": "\tdef validate_serial_and_batch_inventory(self):\n\t\tself.check_future_entries_exists()\n\t\tself.validate_batch_inventory()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1118,
      "code_text": "\tdef validate_batch_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1150,
      "code_text": "\tdef on_cancel(self):\n\t\tself.validate_voucher_no_docstatus()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1153,
      "code_text": "\tdef validate_voucher_no_docstatus(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1162,
      "code_text": "\tdef on_trash(self):\n\t\tself.validate_voucher_no_docstatus()\n\t\tself.delink_refernce_from_voucher()\n\t\tself.delink_reference_from_batch()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1168,
      "code_text": "\tdef add_serial_batch(self, data):",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 1186,
      "code_text": "\tdef delete_serial_batch_entries(self):\n\t\tSBBE = frappe.qb.DocType(\"Serial and Batch Entry\")\n\n\t\tfrappe.qb.from_(SBBE).delete().where(SBBE.parent == self.name).run()\n\n\t\tself.set(\"entries\", [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1195,
      "code_text": "def download_blank_csv_template(content):",
      "args": [
        "content"
      ]
    },
    {
      "type": "function",
      "line_start": 1209,
      "code_text": "def upload_csv_file(item_code, file_path):",
      "args": [
        "item_code",
        "file_path"
      ]
    },
    {
      "type": "function",
      "line_start": 1241,
      "code_text": "def parse_csv_file_to_get_serial_batch(reader):",
      "args": [
        "reader"
      ]
    },
    {
      "type": "function",
      "line_start": 1307,
      "code_text": "def create_serial_nos(item_code, serial_nos):",
      "args": [
        "item_code",
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 1422,
      "code_text": "def parse_serial_nos(data):\n\tif isinstance(data, list):\n\t\treturn data\n\n\treturn [s.strip() for s in cstr(data).strip().replace(\",\", \"\\n\").split(\"\\n\") if s.strip()]",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 1471,
      "code_text": "def get_filters_for_bundle(item_code=None, docstatus=None, voucher_no=None, name=None, child_row=None):",
      "args": [
        "item_code",
        "docstatus",
        "voucher_no",
        "name",
        "child_row"
      ]
    },
    {
      "type": "function",
      "line_start": 1508,
      "code_text": "def get_reference_serial_and_batch_bundle(child_row):",
      "args": [
        "child_row"
      ]
    },
    {
      "type": "function",
      "line_start": 1522,
      "code_text": "def add_serial_batch_ledgers(entries, child_row, doc, warehouse, do_not_save=False) -> object:",
      "args": [
        "entries",
        "child_row",
        "doc",
        "warehouse",
        "do_not_save"
      ]
    },
    {
      "type": "function",
      "line_start": 1547,
      "code_text": "def create_serial_batch_no_ledgers(\n\tentries, child_row, parent_doc, warehouse=None, do_not_save=False\n) -> object:",
      "args": [
        "entries",
        "child_row",
        "parent_doc",
        "warehouse",
        "do_not_save"
      ]
    },
    {
      "type": "function",
      "line_start": 1601,
      "code_text": "def get_batch(item_code):",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1641,
      "code_text": "def update_serial_batch_no_ledgers(bundle, entries, child_row, parent_doc, warehouse=None) -> object:",
      "args": [
        "bundle",
        "entries",
        "child_row",
        "parent_doc",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1668,
      "code_text": "def update_serial_or_batch(bundle_id, serial_no=None, batch_no=None):",
      "args": [
        "bundle_id",
        "serial_no",
        "batch_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1686,
      "code_text": "def get_serial_and_batch_ledger(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1724,
      "code_text": "def get_auto_data(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1733,
      "code_text": "def get_available_batches_qty(available_batches):\n\tavailable_batches_qty = defaultdict(float)\n\tfor batch in available_batches:\n\t\tavailable_batches_qty[batch.batch_no] += batch.qty\n\n\treturn available_batches_qty",
      "args": [
        "available_batches"
      ]
    },
    {
      "type": "function",
      "line_start": 1797,
      "code_text": "def get_non_expired_batches(batches):",
      "args": [
        "batches"
      ]
    },
    {
      "type": "function",
      "line_start": 1814,
      "code_text": "def get_serial_nos_based_on_posting_date(kwargs, ignore_serial_nos):",
      "args": [
        "kwargs",
        "ignore_serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 1844,
      "code_text": "def get_bundle_wise_serial_nos(data, kwargs):",
      "args": [
        "data",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1868,
      "code_text": "def get_reserved_serial_nos(kwargs) -> list:",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1896,
      "code_text": "def get_reserved_serial_nos_for_pos(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1967,
      "code_text": "def get_reserved_serial_nos_for_sre(kwargs) -> list:",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 1999,
      "code_text": "def get_reserved_batches_for_pos(kwargs) -> dict:",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2064,
      "code_text": "def get_reserved_batches_for_sre(kwargs) -> dict:",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2145,
      "code_text": "def filter_zero_near_batches(available_batches, kwargs):",
      "args": [
        "available_batches",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2166,
      "code_text": "def get_qty_based_available_batches(available_batches, qty):",
      "args": [
        "available_batches",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 2199,
      "code_text": "def update_available_batches(available_batches, *reserved_batches) -> None:",
      "args": [
        "available_batches",
        "*reserved_batches"
      ]
    },
    {
      "type": "function",
      "line_start": 2313,
      "code_text": "def get_picked_batches(kwargs) -> dict[str, dict]:",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2369,
      "code_text": "def get_picked_serial_nos(item_code, warehouse=None) -> list[str]:",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 2409,
      "code_text": "def get_ledgers_from_serial_batch_bundle(**kwargs) -> list[frappe._dict]:",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2463,
      "code_text": "def get_stock_ledgers_for_serial_nos(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2504,
      "code_text": "def get_stock_ledgers_batches(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 2569,
      "code_text": "def get_batch_no_from_serial_no(serial_no):\n\treturn frappe.get_cached_value(\"Serial No\", serial_no, \"batch_no\")",
      "args": [
        "serial_no"
      ]
    },
    {
      "type": "function",
      "line_start": 2574,
      "code_text": "def is_serial_batch_no_exists(item_code, type_of_transaction, serial_no=None, batch_no=None):",
      "args": [
        "item_code",
        "type_of_transaction",
        "serial_no",
        "batch_no"
      ]
    },
    {
      "type": "function",
      "line_start": 2588,
      "code_text": "def make_serial_no(serial_no, item_code):\n\tserial_no_doc = frappe.new_doc(\"Serial No\")\n\tserial_no_doc.serial_no = serial_no\n\tserial_no_doc.item_code = item_code\n\tserial_no_doc.save(ignore_permissions=True)",
      "args": [
        "serial_no",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 2595,
      "code_text": "def make_batch_no(batch_no, item_code):\n\tbatch_doc = frappe.new_doc(\"Batch\")\n\tbatch_doc.batch_id = batch_no\n\tbatch_doc.item = item_code\n\tbatch_doc.save(ignore_permissions=True)",
      "args": [
        "batch_no",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 2603,
      "code_text": "def is_duplicate_serial_no(bundle_id, serial_no):\n\treturn frappe.db.exists(\"Serial and Batch Entry\", {\"parent\": bundle_id, \"serial_no\": serial_no})",
      "args": [
        "bundle_id",
        "serial_no"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_depreciation_schedule\\asset_depreciation_schedule.py": [
    {
      "type": "function",
      "line_start": 1145,
      "code_text": "def get_depr_schedule(asset_name, status, finance_book=None):",
      "args": [
        "asset_name",
        "status",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 1155,
      "code_text": "def get_asset_depr_schedule_doc(asset_name, status, finance_book=None):",
      "args": [
        "asset_name",
        "status",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 620,
      "code_text": "def _get_pro_rata_amt(\n\trow,\n\tdepreciation_amount,\n\tfrom_date,\n\tto_date,\n\thas_wdv_or_dd_non_yearly_pro_rata=False,\n\toriginal_schedule_date=None,\n):",
      "args": [
        "row",
        "depreciation_amount",
        "from_date",
        "to_date",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "original_schedule_date"
      ]
    },
    {
      "type": "function",
      "line_start": 1049,
      "code_text": "def make_new_active_asset_depr_schedules_and_cancel_current_ones(\n\tasset_doc,\n\tnotes,\n\tdate_of_disposal=None,\n\tdate_of_return=None,\n\tvalue_after_depreciation=None,\n\tignore_booked_entry=False,\n\tdifference_amount=None,\n):",
      "args": [
        "asset_doc",
        "notes",
        "date_of_disposal",
        "date_of_return",
        "value_after_depreciation",
        "ignore_booked_entry",
        "difference_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 562,
      "code_text": "def _check_is_pro_rata(asset_doc, row, wdv_or_dd_non_yearly=False):",
      "args": [
        "asset_doc",
        "row",
        "wdv_or_dd_non_yearly"
      ]
    },
    {
      "type": "function",
      "line_start": 637,
      "code_text": "def get_total_days(date, frequency):\n\tperiod_start_date = add_months(date, cint(frequency) * -1)\n\tif is_last_day_of_the_month(date):\n\t\tperiod_start_date = get_last_day(period_start_date)\n\treturn date_diff(date, period_start_date)",
      "args": [
        "date",
        "frequency"
      ]
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class AssetDepreciationSchedule(Document):"
    },
    {
      "type": "function",
      "line_start": 973,
      "code_text": "def _get_total_days(depreciation_start_date, schedule_idx, frequency_of_depreciation):",
      "args": [
        "depreciation_start_date",
        "schedule_idx",
        "frequency_of_depreciation"
      ]
    },
    {
      "type": "function",
      "line_start": 1166,
      "code_text": "def get_asset_depr_schedule_name(asset_name, status, finance_book=None):",
      "args": [
        "asset_name",
        "status",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 644,
      "code_text": "def get_depreciation_amount(\n\tasset_depr_schedule,\n\tasset,\n\tdepreciable_value,\n\tyearly_opening_wdv,\n\tfb_row,\n\tschedule_idx=0,\n\tprev_depreciation_amount=0,\n\thas_wdv_or_dd_non_yearly_pro_rata=False,\n\tnumber_of_pending_depreciations=0,\n\tprev_per_day_depr=0,\n):",
      "args": [
        "asset_depr_schedule",
        "asset",
        "depreciable_value",
        "yearly_opening_wdv",
        "fb_row",
        "schedule_idx",
        "prev_depreciation_amount",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "number_of_pending_depreciations",
        "prev_per_day_depr"
      ]
    },
    {
      "type": "function",
      "line_start": 720,
      "code_text": "def get_daily_prorata_based_straight_line_depr(\n\tasset, row, schedule_idx, number_of_pending_depreciations, amount\n):",
      "args": [
        "asset",
        "row",
        "schedule_idx",
        "number_of_pending_depreciations",
        "amount"
      ]
    },
    {
      "type": "function",
      "line_start": 818,
      "code_text": "def get_asset_shift_factors_map():\n\treturn dict(frappe.db.get_all(\"Asset Shift Factor\", [\"shift_name\", \"shift_factor\"], as_list=True))",
      "args": []
    },
    {
      "type": "function",
      "line_start": 938,
      "code_text": "def get_monthly_depr_amount(fb_row, schedule_idx, depreciable_value):",
      "args": [
        "fb_row",
        "schedule_idx",
        "depreciable_value"
      ]
    },
    {
      "type": "function",
      "line_start": 951,
      "code_text": "def get_monthly_depr_amount_based_on_prev_per_day_depr(fb_row, schedule_idx, prev_per_day_depr):",
      "args": [
        "fb_row",
        "schedule_idx",
        "prev_per_day_depr"
      ]
    },
    {
      "type": "function",
      "line_start": 1007,
      "code_text": "def make_draft_asset_depr_schedule(asset_doc, row):",
      "args": [
        "asset_doc",
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 1099,
      "code_text": "def get_temp_asset_depr_schedule_doc(\n\tasset_doc,\n\trow,\n\tdate_of_disposal=None,\n\tdate_of_return=None,\n\tupdate_asset_finance_book_row=False,\n\tnew_depr_schedule=None,\n):",
      "args": [
        "asset_doc",
        "row",
        "date_of_disposal",
        "date_of_return",
        "update_asset_finance_book_row",
        "new_depr_schedule"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef before_save(self):\n\t\tif not self.finance_book_id:\n\t\t\tself.prepare_draft_asset_depr_schedule_data_from_asset_name_and_fb_name(\n\t\t\t\tself.asset, self.finance_book\n\t\t\t)\n\t\tself.update_shift_depr_schedule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef validate(self):\n\t\tself.validate_another_asset_depr_schedule_does_not_exist()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_another_asset_depr_schedule_does_not_exist(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"status\", \"Active\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef before_cancel(self):\n\t\tif not self.flags.should_not_cancel_depreciation_entries:\n\t\t\tself.cancel_depreciation_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef cancel_depreciation_entries(self):\n\t\tfor d in self.get(\"depreciation_schedule\"):\n\t\t\tif d.journal_entry:\n\t\t\t\tfrappe.get_doc(\"Journal Entry\", d.journal_entry).cancel()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef update_shift_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef prepare_draft_asset_depr_schedule_data_from_asset_name_and_fb_name(self, asset_name, fb_name):",
      "args": [
        "self",
        "asset_name",
        "fb_name"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef prepare_draft_asset_depr_schedule_data(\n\t\tself,\n\t\tasset_doc,\n\t\trow,\n\t\tdate_of_disposal=None,\n\t\tdate_of_return=None,\n\t\tupdate_asset_finance_book_row=True,\n\t):",
      "args": [
        "self",
        "asset_doc",
        "row",
        "date_of_disposal",
        "date_of_return",
        "update_asset_finance_book_row"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef have_asset_details_been_modified(self, asset_doc):\n\t\treturn (\n\t\t\tasset_doc.gross_purchase_amount != self.gross_purchase_amount\n\t\t\tor asset_doc.opening_accumulated_depreciation != self.opening_accumulated_depreciation\n\t\t\tor asset_doc.opening_number_of_booked_depreciations != self.opening_number_of_booked_depreciations\n\t\t)",
      "args": [
        "self",
        "asset_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef not_manual_depr_or_have_manual_depr_details_been_modified(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef should_prepare_depreciation_schedule(\n\t\tself, have_asset_details_been_modified, not_manual_depr_or_have_manual_depr_details_been_modified\n\t):",
      "args": [
        "self",
        "have_asset_details_been_modified",
        "not_manual_depr_or_have_manual_depr_details_been_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef set_draft_asset_depr_schedule_details(self, asset_doc, row):",
      "args": [
        "self",
        "asset_doc",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef make_depr_schedule(\n\t\tself,\n\t\tasset_doc,\n\t\trow,\n\t\tdate_of_disposal=None,\n\t\tupdate_asset_finance_book_row=True,\n\t\tvalue_after_depreciation=None,\n\t):",
      "args": [
        "self",
        "asset_doc",
        "row",
        "date_of_disposal",
        "update_asset_finance_book_row",
        "value_after_depreciation"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef clear_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef _make_depr_schedule(\n\t\tself,\n\t\tasset_doc,\n\t\trow,\n\t\tstart,\n\t\tdate_of_disposal,\n\t\tupdate_asset_finance_book_row,\n\t\tvalue_after_depreciation,\n\t):",
      "args": [
        "self",
        "asset_doc",
        "row",
        "start",
        "date_of_disposal",
        "update_asset_finance_book_row",
        "value_after_depreciation"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef get_adjusted_depreciation_amount(\n\t\tself, depreciation_amount_without_pro_rata, depreciation_amount_for_last_row\n\t):",
      "args": [
        "self",
        "depreciation_amount_without_pro_rata",
        "depreciation_amount_for_last_row"
      ]
    },
    {
      "type": "method",
      "line_start": 471,
      "code_text": "\tdef get_depreciation_amount_for_first_row(self):\n\t\treturn self.get(\"depreciation_schedule\")[0].depreciation_amount",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 474,
      "code_text": "\tdef add_depr_schedule_row(self, schedule_date, depreciation_amount, schedule_idx):",
      "args": [
        "self",
        "schedule_date",
        "depreciation_amount",
        "schedule_idx"
      ]
    },
    {
      "type": "method",
      "line_start": 493,
      "code_text": "\tdef set_accumulated_depreciation(\n\t\tself,\n\t\tasset_doc,\n\t\trow,\n\t\tdate_of_disposal=None,\n\t\tdate_of_return=None,\n\t\tignore_booked_entry=False,\n\t):",
      "args": [
        "self",
        "asset_doc",
        "row",
        "date_of_disposal",
        "date_of_return",
        "ignore_booked_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 550,
      "code_text": "def _get_value_after_depreciation_for_making_schedule(asset_doc, fb_row):",
      "args": [
        "asset_doc",
        "fb_row"
      ]
    },
    {
      "type": "function",
      "line_start": 598,
      "code_text": "def _get_modified_available_for_use_date(asset_doc, row, wdv_or_dd_non_yearly=False):",
      "args": [
        "asset_doc",
        "row",
        "wdv_or_dd_non_yearly"
      ]
    },
    {
      "type": "function",
      "line_start": 674,
      "code_text": "def get_straight_line_or_manual_depr_amount(\n\tasset_depr_schedule, asset, row, schedule_idx, number_of_pending_depreciations\n):",
      "args": [
        "asset_depr_schedule",
        "asset",
        "row",
        "schedule_idx",
        "number_of_pending_depreciations"
      ]
    },
    {
      "type": "function",
      "line_start": 731,
      "code_text": "def get_daily_depr_amount(asset, row, schedule_idx, amount):",
      "args": [
        "asset",
        "row",
        "schedule_idx",
        "amount"
      ]
    },
    {
      "type": "function",
      "line_start": 787,
      "code_text": "def get_shift_depr_amount(asset_depr_schedule, asset, row, schedule_idx):",
      "args": [
        "asset_depr_schedule",
        "asset",
        "row",
        "schedule_idx"
      ]
    },
    {
      "type": "function",
      "line_start": 823,
      "code_text": "def get_wdv_or_dd_depr_amount(\n\tasset,\n\tfb_row,\n\tdepreciable_value,\n\tyearly_opening_wdv,\n\tschedule_idx,\n\tprev_depreciation_amount,\n\thas_wdv_or_dd_non_yearly_pro_rata,\n\tasset_depr_schedule,\n\tprev_per_day_depr,\n):",
      "args": [
        "asset",
        "fb_row",
        "depreciable_value",
        "yearly_opening_wdv",
        "schedule_idx",
        "prev_depreciation_amount",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "asset_depr_schedule",
        "prev_per_day_depr"
      ]
    },
    {
      "type": "function",
      "line_start": 846,
      "code_text": "def get_default_wdv_or_dd_depr_amount(\n\tasset,\n\tfb_row,\n\tdepreciable_value,\n\tschedule_idx,\n\tprev_depreciation_amount,\n\thas_wdv_or_dd_non_yearly_pro_rata,\n\tasset_depr_schedule,\n\tprev_per_day_depr,\n):",
      "args": [
        "asset",
        "fb_row",
        "depreciable_value",
        "schedule_idx",
        "prev_depreciation_amount",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "asset_depr_schedule",
        "prev_per_day_depr"
      ]
    },
    {
      "type": "function",
      "line_start": 879,
      "code_text": "def _get_default_wdv_or_dd_depr_amount(\n\tasset,\n\tfb_row,\n\tdepreciable_value,\n\tschedule_idx,\n\tprev_depreciation_amount,\n\thas_wdv_or_dd_non_yearly_pro_rata,\n\tasset_depr_schedule,\n):",
      "args": [
        "asset",
        "fb_row",
        "depreciable_value",
        "schedule_idx",
        "prev_depreciation_amount",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "asset_depr_schedule"
      ]
    },
    {
      "type": "function",
      "line_start": 913,
      "code_text": "def _get_daily_prorata_based_default_wdv_or_dd_depr_amount(\n\tasset,\n\tfb_row,\n\tdepreciable_value,\n\tschedule_idx,\n\tprev_depreciation_amount,\n\thas_wdv_or_dd_non_yearly_pro_rata,\n\tasset_depr_schedule,\n\tprev_per_day_depr,\n):",
      "args": [
        "asset",
        "fb_row",
        "depreciable_value",
        "schedule_idx",
        "prev_depreciation_amount",
        "has_wdv_or_dd_non_yearly_pro_rata",
        "asset_depr_schedule",
        "prev_per_day_depr"
      ]
    },
    {
      "type": "function",
      "line_start": 962,
      "code_text": "def get_per_day_depr(\n\tfb_row,\n\tdepreciable_value,\n\tfrom_date,\n):",
      "args": [
        "fb_row",
        "depreciable_value",
        "from_date"
      ]
    },
    {
      "type": "function",
      "line_start": 982,
      "code_text": "def make_draft_asset_depr_schedules_if_not_present(asset_doc):",
      "args": [
        "asset_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 997,
      "code_text": "def make_draft_asset_depr_schedules(asset_doc):",
      "args": [
        "asset_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1017,
      "code_text": "def update_draft_asset_depr_schedules(asset_doc):",
      "args": [
        "asset_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1029,
      "code_text": "def convert_draft_asset_depr_schedules_into_active(asset_doc):",
      "args": [
        "asset_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1039,
      "code_text": "def cancel_asset_depr_schedules(asset_doc):",
      "args": [
        "asset_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1188,
      "code_text": "def is_first_day_of_the_month(date):\n\tfirst_day_of_the_month = get_first_day(date)\n\n\treturn getdate(first_day_of_the_month) == getdate(date)",
      "args": [
        "date"
      ]
    }
  ],
  "erpnext\\utilities\\bulk_transaction.py": [
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def task(doc_name, from_doctype, to_doctype):",
      "args": [
        "doc_name",
        "from_doctype",
        "to_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def job(deserialized_data, from_doctype, to_doctype, args):",
      "args": [
        "deserialized_data",
        "from_doctype",
        "to_doctype",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def update_log(log_name, status, retried, err=None):\n\tfrappe.db.set_value(\"Bulk Transaction Log Detail\", log_name, \"transaction_status\", status)\n\tfrappe.db.set_value(\"Bulk Transaction Log Detail\", log_name, \"retried\", retried)\n\tif err:\n\t\tfrappe.db.set_value(\"Bulk Transaction Log Detail\", log_name, \"error_description\", err)",
      "args": [
        "log_name",
        "status",
        "retried",
        "err"
      ]
    },
    {
      "type": "function",
      "line_start": 172,
      "code_text": "def create_log(doc_name, e, from_doctype, to_doctype, status, log_date=None, restarted=0):",
      "args": [
        "doc_name",
        "e",
        "from_doctype",
        "to_doctype",
        "status",
        "log_date",
        "restarted"
      ]
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def transaction_processing(data, from_doctype, to_doctype, args=None):",
      "args": [
        "data",
        "from_doctype",
        "to_doctype",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def retry(date: str | None = None):",
      "args": [
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def retry_failed_transactions(failed_docs: list | None):",
      "args": [
        "failed_docs"
      ]
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def show_job_status(fail_count, deserialized_data_count, to_doctype):",
      "args": [
        "fail_count",
        "deserialized_data_count",
        "to_doctype"
      ]
    }
  ],
  "erpnext\\accounts\\report\\purchase_register\\test_purchase_register.py": [
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def make_purchase_invoice():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 112,
      "code_text": "def make_payment_entry():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestPurchaseRegister(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_purchase_register(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef test_purchase_register_ledger_view(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def create_purchase_invoice_with_taxes():",
      "args": []
    }
  ],
  "erpnext\\controllers\\subcontracting_controller.py": [
    {
      "type": "function",
      "line_start": 1131,
      "code_text": "def get_item_details(items):",
      "args": [
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 1158,
      "code_text": "def make_rm_stock_entry(\n\tsubcontract_order, rm_items=None, order_doctype=\"Subcontracting Order\", target_doc=None\n):",
      "args": [
        "subcontract_order",
        "rm_items",
        "order_doctype",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1332,
      "code_text": "def get_materials_from_supplier(subcontract_order, rm_details, order_doctype=\"Subcontracting Order\"):",
      "args": [
        "subcontract_order",
        "rm_details",
        "order_doctype"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class SubcontractingController(StockController):"
    },
    {
      "type": "function",
      "line_start": 1260,
      "code_text": "def add_items_in_ste(ste_doc, row, qty, rm_details, rm_detail_field=\"sco_rm_detail\", batch_no=None):",
      "args": [
        "ste_doc",
        "row",
        "qty",
        "rm_details",
        "rm_detail_field",
        "batch_no"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef before_validate(self):\n\t\tif self.doctype in [\"Subcontracting Order\", \"Subcontracting Receipt\"]:\n\t\t\tself.remove_empty_rows()\n\t\t\tself.set_items_conversion_factor()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate(self):\n\t\tif self.doctype in [\"Subcontracting Order\", \"Subcontracting Receipt\"]:\n\t\t\tself.validate_items()\n\t\t\tself.create_raw_materials_supplied()\n\t\telse:\n\t\t\tsuper().validate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef validate_rejected_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef remove_empty_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef set_items_conversion_factor(self):\n\t\tfor item in self.get(\"items\"):\n\t\t\tif not item.conversion_factor:\n\t\t\t\titem.conversion_factor = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef validate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 150,
      "code_text": "\tdef __get_data_before_save(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef __identify_change_in_item_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef __get_backflush_based_on(self):\n\t\tself.backflush_based_on = frappe.db.get_single_value(\n\t\t\t\"Buying Settings\", \"backflush_raw_materials_of_subcontract_based_on\"\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef initialized_fields(self):\n\t\tself.available_materials = frappe._dict()\n\t\tself.__transferred_items = frappe._dict()\n\t\tself.alternative_item_details = frappe._dict()\n\t\tself.__get_backflush_based_on()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef __get_subcontract_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef __get_pending_qty_to_receive(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef __get_transferred_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef __set_alternative_item_details(self, row):\n\t\tif row.get(\"original_item\"):\n\t\t\tself.alternative_item_details[row.get(\"original_item\")] = row",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 275,
      "code_text": "\tdef __get_received_items(self, doctype):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef __get_consumed_items(self, doctype, receipt_items):",
      "args": [
        "self",
        "doctype",
        "receipt_items"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef __update_consumed_materials(self, doctype, return_consumed_items=False):",
      "args": [
        "self",
        "doctype",
        "return_consumed_items"
      ]
    },
    {
      "type": "method",
      "line_start": 374,
      "code_text": "\tdef get_available_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 453,
      "code_text": "\tdef __remove_changed_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef __remove_serial_and_batch_bundle(self, item):\n\t\tif item.serial_and_batch_bundle:\n\t\t\tfrappe.delete_doc(\"Serial and Batch Bundle\", item.serial_and_batch_bundle, force=True)",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 476,
      "code_text": "\tdef __get_materials_from_bom(self, item_code, bom_no, exploded_item=0):",
      "args": [
        "self",
        "item_code",
        "bom_no",
        "exploded_item"
      ]
    },
    {
      "type": "method",
      "line_start": 506,
      "code_text": "\tdef __update_reserve_warehouse(self, row, item):\n\t\tif self.doctype == self.subcontract_data.order_doctype:\n\t\t\trow.reserve_warehouse = self.set_reserve_warehouse or item.warehouse",
      "args": [
        "self",
        "row",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 510,
      "code_text": "\tdef __set_alternative_item(self, bom_item):\n\t\tif self.alternative_item_details.get(bom_item.rm_item_code):\n\t\t\tbom_item.update(self.alternative_item_details[bom_item.rm_item_code])",
      "args": [
        "self",
        "bom_item"
      ]
    },
    {
      "type": "method",
      "line_start": 514,
      "code_text": "\tdef __set_serial_and_batch_bundle(self, item_row, rm_obj, qty):",
      "args": [
        "self",
        "item_row",
        "rm_obj",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef __get_batch_nos_for_bundle(self, qty, key):",
      "args": [
        "self",
        "qty",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef __get_serial_nos_for_bundle(self, qty, key):",
      "args": [
        "self",
        "qty",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 584,
      "code_text": "\tdef __add_supplied_item(self, item_row, bom_item, qty):",
      "args": [
        "self",
        "item_row",
        "bom_item",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 617,
      "code_text": "\tdef update_rate_for_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef get_item_row(self, reference_name):\n\t\tfor item in self.items:\n\t\t\tif item.name == reference_name:\n\t\t\t\treturn item",
      "args": [
        "self",
        "reference_name"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef set_rate_for_supplied_items(self, rm_obj, item_row):",
      "args": [
        "self",
        "rm_obj",
        "item_row"
      ]
    },
    {
      "type": "method",
      "line_start": 662,
      "code_text": "\tdef __set_batch_nos(self, bom_item, item_row, rm_obj, qty):",
      "args": [
        "self",
        "bom_item",
        "item_row",
        "rm_obj",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 698,
      "code_text": "\tdef __set_consumed_qty(self, rm_obj, consumed_qty, required_qty=0):\n\t\trm_obj.required_qty = flt(required_qty, rm_obj.precision(\"required_qty\"))\n\t\trm_obj.consumed_qty = flt(consumed_qty, rm_obj.precision(\"consumed_qty\"))",
      "args": [
        "self",
        "rm_obj",
        "consumed_qty",
        "required_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 702,
      "code_text": "\tdef __set_serial_nos(self, item_row, rm_obj):",
      "args": [
        "self",
        "item_row",
        "rm_obj"
      ]
    },
    {
      "type": "method",
      "line_start": 712,
      "code_text": "\tdef __set_batch_no_as_per_qty(self, item_row, rm_obj, batch_no, qty):",
      "args": [
        "self",
        "item_row",
        "rm_obj",
        "batch_no",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 724,
      "code_text": "\tdef __get_qty_based_on_material_transfer(self, item_row, transfer_item):",
      "args": [
        "self",
        "item_row",
        "transfer_item"
      ]
    },
    {
      "type": "method",
      "line_start": 741,
      "code_text": "\tdef __set_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 779,
      "code_text": "\tdef __set_rate_for_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 791,
      "code_text": "\tdef __modify_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 830,
      "code_text": "\tdef __get_bundle_to_modify(self, name):",
      "args": [
        "self",
        "name"
      ]
    },
    {
      "type": "method",
      "line_start": 840,
      "code_text": "\tdef __prepare_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 850,
      "code_text": "\tdef __validate_batch_no(self, row, key):",
      "args": [
        "self",
        "row",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 860,
      "code_text": "\tdef __validate_serial_no(self, row, key):",
      "args": [
        "self",
        "row",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 873,
      "code_text": "\tdef __validate_supplied_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 885,
      "code_text": "\tdef set_materials_for_subcontracted_items(self, raw_material_table):",
      "args": [
        "self",
        "raw_material_table"
      ]
    },
    {
      "type": "method",
      "line_start": 894,
      "code_text": "\tdef create_raw_materials_supplied(self, raw_material_table=\"supplied_items\"):\n\t\tself.set_materials_for_subcontracted_items(raw_material_table)\n\n\t\tif self.doctype in [\"Subcontracting Receipt\", \"Purchase Receipt\", \"Purchase Invoice\"]:\n\t\t\tfor item in self.get(\"items\"):\n\t\t\t\titem.rm_supp_cost = 0.0",
      "args": [
        "self",
        "raw_material_table"
      ]
    },
    {
      "type": "method",
      "line_start": 901,
      "code_text": "\tdef __update_consumed_qty_in_subcontract_order(self, itemwise_consumed_qty):",
      "args": [
        "self",
        "itemwise_consumed_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 919,
      "code_text": "\tdef set_consumed_qty_in_subcontract_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 942,
      "code_text": "\tdef update_ordered_and_reserved_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 961,
      "code_text": "\tdef make_sl_entries_for_supplier_warehouse(self, sl_entries):",
      "args": [
        "self",
        "sl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 979,
      "code_text": "\tdef update_stock_ledger(self, allow_negative_stock=False, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 1021,
      "code_text": "\tdef get_supplied_items_cost(self, item_row_id, reset_outgoing_rate=True):",
      "args": [
        "self",
        "item_row_id",
        "reset_outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 1052,
      "code_text": "\tdef set_subcontracting_order_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1063,
      "code_text": "\tdef calculate_additional_costs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1088,
      "code_text": "\tdef get_current_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1100,
      "code_text": "\tdef sub_contracted_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1112,
      "code_text": "\tdef update_requested_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1147,
      "code_text": "def get_pending_subcontracted_quantity(po_name):",
      "args": [
        "po_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1280,
      "code_text": "def make_return_stock_entry_for_subcontract(\n\tavailable_materials, order_doc, rm_details, order_doctype=\"Subcontracting Order\"\n):",
      "args": [
        "available_materials",
        "order_doc",
        "rm_details",
        "order_doctype"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_entry\\test_payment_entry.py": [
    {
      "type": "function",
      "line_start": 1944,
      "code_text": "def create_payment_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 2040,
      "code_text": "def create_customer(name=\"_Test Customer 2 USD\", currency=\"USD\"):",
      "args": [
        "name",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 1973,
      "code_text": "def create_payment_terms_template():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 2035,
      "code_text": "def create_payment_term(name):\n\tif not frappe.db.exists(\"Payment Term\", name):\n\t\tfrappe.get_doc({\"doctype\": \"Payment Term\", \"payment_term_name\": name}).insert()",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 2003,
      "code_text": "def create_payment_terms_template_with_discount(\n\tname=None, discount_type=None, discount=None, template_name=None\n):",
      "args": [
        "name",
        "discount_type",
        "discount",
        "template_name"
      ]
    },
    {
      "type": "class",
      "line_start": 31,
      "code_text": "class UnitTestPaymentEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 40,
      "code_text": "class TestPaymentEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef get_journals_for(self, voucher_type: str, voucher_no: str) -> list:",
      "args": [
        "self",
        "voucher_type: str",
        "voucher_no: str"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef test_payment_entry_against_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef test_payment_against_sales_order_usd_to_inr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef test_payment_entry_for_blocked_supplier_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef test_payment_entry_for_blocked_supplier_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef test_payment_entry_for_blocked_supplier_payments_today_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef test_payment_entry_for_blocked_supplier_payments_past_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef test_payment_entry_against_si_usd_to_usd(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef test_payment_entry_against_pi(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef test_payment_against_sales_invoice_to_check_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef test_payment_entry_against_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef test_payment_entry_against_payment_terms_with_discount_on_pi(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 338,
      "code_text": "\tdef test_payment_entry_against_payment_terms_with_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 384,
      "code_text": "\tdef test_payment_entry_against_payment_terms_with_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 446,
      "code_text": "\tdef test_payment_entry_multicurrency_si_with_base_currency_accounting_early_payment_discount(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 502,
      "code_text": "\tdef test_payment_entry_multicurrency_accounting_si_with_early_payment_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 559,
      "code_text": "\tdef test_payment_against_purchase_invoice_to_check_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef test_payment_entry_against_si_usd_to_inr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 624,
      "code_text": "\tdef test_payment_entry_against_si_usd_to_usd_with_deduction_in_base_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 654,
      "code_text": "\tdef test_payment_entry_retrieves_last_exchange_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef test_internal_transfer_usd_to_inr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 714,
      "code_text": "\tdef test_payment_against_negative_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 794,
      "code_text": "\tdef validate_gl_entries(self, voucher_no, expected_gle):",
      "args": [
        "self",
        "voucher_no",
        "expected_gle"
      ]
    },
    {
      "type": "method",
      "line_start": 805,
      "code_text": "\tdef get_gle(self, voucher_no):",
      "args": [
        "self",
        "voucher_no"
      ]
    },
    {
      "type": "method",
      "line_start": 814,
      "code_text": "\tdef test_payment_entry_write_off_difference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 847,
      "code_text": "\tdef test_payment_entry_exchange_gain_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 883,
      "code_text": "\tdef test_payment_entry_against_sales_invoice_with_cost_centre(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 920,
      "code_text": "\tdef test_payment_entry_against_purchase_invoice_with_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 957,
      "code_text": "\tdef test_payment_entry_account_and_party_balance_with_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 991,
      "code_text": "\tdef test_gl_of_multi_currency_payment_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1035,
      "code_text": "\tdef test_multi_currency_payment_entry_with_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1056,
      "code_text": "\tdef test_gl_of_multi_currency_payment_with_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1096,
      "code_text": "\tdef test_payment_entry_against_onhold_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1111,
      "code_text": "\tdef test_payment_entry_for_employee(self):\n\t\temployee = make_employee(\"test_payment_entry@salary.com\", company=\"_Test Company\")\n\t\tcreate_payment_entry(party_type=\"Employee\", party=employee, save=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1115,
      "code_text": "\tdef test_duplicate_payment_entry_allocate_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1126,
      "code_text": "\tdef test_duplicate_payment_entry_partial_allocate_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1139,
      "code_text": "\tdef test_details_update_on_reference_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1177,
      "code_text": "\tdef test_overallocation_validation_on_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1272,
      "code_text": "\tdef test_overallocation_validation_shouldnt_misfire(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1310,
      "code_text": "\tdef test_allocation_validation_for_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1328,
      "code_text": "\tdef test_outstanding_invoices_api(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1365,
      "code_text": "\tdef test_receive_payment_from_payable_party_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1385,
      "code_text": "\tdef test_payment_against_partial_return_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1434,
      "code_text": "\tdef test_ledger_entries_for_advance_as_liability(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1556,
      "code_text": "\tdef test_advance_as_liability_against_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1618,
      "code_text": "\tdef check_pl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1630,
      "code_text": "\tdef check_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1646,
      "code_text": "\tdef test_reverse_payment_reconciliation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1685,
      "code_text": "\tdef test_advance_reverse_payment_reconciliation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1808,
      "code_text": "\tdef test_opening_flag_for_advance_as_liability(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1871,
      "code_text": "\tdef test_delete_linked_exchange_gain_loss_journal(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\doctype\\issue\\test_issue.py": [
    {
      "type": "function",
      "line_start": 528,
      "code_text": "def create_issue_and_communication(issue_creation, first_responded_on):",
      "args": [
        "issue_creation",
        "first_responded_on"
      ]
    },
    {
      "type": "function",
      "line_start": 595,
      "code_text": "def create_communication(reference_name, sender, sent_or_received, creation):",
      "args": [
        "reference_name",
        "sender",
        "sent_or_received",
        "creation"
      ]
    },
    {
      "type": "function",
      "line_start": 538,
      "code_text": "def make_issue(creation=None, customer=None, index=0, priority=None, issue_type=None):",
      "args": [
        "creation",
        "customer",
        "index",
        "priority",
        "issue_type"
      ]
    },
    {
      "type": "function",
      "line_start": 563,
      "code_text": "def create_customer(name, customer_group, territory):",
      "args": [
        "name",
        "customer_group",
        "territory"
      ]
    },
    {
      "type": "function",
      "line_start": 578,
      "code_text": "def create_customer_group(customer_group):\n\tif not frappe.db.exists(\"Customer Group\", {\"customer_group_name\": customer_group}):\n\t\tfrappe.get_doc({\"doctype\": \"Customer Group\", \"customer_group_name\": customer_group}).insert(\n\t\t\tignore_permissions=True\n\t\t)",
      "args": [
        "customer_group"
      ]
    },
    {
      "type": "function",
      "line_start": 585,
      "code_text": "def create_territory(territory):",
      "args": [
        "territory"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestSetUp(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestIssue(TestSetUp):"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_response_time_and_resolution_time_based_on_different_sla(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef test_hold_time_on_replied(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef test_issue_close_after_on_hold(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef test_issue_open_after_closed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef test_recording_of_assignment_on_first_reponse_failure(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 243,
      "code_text": "\tdef test_agreement_status_on_response(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 259,
      "code_text": "class TestFirstResponseTime(TestSetUp):"
    },
    {
      "type": "method",
      "line_start": 264,
      "code_text": "\tdef test_first_response_time_case1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef test_first_response_time_case2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 282,
      "code_text": "\tdef test_first_response_time_case3(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 291,
      "code_text": "\tdef test_first_response_time_case4(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef test_first_response_time_case5(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 310,
      "code_text": "\tdef test_first_response_time_case6(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef test_first_response_time_case7(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef test_first_response_time_case8(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 337,
      "code_text": "\tdef test_first_response_time_case9(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef test_first_response_time_case10(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef test_first_response_time_case11(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 364,
      "code_text": "\tdef test_first_response_time_case12(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 373,
      "code_text": "\tdef test_first_response_time_case13(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 382,
      "code_text": "\tdef test_first_response_time_case14(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 391,
      "code_text": "\tdef test_first_response_time_case15(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 400,
      "code_text": "\tdef test_first_response_time_case16(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef test_first_response_time_case17(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 419,
      "code_text": "\tdef test_first_response_time_case18(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 428,
      "code_text": "\tdef test_first_response_time_case19(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 437,
      "code_text": "\tdef test_first_response_time_case20(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 446,
      "code_text": "\tdef test_first_response_time_case21(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef test_first_response_time_case22(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 464,
      "code_text": "\tdef test_first_response_time_case23(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 473,
      "code_text": "\tdef test_first_response_time_case24(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 482,
      "code_text": "\tdef test_first_response_time_case25(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 491,
      "code_text": "\tdef test_first_response_time_case26(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 500,
      "code_text": "\tdef test_first_response_time_case27(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 509,
      "code_text": "\tdef test_first_response_time_case28(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 518,
      "code_text": "\tdef test_first_response_time_case29(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\doctype\\service_level_agreement\\service_level_agreement.py": [
    {
      "type": "function",
      "line_start": 1008,
      "code_text": "def now_datetime(user):\n\tdt = convert_utc_to_user_timezone(datetime.utcnow(), user)\n\treturn dt.replace(tzinfo=None)",
      "args": [
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 401,
      "code_text": "def get_context(doc):\n\treturn {\n\t\t\"doc\": doc.as_dict(),\n\t\t\"nowdate\": nowdate,\n\t\t\"frappe\": frappe._dict(utils=get_safe_globals().get(\"frappe\").get(\"utils\")),\n\t}",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 486,
      "code_text": "def set_documents_with_active_service_level_agreement():\n\tactive = frozenset(\n\t\tsla.document_type for sla in frappe.get_all(\"Service Level Agreement\", fields=[\"document_type\"])\n\t)\n\tfrappe.cache.set_value(\"doctypes_with_active_sla\", active)\n\treturn active",
      "args": []
    },
    {
      "type": "function",
      "line_start": 902,
      "code_text": "def get_service_level_agreement_fields():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 976,
      "code_text": "def update_agreement_status(doc, apply_sla_for_resolution):",
      "args": [
        "doc",
        "apply_sla_for_resolution"
      ]
    },
    {
      "type": "function",
      "line_start": 997,
      "code_text": "def is_holiday(date, holidays):\n\treturn getdate(date) in holidays",
      "args": [
        "date",
        "holidays"
      ]
    },
    {
      "type": "function",
      "line_start": 409,
      "code_text": "def get_customer_group(customer):",
      "args": [
        "customer"
      ]
    },
    {
      "type": "function",
      "line_start": 419,
      "code_text": "def get_customer_territory(customer):",
      "args": [
        "customer"
      ]
    },
    {
      "type": "function",
      "line_start": 465,
      "code_text": "def get_repeated(values):",
      "args": [
        "values"
      ]
    },
    {
      "type": "function",
      "line_start": 536,
      "code_text": "def handle_status_change(doc, apply_sla_for_resolution):",
      "args": [
        "doc",
        "apply_sla_for_resolution"
      ]
    },
    {
      "type": "function",
      "line_start": 633,
      "code_text": "def update_response_and_resolution_metrics(doc, apply_sla_for_resolution):\n\tpriority = get_response_and_resolution_duration(doc)\n\tstart_date_time = get_datetime(doc.get(\"service_level_agreement_creation\") or doc.creation)\n\tset_response_by(doc, start_date_time, priority)\n\tif apply_sla_for_resolution and not doc.get(\"on_hold_since\"):  # resolution_by is reset if on hold\n\t\tset_resolution_by(doc, start_date_time, priority)",
      "args": [
        "doc",
        "apply_sla_for_resolution"
      ]
    },
    {
      "type": "function",
      "line_start": 641,
      "code_text": "def get_expected_time_for(parameter, service_level, start_date_time):",
      "args": [
        "parameter",
        "service_level",
        "start_date_time"
      ]
    },
    {
      "type": "function",
      "line_start": 715,
      "code_text": "def set_resolution_time(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 795,
      "code_text": "def reset_resolution_metrics(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 861,
      "code_text": "def reset_expected_response_and_resolution(doc):\n\tif doc.meta.has_field(\"first_responded_on\") and not doc.get(\"first_responded_on\"):\n\t\tdoc.response_by = None\n\tif doc.meta.has_field(\"sla_resolution_by\") and not doc.get(\"sla_resolution_date\"):\n\t\tdoc.sla_resolution_by = None",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1035,
      "code_text": "def get_sla_doctypes():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 31,
      "code_text": "class ServiceLevelAgreement(Document):"
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef check_priorities(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef check_support_and_resolution(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef validate_doc(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef validate_selected_doctype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef validate_status_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef validate_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 219,
      "code_text": "\tdef get_service_level_agreement_priority(self, priority):",
      "args": [
        "self",
        "priority"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef before_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 243,
      "code_text": "\tdef on_trash(self):\n\t\tset_documents_with_active_service_level_agreement()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 246,
      "code_text": "\tdef after_insert(self):\n\t\tset_documents_with_active_service_level_agreement()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef on_update(self):\n\t\tset_documents_with_active_service_level_agreement()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 252,
      "code_text": "\tdef clear_cache(self):\n\t\tget_sla_doctypes.clear_cache()\n\t\treturn super().clear_cache()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef create_docfields(self, meta, service_level_agreement_fields):",
      "args": [
        "self",
        "meta",
        "service_level_agreement_fields"
      ]
    },
    {
      "type": "method",
      "line_start": 288,
      "code_text": "\tdef create_custom_fields(self, meta, service_level_agreement_fields):",
      "args": [
        "self",
        "meta",
        "service_level_agreement_fields"
      ]
    },
    {
      "type": "method",
      "line_start": 311,
      "code_text": "\tdef reset_field_properties(self, field, field_dt, sla_field):",
      "args": [
        "self",
        "field",
        "field_dt",
        "sla_field"
      ]
    },
    {
      "type": "function",
      "line_start": 326,
      "code_text": "def check_agreement_status():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 339,
      "code_text": "def get_active_service_level_agreement_for(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 430,
      "code_text": "def get_service_level_agreement_filters(doctype, name, customer=None):",
      "args": [
        "doctype",
        "name",
        "customer"
      ]
    },
    {
      "type": "function",
      "line_start": 477,
      "code_text": "def get_documents_with_active_service_level_agreement():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 494,
      "code_text": "def apply(doc, method=None):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 516,
      "code_text": "def remove_sla_if_applied(doc):\n\tdoc.service_level_agreement = None\n\tdoc.response_by = None\n\tdoc.sla_resolution_by = None",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 522,
      "code_text": "def process_sla(doc, sla):",
      "args": [
        "doc",
        "sla"
      ]
    },
    {
      "type": "function",
      "line_start": 615,
      "code_text": "def get_fulfillment_statuses(service_level_agreement):",
      "args": [
        "service_level_agreement"
      ]
    },
    {
      "type": "function",
      "line_start": 624,
      "code_text": "def get_hold_statuses(service_level_agreement):",
      "args": [
        "service_level_agreement"
      ]
    },
    {
      "type": "function",
      "line_start": 691,
      "code_text": "def get_allotted_seconds(parameter, service_level):",
      "args": [
        "parameter",
        "service_level"
      ]
    },
    {
      "type": "function",
      "line_start": 703,
      "code_text": "def get_support_days(service_level):",
      "args": [
        "service_level"
      ]
    },
    {
      "type": "function",
      "line_start": 746,
      "code_text": "def change_service_level_agreement_and_priority(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 767,
      "code_text": "def get_response_and_resolution_duration(doc):\n\tsla = frappe.get_doc(\"Service Level Agreement\", doc.service_level_agreement)\n\tpriority = sla.get_service_level_agreement_priority(doc.priority)\n\tpriority.update({\"support_and_resolution\": sla.support_and_resolution, \"holiday_list\": sla.holiday_list})\n\treturn priority",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 775,
      "code_text": "def reset_service_level_agreement(doctype: str, docname: str, reason, user):",
      "args": [
        "doctype: str",
        "docname: str",
        "reason",
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 807,
      "code_text": "def on_communication_update(doc, status):",
      "args": [
        "doc",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 868,
      "code_text": "def set_response_by(doc, start_date_time, priority):",
      "args": [
        "doc",
        "start_date_time",
        "priority"
      ]
    },
    {
      "type": "function",
      "line_start": 881,
      "code_text": "def set_resolution_by(doc, start_date_time, priority):",
      "args": [
        "doc",
        "start_date_time",
        "priority"
      ]
    },
    {
      "type": "function",
      "line_start": 892,
      "code_text": "def record_assigned_users_on_failure(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 971,
      "code_text": "def update_agreement_status_on_custom_status(doc):\n\t# Update Agreement Fulfilled status using Custom Scripts for Custom Status\n\tupdate_agreement_status(doc)",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1001,
      "code_text": "def get_time_in_timedelta(time):\n\t\"\"\"Converts datetime.time(10, 36, 55, 961454) to datetime.timedelta(seconds=38215).\"\"\"\n\timport datetime\n\n\treturn datetime.timedelta(hours=time.hour, minutes=time.minute, seconds=time.second)",
      "args": [
        "time"
      ]
    },
    {
      "type": "function",
      "line_start": 1013,
      "code_text": "def convert_utc_to_user_timezone(utc_timestamp, user):",
      "args": [
        "utc_timestamp",
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 1024,
      "code_text": "def get_tz(user):\n\treturn frappe.db.get_value(\"User\", user, \"time_zone\") or get_system_timezone()",
      "args": [
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 1029,
      "code_text": "def get_user_time(user, to_string=False):\n\treturn get_datetime_str(now_datetime(user)) if to_string else now_datetime(user)",
      "args": [
        "user",
        "to_string"
      ]
    },
    {
      "type": "function",
      "line_start": 1045,
      "code_text": "def add_sla_doctypes(bootinfo):\n\tbootinfo.service_level_agreement_doctypes = get_sla_doctypes()",
      "args": [
        "bootinfo"
      ]
    }
  ],
  "erpnext\\stock\\stock_balance.py": [
    {
      "type": "function",
      "line_start": 91,
      "code_text": "def get_reserved_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def get_ordered_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 211,
      "code_text": "def update_bin_qty(item_code, warehouse, qty_dict=None):",
      "args": [
        "item_code",
        "warehouse",
        "qty_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 151,
      "code_text": "def get_indented_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def repost(only_actual=False, allow_negative_stock=False, allow_zero_rate=False, only_bin=False):",
      "args": [
        "only_actual",
        "allow_negative_stock",
        "allow_zero_rate",
        "only_bin"
      ]
    },
    {
      "type": "function",
      "line_start": 199,
      "code_text": "def get_planned_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def repost_stock(\n\titem_code,\n\twarehouse,\n\tallow_zero_rate=False,\n\tonly_actual=False,\n\tonly_bin=False,\n\tallow_negative_stock=False,\n):",
      "args": [
        "item_code",
        "warehouse",
        "allow_zero_rate",
        "only_actual",
        "only_bin",
        "allow_negative_stock"
      ]
    },
    {
      "type": "function",
      "line_start": 79,
      "code_text": "def get_balance_qty_from_sle(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def repost_actual_qty(item_code, warehouse, allow_zero_rate=False, allow_negative_stock=False):",
      "args": [
        "item_code",
        "warehouse",
        "allow_zero_rate",
        "allow_negative_stock"
      ]
    },
    {
      "type": "function",
      "line_start": 228,
      "code_text": "def set_stock_balance_as_per_serial_no(\n\titem_code=None, posting_date=None, posting_time=None, fiscal_year=None\n):",
      "args": [
        "item_code",
        "posting_date",
        "posting_time",
        "fiscal_year"
      ]
    }
  ],
  "erpnext\\accounts\\report\\balance_sheet\\test_balance_sheet.py": [
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def create_account(account_name: str, parent_account: str, company: str):",
      "args": [
        "account_name: str",
        "parent_account: str",
        "company: str"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def make_journal_entry(rows):",
      "args": [
        "rows"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestBalanceSheet(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef test_balance_sheet(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\warehouse\\test_warehouse.py": [
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def create_warehouse(warehouse_name, properties=None, company=None):",
      "args": [
        "warehouse_name",
        "properties",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def get_warehouse_account(warehouse_name, company, company_abbr=None):",
      "args": [
        "warehouse_name",
        "company",
        "company_abbr"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_warehouse(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class UnitTestWarehouse(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class TestWarehouse(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_parent_warehouse(self):\n\t\tparent_warehouse = frappe.get_doc(\"Warehouse\", \"_Test Warehouse Group - _TC\")\n\t\tself.assertEqual(parent_warehouse.is_group, 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_warehouse_hierarchy(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_naming(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_unlinking_warehouse_from_item_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_group_non_group_conversion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef test_get_children(self):\n\t\tcompany = \"_Test Company\"\n\n\t\tchildren = get_children(\"Warehouse\", parent=company, company=company, is_root=True)\n\t\tself.assertTrue(any(wh[\"value\"] == \"_Test Warehouse - _TC\" for wh in children))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 160,
      "code_text": "def get_group_stock_account(company, company_abbr=None):",
      "args": [
        "company",
        "company_abbr"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\account\\account.py": [
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_account_currency(account):",
      "args": [
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 464,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Account\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 481,
      "code_text": "def update_account_number(name, account_name, account_number=None, from_descendant=False):",
      "args": [
        "name",
        "account_name",
        "account_number",
        "from_descendant"
      ]
    },
    {
      "type": "function",
      "line_start": 543,
      "code_text": "def merge_account(old, new):",
      "args": [
        "old",
        "new"
      ]
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class InvalidAccountMergeError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class RootNotEditable(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 600,
      "code_text": "def _ensure_idle_system():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class BalanceMismatchError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class Account(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\"Accounts Settings\", \"frozen_accounts_modifier\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\"can_freeze_account\", True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef validate_parent_child_account_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef validate_parent(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef set_root_and_report_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef validate_receivable_payable_account_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef validate_root_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef validate_root_company_and_sync_account_to_children(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef validate_group_or_ledger(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef validate_frozen_accounts_modifier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef validate_balance_must_be_debit_or_credit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef validate_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 311,
      "code_text": "\tdef validate_account_number(self, account_number=None):",
      "args": [
        "self",
        "account_number"
      ]
    },
    {
      "type": "method",
      "line_start": 327,
      "code_text": "\tdef create_account_for_child_company(self, parent_acc_name_map, descendants, parent_acc_name):",
      "args": [
        "self",
        "parent_acc_name_map",
        "descendants",
        "parent_acc_name"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef convert_group_to_ledger(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 399,
      "code_text": "\tdef convert_ledger_to_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 410,
      "code_text": "\tdef check_gle_exists(self):\n\t\treturn frappe.db.get_value(\"GL Entry\", {\"account\": self.name})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef check_if_child_exists(self):\n\t\treturn frappe.db.sql(\n\t\t\t\"\"\"select name from `tabAccount` where parent_account = %s\n\t\t\tand docstatus != 2\"\"\",\n\t\t\tself.name,\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef validate_mandatory(self):\n\t\tif not self.root_type:\n\t\t\tthrow(_(\"Root Type is mandatory\"))\n\n\t\tif not self.report_type:\n\t\t\tthrow(_(\"Report Type is mandatory\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 427,
      "code_text": "\tdef on_trash(self):\n\t\t# checks gl entries and if child exists\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\"Account with existing transaction can not be deleted\"))\n\n\t\tsuper().on_trash(True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 437,
      "code_text": "def get_parent_account(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 468,
      "code_text": "def get_account_autoname(account_number, account_name, company):",
      "args": [
        "account_number",
        "account_name",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 580,
      "code_text": "def get_root_company(company):\n\t# return the topmost company in the hierarchy\n\tancestors = get_ancestors_of(\"Company\", company, \"lft asc\")\n\treturn [ancestors[0]] if ancestors else []",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 586,
      "code_text": "def sync_update_account_number_in_child(\n\tdescendants, old_acc_name, account_name, account_number=None, old_acc_number=None\n):",
      "args": [
        "descendants",
        "old_acc_name",
        "account_name",
        "account_number",
        "old_acc_number"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reconciliation\\test_stock_reconciliation.py": [
    {
      "type": "function",
      "line_start": 1523,
      "code_text": "def create_stock_reconciliation(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1450,
      "code_text": "def create_batch_item_with_batch(item_name, batch_id):",
      "args": [
        "item_name",
        "batch_id"
      ]
    },
    {
      "type": "function",
      "line_start": 1603,
      "code_text": "def set_valuation_method(item_code, valuation_method):",
      "args": [
        "item_code",
        "valuation_method"
      ]
    },
    {
      "type": "class",
      "line_start": 31,
      "code_text": "class TestStockReconciliation(IntegrationTestCase, StockTestMixin):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef setUpClass(cls):\n\t\tcreate_batch_or_serial_no_items()\n\t\tsuper().setUpClass()\n\t\tfrappe.db.set_single_value(\"Stock Settings\", \"allow_negative_stock\", 1)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.local.future_sle = {}\n\t\tfrappe.flags.pop(\"dont_execute_stock_reposts\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_reco_for_fifo(self):\n\t\tself._test_reco_sle_gle(\"FIFO\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef test_reco_for_moving_average(self):\n\t\tself._test_reco_sle_gle(\"Moving Average\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef _test_reco_sle_gle(self, valuation_method):",
      "args": [
        "self",
        "valuation_method"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef test_get_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef test_stock_reco_for_serialized_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef test_stock_reco_for_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 269,
      "code_text": "\tdef test_stock_reco_for_serial_and_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 292,
      "code_text": "\tdef test_stock_reco_for_serial_and_batch_item_with_future_dependent_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 345,
      "code_text": "\tdef test_customer_provided_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef test_backdated_stock_reco_qty_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 421,
      "code_text": "\tdef test_backdated_stock_reco_future_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 470,
      "code_text": "\tdef test_backdated_stock_reco_cancellation_future_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 510,
      "code_text": "\tdef test_intermediate_sr_bin_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 551,
      "code_text": "\tdef test_valid_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef test_serial_no_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 602,
      "code_text": "\tdef test_serial_no_creation_and_inactivation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 643,
      "code_text": "\tdef test_serial_no_batch_no_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 676,
      "code_text": "\tdef test_backdated_stock_reco_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 760,
      "code_text": "\tdef test_update_stock_reconciliation_while_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 804,
      "code_text": "\tdef test_make_stock_zero_for_serial_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 864,
      "code_text": "\tdef test_backdated_purchase_receipt_with_stock_reco(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 930,
      "code_text": "\tdef test_balance_qty_for_batch_with_backdated_stock_reco_and_future_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1032,
      "code_text": "\tdef test_stock_reco_and_backdated_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1074,
      "code_text": "\tdef test_not_reconcile_all_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1137,
      "code_text": "\tdef test_not_reconcile_all_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1186,
      "code_text": "\tdef test_stock_reco_with_legacy_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1279,
      "code_text": "\tdef test_skip_reposting_for_entries_after_stock_reco(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1333,
      "code_text": "\tdef test_stock_reco_for_negative_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1411,
      "code_text": "\tdef test_stock_reco_batch_item_current_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1464,
      "code_text": "def insert_existing_sle(warehouse, item_code=\"_Test Item\"):",
      "args": [
        "warehouse",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1492,
      "code_text": "def create_batch_or_serial_no_items():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\period_closing_voucher\\test_period_closing_voucher.py": [
    {
      "type": "function",
      "line_start": 363,
      "code_text": "def create_account():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 379,
      "code_text": "def create_cost_center(cc_name):",
      "args": [
        "cc_name"
      ]
    },
    {
      "type": "function",
      "line_start": 350,
      "code_text": "def create_company():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestPeriodClosingVoucher(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef test_closing_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_cost_center_wise_posting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef test_period_closing_with_finance_book_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef test_gl_entries_restrictions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef test_closing_balance_with_dimensions_and_test_reposting_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 326,
      "code_text": "\tdef make_period_closing_voucher(self, posting_date, submit=True):",
      "args": [
        "self",
        "posting_date",
        "submit"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan\\production_plan.py": [
    {
      "type": "function",
      "line_start": 1525,
      "code_text": "def get_items_for_material_requests(doc, warehouses=None, get_parent_warehouse_data=None):",
      "args": [
        "doc",
        "warehouses",
        "get_parent_warehouse_data"
      ]
    },
    {
      "type": "function",
      "line_start": 1467,
      "code_text": "def get_bin_details(row, company, for_warehouse=None, all_warehouse=False):",
      "args": [
        "row",
        "company",
        "for_warehouse",
        "all_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1231,
      "code_text": "def get_uom_conversion_factor(item_code, uom):\n\treturn frappe.db.get_value(\n\t\t\"UOM Conversion Detail\", {\"parent\": item_code, \"uom\": uom}, \"conversion_factor\"\n\t)",
      "args": [
        "item_code",
        "uom"
      ]
    },
    {
      "type": "function",
      "line_start": 1508,
      "code_text": "def get_warehouse_list(warehouses):",
      "args": [
        "warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1183,
      "code_text": "def get_exploded_items(item_details, company, bom_no, include_non_stock_items, planned_qty=1, doc=None):",
      "args": [
        "item_details",
        "company",
        "bom_no",
        "include_non_stock_items",
        "planned_qty",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1397,
      "code_text": "def get_sales_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1237,
      "code_text": "def get_subitems(\n\tdoc,\n\tdata,\n\titem_details,\n\tbom_no,\n\tcompany,\n\tinclude_non_stock_items,\n\tinclude_subcontracted_items,\n\tparent_qty,\n\tplanned_qty=1,\n):",
      "args": [
        "doc",
        "data",
        "item_details",
        "bom_no",
        "company",
        "include_non_stock_items",
        "include_subcontracted_items",
        "parent_qty",
        "planned_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 1769,
      "code_text": "def get_item_data(item_code):",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1779,
      "code_text": "def get_sub_assembly_items(\n\tsub_assembly_items,\n\tbin_details,\n\tbom_no,\n\tbom_data,\n\tto_produce_qty,\n\tcompany,\n\twarehouse=None,\n\tindent=0,\n\tskip_available_sub_assembly_item=False,\n):",
      "args": [
        "sub_assembly_items",
        "bin_details",
        "bom_no",
        "bom_data",
        "to_produce_qty",
        "company",
        "warehouse",
        "indent",
        "skip_available_sub_assembly_item"
      ]
    },
    {
      "type": "function",
      "line_start": 1896,
      "code_text": "def get_non_completed_production_plans():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 1914,
      "code_text": "def get_raw_materials_of_sub_assembly_items(\n\texisting_sub_assembly_items,\n\titem_details,\n\tcompany,\n\tbom_no,\n\tinclude_non_stock_items,\n\tsub_assembly_items,\n\tplanned_qty=1,\n):",
      "args": [
        "existing_sub_assembly_items",
        "item_details",
        "company",
        "bom_no",
        "include_non_stock_items",
        "sub_assembly_items",
        "planned_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 2028,
      "code_text": "def get_reserved_qty_for_sub_assembly(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class ProductionPlan(Document):"
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef validate_material_request_type(self):\n\t\tfor row in self.get(\"mr_items\"):\n\t\t\tif row.from_warehouse and row.material_request_type != \"Material Transfer\":\n\t\t\t\trow.from_warehouse = \"\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef validate_sales_orders(self, sales_order=None):",
      "args": [
        "self",
        "sales_order"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef set_pending_qty_in_row_without_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef calculate_total_planned_qty(self):\n\t\tself.total_planned_qty = 0\n\t\tfor d in self.po_items:\n\t\t\tself.total_planned_qty += flt(d.planned_qty)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef validate_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 178,
      "code_text": "\tdef _rename_temporary_references(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef get_open_sales_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 200,
      "code_text": "\tdef add_so_in_table(self, open_so):",
      "args": [
        "self",
        "open_so"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef get_pending_material_requests(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef add_mr_in_table(self, pending_mr):",
      "args": [
        "self",
        "pending_mr"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef combine_so_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 297,
      "code_text": "\tdef get_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 305,
      "code_text": "\tdef get_so_mr_list(self, field, table):\n\t\t\"\"\"Returns a list of Sales Orders or Material Requests from the respective tables\"\"\"\n\t\tso_mr_list = [d.get(field) for d in self.get(table) if d.get(field)]\n\t\treturn so_mr_list",
      "args": [
        "self",
        "field",
        "table"
      ]
    },
    {
      "type": "method",
      "line_start": 310,
      "code_text": "\tdef get_bom_item_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef get_so_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef get_mr_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef add_items(self, items):",
      "args": [
        "self",
        "items"
      ]
    },
    {
      "type": "method",
      "line_start": 521,
      "code_text": "\tdef add_pp_ref(self, refs):",
      "args": [
        "self",
        "refs"
      ]
    },
    {
      "type": "method",
      "line_start": 534,
      "code_text": "\tdef calculate_total_produced_qty(self):\n\t\tself.total_produced_qty = 0\n\t\tfor d in self.po_items:\n\t\t\tself.total_produced_qty += flt(d.produced_qty)\n\n\t\tself.db_set(\"total_produced_qty\", self.total_produced_qty, update_modified=False)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 541,
      "code_text": "\tdef update_produced_pending_qty(self, produced_qty, production_plan_item):",
      "args": [
        "self",
        "produced_qty",
        "production_plan_item"
      ]
    },
    {
      "type": "method",
      "line_start": 552,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_bin_qty()\n\t\tself.update_sales_order()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 556,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")\n\t\tself.delete_draft_work_order()\n\t\tself.update_bin_qty()\n\t\tself.update_sales_order()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 562,
      "code_text": "\tdef update_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 580,
      "code_text": "\tdef get_so_wise_planned_qty(sales_orders):",
      "args": [
        "sales_orders"
      ]
    },
    {
      "type": "method",
      "line_start": 599,
      "code_text": "\tdef update_bin_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 612,
      "code_text": "\tdef delete_draft_work_order(self):\n\t\tfor d in frappe.get_all(\n\t\t\t\"Work Order\", fields=[\"name\"], filters={\"docstatus\": 0, \"production_plan\": (\"=\", self.name)}\n\t\t):\n\t\t\tfrappe.delete_doc(\"Work Order\", d.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 619,
      "code_text": "\tdef set_status(self, close=None, update_bin=False):",
      "args": [
        "self",
        "close",
        "update_bin"
      ]
    },
    {
      "type": "method",
      "line_start": 642,
      "code_text": "\tdef update_ordered_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 651,
      "code_text": "\tdef update_requested_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 663,
      "code_text": "\tdef get_production_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 711,
      "code_text": "\tdef make_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 730,
      "code_text": "\tdef make_work_order_for_finished_goods(self, wo_list, default_warehouses):",
      "args": [
        "self",
        "wo_list",
        "default_warehouses"
      ]
    },
    {
      "type": "method",
      "line_start": 742,
      "code_text": "\tdef make_work_order_for_subassembly_items(self, wo_list, subcontracted_po, default_warehouses):",
      "args": [
        "self",
        "wo_list",
        "subcontracted_po",
        "default_warehouses"
      ]
    },
    {
      "type": "method",
      "line_start": 762,
      "code_text": "\tdef prepare_data_for_sub_assembly_items(self, row, wo_data):",
      "args": [
        "self",
        "row",
        "wo_data"
      ]
    },
    {
      "type": "method",
      "line_start": 785,
      "code_text": "\tdef make_subcontracted_purchase_order(self, subcontracted_po, purchase_orders):",
      "args": [
        "self",
        "subcontracted_po",
        "purchase_orders"
      ]
    },
    {
      "type": "method",
      "line_start": 837,
      "code_text": "\tdef show_list_created_message(self, doctype, doc_list=None):",
      "args": [
        "self",
        "doctype",
        "doc_list"
      ]
    },
    {
      "type": "method",
      "line_start": 846,
      "code_text": "\tdef create_work_order(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 870,
      "code_text": "\tdef validate_mr_subcontracted(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 880,
      "code_text": "\tdef make_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 960,
      "code_text": "\tdef get_sub_assembly_items(self, manufacturing_type=None):",
      "args": [
        "self",
        "manufacturing_type"
      ]
    },
    {
      "type": "method",
      "line_start": 1014,
      "code_text": "\tdef set_sub_assembly_items_based_on_level(self, row, bom_data, manufacturing_type=None):",
      "args": [
        "self",
        "row",
        "bom_data",
        "manufacturing_type"
      ]
    },
    {
      "type": "method",
      "line_start": 1029,
      "code_text": "\tdef set_default_supplier_for_subcontracting_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1055,
      "code_text": "\tdef combine_subassembly_items(self, sub_assembly_items_store):",
      "args": [
        "self",
        "sub_assembly_items_store"
      ]
    },
    {
      "type": "method",
      "line_start": 1086,
      "code_text": "\tdef all_items_completed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1106,
      "code_text": "def download_raw_materials(doc, warehouses=None):",
      "args": [
        "doc",
        "warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1318,
      "code_text": "def get_material_request_items(\n\tdoc,\n\trow,\n\tsales_order,\n\tcompany,\n\tignore_existing_ordered_qty,\n\tinclude_safety_stock,\n\twarehouse,\n\tbin_dict,\n):",
      "args": [
        "doc",
        "row",
        "sales_order",
        "company",
        "ignore_existing_ordered_qty",
        "include_safety_stock",
        "warehouse",
        "bin_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 1502,
      "code_text": "def get_so_details(sales_order):\n\treturn frappe.db.get_value(\n\t\t\"Sales Order\", sales_order, [\"transaction_date\", \"customer\", \"grand_total\"], as_dict=1\n\t)",
      "args": [
        "sales_order"
      ]
    },
    {
      "type": "function",
      "line_start": 1713,
      "code_text": "def get_materials_from_other_locations(item, warehouses, new_mr_items, company):",
      "args": [
        "item",
        "warehouses",
        "new_mr_items",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1846,
      "code_text": "def set_default_warehouses(row, default_warehouses):\n\tfor field in [\"wip_warehouse\", \"fg_warehouse\"]:\n\t\tif not row.get(field):\n\t\t\trow[field] = default_warehouses.get(field)",
      "args": [
        "row",
        "default_warehouses"
      ]
    },
    {
      "type": "function",
      "line_start": 1852,
      "code_text": "def get_reserved_qty_for_production_plan(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1992,
      "code_text": "def sales_order_query(doctype=None, txt=None, searchfield=None, start=None, page_len=None, filters=None):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry\\test_stock_entry.py": [
    {
      "type": "function",
      "line_start": 2029,
      "code_text": "def make_serialized_item(self, **args):",
      "args": [
        "self",
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 2079,
      "code_text": "def get_qty_after_transaction(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def get_sle(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 52,
      "code_text": "class UnitTestStockEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 61,
      "code_text": "class TestStockEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()\n\t\tfrappe.set_user(\"Administrator\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef test_stock_entry_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef test_fifo(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_auto_material_request(self):\n\t\tmake_item_variant()\n\t\tself._test_auto_material_request(\"_Test Item\")\n\t\tself._test_auto_material_request(\"_Test Item\", material_request_type=\"Transfer\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef test_barcode_item_stock_entry(self):\n\t\titem_code = make_item(\"_Test Item Stock Entry For Barcode\", barcode=\"BDD-1234567890\")\n\n\t\tse = make_stock_entry(item_code=item_code, target=\"_Test Warehouse - _TC\", qty=1, basic_rate=100)\n\t\tself.assertEqual(se.items[0].barcode, \"BDD-1234567890\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_auto_material_request_for_variant(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef test_auto_material_request_for_warehouse_group(self):\n\t\tself._test_auto_material_request(\n\t\t\t\"_Test Item Warehouse Group Wise Reorder\", warehouse=\"_Test Warehouse Group-C1 - _TC\"\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef _test_auto_material_request(\n\t\tself, item_code, material_request_type=\"Purchase\", warehouse=\"_Test Warehouse - _TC\"\n\t):",
      "args": [
        "self",
        "item_code",
        "material_request_type",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef test_add_to_transit_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 242,
      "code_text": "\tdef test_material_receipt_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef test_material_issue_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 323,
      "code_text": "\tdef test_material_transfer_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef test_repack_multiple_fg(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 431,
      "code_text": "\tdef test_repack_no_change_in_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 462,
      "code_text": "\tdef test_repack_with_additional_costs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 536,
      "code_text": "\tdef check_stock_ledger_entries(self, voucher_type, voucher_no, expected_sle):",
      "args": [
        "self",
        "voucher_type",
        "voucher_no",
        "expected_sle"
      ]
    },
    {
      "type": "method",
      "line_start": 555,
      "code_text": "\tdef check_gl_entries(self, voucher_type, voucher_no, expected_gl_entries):",
      "args": [
        "self",
        "voucher_type",
        "voucher_no",
        "expected_gl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef test_serial_no_not_reqd(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 595,
      "code_text": "\tdef test_serial_no_reqd(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 618,
      "code_text": "\tdef test_serial_no_qty_less(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 643,
      "code_text": "\tdef test_serial_no_transfer_in(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 683,
      "code_text": "\tdef test_serial_by_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 693,
      "code_text": "\tdef test_serial_move(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 715,
      "code_text": "\tdef test_serial_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 723,
      "code_text": "\tdef test_serial_batch_item_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 759,
      "code_text": "\tdef test_warehouse_company_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 775,
      "code_text": "\tdef test_warehouse_user(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 812,
      "code_text": "\tdef test_freeze_stocks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 832,
      "code_text": "\tdef test_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 870,
      "code_text": "\tdef test_work_order_manufacture_with_material_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 928,
      "code_text": "\tdef test_variant_work_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 955,
      "code_text": "\tdef test_nagative_stock_for_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 991,
      "code_text": "\tdef test_quality_check_for_scrap_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1065,
      "code_text": "\tdef test_quality_check(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1083,
      "code_text": "\tdef test_customer_provided_parts_se(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1091,
      "code_text": "\tdef test_zero_incoming_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1128,
      "code_text": "\tdef test_gle_for_opening_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1154,
      "code_text": "\tdef test_total_basic_amount_zero(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1202,
      "code_text": "\tdef test_conversion_factor_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1228,
      "code_text": "\tdef test_additional_cost_distribution_manufacture(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1245,
      "code_text": "\tdef test_additional_cost_distribution_non_manufacture(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1261,
      "code_text": "\tdef test_independent_manufacture_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1293,
      "code_text": "\tdef test_future_negative_sle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1336,
      "code_text": "\tdef test_future_negative_sle_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1373,
      "code_text": "\tdef test_multi_batch_value_diff(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1422,
      "code_text": "\tdef test_transfer_qty_validation(self):\n\t\tse = make_stock_entry(item_code=\"_Test Item\", do_not_save=True, qty=0.001, rate=100)\n\t\tse.items[0].uom = \"Kg\"\n\t\tse.items[0].conversion_factor = 0.002\n\n\t\tself.assertRaises(frappe.ValidationError, se.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1429,
      "code_text": "\tdef test_mapped_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1448,
      "code_text": "\tdef test_stock_entry_item_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1464,
      "code_text": "\tdef test_reposting_for_depedent_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1596,
      "code_text": "\tdef test_batch_expiry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1622,
      "code_text": "\tdef test_negative_stock_reco(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1659,
      "code_text": "\tdef test_negative_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1698,
      "code_text": "\tdef test_auto_reorder_level(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1740,
      "code_text": "\tdef test_auto_reorder_level_with_lead_time_days(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1780,
      "code_text": "\tdef test_use_serial_and_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1825,
      "code_text": "\tdef test_serial_batch_bundle_type_of_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1860,
      "code_text": "\tdef test_stock_entry_for_same_posting_date_and_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1928,
      "code_text": "\tdef test_stock_entry_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1981,
      "code_text": "\tdef test_use_batch_wise_valuation_for_moving_average_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 2092,
      "code_text": "def get_multiple_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 2123,
      "code_text": "def initialize_records_for_future_negative_sle_test(\n\titem_code, batch_no, warehouses, opening_qty, posting_date\n):",
      "args": [
        "item_code",
        "batch_no",
        "warehouses",
        "opening_qty",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 2148,
      "code_text": "def create_stock_entries(sequence_of_entries):\n\tfor entry_detail in sequence_of_entries:\n\t\tmake_stock_entry(**entry_detail)",
      "args": [
        "sequence_of_entries"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\serial_no\\serial_no.py": [
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def get_serial_nos(serial_no):\n\tif isinstance(serial_no, list):\n\t\treturn serial_no\n\n\treturn [s.strip() for s in cstr(serial_no).strip().replace(\",\", \"\\n\").split(\"\\n\") if s.strip()]",
      "args": [
        "serial_no"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def get_available_serial_nos(serial_no_series, qty) -> list[str]:\n\tserial_nos = []\n\tfor _i in range(cint(qty)):\n\t\tserial_nos.append(get_new_serial_number(serial_no_series))\n\n\treturn serial_nos",
      "args": [
        "serial_no_series",
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 293,
      "code_text": "def get_serial_nos_for_outward(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class SerialNoCannotCannotChangeError(ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 163,
      "code_text": "def clean_serial_no_string(serial_no: str) -> str:\n\tif not serial_no:\n\t\treturn \"\"\n\n\tserial_no_list = get_serial_nos(serial_no)\n\treturn \"\\n\".join(serial_no_list)",
      "args": [
        "serial_no: str"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class SerialNoCannotCreateDirectError(ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def get_new_serial_number(series):\n\tsr_no = make_autoname(series, \"Serial No\")\n\tif frappe.db.exists(\"Serial No\", sr_no):\n\t\tsr_no = get_new_serial_number(series)\n\treturn sr_no",
      "args": [
        "series"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class SerialNoWarehouseError(ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class SerialNo(StockController):"
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.via_stock_ledger = False",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef validate_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef set_maintenance_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def get_items_html(serial_nos, item_code):",
      "args": [
        "serial_nos",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_serial_nos_from_sle_list(bundles):",
      "args": [
        "bundles"
      ]
    },
    {
      "type": "function",
      "line_start": 171,
      "code_text": "def update_maintenance_status():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def auto_fetch_serial_number(\n\tqty: int,",
      "args": [
        "qty: int",
        "item_code: str",
        "warehouse: str",
        "posting_date",
        "batch_nos",
        "for_doctype",
        "exclude_sr_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 221,
      "code_text": "def get_pos_reserved_serial_nos(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 259,
      "code_text": "def fetch_serial_numbers(filters, qty, do_not_include=None):",
      "args": [
        "filters",
        "qty",
        "do_not_include"
      ]
    }
  ],
  "erpnext\\controllers\\sales_and_purchase_return.py": [
    {
      "type": "function",
      "line_start": 342,
      "code_text": "def make_return_doc(doctype: str, source_name: str, target_doc=None, return_against_rejected_qty=False):",
      "args": [
        "doctype: str",
        "source_name: str",
        "target_doc",
        "return_against_rejected_qty"
      ]
    },
    {
      "type": "function",
      "line_start": 781,
      "code_text": "def get_filters(\n\tvoucher_type,\n\tvoucher_no,\n\tvoucher_detail_no,\n\treturn_against,\n\titem_code,\n\treturn_against_item_field,\n\titem_row,\n):",
      "args": [
        "voucher_type",
        "voucher_no",
        "voucher_detail_no",
        "return_against",
        "item_code",
        "return_against_item_field",
        "item_row"
      ]
    },
    {
      "type": "function",
      "line_start": 1159,
      "code_text": "def get_available_serial_nos(serial_nos, warehouse):\n\treturn frappe.get_all(\n\t\t\"Serial No\", filters={\"warehouse\": warehouse, \"name\": (\"in\", serial_nos)}, pluck=\"name\"\n\t)",
      "args": [
        "serial_nos",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 299,
      "code_text": "def get_returned_qty_map_for_row(return_against, party, row_name, doctype):",
      "args": [
        "return_against",
        "party",
        "row_name",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 717,
      "code_text": "def get_rate_for_return(\n\tvoucher_type,\n\tvoucher_no,\n\titem_code,\n\treturn_against=None,\n\titem_row=None,\n\tvoucher_detail_no=None,\n\tsle=None,\n):",
      "args": [
        "voucher_type",
        "voucher_no",
        "item_code",
        "return_against",
        "item_row",
        "voucher_detail_no",
        "sle"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class StockOverReturnError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 158,
      "code_text": "def validate_quantity(doc, key, args, ref, valid_items, already_returned_items):",
      "args": [
        "doc",
        "key",
        "args",
        "ref",
        "valid_items",
        "already_returned_items"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def get_ref_item_dict(valid_items, ref_item_row):",
      "args": [
        "valid_items",
        "ref_item_row"
      ]
    },
    {
      "type": "function",
      "line_start": 808,
      "code_text": "def get_returned_serial_nos(child_doc, parent_doc, serial_no_field=None, ignore_voucher_detail_no=None):",
      "args": [
        "child_doc",
        "parent_doc",
        "serial_no_field",
        "ignore_voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 903,
      "code_text": "def available_serial_batch_for_return(field, doctype, reference_ids, is_rejected=False):\n\tavailable_dict = get_available_serial_batches(field, doctype, reference_ids, is_rejected=is_rejected)\n\tif not available_dict:\n\t\tfrappe.throw(_(\"No Serial / Batches are available for return\"))\n\n\treturn available_dict",
      "args": [
        "field",
        "doctype",
        "reference_ids",
        "is_rejected"
      ]
    },
    {
      "type": "function",
      "line_start": 970,
      "code_text": "def get_serial_and_batch_bundle(field, doctype, reference_ids, is_rejected=False):",
      "args": [
        "field",
        "doctype",
        "reference_ids",
        "is_rejected"
      ]
    },
    {
      "type": "function",
      "line_start": 1031,
      "code_text": "def filter_serial_batches(parent_doc, data, row, warehouse_field=None, qty_field=None):",
      "args": [
        "parent_doc",
        "data",
        "row",
        "warehouse_field",
        "qty_field"
      ]
    },
    {
      "type": "function",
      "line_start": 1111,
      "code_text": "def make_serial_batch_bundle_for_return(data, child_doc, parent_doc, warehouse_field=None, qty_field=None):",
      "args": [
        "data",
        "child_doc",
        "parent_doc",
        "warehouse_field",
        "qty_field"
      ]
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def validate_return(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def validate_return_against(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def validate_returned_items(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 256,
      "code_text": "def get_already_returned_items(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 769,
      "code_text": "def get_return_against_item_fields(voucher_type):",
      "args": [
        "voucher_type"
      ]
    },
    {
      "type": "function",
      "line_start": 858,
      "code_text": "def get_returned_batches(child_doc, parent_doc, batch_no_field=None, ignore_voucher_detail_no=None):",
      "args": [
        "child_doc",
        "parent_doc",
        "batch_no_field",
        "ignore_voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 911,
      "code_text": "def get_available_serial_batches(field, doctype, reference_ids, is_rejected=False):\n\t_bundle_ids = get_serial_and_batch_bundle(field, doctype, reference_ids, is_rejected=is_rejected)\n\tif not _bundle_ids:\n\t\treturn frappe._dict({})\n\n\treturn get_serial_batches_based_on_bundle(field, _bundle_ids)",
      "args": [
        "field",
        "doctype",
        "reference_ids",
        "is_rejected"
      ]
    },
    {
      "type": "function",
      "line_start": 919,
      "code_text": "def get_serial_batches_based_on_bundle(field, _bundle_ids):",
      "args": [
        "field",
        "_bundle_ids"
      ]
    },
    {
      "type": "function",
      "line_start": 1099,
      "code_text": "def get_available_batch_qty(parent_doc, batch_no, warehouse):",
      "args": [
        "parent_doc",
        "batch_no",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1166,
      "code_text": "def get_payment_data(invoice):\n\tpayment = frappe.db.get_all(\"Sales Invoice Payment\", {\"parent\": invoice}, [\"mode_of_payment\", \"amount\"])\n\treturn payment",
      "args": [
        "invoice"
      ]
    },
    {
      "type": "function",
      "line_start": 1172,
      "code_text": "def get_pos_invoice_item_returned_qty(pos_invoice, customer, item_row_name):\n\tis_return, docstatus = frappe.db.get_value(\"POS Invoice\", pos_invoice, [\"is_return\", \"docstatus\"])\n\tif not is_return and docstatus == 1:\n\t\treturn get_returned_qty_map_for_row(pos_invoice, customer, item_row_name, \"POS Invoice\")",
      "args": [
        "pos_invoice",
        "customer",
        "item_row_name"
      ]
    },
    {
      "type": "function",
      "line_start": 1179,
      "code_text": "def is_pos_invoice_returnable(pos_invoice):",
      "args": [
        "pos_invoice"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\account\\test_account.py": [
    {
      "type": "function",
      "line_start": 402,
      "code_text": "def create_account(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 392,
      "code_text": "def get_inventory_account(company, warehouse=None):",
      "args": [
        "company",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestAccount(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef test_rename_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_merge_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef test_account_sync(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 150,
      "code_text": "\tdef test_add_account_to_a_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef test_account_rename_sync(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef test_account_currency_sync(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef test_child_company_account_rename_sync(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 292,
      "code_text": "\tdef test_validate_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 312,
      "code_text": "\tdef test_account_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 326,
      "code_text": "def _make_test_records(verbose=None):",
      "args": [
        "verbose"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_creator\\bom_creator.py": [
    {
      "type": "function",
      "line_start": 484,
      "code_text": "def get_item_details(item_code):\n\treturn frappe.get_cached_value(\n\t\t\"Item\", item_code, [\"item_name\", \"description\", \"image\", \"stock_uom\", \"default_bom\"], as_dict=1\n\t)",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 353,
      "code_text": "def get_children(doctype=None, parent=None, **kwargs):",
      "args": [
        "doctype",
        "parent",
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 387,
      "code_text": "def add_item(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 419,
      "code_text": "def add_sub_assembly(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 490,
      "code_text": "def get_parent_row_no(doc, name):\n\tfor row in doc.items:\n\t\tif row.name == name:\n\t\t\treturn row.idx\n\n\tfrappe.msgprint(_(\"Parent Row No not found for {0}\").format(name))",
      "args": [
        "doc",
        "name"
      ]
    },
    {
      "type": "class",
      "line_start": 35,
      "code_text": "class BOMCreator(Document):"
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef before_save(self):\n\t\tself.set_status()\n\t\tself.set_is_expandable()\n\t\tself.set_conversion_factor()\n\t\tself.set_reference_id()\n\t\tself.set_rate_for_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef validate(self):\n\t\tself.validate_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef validate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef set_status(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef set_status_completed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef on_cancel(self):\n\t\tself.set_status(True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef set_conversion_factor(self):\n\t\tfor row in self.items:\n\t\t\trow.conversion_factor = 1.0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef before_submit(self):\n\t\tself.validate_fields()\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef set_reference_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef add_boms(self):\n\t\tself.submit()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef set_rate_for_items(self):\n\t\tamount = self.get_raw_material_cost()\n\t\tself.raw_material_cost = amount",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef get_raw_material_cost(self, fg_item=None, amount=0):",
      "args": [
        "self",
        "fg_item",
        "amount"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef set_is_expandable(self):\n\t\tfg_items = [row.fg_item for row in self.items if row.fg_item != self.item_code]\n\t\tfor row in self.items:\n\t\t\trow.is_expandable = 0\n\t\t\tif row.item_code in fg_items:\n\t\t\t\trow.is_expandable = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef validate_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef on_submit(self):\n\t\tself.enqueue_create_boms()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef enqueue_create_boms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef create_boms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef create_bom(self, row, production_item_wise_rm):",
      "args": [
        "self",
        "row",
        "production_item_wise_rm"
      ]
    },
    {
      "type": "method",
      "line_start": 340,
      "code_text": "\tdef has_operations(self):\n\t\tfor row in self.items:\n\t\t\tif row.operation:\n\t\t\t\treturn True\n\n\t\treturn False",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef get_default_bom(self, item_code) -> str:\n\t\treturn frappe.get_cached_value(\"Item\", item_code, \"default_bom\")",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 499,
      "code_text": "def delete_node(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 523,
      "code_text": "def edit_bom_creator(doctype, docname, data, parent):",
      "args": [
        "doctype",
        "docname",
        "data",
        "parent"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_capitalization\\test_asset_capitalization.py": [
    {
      "type": "function",
      "line_start": 442,
      "code_text": "def create_stock_reconciliation(asset_capitalization, stock_rate=0):",
      "args": [
        "asset_capitalization",
        "stock_rate"
      ]
    },
    {
      "type": "function",
      "line_start": 499,
      "code_text": "def get_actual_gle_dict(name):",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 514,
      "code_text": "def get_actual_sle_dict(name):",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 350,
      "code_text": "def create_asset_capitalization(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class TestAssetCapitalization(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef setUp(self):\n\t\tset_depreciation_settings_in_company()\n\t\tcreate_asset_data()\n\t\tcreate_asset_capitalization_data()\n\t\tfrappe.db.sql(\"delete from `tabTax Rule`\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_capitalization_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_capitalization_with_periodical_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef test_capitalization_with_wip_composite_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef test_capitalize_only_service_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 344,
      "code_text": "def create_asset_capitalization_data():\n\tcreate_item(\"Capitalization Target Stock Item\", is_stock_item=1, is_fixed_asset=0, is_purchase_item=0)\n\tcreate_item(\"Capitalization Source Stock Item\", is_stock_item=1, is_fixed_asset=0, is_purchase_item=0)\n\tcreate_item(\"Capitalization Source Service Item\", is_stock_item=0, is_fixed_asset=0, is_purchase_item=0)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 463,
      "code_text": "def create_depreciation_asset(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\customer\\customer.py": [
    {
      "type": "function",
      "line_start": 389,
      "code_text": "def make_quotation(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 766,
      "code_text": "def make_address(args, is_primary_address=1, is_shipping_address=1):",
      "args": [
        "args",
        "is_primary_address",
        "is_shipping_address"
      ]
    },
    {
      "type": "function",
      "line_start": 418,
      "code_text": "def make_opportunity(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 466,
      "code_text": "def _set_missing_values(source, target):",
      "args": [
        "source",
        "target"
      ]
    },
    {
      "type": "function",
      "line_start": 609,
      "code_text": "def get_customer_outstanding(customer, company, ignore_outstanding_sales_order=False, cost_center=None):",
      "args": [
        "customer",
        "company",
        "ignore_outstanding_sales_order",
        "cost_center"
      ]
    },
    {
      "type": "function",
      "line_start": 823,
      "code_text": "def parse_full_name(full_name: str) -> tuple[str, str | None, str | None]:",
      "args": [
        "full_name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 538,
      "code_text": "def check_credit_limit(customer, company, ignore_outstanding_sales_order=False, extra_amount=0):",
      "args": [
        "customer",
        "company",
        "ignore_outstanding_sales_order",
        "extra_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 693,
      "code_text": "def get_credit_limit(customer, company):",
      "args": [
        "customer",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 442,
      "code_text": "def make_payment_entry(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 497,
      "code_text": "def get_loyalty_programs(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 528,
      "code_text": "def get_nested_links(link_doctype, link_name, ignore_permissions=False):",
      "args": [
        "link_doctype",
        "link_name",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 599,
      "code_text": "def send_emails(customer, customer_outstanding, credit_limit, credit_controller_users_list):",
      "args": [
        "customer",
        "customer_outstanding",
        "credit_limit",
        "credit_controller_users_list"
      ]
    },
    {
      "type": "function",
      "line_start": 721,
      "code_text": "def make_contact(args, is_primary_contact=1):",
      "args": [
        "args",
        "is_primary_contact"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class Customer(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)\n\t\tself.load_dashboard_info()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef load_dashboard_info(self):\n\t\tinfo = get_dashboard_info(self.doctype, self.name, self.loyalty_program)\n\t\tself.set_onload(\"dashboard_info\", info)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef get_customer_name(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef after_insert(self):\n\t\t\"\"\"If customer created from Lead, update customer id in quotations, opportunities\"\"\"\n\t\tself.update_lead_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef get_customer_group_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef check_customer_group_change(self):\n\t\tfrappe.flags.customer_group_changed = False\n\n\t\tif not self.get(\"__islocal\"):\n\t\t\tif self.customer_group != frappe.db.get_value(\"Customer\", self.name, \"customer_group\"):\n\t\t\t\tfrappe.flags.customer_group_changed = True",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef validate_default_bank_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef validate_internal_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef add_role_for_user(self):\n\t\tfor portal_user in self.portal_users:\n\t\t\tadd_role_for_portal_user(portal_user, \"Customer\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef update_customer_groups(self):\n\t\tignore_doctypes = [\"Lead\", \"Opportunity\", \"POS Profile\", \"Tax Rule\", \"Pricing Rule\"]\n\t\tif frappe.flags.customer_group_changed:\n\t\t\tupdate_linked_doctypes(\n\t\t\t\t\"Customer\", self.name, \"Customer Group\", self.customer_group, ignore_doctypes\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 251,
      "code_text": "\tdef create_primary_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef create_primary_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef update_lead_status(self):\n\t\t\"\"\"If Customer created from Lead, update lead status to \"Converted\"\n\t\tupdate Customer link in Quotation, Opportunity\"\"\"\n\t\tif self.lead_name:\n\t\t\tfrappe.db.set_value(\"Lead\", self.lead_name, \"status\", \"Converted\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef link_lead_address_and_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef copy_communication(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef validate_name_with_customer_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 318,
      "code_text": "\tdef validate_credit_limit_on_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 356,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef after_rename(self, olddn, newdn, merge=False):\n\t\tif frappe.defaults.get_global_default(\"cust_master_name\") == \"Customer Name\":\n\t\t\tself.db_set(\"customer_name\", newdn)",
      "args": [
        "self",
        "olddn",
        "newdn",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 370,
      "code_text": "\tdef set_loyalty_program(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 807,
      "code_text": "def get_customer_primary_contact(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_dimension\\accounting_dimension.py": [
    {
      "type": "function",
      "line_start": 246,
      "code_text": "def get_accounting_dimensions(as_list=True, filters=None):",
      "args": [
        "as_list",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 291,
      "code_text": "def get_dimensions(with_cost_center_and_project=False):",
      "args": [
        "with_cost_center_and_project"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def disable_dimension(doc):\n\tif frappe.flags.in_test:\n\t\ttoggle_disabling(doc=doc)\n\telse:\n\t\tfrappe.enqueue(toggle_disabling, doc=doc)",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 263,
      "code_text": "def get_checks_for_pl_and_bs_accounts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 276,
      "code_text": "def get_dimension_with_children(doctype, dimensions):",
      "args": [
        "doctype",
        "dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 327,
      "code_text": "def create_accounting_dimensions_for_doctype(doctype):",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 242,
      "code_text": "def get_doctypes_with_dimensions():\n\treturn frappe.get_hooks(\"accounting_dimension_doctypes\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 111,
      "code_text": "def make_dimension_in_accounting_doctypes(doc, doclist=None):",
      "args": [
        "doc",
        "doclist"
      ]
    },
    {
      "type": "function",
      "line_start": 182,
      "code_text": "def delete_accounting_dimension(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 222,
      "code_text": "def toggle_disabling(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class AccountingDimension(Document):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef before_insert(self):\n\t\tself.set_fieldname_and_label()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate(self):\n\t\tself.validate_doctype()\n\t\tvalidate_column_name(self.fieldname)\n\t\tself.validate_dimension_defaults()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef validate_doctype(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef validate_document_type_change(self):\n\t\tdoctype_before_save = frappe.db.get_value(\"Accounting Dimension\", self.name, \"document_type\")\n\t\tif doctype_before_save != self.document_type:\n\t\t\tmessage = _(\"Cannot change Reference Document Type.\")\n\t\t\tmessage += _(\"Please create a new Accounting Dimension if required.\")\n\t\t\tfrappe.throw(message)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef validate_dimension_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef after_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef on_trash(self):\n\t\tif frappe.flags.in_test:\n\t\t\tdelete_accounting_dimension(doc=self)\n\t\telse:\n\t\t\tfrappe.enqueue(delete_accounting_dimension, doc=self, queue=\"long\", enqueue_after_commit=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef set_fieldname_and_label(self):\n\t\tif not self.label:\n\t\t\tself.label = cstr(self.document_type)\n\n\t\tif not self.fieldname:\n\t\t\tself.fieldname = scrub(self.label)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef on_update(self):\n\t\tfrappe.flags.accounting_dimensions = None\n\t\tfrappe.flags.accounting_dimensions_details = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def add_dimension_to_budget_doctype(df, doc):",
      "args": [
        "df",
        "doc"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice\\test_pos_invoice.py": [
    {
      "type": "function",
      "line_start": 993,
      "code_text": "def create_pos_invoice(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class TestPOSInvoice(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef tearDown(self):\n\t\tif frappe.session.user != \"Administrator\":\n\t\t\tfrappe.set_user(\"Administrator\")\n\n\t\tif frappe.db.get_single_value(\"Selling Settings\", \"validate_selling_price\"):\n\t\t\tfrappe.db.set_single_value(\"Selling Settings\", \"validate_selling_price\", 0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_timestamp_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_change_naming_series(self):\n\t\tinv = create_pos_invoice(do_not_submit=1)\n\t\tinv.naming_series = \"TEST-\"\n\n\t\tself.assertRaises(frappe.CannotChangeConstantError, inv.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef test_discount_and_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef test_tax_calculation_with_multiple_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef test_tax_calculation_with_item_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef test_tax_calculation_with_multiple_items_and_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef test_pos_returns_with_repayment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef test_pos_return_for_serialized_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 297,
      "code_text": "\tdef test_partial_pos_returns(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 367,
      "code_text": "\tdef test_pos_change_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 390,
      "code_text": "\tdef test_without_payment(self):\n\t\tinv = create_pos_invoice(do_not_save=1)\n\t\t# Check that the invoice cannot be submitted without payments\n\t\tinv.payments = []\n\t\tself.assertRaises(frappe.ValidationError, inv.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 396,
      "code_text": "\tdef test_partial_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 405,
      "code_text": "\tdef test_serialized_item_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 460,
      "code_text": "\tdef test_delivered_serialized_item_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 512,
      "code_text": "\tdef test_invalid_serial_no_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 543,
      "code_text": "\tdef test_value_error_on_serial_no_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 605,
      "code_text": "\tdef test_loyalty_points(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 643,
      "code_text": "\tdef test_loyalty_points_redeemption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 677,
      "code_text": "\tdef test_merging_into_sales_invoice_with_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 703,
      "code_text": "\tdef test_merging_into_sales_invoice_with_discount_and_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 752,
      "code_text": "\tdef test_merging_with_validate_selling_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 805,
      "code_text": "\tdef test_pos_batch_reservation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 865,
      "code_text": "\tdef test_pos_batch_item_qty_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 921,
      "code_text": "\tdef test_ignore_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 959,
      "code_text": "\tdef test_delivered_serial_no_case(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1101,
      "code_text": "def make_batch_item(item_name):\n\tfrom erpnext.stock.doctype.item.test_item import make_item\n\n\tif not frappe.db.exists(item_name):\n\t\treturn make_item(item_name, dict(has_batch_no=1, create_new_batch=1, is_stock_item=1))",
      "args": [
        "item_name"
      ]
    }
  ],
  "erpnext\\support\\doctype\\issue\\issue.py": [
    {
      "type": "function",
      "line_start": 179,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 219,
      "code_text": "def set_multiple_status(names, status):\n\tfor name in json.loads(names):\n\t\tfrappe.db.set_value(\"Issue\", name, \"status\", status)",
      "args": [
        "names",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 406,
      "code_text": "def get_elapsed_time(start_time, end_time):\n\treturn round(time_diff_in_seconds(end_time, start_time), 2)",
      "args": [
        "start_time",
        "end_time"
      ]
    },
    {
      "type": "function",
      "line_start": 382,
      "code_text": "def get_working_hours(date, support_hours):\n\tif is_work_day(date, support_hours):\n\t\tweekday = frappe.utils.get_weekday(date)\n\t\tfor day in support_hours:\n\t\t\tif day.workday == weekday:\n\t\t\t\treturn day.start_time, day.end_time",
      "args": [
        "date",
        "support_hours"
      ]
    },
    {
      "type": "function",
      "line_start": 398,
      "code_text": "def is_during_working_hours(date, support_hours):\n\tstart_time, end_time = get_working_hours(date, support_hours)\n\ttime = get_time_in_seconds(date)\n\tif time >= start_time and time <= end_time:\n\t\treturn True\n\treturn False",
      "args": [
        "date",
        "support_hours"
      ]
    },
    {
      "type": "function",
      "line_start": 390,
      "code_text": "def is_work_day(date, support_hours):\n\tweekday = frappe.utils.get_weekday(date)\n\tfor day in support_hours:\n\t\tif day.workday == weekday:\n\t\t\treturn True\n\treturn False",
      "args": [
        "date",
        "support_hours"
      ]
    },
    {
      "type": "function",
      "line_start": 378,
      "code_text": "def get_time_in_seconds(date):\n\treturn timedelta(hours=date.hour, minutes=date.minute, seconds=date.second)",
      "args": [
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 421,
      "code_text": "def is_before_working_hours(date, support_hours):\n\tstart_time, end_time = get_working_hours(date, support_hours)\n\ttime = get_time_in_seconds(date)\n\tif time < start_time:\n\t\treturn True\n\treturn False",
      "args": [
        "date",
        "support_hours"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class Issue(Document):"
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef on_update(self):\n\t\t# Add a communication in the issue timeline\n\t\tif self.flags.create_communication and self.via_customer_portal:\n\t\t\tself.create_communication()\n\t\t\tself.flags.communication_created = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef set_lead_contact(self, email_id):",
      "args": [
        "self",
        "email_id"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef create_communication(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef split_issue(self, subject, communication_id):",
      "args": [
        "self",
        "subject",
        "communication_id"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef reset_issue_metrics(self):\n\t\tself.db_set(\"resolution_time\", None)\n\t\tself.db_set(\"user_resolution_time\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def get_issue_list(doctype, txt, filters, limit_start, limit_page_length=20, order_by=None):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "order_by"
      ]
    },
    {
      "type": "function",
      "line_start": 225,
      "code_text": "def set_status(name, status):\n\tfrappe.db.set_value(\"Issue\", name, \"status\", status)",
      "args": [
        "name",
        "status"
      ]
    },
    {
      "type": "function",
      "line_start": 229,
      "code_text": "def auto_close_tickets():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 250,
      "code_text": "def has_website_permission(doc, ptype, user, verbose=False):\n\tfrom erpnext.controllers.website_list_for_contact import has_website_permission\n\n\tpermission_based_on_customer = has_website_permission(doc, ptype, user, verbose)\n\n\treturn permission_based_on_customer or doc.raised_by == user",
      "args": [
        "doc",
        "ptype",
        "user",
        "verbose"
      ]
    },
    {
      "type": "function",
      "line_start": 258,
      "code_text": "def update_issue(contact, method):\n\t\"\"\"Called when Contact is deleted\"\"\"\n\tfrappe.db.sql(\"\"\"UPDATE `tabIssue` set contact='' where contact=%s\"\"\", contact.name)",
      "args": [
        "contact",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 264,
      "code_text": "def make_task(source_name, target_doc=None):\n\treturn get_mapped_doc(\"Issue\", source_name, {\"Issue\": {\"doctype\": \"Task\"}}, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def make_issue_from_communication(communication, ignore_communication_links=False):",
      "args": [
        "communication",
        "ignore_communication_links"
      ]
    },
    {
      "type": "function",
      "line_start": 288,
      "code_text": "def get_time_in_timedelta(time):\n\t\"\"\"\n\tConverts datetime.time(10, 36, 55, 961454) to datetime.timedelta(seconds=38215)\n\t\"\"\"\n\treturn timedelta(hours=time.hour, minutes=time.minute, seconds=time.second)",
      "args": [
        "time"
      ]
    },
    {
      "type": "function",
      "line_start": 295,
      "code_text": "def set_first_response_time(communication, method):\n\tif communication.get(\"reference_doctype\") == \"Issue\":\n\t\tissue = get_parent_doc(communication)\n\t\tif is_first_response(issue) and issue.service_level_agreement:\n\t\t\tfirst_response_time = calculate_first_response_time(issue, get_datetime(issue.first_responded_on))\n\t\t\tissue.db_set(\"first_response_time\", first_response_time)",
      "args": [
        "communication",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 303,
      "code_text": "def is_first_response(issue):",
      "args": [
        "issue"
      ]
    },
    {
      "type": "function",
      "line_start": 312,
      "code_text": "def calculate_first_response_time(issue, first_responded_on):",
      "args": [
        "issue",
        "first_responded_on"
      ]
    },
    {
      "type": "function",
      "line_start": 410,
      "code_text": "def calculate_initial_frt(issue_creation_date, days_in_between, support_hours):",
      "args": [
        "issue_creation_date",
        "days_in_between",
        "support_hours"
      ]
    },
    {
      "type": "function",
      "line_start": 429,
      "code_text": "def get_holidays(holiday_list_name):\n\tholiday_list = frappe.get_cached_doc(\"Holiday List\", holiday_list_name)\n\tholidays = [holiday.holiday_date for holiday in holiday_list.holidays]\n\treturn holidays",
      "args": [
        "holiday_list_name"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\budget\\budget.py": [
    {
      "type": "function",
      "line_start": 523,
      "code_text": "def get_item_details(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class BudgetError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def validate_expense_against_budget(args, expense_amount=0):",
      "args": [
        "args",
        "expense_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 258,
      "code_text": "def compare_expense_with_budget(args, budget_amount, action_for, action, budget_against, amount=0):",
      "args": [
        "args",
        "budget_amount",
        "action_for",
        "action",
        "budget_against",
        "amount"
      ]
    },
    {
      "type": "function",
      "line_start": 428,
      "code_text": "def get_other_condition(args, for_doc):",
      "args": [
        "args",
        "for_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_actual_expense(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class DuplicateBudgetError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class Budget(Document):"
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef validate_duplicate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef validate_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef set_null_value(self):\n\t\tif self.budget_against == \"Cost Center\":\n\t\t\tself.project = None\n\t\telse:\n\t\t\tself.cost_center = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef validate_applicable_for(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef before_naming(self):\n\t\tself.naming_series = f\"{{{frappe.scrub(self.budget_against)}}}./.{self.fiscal_year}/.###\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 224,
      "code_text": "def validate_budget_records(args, budget_records, expense_amount):",
      "args": [
        "args",
        "budget_records",
        "expense_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 304,
      "code_text": "def get_expense_breakup(args, currency, budget_against):",
      "args": [
        "args",
        "currency",
        "budget_against"
      ]
    },
    {
      "type": "function",
      "line_start": 381,
      "code_text": "def get_actions(args, budget):",
      "args": [
        "args",
        "budget"
      ]
    },
    {
      "type": "function",
      "line_start": 396,
      "code_text": "def get_requested_amount(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 412,
      "code_text": "def get_ordered_amount(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 490,
      "code_text": "def get_accumulated_monthly_budget(monthly_distribution, posting_date, fiscal_year, annual_budget):",
      "args": [
        "monthly_distribution",
        "posting_date",
        "fiscal_year",
        "annual_budget"
      ]
    },
    {
      "type": "function",
      "line_start": 554,
      "code_text": "def get_expense_cost_center(doctype, args):",
      "args": [
        "doctype",
        "args"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_request\\payment_request.py": [
    {
      "type": "function",
      "line_start": 532,
      "code_text": "def make_payment_request(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def _get_payment_gateway_controller(*args, **kwargs):\n\twith payment_app_import_guard():\n\t\tfrom payments.utils import get_payment_gateway_controller\n\n\treturn get_payment_gateway_controller(*args, **kwargs)",
      "args": [
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 669,
      "code_text": "def get_amount(ref_doc, payment_account=None):",
      "args": [
        "ref_doc",
        "payment_account"
      ]
    },
    {
      "type": "function",
      "line_start": 751,
      "code_text": "def get_existing_payment_request_amount(ref_doc, statuses: list | None = None) -> list:",
      "args": [
        "ref_doc",
        "statuses"
      ]
    },
    {
      "type": "function",
      "line_start": 812,
      "code_text": "def make_payment_entry(docname):\n\tdoc = frappe.get_doc(\"Payment Request\", docname)\n\treturn doc.create_payment_entry(submit=False).as_dict()",
      "args": [
        "docname"
      ]
    },
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class PaymentRequest(Document):"
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef validate_reference_document(self):\n\t\tif not self.reference_doctype or not self.reference_name:\n\t\t\tfrappe.throw(_(\"To create a Payment Request reference document is required\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef validate_payment_request_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef validate_currency(self):\n\t\tref_doc = frappe.get_doc(self.reference_doctype, self.reference_name)\n\t\tif self.payment_account and ref_doc.currency != frappe.get_cached_value(\n\t\t\t\"Account\", self.payment_account, \"account_currency\"\n\t\t):\n\t\t\tfrappe.throw(_(\"Transaction currency must be same as Payment Gateway currency\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef validate_subscription_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef before_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_reference_advance_payment_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef request_phone_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef get_request_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 245,
      "code_text": "\tdef on_cancel(self):\n\t\tself.check_if_payment_entry_exists()\n\t\tself.set_as_cancelled()\n\t\tself.update_reference_advance_payment_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef make_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef payment_gateway_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef set_payment_request_url(self):\n\t\tif self.payment_account and self.payment_gateway and self.payment_gateway_validation():\n\t\t\tself.payment_url = self.get_payment_url()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef get_payment_url(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 304,
      "code_text": "\tdef set_as_paid(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 315,
      "code_text": "\tdef create_payment_entry(self, submit=True):",
      "args": [
        "self",
        "submit"
      ]
    },
    {
      "type": "method",
      "line_start": 392,
      "code_text": "\tdef send_email(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef get_message(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 429,
      "code_text": "\tdef set_failed(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 432,
      "code_text": "\tdef set_as_cancelled(self):\n\t\tself.db_set(\"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 435,
      "code_text": "\tdef check_if_payment_entry_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 445,
      "code_text": "\tdef make_communication_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 459,
      "code_text": "\tdef create_subscription(self, payment_provider, gateway_controller, data):\n\t\tif payment_provider == \"stripe\":\n\t\t\twith payment_app_import_guard():\n\t\t\t\tfrom payments.payment_gateways.stripe_integration import create_stripe_subscription\n\n\t\t\treturn create_stripe_subscription(gateway_controller, data)",
      "args": [
        "self",
        "payment_provider",
        "gateway_controller",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 466,
      "code_text": "\tdef update_reference_advance_payment_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 474,
      "code_text": "\tdef _allocate_payment_request_to_pe_references(self, references):",
      "args": [
        "self",
        "references"
      ]
    },
    {
      "type": "function",
      "line_start": 711,
      "code_text": "def get_irequest_status(payment_requests: None | list = None) -> list:",
      "args": [
        "payment_requests"
      ]
    },
    {
      "type": "function",
      "line_start": 726,
      "code_text": "def cancel_old_payment_requests(ref_dt, ref_dn):",
      "args": [
        "ref_dt",
        "ref_dn"
      ]
    },
    {
      "type": "function",
      "line_start": 778,
      "code_text": "def get_gateway_details(args):  # nosemgrep\n\t\"\"\"\n\tReturn gateway and payment account of default payment gateway\n\t\"\"\"\n\tgateway_account = args.get(\"payment_gateway_account\", {\"is_default\": 1})\n\treturn get_payment_gateway_account(gateway_account)",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 786,
      "code_text": "def get_payment_gateway_account(filter):",
      "args": [
        "filter"
      ]
    },
    {
      "type": "function",
      "line_start": 796,
      "code_text": "def get_print_format_list(ref_doctype):",
      "args": [
        "ref_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 807,
      "code_text": "def resend_payment_email(docname):\n\treturn frappe.get_doc(\"Payment Request\", docname).send_email()",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 817,
      "code_text": "def update_payment_requests_as_per_pe_references(references=None, cancel=False):",
      "args": [
        "references",
        "cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 879,
      "code_text": "def get_dummy_message(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 899,
      "code_text": "def get_subscription_details(reference_doctype, reference_name):",
      "args": [
        "reference_doctype",
        "reference_name"
      ]
    },
    {
      "type": "function",
      "line_start": 915,
      "code_text": "def make_payment_order(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 949,
      "code_text": "def validate_payment(doc, method=None):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 963,
      "code_text": "def get_open_payment_requests_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 990,
      "code_text": "def get_irequests_of_payment_request(doc: str | None = None) -> list:",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order\\subcontracting_order.py": [
    {
      "type": "function",
      "line_start": 347,
      "code_text": "def make_subcontracting_receipt(source_name, target_doc=None):\n\treturn get_mapped_subcontracting_receipt(source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class SubcontractingOrder(SubcontractingController):"
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef onload(self):\n\t\tself.set_onload(\n\t\t\t\"over_transfer_allowance\",\n\t\t\tfrappe.db.get_single_value(\"Buying Settings\", \"over_transfer_allowance\"),\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef before_validate(self):\n\t\tsuper().before_validate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_prevdoc_status()\n\t\tself.update_status()\n\t\tself.update_subcontracted_quantity_in_po()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_prevdoc_status()\n\t\tself.update_status()\n\t\tself.update_subcontracted_quantity_in_po(cancel=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef validate_purchase_order_for_subcontracting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 150,
      "code_text": "\tdef validate_service_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef validate_supplied_items(self):\n\t\tif self.supplier_warehouse:\n\t\t\tfor item in self.supplied_items:\n\t\t\t\tif self.supplier_warehouse == item.reserve_warehouse:\n\t\t\t\t\tmsg = f\"Reserve Warehouse must be different from Supplier Warehouse for Supplied Item {item.main_item_code}.\"\n\t\t\t\t\tfrappe.throw(_(msg))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef set_missing_values(self):\n\t\tself.calculate_additional_costs()\n\t\tself.calculate_service_costs()\n\t\tself.calculate_supplied_items_qty_and_amount()\n\t\tself.calculate_items_qty_and_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef calculate_service_costs(self):\n\t\tfor idx, item in enumerate(self.get(\"service_items\")):\n\t\t\tself.items[idx].service_cost_per_qty = item.amount / self.items[idx].qty",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 186,
      "code_text": "\tdef calculate_supplied_items_qty_and_amount(self):\n\t\tfor item in self.get(\"items\"):\n\t\t\tbom = frappe.get_doc(\"BOM\", item.bom)\n\t\t\trm_cost = sum(flt(rm_item.amount) for rm_item in bom.items)\n\t\t\titem.rm_cost_per_qty = rm_cost / flt(bom.quantity)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef calculate_items_qty_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef update_ordered_qty_for_subcontracting(self, sco_item_rows=None):",
      "args": [
        "self",
        "sco_item_rows"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef get_ordered_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef update_reserved_qty_for_subcontracting(self):\n\t\tfor item in self.supplied_items:\n\t\t\tif item.rm_item_code:\n\t\t\t\tstock_bin = get_bin(item.rm_item_code, item.reserve_warehouse)\n\t\t\t\tstock_bin.update_reserved_qty_for_sub_contracting()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 245,
      "code_text": "\tdef populate_items_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef update_status(self, status=None, update_modified=True):",
      "args": [
        "self",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 335,
      "code_text": "\tdef update_subcontracted_quantity_in_po(self, cancel=False):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 351,
      "code_text": "def get_mapped_subcontracting_receipt(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 390,
      "code_text": "def update_subcontracting_order_status(sco, status=None):\n\tif isinstance(sco, str):\n\t\tsco = frappe.get_doc(\"Subcontracting Order\", sco)\n\n\tsco.update_status(status)",
      "args": [
        "sco",
        "status"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice\\pos_invoice.py": [
    {
      "type": "function",
      "line_start": 831,
      "code_text": "def make_sales_return(source_name, target_doc=None):\n\tfrom erpnext.controllers.sales_and_purchase_return import make_return_doc\n\n\treturn make_return_doc(\"POS Invoice\", source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class POSInvoice(SalesInvoice):"
    },
    {
      "type": "function",
      "line_start": 888,
      "code_text": "def item_query(doctype, txt, searchfield, start, page_len, filters, as_dict=False):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 810,
      "code_text": "def get_pos_reserved_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class PartialPaymentValidationError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 762,
      "code_text": "def get_stock_availability(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 798,
      "code_text": "def get_bin_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef before_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 266,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 284,
      "code_text": "\tdef clear_unallocated_mode_of_payments(self):\n\t\tself.set(\"payments\", self.get(\"payments\", {\"amount\": [\"not in\", [0, None, \"\"]]}))\n\n\t\tsip = frappe.qb.DocType(\"Sales Invoice Payment\")\n\t\tfrappe.qb.from_(sip).delete().where(sip.parent == self.name).where(sip.amount == 0).run()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 290,
      "code_text": "\tdef delink_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 303,
      "code_text": "\tdef submit_serial_batch_bundle(self, table_name):",
      "args": [
        "self",
        "table_name"
      ]
    },
    {
      "type": "method",
      "line_start": 312,
      "code_text": "\tdef check_phone_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 331,
      "code_text": "\tdef validate_pos_opening_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 343,
      "code_text": "\tdef validate_stock_availablility(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 381,
      "code_text": "\tdef validate_serialised_or_batched_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 400,
      "code_text": "\tdef validate_return_items_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef validate_mode_of_payment(self):\n\t\tif len(self.payments) == 0:\n\t\t\tfrappe.throw(_(\"At least one mode of payment is required for POS invoice.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 443,
      "code_text": "\tdef validate_change_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef validate_change_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 467,
      "code_text": "\tdef validate_payment_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 482,
      "code_text": "\tdef validate_company_with_pos_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef validate_loyalty_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 505,
      "code_text": "\tdef validate_full_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 519,
      "code_text": "\tdef set_status(self, update=False, status=None, update_modified=True):",
      "args": [
        "self",
        "update",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 569,
      "code_text": "\tdef set_pos_fields(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 667,
      "code_text": "\tdef set_missing_values(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 694,
      "code_text": "\tdef reset_mode_of_payments(self):\n\t\tif self.pos_profile:\n\t\t\tpos_profile = frappe.get_cached_doc(\"POS Profile\", self.pos_profile)\n\t\t\tupdate_multi_mode_option(self, pos_profile)\n\t\t\tself.paid_amount = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 701,
      "code_text": "\tdef create_payment_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 719,
      "code_text": "\tdef get_new_payment_request(self, mop):",
      "args": [
        "self",
        "mop"
      ]
    },
    {
      "type": "method",
      "line_start": 741,
      "code_text": "\tdef get_existing_payment_request(self, pay):",
      "args": [
        "self",
        "pay"
      ]
    },
    {
      "type": "function",
      "line_start": 779,
      "code_text": "def get_bundle_availability(bundle_item_code, warehouse):",
      "args": [
        "bundle_item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 838,
      "code_text": "def make_merge_log(invoices):",
      "args": [
        "invoices"
      ]
    },
    {
      "type": "function",
      "line_start": 868,
      "code_text": "def add_return_modes(doc, pos_profile):",
      "args": [
        "doc",
        "pos_profile"
      ]
    },
    {
      "type": "function",
      "line_start": 902,
      "code_text": "def get_item_group(pos_profile):",
      "args": [
        "pos_profile"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\company\\company.py": [
    {
      "type": "function",
      "line_start": 792,
      "code_text": "def get_children(doctype, parent=None, company=None, is_root=False):",
      "args": [
        "doctype",
        "parent",
        "company",
        "is_root"
      ]
    },
    {
      "type": "function",
      "line_start": 811,
      "code_text": "def add_node():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 879,
      "code_text": "def get_timeline_data(doctype, name):",
      "args": [
        "doctype",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 721,
      "code_text": "def install_country_fixtures(company, country):",
      "args": [
        "company",
        "country"
      ]
    },
    {
      "type": "function",
      "line_start": 899,
      "code_text": "def get_default_company_address(name, sort_key=\"is_primary_address\", existing_address=None):",
      "args": [
        "name",
        "sort_key",
        "existing_address"
      ]
    },
    {
      "type": "function",
      "line_start": 736,
      "code_text": "def update_company_current_month_sales(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 775,
      "code_text": "def update_transactions_annual_history(company, commit=False):\n\ttransactions_history = get_all_transactions_annual_history(company)\n\tfrappe.db.set_value(\"Company\", company, \"transactions_annual_history\", json.dumps(transactions_history))\n\n\tif commit:\n\t\tfrappe.db.commit()",
      "args": [
        "company",
        "commit"
      ]
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class Company(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef onload(self):\n\t\tload_address_and_contact(self, \"company\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef check_if_transactions_exist(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef validate_abbr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef create_default_tax_template(self):\n\t\tsetup_taxes_and_charges(self.name, self.country)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef validate_default_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef validate_advance_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef validate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef create_default_warehouses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 318,
      "code_text": "\tdef create_default_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 336,
      "code_text": "\tdef create_default_departments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 434,
      "code_text": "\tdef validate_coa_input(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 446,
      "code_text": "\tdef validate_perpetual_inventory(self):\n\t\tif not self.get(\"__islocal\"):\n\t\t\tif cint(self.enable_perpetual_inventory) == 1 and not self.default_inventory_account:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\"Set default inventory account for perpetual inventory\"), alert=True, indicator=\"orange\"\n\t\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 453,
      "code_text": "\tdef validate_provisional_account_for_non_stock_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 474,
      "code_text": "\tdef check_country_change(self):\n\t\tfrappe.flags.country_change = False\n\n\t\tif not self.is_new() and self.country != frappe.get_cached_value(\"Company\", self.name, \"country\"):\n\t\t\tfrappe.flags.country_change = True",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 480,
      "code_text": "\tdef set_chart_of_accounts(self):\n\t\t\"\"\"If parent company is set, chart of accounts will be based on that company\"\"\"\n\t\tif self.parent_company:\n\t\t\tself.create_chart_of_accounts_based_on = \"Existing Company\"\n\t\t\tself.existing_company = self.parent_company",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 486,
      "code_text": "\tdef validate_parent_company(self):\n\t\tif self.parent_company:\n\t\t\tis_group = frappe.get_value(\"Company\", self.parent_company, \"is_group\")\n\n\t\t\tif not is_group:\n\t\t\t\tfrappe.throw(_(\"Parent Company must be a group company\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 493,
      "code_text": "\tdef set_default_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 561,
      "code_text": "\tdef _set_default_account(self, fieldname, account_type):",
      "args": [
        "self",
        "fieldname",
        "account_type"
      ]
    },
    {
      "type": "method",
      "line_start": 572,
      "code_text": "\tdef set_mode_of_payment_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 585,
      "code_text": "\tdef create_default_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 613,
      "code_text": "\tdef after_rename(self, olddn, newdn, merge=False):",
      "args": [
        "self",
        "olddn",
        "newdn",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 624,
      "code_text": "\tdef abbreviate(self):\n\t\tself.abbr = \"\".join(c[0].upper() for c in self.company_name.split())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 627,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 702,
      "code_text": "\tdef check_parent_changed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 711,
      "code_text": "def get_name_with_abbr(name, company):",
      "args": [
        "name",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 761,
      "code_text": "def update_company_monthly_sales(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 783,
      "code_text": "def cache_companies_monthly_sales_history():\n\tcompanies = [d[\"name\"] for d in frappe.get_list(\"Company\")]\n\tfor company in companies:\n\t\tupdate_company_monthly_sales(company)\n\t\tupdate_transactions_annual_history(company)\n\tfrappe.db.commit()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 823,
      "code_text": "def get_all_transactions_annual_history(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 926,
      "code_text": "def get_billing_shipping_address(name, billing_address=None, shipping_address=None):\n\tprimary_address = get_default_company_address(name, \"is_primary_address\", billing_address)\n\tshipping_address = get_default_company_address(name, \"is_shipping_address\", shipping_address)\n\n\treturn {\"primary_address\": primary_address, \"shipping_address\": shipping_address}",
      "args": [
        "name",
        "billing_address",
        "shipping_address"
      ]
    },
    {
      "type": "function",
      "line_start": 934,
      "code_text": "def create_transaction_deletion_request(company):",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\lead\\lead.py": [
    {
      "type": "function",
      "line_start": 317,
      "code_text": "def make_customer(source_name, target_doc=None):\n\treturn _make_customer(source_name, target_doc)",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 393,
      "code_text": "def make_quotation(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 363,
      "code_text": "def make_opportunity(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 413,
      "code_text": "def _set_missing_values(source, target):",
      "args": [
        "source",
        "target"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class Lead(SellingController, CRMNote):"
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef onload(self):\n\t\tcustomer = frappe.db.get_value(\"Customer\", {\"lead_name\": self.name})\n\t\tself.get(\"__onload\").is_customer = customer\n\t\tload_address_and_contact(self)\n\t\tself.set_onload(\"linked_prospects\", self.get_linked_prospects())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 95,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef before_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef after_insert(self):\n\t\tself.link_to_contact()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef on_update(self):\n\t\tself.update_prospect()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef on_trash(self):\n\t\tfrappe.db.set_value(\"Issue\", {\"lead\": self.name}, \"lead\", None)\n\t\tdelete_contact_and_address(self.doctype, self.name)\n\t\tself.remove_link_from_prospect()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef set_full_name(self):\n\t\tif self.first_name:\n\t\t\tself.lead_name = \" \".join(\n\t\t\t\tfilter(None, [self.salutation, self.first_name, self.middle_name, self.last_name])\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef set_lead_name(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef set_title(self):\n\t\tself.title = self.company_name or self.lead_name",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef check_email_id_is_unique(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef validate_email_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef link_to_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef update_prospect(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 204,
      "code_text": "\tdef remove_link_from_prospect(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef get_linked_prospects(self):\n\t\treturn frappe.get_all(\n\t\t\t\"Prospect Lead\",\n\t\t\tfilters={\"lead\": self.name},\n\t\t\tfields=[\"parent\"],\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef has_customer(self):\n\t\treturn frappe.db.get_value(\"Customer\", {\"lead_name\": self.name})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 231,
      "code_text": "\tdef has_opportunity(self):\n\t\treturn frappe.db.get_value(\"Opportunity\", {\"party_name\": self.name, \"status\": [\"!=\", \"Lost\"]})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef has_quotation(self):\n\t\treturn frappe.db.get_value(\n\t\t\t\"Quotation\", {\"party_name\": self.name, \"docstatus\": 1, \"status\": [\"!=\", \"Lost\"]}\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef has_lost_quotation(self):\n\t\treturn frappe.db.get_value(\"Quotation\", {\"party_name\": self.name, \"docstatus\": 1, \"status\": \"Lost\"})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 243,
      "code_text": "\tdef create_prospect_and_contact(self, data):",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 251,
      "code_text": "\tdef create_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 282,
      "code_text": "\tdef create_prospect(self, company_name):",
      "args": [
        "self",
        "company_name"
      ]
    },
    {
      "type": "function",
      "line_start": 321,
      "code_text": "def _make_customer(source_name, target_doc=None, ignore_permissions=False):",
      "args": [
        "source_name",
        "target_doc",
        "ignore_permissions"
      ]
    },
    {
      "type": "function",
      "line_start": 444,
      "code_text": "def get_lead_details(lead, posting_date=None, company=None):",
      "args": [
        "lead",
        "posting_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 483,
      "code_text": "def make_lead_from_communication(communication, ignore_communication_links=False):",
      "args": [
        "communication",
        "ignore_communication_links"
      ]
    },
    {
      "type": "function",
      "line_start": 511,
      "code_text": "def get_lead_with_phone_number(number):",
      "args": [
        "number"
      ]
    },
    {
      "type": "function",
      "line_start": 532,
      "code_text": "def add_lead_to_prospect(lead, prospect):",
      "args": [
        "lead",
        "prospect"
      ]
    }
  ],
  "erpnext\\accounts\\general_ledger.py": [
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def make_gl_entries(\n\tgl_map,\n\tcancel=False,\n\tadv_adj=False,\n\tmerge_entries=True,\n\tupdate_outstanding=\"Yes\",\n\tfrom_repost=False,\n):",
      "args": [
        "gl_map",
        "cancel",
        "adv_adj",
        "merge_entries",
        "update_outstanding",
        "from_repost"
      ]
    },
    {
      "type": "function",
      "line_start": 629,
      "code_text": "def make_reverse_gl_entries(\n\tgl_entries=None,\n\tvoucher_type=None,\n\tvoucher_no=None,\n\tadv_adj=False,\n\tupdate_outstanding=\"Yes\",\n\tpartial_cancel=False,\n):",
      "args": [
        "gl_entries",
        "voucher_type",
        "voucher_no",
        "adv_adj",
        "update_outstanding",
        "partial_cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def process_gl_map(gl_map, merge_entries=True, precision=None, from_repost=False):",
      "args": [
        "gl_map",
        "merge_entries",
        "precision",
        "from_repost"
      ]
    },
    {
      "type": "function",
      "line_start": 243,
      "code_text": "def merge_similar_entries(gl_map, precision=None):",
      "args": [
        "gl_map",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 595,
      "code_text": "def get_round_off_account_and_cost_center(company, voucher_type, voucher_no, use_company_default=False):",
      "args": [
        "company",
        "voucher_type",
        "voucher_no",
        "use_company_default"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def validate_accounting_period(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 390,
      "code_text": "def make_entry(args, adv_adj, update_outstanding, from_repost=False):",
      "args": [
        "args",
        "adv_adj",
        "update_outstanding",
        "from_repost"
      ]
    },
    {
      "type": "function",
      "line_start": 329,
      "code_text": "def toggle_debit_credit_if_negative(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 431,
      "code_text": "def process_debit_credit_difference(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 464,
      "code_text": "def get_debit_credit_difference(gl_map, precision):",
      "args": [
        "gl_map",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 494,
      "code_text": "def raise_debit_credit_not_equal_error(debit_credit_diff, voucher_type, voucher_no):\n\tfrappe.throw(\n\t\t_(\"Debit and Credit not equal for {0} #{1}. Difference is {2}.\").format(\n\t\t\tvoucher_type, voucher_no, debit_credit_diff\n\t\t)\n\t)",
      "args": [
        "debit_credit_diff",
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 577,
      "code_text": "def update_accounting_dimensions(round_off_gle):",
      "args": [
        "round_off_gle"
      ]
    },
    {
      "type": "function",
      "line_start": 727,
      "code_text": "def check_freezing_date(posting_date, adv_adj=False):",
      "args": [
        "posting_date",
        "adv_adj"
      ]
    },
    {
      "type": "function",
      "line_start": 751,
      "code_text": "def validate_against_pcv(is_opening, posting_date, company):",
      "args": [
        "is_opening",
        "posting_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 769,
      "code_text": "def set_as_cancel(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def make_acc_dimensions_offsetting_entry(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_accounting_dimensions_for_offsetting_entry(gl_map, company):",
      "args": [
        "gl_map",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def validate_disabled_accounts(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def distribute_gl_based_on_cost_center_allocation(gl_map, precision=None, from_repost=False):",
      "args": [
        "gl_map",
        "precision",
        "from_repost"
      ]
    },
    {
      "type": "function",
      "line_start": 217,
      "code_text": "def get_cost_center_allocation_data(company, posting_date, cost_center):",
      "args": [
        "company",
        "posting_date",
        "cost_center"
      ]
    },
    {
      "type": "function",
      "line_start": 297,
      "code_text": "def get_merge_properties(dimensions=None):",
      "args": [
        "dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 315,
      "code_text": "def get_merge_key(entry, merge_properties):\n\tmerge_key = []\n\tfor fieldname in merge_properties:\n\t\tmerge_key.append(entry.get(fieldname, \"\"))\n\n\treturn tuple(merge_key)",
      "args": [
        "entry",
        "merge_properties"
      ]
    },
    {
      "type": "function",
      "line_start": 323,
      "code_text": "def check_if_in_list(gle, gl_map):\n\tfor e in gl_map:\n\t\tif e.merge_key == gle.merge_key:\n\t\t\treturn e",
      "args": [
        "gle",
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 372,
      "code_text": "def save_entries(gl_map, adv_adj, update_outstanding, from_repost=False):",
      "args": [
        "gl_map",
        "adv_adj",
        "update_outstanding",
        "from_repost"
      ]
    },
    {
      "type": "function",
      "line_start": 404,
      "code_text": "def validate_cwip_accounts(gl_map):",
      "args": [
        "gl_map"
      ]
    },
    {
      "type": "function",
      "line_start": 485,
      "code_text": "def get_debit_credit_allowance(voucher_type, precision):",
      "args": [
        "voucher_type",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 502,
      "code_text": "def has_opening_entries(gl_map: list) -> bool:\n\tfor x in gl_map:\n\t\tif x.is_opening == \"Yes\":\n\t\t\treturn True\n\treturn False",
      "args": [
        "gl_map: list"
      ]
    },
    {
      "type": "function",
      "line_start": 509,
      "code_text": "def make_round_off_gle(gl_map, debit_credit_diff, trx_cur_debit_credit_diff, precision):",
      "args": [
        "gl_map",
        "debit_credit_diff",
        "trx_cur_debit_credit_diff",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 781,
      "code_text": "def validate_allowed_dimensions(gl_entry, dimension_filter_map):",
      "args": [
        "gl_entry",
        "dimension_filter_map"
      ]
    },
    {
      "type": "function",
      "line_start": 817,
      "code_text": "def is_immutable_ledger_enabled():\n\treturn frappe.db.get_single_value(\"Accounts Settings\", \"enable_immutable_ledger\")",
      "args": []
    }
  ],
  "erpnext\\selling\\page\\point_of_sale\\point_of_sale.py": [
    {
      "type": "function",
      "line_start": 242,
      "code_text": "def get_conditions(search_term):",
      "args": [
        "search_term"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_items(start, page_length, price_list, item_group, pos_profile, search_term=\"\"):",
      "args": [
        "start",
        "page_length",
        "price_list",
        "item_group",
        "pos_profile",
        "search_term"
      ]
    },
    {
      "type": "function",
      "line_start": 263,
      "code_text": "def get_item_group_condition(pos_profile):",
      "args": [
        "pos_profile"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def search_by_term(search_term, warehouse, price_list):",
      "args": [
        "search_term",
        "warehouse",
        "price_list"
      ]
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def filter_result_items(result, pos_profile):\n\tif result and result.get(\"items\"):\n\t\tpos_item_groups = frappe.db.get_all(\"POS Item Group\", {\"parent\": pos_profile}, pluck=\"item_group\")\n\t\tif not pos_item_groups:\n\t\t\treturn\n\t\tresult[\"items\"] = [item for item in result.get(\"items\") if item.get(\"item_group\") in pos_item_groups]",
      "args": [
        "result",
        "pos_profile"
      ]
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def get_parent_item_group():\n\t# Using get_all to ignore user permission\n\titem_group = frappe.get_all(\"Item Group\", {\"lft\": 1, \"is_group\": 1}, pluck=\"name\")\n\tif item_group:\n\t\treturn item_group[0]",
      "args": []
    },
    {
      "type": "function",
      "line_start": 238,
      "code_text": "def search_for_serial_or_batch_or_barcode_number(search_value: str) -> dict[str, str | None]:\n\treturn scan_barcode(search_value)",
      "args": [
        "search_value: str"
      ]
    },
    {
      "type": "function",
      "line_start": 252,
      "code_text": "def add_search_fields_condition(search_term):",
      "args": [
        "search_term"
      ]
    },
    {
      "type": "function",
      "line_start": 274,
      "code_text": "def item_group_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 294,
      "code_text": "def check_opening_entry(user):",
      "args": [
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 306,
      "code_text": "def create_opening_voucher(pos_profile, company, balance_details):",
      "args": [
        "pos_profile",
        "company",
        "balance_details"
      ]
    },
    {
      "type": "function",
      "line_start": 326,
      "code_text": "def get_past_order_list(search_term, status, limit=20):",
      "args": [
        "search_term",
        "status",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 354,
      "code_text": "def set_customer_info(fieldname, customer, value=\"\"):",
      "args": [
        "fieldname",
        "customer",
        "value"
      ]
    },
    {
      "type": "function",
      "line_start": 394,
      "code_text": "def get_pos_profile_data(pos_profile):",
      "args": [
        "pos_profile"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_accounts_controller.py": [
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def make_customer(customer_name, currency=None):",
      "args": [
        "customer_name",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def make_supplier(supplier_name, currency=None):",
      "args": [
        "supplier_name",
        "currency"
      ]
    },
    {
      "type": "class",
      "line_start": 53,
      "code_text": "class TestAccountsController(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_account()\n\t\tself.create_item()\n\t\tself.create_parties()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef create_item(self):\n\t\titem = create_item(\n\t\t\titem_code=\"_Test Notebook\", is_stock_item=0, company=self.company, warehouse=self.warehouse\n\t\t)\n\t\tself.item = item if isinstance(item, str) else item.item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef create_parties(self):\n\t\tself.create_customer()\n\t\tself.create_supplier()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef create_customer(self):\n\t\tself.customer = make_customer(\"_Test MC Customer USD\", \"USD\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef create_supplier(self):\n\t\tself.supplier = make_supplier(\"_Test MC Supplier USD\", \"USD\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef create_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef setup_advance_accounts_in_party_master(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef remove_advance_accounts_from_party_master(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef create_sales_invoice(\n\t\tself,\n\t\tqty=1,\n\t\trate=1,\n\t\tconversion_rate=80,\n\t\tposting_date=None,\n\t\tdo_not_save=False,\n\t\tdo_not_submit=False,\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "conversion_rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 260,
      "code_text": "\tdef create_payment_entry(\n\t\tself, amount=1, source_exc_rate=75, posting_date=None, customer=None, submit=True\n\t):",
      "args": [
        "self",
        "amount",
        "source_exc_rate",
        "posting_date",
        "customer",
        "submit"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef create_purchase_invoice(\n\t\tself,\n\t\tqty=1,\n\t\trate=1,\n\t\tconversion_rate=80,\n\t\tposting_date=None,\n\t\tdo_not_save=False,\n\t\tdo_not_submit=False,\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "conversion_rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 325,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 337,
      "code_text": "\tdef create_payment_reconciliation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef create_journal_entry(\n\t\tself,\n\t\tacc1=None,\n\t\tacc1_exc_rate=None,\n\t\tacc2_exc_rate=None,\n\t\tacc2=None,\n\t\tacc1_amount=0,\n\t\tacc2_amount=0,\n\t\tposting_date=None,\n\t\tcost_center=None,\n\t):",
      "args": [
        "self",
        "acc1",
        "acc1_exc_rate",
        "acc2_exc_rate",
        "acc2",
        "acc1_amount",
        "acc2_amount",
        "posting_date",
        "cost_center"
      ]
    },
    {
      "type": "method",
      "line_start": 389,
      "code_text": "\tdef get_journals_for(self, voucher_type: str, voucher_no: str) -> list:",
      "args": [
        "self",
        "voucher_type: str",
        "voucher_no: str"
      ]
    },
    {
      "type": "method",
      "line_start": 399,
      "code_text": "\tdef assert_ledger_outstanding(\n\t\tself,\n\t\tvoucher_type: str,",
      "args": [
        "self",
        "voucher_type: str",
        "voucher_no: str",
        "outstanding: float",
        "outstanding_in_account_currency: float"
      ]
    },
    {
      "type": "method",
      "line_start": 427,
      "code_text": "\tdef test_10_payment_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 471,
      "code_text": "\tdef test_11_advance_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 522,
      "code_text": "\tdef test_12_partial_advance_and_payment_for_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 600,
      "code_text": "\tdef test_13_partial_advance_and_payment_for_invoice_with_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef test_14_same_payment_split_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 745,
      "code_text": "\tdef test_15_gain_loss_on_different_posting_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 815,
      "code_text": "\tdef test_16_internal_transfer_at_arms_length_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 878,
      "code_text": "\tdef test_17_gain_loss_posting_date_for_normal_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 939,
      "code_text": "\tdef test_18_fetch_taxes_based_on_taxes_and_charges_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 967,
      "code_text": "\tdef test_20_journal_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1025,
      "code_text": "\tdef test_21_advance_journal_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1090,
      "code_text": "\tdef test_22_partial_advance_and_payment_for_invoice_with_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1212,
      "code_text": "\tdef test_23_same_journal_split_against_single_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1297,
      "code_text": "\tdef test_24_journal_against_multiple_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1351,
      "code_text": "\tdef test_30_cr_note_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1408,
      "code_text": "\tdef test_40_cost_center_from_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1443,
      "code_text": "\tdef test_41_cost_center_from_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1497,
      "code_text": "\tdef test_42_cost_center_from_cr_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1546,
      "code_text": "\tdef setup_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1560,
      "code_text": "\tdef test_90_dimensions_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1631,
      "code_text": "\tdef test_91_cr_note_should_inherit_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1675,
      "code_text": "\tdef test_92_dimension_inhertiance_exc_gain_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1712,
      "code_text": "\tdef test_93_dimension_inheritance_on_advance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1758,
      "code_text": "\tdef test_50_journal_against_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1825,
      "code_text": "\tdef test_60_payment_entry_against_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1892,
      "code_text": "\tdef test_61_payment_entry_against_journal_for_payable_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1961,
      "code_text": "\tdef test_70_advance_payment_against_sales_invoice_in_foreign_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2012,
      "code_text": "\tdef test_71_advance_payment_against_purchase_invoice_in_foreign_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2081,
      "code_text": "\tdef test_difference_posting_date_in_pi_and_si(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2173,
      "code_text": "\tdef test_company_validation_in_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2183,
      "code_text": "\tdef test_party_billing_and_shipping_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2222,
      "code_text": "\tdef test_party_contact(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reservation_entry\\stock_reservation_entry.py": [
    {
      "type": "function",
      "line_start": 1403,
      "code_text": "def get_stock_reservation_entries_for_voucher(\n\tvoucher_type: str,",
      "args": [
        "voucher_type: str",
        "voucher_no: str",
        "voucher_detail_no",
        "fields",
        "ignore_status: bool"
      ]
    },
    {
      "type": "function",
      "line_start": 959,
      "code_text": "def has_reserved_stock(voucher_type: str, voucher_no: str, voucher_detail_no: str | None = None) -> bool:",
      "args": [
        "voucher_type: str",
        "voucher_no: str",
        "voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1353,
      "code_text": "def cancel_stock_reservation_entries(\n\tvoucher_type: str | None = None,",
      "args": [
        "voucher_type",
        "voucher_no",
        "voucher_detail_no",
        "from_voucher_type",
        "from_voucher_no",
        "from_voucher_detail_no",
        "sre_list",
        "notify: bool"
      ]
    },
    {
      "type": "function",
      "line_start": 580,
      "code_text": "def get_available_qty_to_reserve(\n\titem_code: str, warehouse: str, batch_no: str | None = None, ignore_sre=None",
      "args": [
        "item_code: str",
        "warehouse: str",
        "batch_no",
        "ignore_sre"
      ]
    },
    {
      "type": "function",
      "line_start": 562,
      "code_text": "def validate_stock_reservation_settings(voucher: object) -> None:",
      "args": [
        "voucher: object"
      ]
    },
    {
      "type": "function",
      "line_start": 733,
      "code_text": "def get_sre_reserved_qty_details_for_voucher(voucher_type: str, voucher_no: str) -> dict:",
      "args": [
        "voucher_type: str",
        "voucher_no: str"
      ]
    },
    {
      "type": "class",
      "line_start": 970,
      "code_text": "class StockReservation:"
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class StockReservationEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef before_submit(self) -> None:\n\t\tself.set_reservation_based_on()\n\t\tself.validate_reservation_based_on_qty()\n\t\tself.auto_reserve_serial_and_batch()\n\t\tself.validate_reservation_based_on_serial_and_batch()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef on_submit(self) -> None:\n\t\tself.update_reserved_qty_in_voucher()\n\t\tself.update_reserved_qty_in_pick_list()\n\t\tself.update_status()\n\t\tself.update_reserved_stock_in_bin()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef on_update_after_submit(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef on_cancel(self) -> None:\n\t\tself.update_reserved_qty_in_voucher()\n\t\tself.update_reserved_qty_in_pick_list()\n\t\tself.update_status()\n\t\tself.update_reserved_stock_in_bin()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef validate_amended_doc(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef validate_mandatory(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef validate_group_warehouse(self) -> None:\n\t\t\"\"\"Raises an exception if `Warehouse` is a Group Warehouse.\"\"\"\n\n\t\tif frappe.get_cached_value(\"Warehouse\", self.warehouse, \"is_group\"):\n\t\t\tmsg = _(\"Stock cannot be reserved in group warehouse {0}.\").format(frappe.bold(self.warehouse))\n\t\t\tfrappe.throw(msg, title=_(\"Invalid Warehouse\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef validate_uom_is_integer(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef set_reservation_based_on(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 150,
      "code_text": "\tdef validate_reservation_based_on_qty(self) -> None:\n\t\t\"\"\"Validates `Reserved Qty` when `Reservation Based On` is `Qty`.\"\"\"\n\n\t\tif self.reservation_based_on == \"Qty\":\n\t\t\tself.validate_with_allowed_qty(self.reserved_qty)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef auto_reserve_serial_and_batch(self, based_on: str | None = None) -> None:",
      "args": [
        "self",
        "based_on"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef validate_reservation_based_on_serial_and_batch(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 330,
      "code_text": "\tdef update_reserved_qty_in_voucher(\n\t\tself, reserved_qty_field: str = \"stock_reserved_qty\", update_modified: bool = True",
      "args": [
        "self",
        "reserved_qty_field: str",
        "update_modified: bool"
      ]
    },
    {
      "type": "method",
      "line_start": 361,
      "code_text": "\tdef update_reserved_qty_in_pick_list(\n\t\tself, reserved_qty_field: str = \"stock_reserved_qty\", update_modified: bool = True",
      "args": [
        "self",
        "reserved_qty_field: str",
        "update_modified: bool"
      ]
    },
    {
      "type": "method",
      "line_start": 387,
      "code_text": "\tdef update_reserved_stock_in_bin(self) -> None:\n\t\t\"\"\"Updates `Reserved Stock` in Bin.\"\"\"\n\n\t\tbin_name = get_or_make_bin(self.item_code, self.warehouse)\n\t\tbin_doc = frappe.get_cached_doc(\"Bin\", bin_name)\n\t\tbin_doc.update_reserved_stock()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 394,
      "code_text": "\tdef update_status(self, status: str | None = None, update_modified: bool = True) -> None:",
      "args": [
        "self",
        "status",
        "update_modified: bool"
      ]
    },
    {
      "type": "method",
      "line_start": 414,
      "code_text": "\tdef can_be_updated(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef validate_with_allowed_qty(self, qty_to_be_reserved: float) -> None:",
      "args": [
        "self",
        "qty_to_be_reserved: float"
      ]
    },
    {
      "type": "method",
      "line_start": 510,
      "code_text": "\tdef consume_serial_batch_for_material_transfer(self, row_wise_serial_batch):",
      "args": [
        "self",
        "row_wise_serial_batch"
      ]
    },
    {
      "type": "function",
      "line_start": 619,
      "code_text": "def get_available_serial_nos_to_reserve(\n\titem_code: str, warehouse: str, has_batch_no: bool = False, ignore_sre=None",
      "args": [
        "item_code: str",
        "warehouse: str",
        "has_batch_no: bool",
        "ignore_sre"
      ]
    },
    {
      "type": "function",
      "line_start": 674,
      "code_text": "def get_sre_reserved_qty_for_item_and_warehouse(item_code: str, warehouse: str | None = None) -> float:",
      "args": [
        "item_code: str",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 701,
      "code_text": "def get_sre_reserved_qty_for_items_and_warehouses(\n\titem_code_list: list, warehouse_list: list | None = None",
      "args": [
        "item_code_list: list",
        "warehouse_list"
      ]
    },
    {
      "type": "function",
      "line_start": 755,
      "code_text": "def get_sre_reserved_warehouses_for_voucher(\n\tvoucher_type: str, voucher_no: str, voucher_detail_no: str | None = None",
      "args": [
        "voucher_type: str",
        "voucher_no: str",
        "voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 782,
      "code_text": "def get_sre_reserved_qty_for_voucher_detail_no(\n\tvoucher_type: str,",
      "args": [
        "voucher_type: str",
        "voucher_no: str",
        "voucher_detail_no: str",
        "ignore_sre",
        "warehouse",
        "from_voucher_detail_no"
      ]
    },
    {
      "type": "function",
      "line_start": 826,
      "code_text": "def get_sre_reserved_serial_nos_details(\n\titem_code: str, warehouse: str, serial_nos: list | None = None",
      "args": [
        "item_code: str",
        "warehouse: str",
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 855,
      "code_text": "def get_sre_reserved_batch_nos_details(item_code: str, warehouse: str, batch_nos: list | None = None) -> dict:",
      "args": [
        "item_code: str",
        "warehouse: str",
        "batch_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 886,
      "code_text": "def get_sre_details_for_voucher(voucher_type: str, voucher_no: str) -> list[dict]:",
      "args": [
        "voucher_type: str",
        "voucher_no: str"
      ]
    },
    {
      "type": "function",
      "line_start": 915,
      "code_text": "def get_serial_batch_entries_for_voucher(sre_name: str) -> list[dict]:",
      "args": [
        "sre_name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 936,
      "code_text": "def get_ssb_bundle_for_voucher(sre: dict) -> object:",
      "args": [
        "sre: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 971,
      "code_text": "\tdef __init__(self, doc, items=None, notify=True):",
      "args": [
        "self",
        "doc",
        "items",
        "notify"
      ]
    },
    {
      "type": "method",
      "line_start": 980,
      "code_text": "\tdef initialize_fields(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 993,
      "code_text": "\tdef cancel_stock_reservation_entries(self, names=None) -> None:",
      "args": [
        "self",
        "names"
      ]
    },
    {
      "type": "method",
      "line_start": 1028,
      "code_text": "\tdef make_stock_reservation_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1091,
      "code_text": "\tdef set_serial_batch(self, sre, serial_batch_bundles):",
      "args": [
        "self",
        "sre",
        "serial_batch_bundles"
      ]
    },
    {
      "type": "method",
      "line_start": 1109,
      "code_text": "\tdef throw_stock_not_exists_error(self, item, warehouse):",
      "args": [
        "self",
        "item",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 1118,
      "code_text": "\tdef get_available_qty_to_reserve(self, item_code, warehouse, ignore_sre=None):",
      "args": [
        "self",
        "item_code",
        "warehouse",
        "ignore_sre"
      ]
    },
    {
      "type": "function",
      "line_start": 1146,
      "code_text": "def create_stock_reservation_entries_for_so_items(\n\tsales_order: object,",
      "args": [
        "sales_order: object",
        "items_details",
        "from_voucher_type",
        "notify"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reconciliation\\stock_reconciliation.py": [
    {
      "type": "function",
      "line_start": 1148,
      "code_text": "def get_items(warehouse, posting_date, posting_time, company, item_code=None, ignore_empty_stock=False):",
      "args": [
        "warehouse",
        "posting_date",
        "posting_time",
        "company",
        "item_code",
        "ignore_empty_stock"
      ]
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class EmptyStockReconciliationItemsError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1314,
      "code_text": "def get_stock_balance_for(\n\titem_code: str,",
      "args": [
        "item_code: str",
        "warehouse: str",
        "posting_date",
        "posting_time",
        "batch_no",
        "with_valuation_rate: bool",
        "inventory_dimensions_dict",
        "row",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class OpeningEntryAccountError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1268,
      "code_text": "def get_item_data(row, qty, valuation_rate, serial_no=None):",
      "args": [
        "row",
        "qty",
        "valuation_rate",
        "serial_no"
      ]
    },
    {
      "type": "class",
      "line_start": 30,
      "code_text": "class StockReconciliation(StockController):"
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.head_row = [\"Item Code\", \"Warehouse\", \"Quantity\", \"Valuation Rate\"]",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef on_update(self):\n\t\tself.set_serial_and_batch_bundle(ignore_validate=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef validate_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef on_submit(self):\n\t\tself.make_bundle_for_current_qty()\n\t\tself.make_bundle_using_old_serial_batch_fields()\n\t\tself.update_stock_ledger()\n\t\tself.make_gl_entries()\n\t\tself.repost_future_sle_and_gle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef make_bundle_for_current_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef set_current_serial_and_batch_bundle(self, voucher_detail_no=None, save=False) -> None:",
      "args": [
        "self",
        "voucher_detail_no",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef get_bundle_for_specific_serial_batch(self, row) -> str:",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 351,
      "code_text": "\tdef has_change_in_serial_batch(self, row) -> bool:",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 375,
      "code_text": "\tdef set_new_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef update_existing_serial_and_batch_bundle(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 437,
      "code_text": "\tdef remove_items_with_no_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 511,
      "code_text": "\tdef calculate_difference_amount(self, item, item_dict):",
      "args": [
        "self",
        "item",
        "item_dict"
      ]
    },
    {
      "type": "method",
      "line_start": 523,
      "code_text": "\tdef validate_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 605,
      "code_text": "\tdef validate_item(self, item_code, row):",
      "args": [
        "self",
        "item_code",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 627,
      "code_text": "\tdef validate_reserved_stock(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 667,
      "code_text": "\tdef update_stock_ledger(self, allow_negative_stock=False):",
      "args": [
        "self",
        "allow_negative_stock"
      ]
    },
    {
      "type": "method",
      "line_start": 730,
      "code_text": "\tdef make_adjustment_entry(self, row, sl_entries):",
      "args": [
        "self",
        "row",
        "sl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 745,
      "code_text": "\tdef get_sle_for_serialized_items(self, row, sl_entries):",
      "args": [
        "self",
        "row",
        "sl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 770,
      "code_text": "\tdef update_valuation_rate_for_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 778,
      "code_text": "\tdef update_valuation_rate_for_serial_nos(self, row, serial_nos):",
      "args": [
        "self",
        "row",
        "serial_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef get_sle_for_items(self, row, serial_nos=None, current_bundle=True):",
      "args": [
        "self",
        "row",
        "serial_nos",
        "current_bundle"
      ]
    },
    {
      "type": "method",
      "line_start": 844,
      "code_text": "\tdef make_sle_on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 861,
      "code_text": "\tdef merge_similar_item_serial_nos(self, sl_entries):",
      "args": [
        "self",
        "sl_entries"
      ]
    },
    {
      "type": "method",
      "line_start": 889,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None):\n\t\tif not self.cost_center:\n\t\t\tmsgprint(_(\"Please enter Cost Center\"), raise_exception=1)\n\n\t\treturn super().get_gl_entries(warehouse_account, self.expense_account, self.cost_center)",
      "args": [
        "self",
        "warehouse_account"
      ]
    },
    {
      "type": "method",
      "line_start": 895,
      "code_text": "\tdef validate_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 912,
      "code_text": "\tdef set_zero_value_for_customer_provided_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 928,
      "code_text": "\tdef set_total_qty_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 938,
      "code_text": "\tdef get_items_for(self, warehouse):\n\t\tself.items = []\n\t\tfor item in get_items(warehouse, self.posting_date, self.posting_time, self.company):\n\t\t\tself.append(\"items\", item)",
      "args": [
        "self",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 943,
      "code_text": "\tdef submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 954,
      "code_text": "\tdef cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 965,
      "code_text": "\tdef recalculate_current_qty(self, voucher_detail_no):",
      "args": [
        "self",
        "voucher_detail_no"
      ]
    },
    {
      "type": "method",
      "line_start": 1033,
      "code_text": "\tdef has_negative_stock_allowed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1046,
      "code_text": "\tdef get_current_qty_for_serial_or_batch(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 1056,
      "code_text": "\tdef get_current_qty_for_serial_nos(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1093,
      "code_text": "\tdef get_current_qty_for_batch_nos(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1118,
      "code_text": "def get_batch_qty_for_stock_reco(item_code, warehouse, batch_no, posting_date, posting_time, voucher_no):",
      "args": [
        "item_code",
        "warehouse",
        "batch_no",
        "posting_date",
        "posting_time",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 1197,
      "code_text": "def get_item_and_warehouses(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 1211,
      "code_text": "def get_items_for_stock_reco(warehouse, company):",
      "args": [
        "warehouse",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 1283,
      "code_text": "def get_itemwise_batch(warehouse, posting_date, company, item_code=None):",
      "args": [
        "warehouse",
        "posting_date",
        "company",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 1408,
      "code_text": "def get_difference_account(purpose, company):",
      "args": [
        "purpose",
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_reconciliation\\test_payment_reconciliation.py": [
    {
      "type": "function",
      "line_start": 2158,
      "code_text": "def make_customer(customer_name, currency=None):",
      "args": [
        "customer_name",
        "currency"
      ]
    },
    {
      "type": "function",
      "line_start": 2172,
      "code_text": "def make_supplier(supplier_name, currency=None):",
      "args": [
        "supplier_name",
        "currency"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestPaymentReconciliation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestPaymentReconciliation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef create_item(self):\n\t\titem = create_item(\n\t\t\titem_code=\"_Test PR Item\", is_stock_item=0, company=self.company, warehouse=self.warehouse\n\t\t)\n\t\tself.item = item if isinstance(item, str) else item.item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef create_customer(self):\n\t\tself.customer = make_customer(\"_Test PR Customer\")\n\t\tself.customer2 = make_customer(\"_Test PR Customer 2\")\n\t\tself.customer3 = make_customer(\"_Test PR Customer 3\", \"EUR\")\n\t\tself.customer4 = make_customer(\"_Test PR Customer 4\", \"EUR\")\n\t\tself.customer5 = make_customer(\"_Test PR Customer 5\", \"EUR\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef create_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef create_sales_invoice(\n\t\tself, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 187,
      "code_text": "\tdef create_payment_entry(self, amount=100, posting_date=None, customer=None):",
      "args": [
        "self",
        "amount",
        "posting_date",
        "customer"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef create_purchase_invoice(\n\t\tself, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef create_purchase_order(\n\t\tself, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 270,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 282,
      "code_text": "\tdef create_payment_reconciliation(self, party_is_customer=True):",
      "args": [
        "self",
        "party_is_customer"
      ]
    },
    {
      "type": "method",
      "line_start": 291,
      "code_text": "\tdef create_journal_entry(self, acc1=None, acc2=None, amount=0, posting_date=None, cost_center=None):",
      "args": [
        "self",
        "acc1",
        "acc2",
        "amount",
        "posting_date",
        "cost_center"
      ]
    },
    {
      "type": "method",
      "line_start": 317,
      "code_text": "\tdef create_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef test_filter_min_max(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef test_filter_posting_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 400,
      "code_text": "\tdef test_filter_posting_date_case2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 435,
      "code_text": "\tdef test_filter_invoice_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 456,
      "code_text": "\tdef test_payment_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 492,
      "code_text": "\tdef test_payment_against_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 526,
      "code_text": "\tdef test_payment_against_foreign_currency_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 611,
      "code_text": "\tdef test_journal_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 645,
      "code_text": "\tdef test_negative_debit_or_credit_journal_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 681,
      "code_text": "\tdef test_journal_against_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 716,
      "code_text": "\tdef test_cr_note_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 752,
      "code_text": "\tdef test_invoice_status_after_cr_note_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 816,
      "code_text": "\tdef test_cr_note_partial_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 855,
      "code_text": "\tdef test_pr_output_foreign_currency_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 909,
      "code_text": "\tdef test_difference_amount_via_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1003,
      "code_text": "\tdef test_difference_amount_via_negative_debit_or_credit_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1097,
      "code_text": "\tdef test_difference_amount_via_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1163,
      "code_text": "\tdef test_differing_cost_center_on_invoice_and_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1184,
      "code_text": "\tdef test_cost_center_filter_on_vouchers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1253,
      "code_text": "\tdef test_no_difference_amount_for_base_currency_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1304,
      "code_text": "\tdef test_reconciliation_purchase_invoice_against_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1346,
      "code_text": "\tdef test_reconciliation_from_purchase_order_to_multiple_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1461,
      "code_text": "\tdef test_rounding_of_unallocated_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1495,
      "code_text": "\tdef test_reverse_payment_against_payment_for_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1548,
      "code_text": "\tdef test_advance_reverse_payment_against_payment_for_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1677,
      "code_text": "\tdef test_advance_payment_reconciliation_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1726,
      "code_text": "\tdef test_advance_payment_reconciliation_against_journal_for_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1834,
      "code_text": "\tdef test_advance_payment_reconciliation_against_journal_for_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1949,
      "code_text": "\tdef test_cr_note_payment_limit_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1989,
      "code_text": "\tdef test_reconciliation_on_closed_period_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 2061,
      "code_text": "\tdef test_advance_reconciliation_effect_on_same_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 2186,
      "code_text": "def create_fiscal_year(company, year_start_date, year_end_date):",
      "args": [
        "company",
        "year_start_date",
        "year_end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 2209,
      "code_text": "def make_period_closing_voucher(company, cost_center, posting_date=None, submit=True):",
      "args": [
        "company",
        "cost_center",
        "posting_date",
        "submit"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry\\test_journal_entry.py": [
    {
      "type": "function",
      "line_start": 592,
      "code_text": "def make_journal_entry(\n\taccount1,\n\taccount2,\n\tamount,\n\tcost_center=None,\n\tposting_date=None,\n\texchange_rate=1,\n\tsave=True,\n\tsubmit=False,\n\tproject=None,\n\tcompany=None,\n):",
      "args": [
        "account1",
        "account2",
        "amount",
        "cost_center",
        "posting_date",
        "exchange_rate",
        "save",
        "submit",
        "project",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestJournalEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestJournalEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_journal_entry_with_against_jv(self):\n\t\tjv_invoice = frappe.copy_doc(self.globalTestRecords[\"Journal Entry\"][2])\n\t\tbase_jv = frappe.copy_doc(self.globalTestRecords[\"Journal Entry\"][0])\n\t\tself.jv_against_voucher_testcase(base_jv, jv_invoice)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_jv_against_sales_order(self):\n\t\tfrom erpnext.selling.doctype.sales_order.test_sales_order import make_sales_order\n\n\t\tsales_order = make_sales_order(do_not_save=True)\n\t\tbase_jv = frappe.copy_doc(self.globalTestRecords[\"Journal Entry\"][0])\n\t\tself.jv_against_voucher_testcase(base_jv, sales_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef test_jv_against_purchase_order(self):\n\t\tfrom erpnext.buying.doctype.purchase_order.test_purchase_order import create_purchase_order\n\n\t\tpurchase_order = create_purchase_order(do_not_save=True)\n\t\tbase_jv = frappe.copy_doc(self.globalTestRecords[\"Journal Entry\"][1])\n\t\tself.jv_against_voucher_testcase(base_jv, purchase_order)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef jv_against_voucher_testcase(self, base_jv, test_voucher):",
      "args": [
        "self",
        "base_jv",
        "test_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef advance_paid_testcase(self, base_jv, test_voucher, dr_or_cr):",
      "args": [
        "self",
        "base_jv",
        "test_voucher",
        "dr_or_cr"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef cancel_against_voucher_testcase(self, test_voucher):",
      "args": [
        "self",
        "test_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef test_jv_against_stock_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef test_multi_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef test_reverse_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 259,
      "code_text": "\tdef test_disallow_change_in_account_currency_for_a_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef test_inter_company_jv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef test_jv_with_cost_centre(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 357,
      "code_text": "\tdef test_jv_with_project(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 399,
      "code_text": "\tdef test_jv_account_and_party_balance_with_cost_centre(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 420,
      "code_text": "\tdef test_repost_accounting_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef check_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 488,
      "code_text": "\tdef test_negative_debit_and_credit_with_same_account_head(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 525,
      "code_text": "\tdef test_toggle_debit_credit_if_negative(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 574,
      "code_text": "\tdef test_transaction_exchange_rate_on_journals(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\doctype\\service_level_agreement\\test_service_level_agreement.py": [
    {
      "type": "function",
      "line_start": 382,
      "code_text": "def create_service_level_agreement(\n\tdefault_service_level_agreement,\n\tholiday_list,\n\tresponse_time,\n\tentity_type,\n\tentity,\n\tresolution_time=0,\n\tdoctype=\"Issue\",\n\tcondition=\"\",\n\tsla_fulfilled_on=None,\n\tpause_sla_on=None,\n\tapply_sla_for_resolution=1,\n\tservice_level=None,\n\tstart_time=\"10:00:00\",",
      "args": [
        "default_service_level_agreement",
        "holiday_list",
        "response_time",
        "entity_type",
        "entity",
        "resolution_time",
        "doctype",
        "condition",
        "sla_fulfilled_on",
        "pause_sla_on",
        "apply_sla_for_resolution",
        "service_level",
        "start_time",
        "end_time"
      ]
    },
    {
      "type": "function",
      "line_start": 491,
      "code_text": "def create_customer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 640,
      "code_text": "def make_lead(creation=None, index=0, company=None):",
      "args": [
        "creation",
        "index",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 367,
      "code_text": "def get_service_level_agreement(\n\tdefault_service_level_agreement=None, entity_type=None, entity=None, doctype=\"Issue\"\n):",
      "args": [
        "default_service_level_agreement",
        "entity_type",
        "entity",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 508,
      "code_text": "def create_customer_group():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 520,
      "code_text": "def create_territory():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 535,
      "code_text": "def create_service_level_agreements_for_issues():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 589,
      "code_text": "def make_holiday_list():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 607,
      "code_text": "def create_custom_doctype():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestServiceLevelAgreement(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tfrappe.db.set_single_value(\"Support Settings\", \"track_service_level_agreement\", 1)\n\t\tlead = frappe.qb.DocType(\"Lead\")\n\t\tfrappe.qb.from_(lead).delete().where(lead.company == self.company).run()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_service_level_agreement(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef test_custom_field_creation_for_sla_on_standard_dt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 186,
      "code_text": "\tdef test_docfield_creation_for_sla_on_custom_dt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef test_sla_application(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef test_hold_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef test_failed_sla_for_response_only(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef test_fulfilled_sla_for_response_only(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef test_service_level_agreement_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 362,
      "code_text": "\tdef tearDown(self):\n\t\tfor d in frappe.get_all(\"Service Level Agreement\"):\n\t\t\tfrappe.delete_doc(\"Service Level Agreement\", d.name, force=1)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom\\test_bom.py": [
    {
      "type": "function",
      "line_start": 806,
      "code_text": "def create_nested_bom(tree, prefix=\"_Test bom \", submit=True):",
      "args": [
        "tree",
        "prefix",
        "submit"
      ]
    },
    {
      "type": "function",
      "line_start": 787,
      "code_text": "def get_default_bom(item_code=\"_Test FG Item 2\"):\n\treturn frappe.db.get_value(\"BOM\", {\"item\": item_code, \"is_active\": 1, \"is_default\": 1})",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 868,
      "code_text": "def create_bom_with_process_loss_item(\n\tfg_item, bom_item, scrap_qty=0, scrap_rate=0, fg_qty=2, process_loss_percentage=0\n):",
      "args": [
        "fg_item",
        "bom_item",
        "scrap_qty",
        "scrap_rate",
        "fg_qty",
        "process_loss_percentage"
      ]
    },
    {
      "type": "function",
      "line_start": 791,
      "code_text": "def level_order_traversal(node):",
      "args": [
        "node"
      ]
    },
    {
      "type": "function",
      "line_start": 848,
      "code_text": "def reset_item_valuation_rate(item_code, warehouse_list=None, qty=None, rate=None):",
      "args": [
        "item_code",
        "warehouse_list",
        "qty",
        "rate"
      ]
    },
    {
      "type": "function",
      "line_start": 903,
      "code_text": "def create_process_loss_bom_items():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class UnitTestBom(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class TestBOM(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef test_get_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_get_items_exploded(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef test_get_items_list(self):\n\t\tfrom erpnext.manufacturing.doctype.bom.bom import get_bom_items\n\n\t\tself.assertEqual(len(get_bom_items(bom=get_default_bom(), company=\"_Test Company\")), 3)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_default_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef test_update_bom_cost_in_all_boms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef test_bom_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef test_bom_cost_with_batch_size(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef test_bom_cost_multi_uom_multi_currency_based_on_price_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 200,
      "code_text": "\tdef test_bom_cost_multi_uom_based_on_valuation_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef test_bom_cost_with_fg_based_operating_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef test_subcontractor_sourced_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 330,
      "code_text": "\tdef test_bom_tree_representation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 356,
      "code_text": "\tdef test_generated_variant_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 397,
      "code_text": "\tdef test_bom_recursion_1st_level(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 410,
      "code_text": "\tdef test_bom_recursion_transitive(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 432,
      "code_text": "\tdef test_bom_with_process_loss_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 446,
      "code_text": "\tdef test_bom_item_query(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 464,
      "code_text": "\tdef test_exclude_exploded_items_from_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 483,
      "code_text": "\tdef test_valid_transfer_defaults(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef test_bom_name_length(self):\n\t\t\"\"\"test >140 char names\"\"\"\n\t\tbom_tree = {\"x\" * 140: {\" \".join([\"abc\"] * 35): {}}}\n\t\tcreate_nested_bom(bom_tree, prefix=\"\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 521,
      "code_text": "\tdef test_version_index(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 542,
      "code_text": "\tdef test_bom_versioning(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 575,
      "code_text": "\tdef test_clear_inpection_quality(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 593,
      "code_text": "\tdef test_bom_pricing_based_on_lpp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 614,
      "code_text": "\tdef test_set_default_bom_for_item_having_single_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 651,
      "code_text": "\tdef test_exploded_items_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 680,
      "code_text": "\tdef test_bom_cost_update_flag(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 700,
      "code_text": "\tdef test_bom_with_service_item_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 727,
      "code_text": "\tdef test_do_not_include_manufacturing_and_fixed_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 766,
      "code_text": "\tdef test_bom_raw_materials_stock_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 912,
      "code_text": "def create_process_loss_bom_item(item_tuple):\n\titem_code, stock_uom = item_tuple\n\tif frappe.db.exists(\"Item\", item_code) is None:\n\t\treturn make_item(item_code, {\"stock_uom\": stock_uom, \"valuation_rate\": 100})\n\telse:\n\t\treturn frappe.get_doc(\"Item\", item_code)",
      "args": [
        "item_tuple"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\employee\\employee.py": [
    {
      "type": "function",
      "line_start": 384,
      "code_text": "def get_children(doctype, parent=None, company=None, is_root=False, is_tree=False):",
      "args": [
        "doctype",
        "parent",
        "company",
        "is_root",
        "is_tree"
      ]
    },
    {
      "type": "function",
      "line_start": 407,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Employee\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 312,
      "code_text": "def create_user(employee, user=None, email=None):",
      "args": [
        "employee",
        "user",
        "email"
      ]
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class Employee(NestedSet):"
    },
    {
      "type": "function",
      "line_start": 275,
      "code_text": "def is_holiday(employee, date=None, raise_exception=True, only_non_weekly=False, with_description=False):",
      "args": [
        "employee",
        "date",
        "raise_exception",
        "only_non_weekly",
        "with_description"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class InactiveEmployeeStatusError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 257,
      "code_text": "def get_holiday_list_for_employee(employee, raise_exception=True):",
      "args": [
        "employee",
        "raise_exception"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class EmployeeUserDisabledError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef autoname(self):\n\t\tset_name_by_naming_series(self)\n\t\tself.employee = self.name",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef after_rename(self, old, new, merge):\n\t\tself.db_set(\"employee\", new)",
      "args": [
        "self",
        "old",
        "new",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef set_employee_name(self):\n\t\tself.employee_name = \" \".join(\n\t\t\tfilter(lambda x: x, [self.first_name, self.middle_name, self.last_name])\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate_user_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef update_nsm_model(self):\n\t\tfrappe.utils.nestedset.update_nsm(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef update_user_permissions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef update_user(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef validate_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef validate_email(self):\n\t\tif self.company_email:\n\t\t\tvalidate_email_address(self.company_email, True)\n\t\tif self.personal_email:\n\t\t\tvalidate_email_address(self.personal_email, True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef set_preferred_email(self):\n\t\tpreferred_email_field = frappe.scrub(self.prefered_contact_email)\n\t\tself.prefered_email = self.get(preferred_email_field) if preferred_email_field else None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef validate_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 186,
      "code_text": "\tdef validate_for_enabled_user_id(self, enabled):",
      "args": [
        "self",
        "enabled"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef validate_duplicate_user_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef validate_reports_to(self):\n\t\tif self.reports_to == self.name:\n\t\t\tthrow(_(\"Employee cannot report to himself.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef on_trash(self):\n\t\tself.update_nsm_model()\n\t\tdelete_events(self.doctype, self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef validate_preferred_email(self):\n\t\tif self.prefered_contact_email and not self.get(scrub(self.prefered_contact_email)):\n\t\t\tfrappe.msgprint(_(\"Please enter {0}\").format(self.prefered_contact_email))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef reset_employee_emails_cache(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 233,
      "code_text": "def validate_employee_role(doc, method=None, ignore_emp_check=False):",
      "args": [
        "doc",
        "method",
        "ignore_emp_check"
      ]
    },
    {
      "type": "function",
      "line_start": 251,
      "code_text": "def get_employee_email(employee_doc):\n\treturn (\n\t\temployee_doc.get(\"user_id\") or employee_doc.get(\"personal_email\") or employee_doc.get(\"company_email\")\n\t)",
      "args": [
        "employee_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 304,
      "code_text": "def deactivate_sales_person(status=None, employee=None):\n\tif status == \"Left\":\n\t\tsales_person = frappe.db.get_value(\"Sales Person\", {\"Employee\": employee})\n\t\tif sales_person:\n\t\t\tfrappe.db.set_value(\"Sales Person\", sales_person, \"enabled\", 0)",
      "args": [
        "status",
        "employee"
      ]
    },
    {
      "type": "function",
      "line_start": 350,
      "code_text": "def get_all_employee_emails(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 368,
      "code_text": "def get_employee_emails(employee_list):",
      "args": [
        "employee_list"
      ]
    },
    {
      "type": "function",
      "line_start": 411,
      "code_text": "def has_user_permission_for_employee(user_name, employee_name):",
      "args": [
        "user_name",
        "employee_name"
      ]
    },
    {
      "type": "function",
      "line_start": 422,
      "code_text": "def has_upload_permission(doc, ptype=\"read\", user=None):\n\tif not user:\n\t\tuser = frappe.session.user\n\tif get_doc_permissions(doc, user=user, ptype=ptype).get(ptype):\n\t\treturn True\n\treturn doc.user_id == user",
      "args": [
        "doc",
        "ptype",
        "user"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\subscription\\test_subscription.py": [
    {
      "type": "function",
      "line_start": 635,
      "code_text": "def create_subscription(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 588,
      "code_text": "def create_plan(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestSubscription(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestSubscription(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef setUp(self):\n\t\tmake_plans()\n\t\tcreate_parties()\n\t\treset_settings()\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"acc_frozen_upto\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_create_subscription_with_trial_with_correct_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_create_subscription_without_trial_with_correct_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef test_create_subscription_trial_with_wrong_dates(self):\n\t\tsubscription = create_subscription(\n\t\t\ttrial_period_start=add_days(nowdate(), 30), trial_period_end=nowdate(), do_not_save=True\n\t\t)\n\t\tself.assertRaises(frappe.ValidationError, subscription.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef test_invoice_is_generated_at_end_of_billing_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef test_status_goes_back_to_active_after_invoice_is_paid(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef test_subscription_cancel_after_grace_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef test_subscription_unpaid_after_grace_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef test_subscription_invoice_days_until_due(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef test_subscription_is_past_due_doesnt_change_within_grace_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef test_subscription_remains_active_during_invoice_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_subscription_cancellation(self):\n\t\tsubscription = create_subscription()\n\t\tsubscription.cancel_subscription()\n\n\t\tself.assertEqual(subscription.status, \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 196,
      "code_text": "\tdef test_subscription_cancellation_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef test_subscription_cancellation_invoices_with_prorata_false(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef test_subscription_cancellation_invoices_with_prorata_true(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 266,
      "code_text": "\tdef test_subscription_cancellation_and_process(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 291,
      "code_text": "\tdef test_subscription_restart_and_process(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 322,
      "code_text": "\tdef test_subscription_unpaid_back_to_active(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef test_restart_active_subscription(self):\n\t\tsubscription = create_subscription()\n\t\tself.assertRaises(frappe.ValidationError, subscription.restart_subscription)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef test_subscription_invoice_discount_percentage(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 362,
      "code_text": "\tdef test_subscription_invoice_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 371,
      "code_text": "\tdef test_prepaid_subscriptions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 386,
      "code_text": "\tdef test_prepaid_subscriptions_with_prorate_true(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 408,
      "code_text": "\tdef test_subscription_with_follow_calendar_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 426,
      "code_text": "\tdef test_subscription_generate_invoice_past_due(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 448,
      "code_text": "\tdef test_subscription_without_generate_invoice_past_due(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 464,
      "code_text": "\tdef test_multi_currency_subscription(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 486,
      "code_text": "\tdef test_multi_currency_subscription_with_default_company_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 504,
      "code_text": "\tdef test_subscription_recovery(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 541,
      "code_text": "\tdef test_subscription_invoice_generation_before_days(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 555,
      "code_text": "\tdef test_future_subscription(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 568,
      "code_text": "def make_plans():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 601,
      "code_text": "def create_parties():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 628,
      "code_text": "def reset_settings():\n\tsettings = frappe.get_single(\"Subscription Settings\")\n\tsettings.grace_period = 0\n\tsettings.cancel_after_grace = 0\n\tsettings.save()",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\stock_ledger_entry\\test_stock_ledger_entry.py": [
    {
      "type": "function",
      "line_start": 1440,
      "code_text": "def create_items(items=None, uoms=None):",
      "args": [
        "items",
        "uoms"
      ]
    },
    {
      "type": "function",
      "line_start": 1461,
      "code_text": "def setup_item_valuation_test(\n\tvaluation_method=\"FIFO\", suffix=None, use_batchwise_valuation=1, batches_list=None\n):",
      "args": [
        "valuation_method",
        "suffix",
        "use_batchwise_valuation",
        "batches_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1540,
      "code_text": "def fetch_sle_details_for_doc_list(doc_list, columns, as_dict=1):",
      "args": [
        "doc_list",
        "columns",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 1495,
      "code_text": "def create_purchase_receipt_entries_for_batchwise_item_valuation_test(pr_entry_list):",
      "args": [
        "pr_entry_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1507,
      "code_text": "def create_delivery_note_entries_for_batchwise_item_valuation_test(dn_entry_list):",
      "args": [
        "dn_entry_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1555,
      "code_text": "def get_stock_value_from_q(q):\n\treturn sum(r * q for r, q in json.loads(q))",
      "args": [
        "q"
      ]
    },
    {
      "type": "function",
      "line_start": 1559,
      "code_text": "def create_stock_entry_entries_for_batchwise_item_valuation_test(se_entry_list, purpose):",
      "args": [
        "se_entry_list",
        "purpose"
      ]
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestStockLedgerEntry(IntegrationTestCase, StockTestMixin):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef test_item_cost_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef test_purchase_return_valuation_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef test_sales_return_valuation_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 312,
      "code_text": "\tdef test_reposting_of_sales_return_for_packed_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 414,
      "code_text": "\tdef test_back_dated_entry_not_allowed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 459,
      "code_text": "\tdef test_batchwise_item_valuation_fifo(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 498,
      "code_text": "\tdef test_batchwise_item_valuation_moving_average(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 537,
      "code_text": "\tdef test_batchwise_item_valuation_stock_reco(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef test_batch_wise_valuation_across_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef test_intermediate_average_batch_wise_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 749,
      "code_text": "\tdef test_legacy_item_valuation_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 940,
      "code_text": "\tdef test_fifo_dependent_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 974,
      "code_text": "\tdef test_fifo_multi_item_repack_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1013,
      "code_text": "\tdef test_negative_fifo_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1032,
      "code_text": "\tdef test_dependent_gl_entry_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1084,
      "code_text": "\tdef test_tie_breaking(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1144,
      "code_text": "\tdef test_timestamp_clash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1179,
      "code_text": "\tdef test_previous_sle_with_clashed_timestamp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1219,
      "code_text": "\tdef test_backdated_sle_with_same_timestamp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1261,
      "code_text": "\tdef test_transfer_invariants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1296,
      "code_text": "\tdef test_negative_qty_with_precision(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1336,
      "code_text": "\tdef test_future_negative_qty_with_precision(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1383,
      "code_text": "def create_repack_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1429,
      "code_text": "def create_product_bundle_item(new_item_code, packed_items):",
      "args": [
        "new_item_code",
        "packed_items"
      ]
    },
    {
      "type": "function",
      "line_start": 1587,
      "code_text": "def get_unique_suffix():\n\t# Used to isolate valuation sensitive\n\t# tests to prevent future tests from failing.\n\treturn str(uuid4())[:8].upper()",
      "args": []
    },
    {
      "type": "class",
      "line_start": 1593,
      "code_text": "class UnitTestStockLedgerEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 1602,
      "code_text": "class TestDeferredNaming(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 1604,
      "code_text": "\tdef setUpClass(cls) -> None:\n\t\tsuper().setUpClass()\n\t\tcls.gle_autoname = frappe.get_meta(\"GL Entry\").autoname\n\t\tcls.sle_autoname = frappe.get_meta(\"Stock Ledger Entry\").autoname",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 1609,
      "code_text": "\tdef setUp(self) -> None:\n\t\tself.item = make_item().name\n\t\tself.warehouse = \"Stores - TCP1\"\n\t\tself.company = \"_Test Company with perpetual inventory\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1614,
      "code_text": "\tdef tearDown(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1636,
      "code_text": "\tdef get_gle_sles(se):\n\t\tfilters = {\"voucher_type\": se.doctype, \"voucher_no\": se.name}\n\t\tgle = set(frappe.get_list(\"GL Entry\", filters, pluck=\"name\"))\n\t\tsle = set(frappe.get_list(\"Stock Ledger Entry\", filters, pluck=\"name\"))\n\t\treturn gle, sle",
      "args": [
        "se"
      ]
    },
    {
      "type": "method",
      "line_start": 1642,
      "code_text": "\tdef test_deferred_naming(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1655,
      "code_text": "\tdef test_hash_naming(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\request_for_quotation\\request_for_quotation.py": [
    {
      "type": "function",
      "line_start": 358,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 374,
      "code_text": "def make_supplier_quotation_from_rfq(source_name, target_doc=None, for_supplier=None):",
      "args": [
        "source_name",
        "target_doc",
        "for_supplier"
      ]
    },
    {
      "type": "function",
      "line_start": 482,
      "code_text": "def get_pdf(\n\tname: str,",
      "args": [
        "name: str",
        "supplier: str",
        "print_format",
        "language",
        "letterhead"
      ]
    },
    {
      "type": "function",
      "line_start": 441,
      "code_text": "def add_items(sq_doc, supplier, items):",
      "args": [
        "sq_doc",
        "supplier",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 414,
      "code_text": "def create_supplier_quotation(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class RequestforQuotation(BuyingController):"
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef validate_duplicate_supplier(self):\n\t\tsupplier_list = [d.supplier for d in self.suppliers]\n\t\tif len(supplier_list) != len(set(supplier_list)):\n\t\t\tfrappe.throw(_(\"Same supplier has been entered multiple times\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef validate_supplier_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef update_email_id(self):\n\t\tfor rfq_supplier in self.suppliers:\n\t\t\tif not rfq_supplier.email_id:\n\t\t\t\trfq_supplier.email_id = frappe.db.get_value(\"Contact\", rfq_supplier.contact, \"email_id\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef validate_email_id(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"status\", \"Submitted\")\n\t\tfor supplier in self.suppliers:\n\t\t\tsupplier.email_sent = 0\n\t\t\tsupplier.quote_status = \"Pending\"\n\t\tself.send_to_supplier()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef before_print(self, settings=None):",
      "args": [
        "self",
        "settings"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef get_supplier_email_preview(self, supplier):",
      "args": [
        "self",
        "supplier"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef send_to_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef get_link(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 172,
      "code_text": "\tdef update_supplier_part_no(self, supplier):\n\t\tself.vendor = supplier\n\t\tfor item in self.items:\n\t\t\titem.supplier_part_no = frappe.db.get_value(\n\t\t\t\t\"Item Supplier\", {\"parent\": item.item_code, \"supplier\": supplier}, \"supplier_part_no\"\n\t\t\t)",
      "args": [
        "self",
        "supplier"
      ]
    },
    {
      "type": "method",
      "line_start": 179,
      "code_text": "\tdef update_supplier_contact(self, rfq_supplier, link):",
      "args": [
        "self",
        "rfq_supplier",
        "link"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef link_supplier_contact(self, rfq_supplier, user):",
      "args": [
        "self",
        "rfq_supplier",
        "user"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef update_user_in_supplier(self, supplier, user):",
      "args": [
        "self",
        "supplier",
        "user"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef create_user(self, rfq_supplier, link):",
      "args": [
        "self",
        "rfq_supplier",
        "link"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef supplier_rfq_mail(self, data, update_password_link, rfq_link, preview=False):",
      "args": [
        "self",
        "data",
        "update_password_link",
        "rfq_link",
        "preview"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef send_email(self, data, sender, subject, message, attachments):",
      "args": [
        "self",
        "data",
        "sender",
        "subject",
        "message",
        "attachments"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef get_attachments(self):\n\t\treturn [d.name for d in get_attachments(self.doctype, self.name)]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 317,
      "code_text": "\tdef update_rfq_supplier_status(self, sup_name=None):",
      "args": [
        "self",
        "sup_name"
      ]
    },
    {
      "type": "function",
      "line_start": 342,
      "code_text": "def send_supplier_emails(rfq_name):\n\tcheck_portal_enabled(\"Request for Quotation\")\n\trfq = frappe.get_doc(\"Request for Quotation\", rfq_name)\n\tif rfq.docstatus == 1:\n\t\trfq.send_to_supplier()",
      "args": [
        "rfq_name"
      ]
    },
    {
      "type": "function",
      "line_start": 349,
      "code_text": "def check_portal_enabled(reference_doctype):",
      "args": [
        "reference_doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 450,
      "code_text": "def create_rfq_items(sq_doc, supplier, data):",
      "args": [
        "sq_doc",
        "supplier",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 505,
      "code_text": "def get_item_from_material_requests_based_on_supplier(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 560,
      "code_text": "def get_supplier_tag():\n\tfilters = {\"document_type\": \"Supplier\"}\n\ttags = list(set(tag.tag for tag in frappe.get_all(\"Tag Link\", filters=filters, fields=[\"tag\"]) if tag))\n\n\treturn tags",
      "args": []
    },
    {
      "type": "function",
      "line_start": 569,
      "code_text": "def get_rfq_containing_supplier(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\regional\\italy\\utils.py": [
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_conditions(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 408,
      "code_text": "def get_e_invoice_attachments(invoices):",
      "args": [
        "invoices"
      ]
    },
    {
      "type": "function",
      "line_start": 351,
      "code_text": "def prepare_and_attach_invoice(doc, replace=False):",
      "args": [
        "doc",
        "replace"
      ]
    },
    {
      "type": "function",
      "line_start": 404,
      "code_text": "def get_company_country(company):\n\treturn frappe.get_cached_value(\"Company\", company, \"country\")",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 442,
      "code_text": "def validate_address(address_name):",
      "args": [
        "address_name"
      ]
    },
    {
      "type": "function",
      "line_start": 454,
      "code_text": "def get_unamended_name(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def update_itemised_tax_data(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def export_invoices(filters=None):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def prepare_invoice(invoice, progressive_number):",
      "args": [
        "invoice",
        "progressive_number"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def download_zip(files, output_filename):",
      "args": [
        "files",
        "output_filename"
      ]
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def get_invoice_summary(items, taxes):",
      "args": [
        "items",
        "taxes"
      ]
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def sales_invoice_validate(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 324,
      "code_text": "def sales_invoice_on_submit(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 382,
      "code_text": "def generate_single_invoice(docname):\n\tdoc = frappe.get_doc(\"Sales Invoice\", docname)\n\tfrappe.has_permission(\"Sales Invoice\", doc=doc, throw=True)\n\n\te_invoice = prepare_and_attach_invoice(doc, True)\n\treturn e_invoice.file_url",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 391,
      "code_text": "def sales_invoice_on_cancel(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 466,
      "code_text": "def get_progressive_name_and_number(doc, replace=False):",
      "args": [
        "doc",
        "replace"
      ]
    },
    {
      "type": "function",
      "line_start": 480,
      "code_text": "def set_state_code(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset\\depreciation.py": [
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def post_depreciation_entries(date=None):",
      "args": [
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 434,
      "code_text": "def scrap_asset(asset_name, scrap_date=None):",
      "args": [
        "asset_name",
        "scrap_date"
      ]
    },
    {
      "type": "function",
      "line_start": 333,
      "code_text": "def get_depreciation_accounts(asset_category, company):",
      "args": [
        "asset_category",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 534,
      "code_text": "def depreciate_asset(asset_doc, date, notes):",
      "args": [
        "asset_doc",
        "date",
        "notes"
      ]
    },
    {
      "type": "function",
      "line_start": 555,
      "code_text": "def reset_depreciation_schedule(asset_doc, date, notes):",
      "args": [
        "asset_doc",
        "date",
        "notes"
      ]
    },
    {
      "type": "function",
      "line_start": 580,
      "code_text": "def reverse_depreciation_entry_made_after_disposal(asset, date):",
      "args": [
        "asset",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 697,
      "code_text": "def get_gl_entries_on_asset_disposal(\n\tasset, selling_amount=0, finance_book=None, voucher_type=None, voucher_no=None, date=None\n):",
      "args": [
        "asset",
        "selling_amount",
        "finance_book",
        "voucher_type",
        "voucher_no",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 159,
      "code_text": "def get_credit_and_debit_accounts_for_asset_category_and_company(asset_category, company):",
      "args": [
        "asset_category",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def make_depreciation_entry(\n\tasset_depr_schedule_name,\n\tdate=None,\n\tsch_start_idx=None,\n\tsch_end_idx=None,\n\tcredit_and_debit_accounts=None,\n\tdepreciation_cost_center_and_depreciation_series=None,\n\taccounting_dimensions=None,\n):",
      "args": [
        "asset_depr_schedule_name",
        "date",
        "sch_start_idx",
        "sch_end_idx",
        "credit_and_debit_accounts",
        "depreciation_cost_center_and_depreciation_series",
        "accounting_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 422,
      "code_text": "def get_comma_separated_links(names, doctype):",
      "args": [
        "names",
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 754,
      "code_text": "def get_asset_details(asset, finance_book=None):",
      "args": [
        "asset",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 776,
      "code_text": "def get_profit_gl_entries(\n\tasset, profit_amount, gl_entries, disposal_account, depreciation_cost_center, date=None\n):",
      "args": [
        "asset",
        "profit_amount",
        "gl_entries",
        "disposal_account",
        "depreciation_cost_center",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 798,
      "code_text": "def get_disposal_account_and_cost_center(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 812,
      "code_text": "def get_value_after_depreciation_on_disposal_date(asset, disposal_date, finance_book=None):",
      "args": [
        "asset",
        "disposal_date",
        "finance_book"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_depreciable_asset_depr_schedules_data(date):",
      "args": [
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def make_depreciation_entry_for_all_asset_depr_schedules(asset_doc, date=None):\n\tfor row in asset_doc.get(\"finance_books\"):\n\t\tasset_depr_schedule_name = get_asset_depr_schedule_name(asset_doc.name, \"Active\", row.finance_book)\n\t\tmake_depreciation_entry(asset_depr_schedule_name, date)",
      "args": [
        "asset_doc",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def get_acc_frozen_upto():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 173,
      "code_text": "def get_depreciation_cost_center_and_depreciation_series_for_company():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 256,
      "code_text": "def _make_journal_entry_for_depreciation(\n\tasset_depr_schedule_doc,\n\tasset,\n\tdate,\n\tdepr_schedule,\n\tsch_start_idx,\n\tsch_end_idx,\n\tdepreciation_cost_center,\n\tdepreciation_series,\n\tcredit_account,\n\tdebit_account,\n\taccounting_dimensions,\n):",
      "args": [
        "asset_depr_schedule_doc",
        "asset",
        "date",
        "depr_schedule",
        "sch_start_idx",
        "sch_end_idx",
        "depreciation_cost_center",
        "depreciation_series",
        "credit_account",
        "debit_account",
        "accounting_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 372,
      "code_text": "def get_credit_and_debit_accounts(accumulated_depreciation_account, depreciation_expense_account):",
      "args": [
        "accumulated_depreciation_account",
        "depreciation_expense_account"
      ]
    },
    {
      "type": "function",
      "line_start": 387,
      "code_text": "def set_depr_entry_posting_status_for_failed_assets(failed_asset_names):\n\tfor asset_name in failed_asset_names:\n\t\tfrappe.db.set_value(\"Asset\", asset_name, \"depr_entry_posting_status\", \"Failed\")",
      "args": [
        "failed_asset_names"
      ]
    },
    {
      "type": "function",
      "line_start": 392,
      "code_text": "def notify_depr_entry_posting_error(failed_asset_names, error_log_names):",
      "args": [
        "failed_asset_names",
        "error_log_names"
      ]
    },
    {
      "type": "function",
      "line_start": 480,
      "code_text": "def validate_scrap_date(scrap_date, today_date, purchase_date, calculate_depreciation, asset_name):",
      "args": [
        "scrap_date",
        "today_date",
        "purchase_date",
        "calculate_depreciation",
        "asset_name"
      ]
    },
    {
      "type": "function",
      "line_start": 511,
      "code_text": "def restore_asset(asset_name):",
      "args": [
        "asset_name"
      ]
    },
    {
      "type": "function",
      "line_start": 551,
      "code_text": "def cancel_depreciation_entries(asset_doc, date):\n\tpass",
      "args": [
        "asset_doc",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 568,
      "code_text": "def modify_depreciation_schedule_for_asset_repairs(asset, notes):",
      "args": [
        "asset",
        "notes"
      ]
    },
    {
      "type": "function",
      "line_start": 615,
      "code_text": "def get_depreciation_amount_in_je(journal_entry):\n\tif journal_entry.accounts[0].debit_in_account_currency:\n\t\treturn journal_entry.accounts[0].debit_in_account_currency\n\telse:\n\t\treturn journal_entry.accounts[0].credit_in_account_currency",
      "args": [
        "journal_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 623,
      "code_text": "def disposal_was_made_on_original_schedule_date(schedule_idx, row, posting_date_of_disposal):",
      "args": [
        "schedule_idx",
        "row",
        "posting_date_of_disposal"
      ]
    },
    {
      "type": "function",
      "line_start": 637,
      "code_text": "def disposal_happens_in_the_future(posting_date_of_disposal):\n\tif posting_date_of_disposal > getdate():\n\t\treturn True\n\n\treturn False",
      "args": [
        "posting_date_of_disposal"
      ]
    },
    {
      "type": "function",
      "line_start": 644,
      "code_text": "def get_gl_entries_on_asset_regain(\n\tasset, selling_amount=0, finance_book=None, voucher_type=None, voucher_no=None, date=None\n):",
      "args": [
        "asset",
        "selling_amount",
        "finance_book",
        "voucher_type",
        "voucher_no",
        "date"
      ]
    }
  ],
  "erpnext\\setup\\utils.py": [
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_exchange_rate(from_currency, to_currency, transaction_date=None, args=None):",
      "args": [
        "from_currency",
        "to_currency",
        "transaction_date",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def format_ces_api(data, param):\n\treturn data.format(\n\t\ttransaction_date=param.get(\"transaction_date\"),\n\t\tto_currency=param.get(\"to_currency\"),\n\t\tfrom_currency=param.get(\"from_currency\"),\n\t)",
      "args": [
        "data",
        "param"
      ]
    },
    {
      "type": "function",
      "line_start": 157,
      "code_text": "def _enable_all_roles_for_admin():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def before_tests():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def get_pegged_rate(from_currency: str, to_currency: str, transaction_date) -> float | None:\n\tif rate := PEGGED_CURRENCIES.get(from_currency, {}).get(to_currency):\n\t\treturn rate\n\telif rate := PEGGED_CURRENCIES.get(to_currency, {}).get(from_currency):\n\t\treturn 1 / rate\n\treturn None",
      "args": [
        "from_currency: str",
        "to_currency: str",
        "transaction_date"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def enable_all_roles_and_domains():\n\t\"\"\"enable all roles and domain for testing\"\"\"\n\t_enable_all_roles_for_admin()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 169,
      "code_text": "def set_defaults_for_tests():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 180,
      "code_text": "def insert_record(records):\n\tfrom frappe.desk.page.setup_wizard.setup_wizard import make_records\n\n\tmake_records(records)",
      "args": [
        "records"
      ]
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def welcome_email():\n\tsite_name = get_default_company() or \"ERPNext\"\n\ttitle = _(\"Welcome to {0}\").format(site_name)\n\treturn title",
      "args": []
    }
  ],
  "erpnext\\regional\\united_arab_emirates\\utils.py": [
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def get_account_currency(account):",
      "args": [
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def get_tax_accounts(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def make_regional_gl_entries(gl_entries, doc):",
      "args": [
        "gl_entries",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def update_itemised_tax_data(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def update_grand_total_for_rcm(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 101,
      "code_text": "def update_totals(vat_tax, base_vat_tax, doc):",
      "args": [
        "vat_tax",
        "base_vat_tax",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 140,
      "code_text": "def make_gl_entry(tax, gl_entries, doc, tax_accounts):",
      "args": [
        "tax",
        "gl_entries",
        "doc",
        "tax_accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 164,
      "code_text": "def validate_returns(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    }
  ],
  "erpnext\\accounts\\report\\account_balance\\test_account_balance.py": [
    {
      "type": "function",
      "line_start": 57,
      "code_text": "def make_sales_invoice():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestAccountBalance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_account_balance(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\regional\\doctype\\import_supplier_invoice\\import_supplier_invoice.py": [
    {
      "type": "function",
      "line_start": 355,
      "code_text": "def create_purchase_invoice(supplier_name, file_name, args, name):",
      "args": [
        "supplier_name",
        "file_name",
        "args",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 270,
      "code_text": "def create_supplier(supplier_group, args):",
      "args": [
        "supplier_group",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 315,
      "code_text": "def create_address(supplier_name, args):",
      "args": [
        "supplier_name",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def get_supplier_details(file_content):",
      "args": [
        "file_content"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class ImportSupplierInvoice(Document):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate(self):\n\t\tif not frappe.db.get_value(\"Stock Settings\", fieldname=\"stock_uom\"):\n\t\t\tfrappe.throw(_(\"Please set default UOM in Stock Settings\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef autoname(self):\n\t\tif not self.name:\n\t\t\tself.name = \"Import Invoice on \" + format_datetime(self.creation)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef import_xml_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef prepare_data_for_import(self, file_content, file_name, encoded_content):",
      "args": [
        "self",
        "file_content",
        "file_name",
        "encoded_content"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef prepare_items_for_invoice(self, file_content, invoices_args):",
      "args": [
        "self",
        "file_content",
        "invoices_args"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef process_file_data(self):\n\t\tself.db_set(\"status\", \"Processing File Data\", notify=True, commit=True)\n\t\tfrappe.enqueue_doc(self.doctype, self.name, \"import_xml_data\", queue=\"long\", timeout=3600)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef publish(self, title, message, count, total):\n\t\tfrappe.publish_realtime(\n\t\t\t\"import_invoice_update\",\n\t\t\t{\"title\": title, \"message\": message, \"count\": count, \"total\": total},\n\t\t\tuser=self.modified_by,\n\t\t)",
      "args": [
        "self",
        "title",
        "message",
        "count",
        "total"
      ]
    },
    {
      "type": "function",
      "line_start": 171,
      "code_text": "def get_file_content(file_name, zip_file_object):",
      "args": [
        "file_name",
        "zip_file_object"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def get_taxes_from_file(file_content, tax_account):",
      "args": [
        "file_content",
        "tax_account"
      ]
    },
    {
      "type": "function",
      "line_start": 237,
      "code_text": "def get_payment_terms_from_file(file_content):",
      "args": [
        "file_content"
      ]
    },
    {
      "type": "function",
      "line_start": 262,
      "code_text": "def get_destination_code_from_file(file_content):\n\tdestination_code = \"\"\n\tfor line in file_content.find_all(\"DatiTrasmissione\"):\n\t\tdestination_code = line.CodiceDestinatario.text\n\n\treturn destination_code",
      "args": [
        "file_content"
      ]
    },
    {
      "type": "function",
      "line_start": 414,
      "code_text": "def get_country(code):\n\texisting_country_name = frappe.db.get_value(\"Country\", filters={\"code\": code}, fieldname=\"name\")\n\tif existing_country_name:\n\t\treturn existing_country_name\n\telse:\n\t\tfrappe.throw(_(\"Country Code in File does not match with country code set up in the system\"))",
      "args": [
        "code"
      ]
    },
    {
      "type": "function",
      "line_start": 422,
      "code_text": "def create_uom(uom):",
      "args": [
        "uom"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule\\test_pricing_rule.py": [
    {
      "type": "function",
      "line_start": 1487,
      "code_text": "def make_pricing_rule(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1561,
      "code_text": "def make_item_price(item, price_list_name, item_price):",
      "args": [
        "item",
        "price_list_name",
        "item_price"
      ]
    },
    {
      "type": "function",
      "line_start": 1551,
      "code_text": "def delete_existing_pricing_rules():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class UnitTestPricingRule(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestPricingRule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef setUp(self):\n\t\tdelete_existing_pricing_rules()\n\t\tsetup_pricing_rule_data()\n\t\tself.enterClassContext(self.change_settings(\"Selling Settings\", validate_selling_price=0))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef tearDown(self):\n\t\tdelete_existing_pricing_rules()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_pricing_rule_for_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef test_pricing_rule_for_margin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef test_mixed_conditions_for_item_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef test_pricing_rule_for_variants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef test_pricing_rule_for_stock_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 341,
      "code_text": "\tdef test_pricing_rule_with_margin_and_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 358,
      "code_text": "\tdef test_pricing_rule_with_margin_and_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 378,
      "code_text": "\tdef test_pricing_rule_for_product_discount_on_same_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef test_pricing_rule_for_product_discount_on_different_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 441,
      "code_text": "\tdef test_dont_enforce_free_item_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 489,
      "code_text": "\tdef test_cumulative_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 537,
      "code_text": "\tdef test_pricing_rule_for_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef test_multiple_pricing_rules(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef test_multiple_pricing_rules_with_apply_discount_on_discounted_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 616,
      "code_text": "\tdef test_item_price_with_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 655,
      "code_text": "\tdef test_item_price_with_blank_uom_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 712,
      "code_text": "\tdef test_item_price_with_selling_uom_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 770,
      "code_text": "\tdef test_item_group_price_with_blank_uom_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 830,
      "code_text": "\tdef test_item_group_price_with_selling_uom_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 896,
      "code_text": "\tdef test_pricing_rule_for_different_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 970,
      "code_text": "\tdef test_pricing_rule_for_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 993,
      "code_text": "\tdef test_pricing_rule_for_transaction_with_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1017,
      "code_text": "\tdef test_remove_pricing_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1059,
      "code_text": "\tdef test_multiple_pricing_rules_with_min_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1091,
      "code_text": "\tdef test_pricing_rule_for_other_items_cond_with_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1153,
      "code_text": "\tdef test_pricing_rule_for_product_free_item_rounded_qty_and_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1198,
      "code_text": "\tdef test_pricing_rule_for_product_free_item_round_free_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1237,
      "code_text": "\tdef test_apply_multiple_pricing_rules_for_discount_percentage_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1290,
      "code_text": "\tdef test_priority_of_multiple_pricing_rules(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1346,
      "code_text": "\tdef test_pricing_rules_with_and_without_apply_multiple(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1408,
      "code_text": "\tdef test_validation_on_mixed_condition_with_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1420,
      "code_text": "\tdef test_ignore_pricing_rule_for_credit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1451,
      "code_text": "\tdef test_ignore_pricing_rule_for_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 1544,
      "code_text": "def setup_pricing_rule_data():\n\tif not frappe.db.exists(\"UTM Campaign\", \"_Test Campaign\"):\n\t\tfrappe.get_doc(\n\t\t\t{\"doctype\": \"UTM Campaign\", \"description\": \"_Test Campaign\", \"name\": \"_Test Campaign\"}\n\t\t).insert()",
      "args": []
    }
  ],
  "erpnext\\controllers\\taxes_and_totals.py": [
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class calculate_taxes_and_totals:"
    },
    {
      "type": "function",
      "line_start": 1139,
      "code_text": "def get_itemised_tax(taxes, with_tax_account=False):",
      "args": [
        "taxes",
        "with_tax_account"
      ]
    },
    {
      "type": "function",
      "line_start": 1129,
      "code_text": "def get_itemised_tax_breakup_data(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 1176,
      "code_text": "class init_landed_taxes_and_totals:"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef __init__(self, doc: Document):",
      "args": [
        "self",
        "doc: Document"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef filter_rows(self):\n\t\t\"\"\"Exclude rows, that do not fulfill the filter criteria, from totals computation.\"\"\"\n\t\titems = list(filter(lambda item: not item.get(\"is_alternative\"), self.doc.get(\"items\")))\n\t\treturn items",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef calculate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef _calculate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef calculate_tax_withholding_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef validate_item_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef update_item_tax_map(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef validate_conversion_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef calculate_item_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 241,
      "code_text": "\tdef _set_in_company_currency(self, doc, fields):",
      "args": [
        "self",
        "doc",
        "fields"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef initialize_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 277,
      "code_text": "\tdef determine_exclusive_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 317,
      "code_text": "\tdef _load_item_tax_rate(self, item_tax_rate):\n\t\treturn json.loads(item_tax_rate) if item_tax_rate else {}",
      "args": [
        "self",
        "item_tax_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 320,
      "code_text": "\tdef get_current_tax_fraction(self, tax, item_tax_map):",
      "args": [
        "self",
        "tax",
        "item_tax_map"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef _get_tax_rate(self, tax, item_tax_map):\n\t\tif tax.account_head in item_tax_map:\n\t\t\treturn flt(item_tax_map.get(tax.account_head), self.doc.precision(\"rate\", tax))\n\t\telse:\n\t\t\treturn tax.rate",
      "args": [
        "self",
        "tax",
        "item_tax_map"
      ]
    },
    {
      "type": "method",
      "line_start": 359,
      "code_text": "\tdef calculate_net_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 373,
      "code_text": "\tdef calculate_shipping_charges(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 384,
      "code_text": "\tdef calculate_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 475,
      "code_text": "\tdef get_tax_amount_if_for_valuation_or_deduction(self, tax_amount, tax):",
      "args": [
        "self",
        "tax_amount",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 489,
      "code_text": "\tdef set_cumulative_total(self, row_idx, tax):",
      "args": [
        "self",
        "row_idx",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 498,
      "code_text": "\tdef get_current_tax_and_net_amount(self, item, tax, item_tax_map):",
      "args": [
        "self",
        "item",
        "tax",
        "item_tax_map"
      ]
    },
    {
      "type": "method",
      "line_start": 537,
      "code_text": "\tdef set_item_wise_tax(self, item, tax, tax_rate, current_tax_amount, current_net_amount):",
      "args": [
        "self",
        "item",
        "tax",
        "tax_rate",
        "current_tax_amount",
        "current_net_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef round_off_totals(self, tax):",
      "args": [
        "self",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 579,
      "code_text": "\tdef round_off_base_values(self, tax):\n\t\t# Round off to nearest integer based on regional settings\n\t\tif tax.account_head in frappe.flags.round_off_applicable_accounts:\n\t\t\ttax.base_tax_amount = round(tax.base_tax_amount, 0)\n\t\t\ttax.base_tax_amount_after_discount_amount = round(tax.base_tax_amount_after_discount_amount, 0)",
      "args": [
        "self",
        "tax"
      ]
    },
    {
      "type": "method",
      "line_start": 591,
      "code_text": "\tdef manipulate_grand_total_for_inclusive_tax(self):\n\t\t# for backward compatablility - if in case used by an external application\n\t\treturn self.adjust_grand_total_for_inclusive_tax()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 595,
      "code_text": "\tdef adjust_grand_total_for_inclusive_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 621,
      "code_text": "\tdef calculate_totals(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 674,
      "code_text": "\tdef calculate_total_net_weight(self):\n\t\tif self.doc.meta.get_field(\"total_net_weight\"):\n\t\t\tself.doc.total_net_weight = 0.0\n\t\t\tfor d in self._items:\n\t\t\t\tif d.total_weight:\n\t\t\t\t\tself.doc.total_net_weight += d.total_weight",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 681,
      "code_text": "\tdef set_rounded_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 703,
      "code_text": "\tdef _cleanup(self):\n\t\tif not self.doc.get(\"is_consolidated\"):\n\t\t\tfor tax in self.doc.get(\"taxes\"):\n\t\t\t\tif not tax.get(\"dont_recompute_tax\"):\n\t\t\t\t\ttax.item_wise_tax_detail = json.dumps(tax.item_wise_tax_detail)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 709,
      "code_text": "\tdef set_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 718,
      "code_text": "\tdef apply_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 775,
      "code_text": "\tdef get_total_for_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 818,
      "code_text": "\tdef calculate_total_advance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 857,
      "code_text": "\tdef is_internal_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 868,
      "code_text": "\tdef calculate_outstanding_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 949,
      "code_text": "\tdef calculate_paid_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 968,
      "code_text": "\tdef calculate_change_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 988,
      "code_text": "\tdef calculate_write_off_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1000,
      "code_text": "\tdef calculate_margin(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 1042,
      "code_text": "\tdef set_item_wise_tax_breakup(self):\n\t\tself.doc.other_charges_calculation = get_itemised_tax_breakup_html(self.doc)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1045,
      "code_text": "\tdef set_total_amount_to_default_mop(self, total_amount_to_pay):",
      "args": [
        "self",
        "total_amount_to_pay"
      ]
    },
    {
      "type": "function",
      "line_start": 1076,
      "code_text": "def get_itemised_tax_breakup_html(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1106,
      "code_text": "def get_round_off_applicable_accounts(company, account_list):\n\t# required to set correct region\n\twith temporary_flag(\"company\", company):\n\t\treturn get_regional_round_off_accounts(company, account_list)",
      "args": [
        "company",
        "account_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1113,
      "code_text": "def get_regional_round_off_accounts(company, account_list):\n\tpass",
      "args": [
        "company",
        "account_list"
      ]
    },
    {
      "type": "function",
      "line_start": 1118,
      "code_text": "def update_itemised_tax_data(doc):\n\t# Don't delete this method, used for localization\n\tpass",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 1124,
      "code_text": "def get_itemised_tax_breakup_header(item_doctype, tax_accounts):\n\treturn [_(\"Item\"), _(\"Taxable Amount\"), *tax_accounts]",
      "args": [
        "item_doctype",
        "tax_accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 1163,
      "code_text": "def get_rounded_tax_amount(itemised_tax, precision):\n\t# Rounding based on tax_amount precision\n\tfor taxes in itemised_tax:\n\t\tfor row in taxes.values():\n\t\t\tif isinstance(row, dict) and isinstance(row[\"tax_amount\"], float):\n\t\t\t\trow[\"tax_amount\"] = flt(row[\"tax_amount\"], precision)",
      "args": [
        "itemised_tax",
        "precision"
      ]
    },
    {
      "type": "function",
      "line_start": 1172,
      "code_text": "def get_rounding_tax_settings():\n\treturn frappe.db.get_single_value(\"Accounts Settings\", \"round_row_wise_tax\")",
      "args": []
    },
    {
      "type": "method",
      "line_start": 1177,
      "code_text": "\tdef __init__(self, doc):\n\t\tself.doc = doc\n\t\tself.tax_field = \"taxes\" if self.doc.doctype == \"Landed Cost Voucher\" else \"additional_costs\"\n\t\tself.set_account_currency()\n\t\tself.set_exchange_rate()\n\t\tself.set_amounts_in_company_currency()",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 1184,
      "code_text": "\tdef set_account_currency(self):\n\t\tcompany_currency = erpnext.get_company_currency(self.doc.company)\n\t\tfor d in self.doc.get(self.tax_field):\n\t\t\tif not d.account_currency:\n\t\t\t\taccount_currency = frappe.get_cached_value(\"Account\", d.expense_account, \"account_currency\")\n\t\t\t\td.account_currency = account_currency or company_currency",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1191,
      "code_text": "\tdef set_exchange_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1207,
      "code_text": "\tdef set_amounts_in_company_currency(self):\n\t\tfor d in self.doc.get(self.tax_field):\n\t\t\td.amount = flt(d.amount, d.precision(\"amount\"))\n\t\t\td.base_amount = flt(d.amount * flt(d.exchange_rate), d.precision(\"base_amount\"))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\batch\\batch.py": [
    {
      "type": "function",
      "line_start": 217,
      "code_text": "def get_batch_qty(\n\tbatch_no=None,\n\twarehouse=None,\n\titem_code=None,\n\tposting_date=None,\n\tposting_time=None,\n\tignore_voucher_nos=None,\n\tfor_stock_levels=False,\n\tconsider_negative_batches=False,\n):",
      "args": [
        "batch_no",
        "warehouse",
        "item_code",
        "posting_date",
        "posting_time",
        "ignore_voucher_nos",
        "for_stock_levels",
        "consider_negative_batches"
      ]
    },
    {
      "type": "function",
      "line_start": 453,
      "code_text": "def get_available_batches(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 415,
      "code_text": "def make_batch(kwargs):\n\tif frappe.db.get_value(\"Item\", kwargs.item, \"has_batch_no\"):\n\t\tkwargs.doctype = \"Batch\"\n\t\treturn frappe.get_doc(kwargs).insert().name",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def batch_uses_naming_series():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def _get_batch_prefix():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def _make_naming_series_key(prefix):",
      "args": [
        "prefix"
      ]
    },
    {
      "type": "function",
      "line_start": 326,
      "code_text": "def make_batch_bundle(\n\titem_code: str,",
      "args": [
        "item_code: str",
        "warehouse: str",
        "batches",
        "company: str",
        "type_of_transaction: str",
        "qty: float"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class UnableToSelectBatchError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def get_name_from_hash():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_batch_naming_series():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 89,
      "code_text": "class Batch(Document):"
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef onload(self):\n\t\tself.image = frappe.db.get_value(\"Item\", self.item, \"image\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef after_delete(self):\n\t\trevert_series_if_last(get_batch_naming_series(), self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef validate(self):\n\t\tself.item_has_batch_enabled()\n\t\tself.set_batchwise_valuation()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef item_has_batch_enabled(self):\n\t\tif frappe.db.get_value(\"Item\", self.item, \"has_batch_no\") == 0:\n\t\t\tfrappe.throw(_(\"The selected item cannot have Batch\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef set_batchwise_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef before_save(self):\n\t\tself.set_expiry_date()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef set_expiry_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef get_name_from_naming_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 267,
      "code_text": "def get_batches_by_oldest(item_code, warehouse):\n\t\"\"\"Returns the oldest batch and qty for the given item_code and warehouse\"\"\"\n\tbatches = get_batch_qty(item_code=item_code, warehouse=warehouse)\n\tbatches_dates = [[batch, frappe.get_value(\"Batch\", batch.batch_no, \"expiry_date\")] for batch in batches]\n\tbatches_dates.sort(key=lambda tup: tup[1])\n\treturn batches_dates",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 276,
      "code_text": "def split_batch(batch_no: str, item_code: str, warehouse: str, qty: float, new_batch_id: str | None = None):",
      "args": [
        "batch_no: str",
        "item_code: str",
        "warehouse: str",
        "qty: float",
        "new_batch_id"
      ]
    },
    {
      "type": "function",
      "line_start": 358,
      "code_text": "def get_batches(item_code, warehouse, qty=1, throw=False, serial_no=None):",
      "args": [
        "item_code",
        "warehouse",
        "qty",
        "throw",
        "serial_no"
      ]
    },
    {
      "type": "function",
      "line_start": 401,
      "code_text": "def validate_serial_no_with_batch(serial_nos, item_code):",
      "args": [
        "serial_nos",
        "item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 422,
      "code_text": "def get_pos_reserved_batch_qty(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 474,
      "code_text": "def get_batch_no(bundle_id):",
      "args": [
        "bundle_id"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_order\\payment_order.py": [
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def make_journal_entry(doc, supplier, mode_of_payment=None):",
      "args": [
        "doc",
        "supplier",
        "mode_of_payment"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class PaymentOrder(Document):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_payment_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_payment_status(cancel=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef update_payment_status(self, cancel=False):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def get_mop_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_supplier_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def make_payment_records(name, supplier, mode_of_payment=None):\n\tdoc = frappe.get_doc(\"Payment Order\", name)\n\tmake_journal_entry(doc, supplier, mode_of_payment)",
      "args": [
        "name",
        "supplier",
        "mode_of_payment"
      ]
    }
  ],
  "erpnext\\accounts\\report\\utils.py": [
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def get_party_details(party_type, party_list):",
      "args": [
        "party_type",
        "party_list"
      ]
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def convert(value, from_, to, date):",
      "args": [
        "value",
        "from_",
        "to",
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def convert_to_presentation_currency(gl_entries, currency_info):",
      "args": [
        "gl_entries",
        "currency_info"
      ]
    },
    {
      "type": "function",
      "line_start": 177,
      "code_text": "def get_values_for_columns(report_columns, report_row):",
      "args": [
        "report_columns",
        "report_row"
      ]
    },
    {
      "type": "function",
      "line_start": 205,
      "code_text": "def get_taxes_query(invoice_list, doctype, parenttype):",
      "args": [
        "invoice_list",
        "doctype",
        "parenttype"
      ]
    },
    {
      "type": "function",
      "line_start": 296,
      "code_text": "def apply_common_conditions(filters, query, doctype, child_doctype=None, payments=False):",
      "args": [
        "filters",
        "query",
        "doctype",
        "child_doctype",
        "payments"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_currency(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 228,
      "code_text": "def get_journal_entries(filters, args):",
      "args": [
        "filters",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 266,
      "code_text": "def get_payment_entries(filters, args):",
      "args": [
        "filters",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 161,
      "code_text": "def get_query_columns(report_columns):",
      "args": [
        "report_columns"
      ]
    },
    {
      "type": "function",
      "line_start": 342,
      "code_text": "def get_advance_taxes_and_charges(invoice_list):",
      "args": [
        "invoice_list"
      ]
    },
    {
      "type": "function",
      "line_start": 378,
      "code_text": "def get_opening_row(party_type, party, from_date, company):",
      "args": [
        "party_type",
        "party",
        "from_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_rate_as_at(date, from_currency, to_currency):",
      "args": [
        "date",
        "from_currency",
        "to_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def get_appropriate_company(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def get_invoiced_item_gross_margin(sales_invoice=None, item_code=None, company=None, with_item_data=False):",
      "args": [
        "sales_invoice",
        "item_code",
        "company",
        "with_item_data"
      ]
    },
    {
      "type": "function",
      "line_start": 364,
      "code_text": "def filter_invoices_based_on_dimensions(filters, query, parent_doc):",
      "args": [
        "filters",
        "query",
        "parent_doc"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_procedure\\quality_procedure.py": [
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def get_children(doctype, parent=None, parent_quality_procedure=None, is_root=False):",
      "args": [
        "doctype",
        "parent",
        "parent_quality_procedure",
        "is_root"
      ]
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def add_node():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class QualityProcedure(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef before_save(self):\n\t\tself.check_for_incorrect_child()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef on_update(self):\n\t\tNestedSet.on_update(self)\n\t\tself.set_parent()\n\t\tself.remove_parent_from_old_child()\n\t\tself.add_child_to_parent()\n\t\tself.remove_child_from_old_parent()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef after_insert(self):\n\t\tself.set_parent()\n\t\tself.add_child_to_parent()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef check_for_incorrect_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef set_parent(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef remove_parent_from_old_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef add_child_to_parent(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef remove_child_from_old_parent(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\email_digest\\email_digest.py": [
    {
      "type": "function",
      "line_start": 909,
      "code_text": "def get_incomes_expenses_for_period(account, from_date, to_date):",
      "args": [
        "account",
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "class",
      "line_start": 32,
      "code_text": "class EmailDigest(Document):"
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef get_users(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef send(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef get_msg_html(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 178,
      "code_text": "\tdef set_title(self, context):",
      "args": [
        "self",
        "context"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef set_style(self, context):",
      "args": [
        "self",
        "context"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef get_notifications(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef get_calendar_events(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef get_todo_list(self, user_id=None):",
      "args": [
        "self",
        "user_id"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef get_todo_count(self, user_id=None):",
      "args": [
        "self",
        "user_id"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef get_issue_list(self, user_id=None):",
      "args": [
        "self",
        "user_id"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef get_issue_count(self):\n\t\t\"\"\"Get count of Issue\"\"\"\n\t\treturn frappe.db.sql(\n\t\t\t\"\"\"select count(*) from `tabIssue`\n\t\t\twhere status in ('Open','Replied') \"\"\"\n\t\t)[0][0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 290,
      "code_text": "\tdef get_project_list(self, user_id=None):",
      "args": [
        "self",
        "user_id"
      ]
    },
    {
      "type": "method",
      "line_start": 307,
      "code_text": "\tdef get_project_count(self):\n\t\t\"\"\"Get count of Project\"\"\"\n\t\treturn frappe.db.sql(\n\t\t\t\"\"\"select count(*) from `tabProject`\n\t\t\twhere status='Open' and project_type='External'\"\"\"\n\t\t)[0][0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef set_accounting_cards(self, context):",
      "args": [
        "self",
        "context"
      ]
    },
    {
      "type": "method",
      "line_start": 386,
      "code_text": "\tdef get_income(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 408,
      "code_text": "\tdef get_income_year_to_date(self):\n\t\t\"\"\"Get income to date\"\"\"\n\t\treturn self.get_year_to_date_balance(\"income\", \"income\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 412,
      "code_text": "\tdef get_expense_year_to_date(self):\n\t\t\"\"\"Get income to date\"\"\"\n\t\treturn self.get_year_to_date_balance(\"expense\", \"expenses_booked\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 416,
      "code_text": "\tdef get_year_to_date_balance(self, root_type, fieldname):",
      "args": [
        "self",
        "root_type",
        "fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 444,
      "code_text": "\tdef get_bank_balance(self):\n\t\t# account is of type \"Bank\" and root_type is Asset\n\t\treturn self.get_type_balance(\"bank_balance\", \"Bank\", root_type=\"Asset\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 448,
      "code_text": "\tdef get_credit_balance(self):\n\t\t# account is of type \"Bank\" and root_type is Liability\n\t\treturn self.get_type_balance(\"credit_balance\", \"Bank\", root_type=\"Liability\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 452,
      "code_text": "\tdef get_payables(self):\n\t\treturn self.get_type_balance(\"payables\", \"Payable\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef get_invoiced_amount(self):\n\t\treturn self.get_type_balance(\"invoiced_amount\", \"Receivable\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 458,
      "code_text": "\tdef get_expenses_booked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 479,
      "code_text": "\tdef get_period_amounts(self, accounts, fieldname):",
      "args": [
        "self",
        "accounts",
        "fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef get_sales_orders_to_bill(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 516,
      "code_text": "\tdef get_sales_orders_to_deliver(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 542,
      "code_text": "\tdef get_purchase_orders_to_receive(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 568,
      "code_text": "\tdef get_purchase_orders_to_bill(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 594,
      "code_text": "\tdef get_type_balance(self, fieldname, account_type, root_type=None):",
      "args": [
        "self",
        "fieldname",
        "account_type",
        "root_type"
      ]
    },
    {
      "type": "method",
      "line_start": 665,
      "code_text": "\tdef get_roots(self, root_type):",
      "args": [
        "self",
        "root_type"
      ]
    },
    {
      "type": "method",
      "line_start": 679,
      "code_text": "\tdef get_root_type_accounts(self, root_type):",
      "args": [
        "self",
        "root_type"
      ]
    },
    {
      "type": "method",
      "line_start": 690,
      "code_text": "\tdef get_purchase_order(self):\n\t\treturn self.get_summary_of_doc(\"Purchase Order\", \"purchase_order\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 693,
      "code_text": "\tdef get_sales_order(self):\n\t\treturn self.get_summary_of_doc(\"Sales Order\", \"sales_order\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 696,
      "code_text": "\tdef get_pending_purchase_orders(self):\n\t\treturn self.get_summary_of_pending(\"Purchase Order\", \"pending_purchase_orders\", \"per_received\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 699,
      "code_text": "\tdef get_pending_sales_orders(self):\n\t\treturn self.get_summary_of_pending(\"Sales Order\", \"pending_sales_orders\", \"per_delivered\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 702,
      "code_text": "\tdef get_sales_invoice(self):\n\t\treturn self.get_summary_of_doc(\"Sales Invoice\", \"sales_invoice\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 705,
      "code_text": "\tdef get_purchase_invoice(self):\n\t\treturn self.get_summary_of_doc(\"Purchase Invoice\", \"purchase_invoice\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 708,
      "code_text": "\tdef get_new_quotations(self):\n\t\treturn self.get_summary_of_doc(\"Quotation\", \"new_quotations\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 711,
      "code_text": "\tdef get_pending_quotations(self):\n\t\treturn self.get_summary_of_pending_quotations(\"pending_quotations\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 714,
      "code_text": "\tdef get_summary_of_pending(self, doc_type, fieldname, getfield):",
      "args": [
        "self",
        "doc_type",
        "fieldname",
        "getfield"
      ]
    },
    {
      "type": "method",
      "line_start": 732,
      "code_text": "\tdef get_summary_of_pending_quotations(self, fieldname):",
      "args": [
        "self",
        "fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 764,
      "code_text": "\tdef get_summary_of_doc(self, doc_type, fieldname):",
      "args": [
        "self",
        "doc_type",
        "fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 790,
      "code_text": "\tdef get_total_on(self, doc_type, from_date, to_date):",
      "args": [
        "self",
        "doc_type",
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "method",
      "line_start": 805,
      "code_text": "\tdef get_from_to_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 826,
      "code_text": "\tdef set_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 840,
      "code_text": "\tdef get_next_sending(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 855,
      "code_text": "\tdef onload(self):\n\t\tself.get_next_sending()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 858,
      "code_text": "\tdef fmt_money(self, value, absol=True):\n\t\tif absol:\n\t\t\treturn fmt_money(abs(value), currency=self.currency)\n\t\telse:\n\t\t\treturn fmt_money(value, currency=self.currency)",
      "args": [
        "self",
        "value",
        "absol"
      ]
    },
    {
      "type": "method",
      "line_start": 864,
      "code_text": "\tdef get_purchase_orders_items_overdue_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 891,
      "code_text": "def send():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 905,
      "code_text": "def get_digest_msg(name):\n\treturn frappe.get_doc(\"Email Digest\", name).get_msg_html()",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 929,
      "code_text": "def get_count_for_period(account, fieldname, from_date, to_date):",
      "args": [
        "account",
        "fieldname",
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "function",
      "line_start": 946,
      "code_text": "def get_future_date_for_calendaer_event(frequency):",
      "args": [
        "frequency"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\transaction_deletion_record\\test_transaction_deletion_record.py": [
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def create_task(company):\n\ttask = frappe.get_doc({\"doctype\": \"Task\", \"company\": company, \"subject\": \"Delete\"})\n\ttask.insert()",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def create_company(company_name):\n\tcompany = frappe.get_doc({\"doctype\": \"Company\", \"company_name\": company_name, \"default_currency\": \"INR\"})\n\tcompany.insert(ignore_if_duplicate=True)",
      "args": [
        "company_name"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def create_transaction_deletion_doc(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UnitTestTransactionDeletionRecord(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestTransactionDeletionRecord(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):\n\t\tcreate_company(\"Dunder Mifflin Paper Co\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef test_doctypes_contain_company_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_no_of_docs_is_correct(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef test_deletion_is_successful(self):\n\t\tcreate_task(\"Dunder Mifflin Paper Co\")\n\t\tcreate_transaction_deletion_doc(\"Dunder Mifflin Paper Co\")\n\t\ttasks_containing_company = frappe.get_all(\"Task\", filters={\"company\": \"Dunder Mifflin Paper Co\"})\n\t\tself.assertEqual(tasks_containing_company, [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_company_transaction_deletion_request(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule\\utils.py": [
    {
      "type": "function",
      "line_start": 751,
      "code_text": "def update_coupon_code_count(coupon_name, transaction_type):",
      "args": [
        "coupon_name",
        "transaction_type"
      ]
    },
    {
      "type": "function",
      "line_start": 630,
      "code_text": "def get_applied_pricing_rules(pricing_rules):",
      "args": [
        "pricing_rules"
      ]
    },
    {
      "type": "function",
      "line_start": 741,
      "code_text": "def validate_coupon_code(coupon_name):",
      "args": [
        "coupon_name"
      ]
    },
    {
      "type": "function",
      "line_start": 722,
      "code_text": "def get_pricing_rule_items(pr_doc, other_items=False) -> list:",
      "args": [
        "pr_doc",
        "other_items"
      ]
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def _get_tree_conditions(args, parenttype, table, allow_blank=True):",
      "args": [
        "args",
        "parenttype",
        "table",
        "allow_blank"
      ]
    },
    {
      "type": "function",
      "line_start": 386,
      "code_text": "def filter_pricing_rules_for_qty_amount(qty, rate, pricing_rules, args=None):",
      "args": [
        "qty",
        "rate",
        "pricing_rules",
        "args"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class MultiplePricingRuleConflict(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def get_pricing_rules(args, doc=None):",
      "args": [
        "args",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def filter_pricing_rule_based_on_condition(pricing_rules, doc=None):",
      "args": [
        "pricing_rules",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def _get_pricing_rules(apply_on, args, values):",
      "args": [
        "apply_on",
        "args",
        "values"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def apply_multiple_pricing_rules(pricing_rules):\n\tfor d in pricing_rules:\n\t\tif not d.apply_multiple_pricing_rules:\n\t\t\treturn False\n\n\treturn True",
      "args": [
        "pricing_rules"
      ]
    },
    {
      "type": "function",
      "line_start": 229,
      "code_text": "def get_other_conditions(conditions, values, args):",
      "args": [
        "conditions",
        "values",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 266,
      "code_text": "def filter_pricing_rules(args, pricing_rules, doc=None):",
      "args": [
        "args",
        "pricing_rules",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 497,
      "code_text": "def get_qty_amount_data_for_cumulative(pr_doc, doc, items=None):",
      "args": [
        "pr_doc",
        "doc",
        "items"
      ]
    },
    {
      "type": "function",
      "line_start": 640,
      "code_text": "def get_product_discount_rule(pricing_rule, item_details, args=None, doc=None):",
      "args": [
        "pricing_rule",
        "item_details",
        "args",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 700,
      "code_text": "def apply_pricing_rule_for_free_items(doc, pricing_rule_args):",
      "args": [
        "doc",
        "pricing_rule_args"
      ]
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def sorted_by_priority(pricing_rules, args, doc=None):",
      "args": [
        "pricing_rules",
        "args",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 348,
      "code_text": "def validate_quantity_and_amount_for_suggestion(args, qty, amount, item_code, transaction_type):",
      "args": [
        "args",
        "qty",
        "amount",
        "item_code",
        "transaction_type"
      ]
    },
    {
      "type": "function",
      "line_start": 419,
      "code_text": "def if_all_rules_same(pricing_rules, fields):",
      "args": [
        "pricing_rules",
        "fields"
      ]
    },
    {
      "type": "function",
      "line_start": 430,
      "code_text": "def apply_internal_priority(pricing_rules, field_set, args):",
      "args": [
        "pricing_rules",
        "field_set",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 443,
      "code_text": "def get_qty_and_rate_for_mixed_conditions(doc, pr_doc, args):",
      "args": [
        "doc",
        "pr_doc",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 471,
      "code_text": "def get_qty_and_rate_for_other_item(doc, pr_doc, pricing_rules, row_item):",
      "args": [
        "doc",
        "pr_doc",
        "pricing_rules",
        "row_item"
      ]
    },
    {
      "type": "function",
      "line_start": 548,
      "code_text": "def apply_pricing_rule_on_transaction(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 624,
      "code_text": "def remove_free_item(doc):\n\tfor d in doc.items:\n\t\tif d.is_free_item:\n\t\t\tdoc.remove(d)",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\accounts\\dashboard_chart_source\\account_balance_timeline\\account_balance_timeline.py": [
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_gl_entries(account, to_date):",
      "args": [
        "account",
        "to_date"
      ]
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def get(\n\tchart_name=None,\n\tchart=None,\n\tno_cache=None,\n\tfilters=None,\n\tfrom_date=None,\n\tto_date=None,\n\ttimespan=None,\n\ttime_interval=None,\n\theatmap_year=None,\n):",
      "args": [
        "chart_name",
        "chart",
        "no_cache",
        "filters",
        "from_date",
        "to_date",
        "timespan",
        "time_interval",
        "heatmap_year"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def build_result(account, dates, gl_entries):",
      "args": [
        "account",
        "dates",
        "gl_entries"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def get_dates_from_timegrain(from_date, to_date, timegrain):",
      "args": [
        "from_date",
        "to_date",
        "timegrain"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_variable\\supplier_scorecard_variable.py": [
    {
      "type": "function",
      "line_start": 441,
      "code_text": "def get_ordered_qty(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class VariablePathNotFound(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class SupplierScorecardVariable(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tself.validate_path_exists()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate_path_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def get_total_workdays(scorecard):\n\t\"\"\"Gets the number of days in this period\"\"\"\n\tdelta = getdate(scorecard.end_date) - getdate(scorecard.start_date)\n\treturn delta.days",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_item_workdays(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_total_cost_of_shipments(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def get_cost_of_delayed_shipments(scorecard):\n\t\"\"\"Gets the total cost of all delayed shipments in the period (based on Purchase Receipts - POs)\"\"\"\n\treturn get_total_cost_of_shipments(scorecard) - get_cost_of_on_time_shipments(scorecard)",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def get_cost_of_on_time_shipments(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_total_days_late(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 195,
      "code_text": "def get_on_time_shipments(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 228,
      "code_text": "def get_late_shipments(scorecard):\n\t\"\"\"Gets the number of late shipments (counting each item) in the period (based on Purchase Receipts vs POs)\"\"\"\n\treturn get_total_shipments(scorecard) - get_on_time_shipments(scorecard)",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 233,
      "code_text": "def get_total_received(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 259,
      "code_text": "def get_total_received_amount(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 285,
      "code_text": "def get_total_received_items(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 311,
      "code_text": "def get_total_rejected_amount(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 337,
      "code_text": "def get_total_rejected_items(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 363,
      "code_text": "def get_total_accepted_amount(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 389,
      "code_text": "def get_total_accepted_items(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 415,
      "code_text": "def get_total_shipments(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 458,
      "code_text": "def get_invoiced_qty(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 475,
      "code_text": "def get_rfq_total_number(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 503,
      "code_text": "def get_rfq_total_items(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 530,
      "code_text": "def get_sq_total_number(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 563,
      "code_text": "def get_sq_total_items(scorecard):",
      "args": [
        "scorecard"
      ]
    },
    {
      "type": "function",
      "line_start": 596,
      "code_text": "def get_rfq_response_days(scorecard):",
      "args": [
        "scorecard"
      ]
    }
  ],
  "erpnext\\controllers\\website_list_for_contact.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def get_list_context(context=None):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 192,
      "code_text": "def post_process(doctype, data):",
      "args": [
        "doctype",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 224,
      "code_text": "def get_customers_suppliers(doctype, user):",
      "args": [
        "doctype",
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def get_transaction_list(\n\tdoctype,\n\ttxt=None,\n\tfilters=None,\n\tlimit_start=0,\n\tlimit_page_length=20,\n\torder_by=\"creation desc\",\n\tcustom=False,\n):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "order_by",
        "custom"
      ]
    },
    {
      "type": "function",
      "line_start": 244,
      "code_text": "def get_parents_for_user(parenttype: str) -> list[str]:",
      "args": [
        "parenttype: str"
      ]
    },
    {
      "type": "function",
      "line_start": 277,
      "code_text": "def get_customer_field_name(doctype):\n\tif doctype == \"Quotation\":\n\t\treturn \"party_name\"\n\telse:\n\t\treturn \"customer\"",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 284,
      "code_text": "def add_role_for_portal_user(portal_user, role):",
      "args": [
        "portal_user",
        "role"
      ]
    },
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_webform_list_context(module):\n\tif get_module_app(module) != \"erpnext\":\n\t\treturn\n\treturn {\"get_list\": get_webform_transaction_list}",
      "args": [
        "module"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_webform_transaction_list(\n\tdoctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=\"creation\"\n):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "order_by"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_list_for_transactions(\n\tdoctype,\n\ttxt,\n\tfilters,\n\tlimit_start,\n\tlimit_page_length=20,\n\tignore_permissions=False,\n\tfields=None,\n\torder_by=None,\n):",
      "args": [
        "doctype",
        "txt",
        "filters",
        "limit_start",
        "limit_page_length",
        "ignore_permissions",
        "fields",
        "order_by"
      ]
    },
    {
      "type": "function",
      "line_start": 180,
      "code_text": "def rfq_transaction_list(parties_doctype, doctype, parties, limit_start, limit_page_length):",
      "args": [
        "parties_doctype",
        "doctype",
        "parties",
        "limit_start",
        "limit_page_length"
      ]
    },
    {
      "type": "function",
      "line_start": 255,
      "code_text": "def has_website_permission(doc, ptype, user, verbose=False):",
      "args": [
        "doc",
        "ptype",
        "user",
        "verbose"
      ]
    },
    {
      "type": "function",
      "line_start": 267,
      "code_text": "def get_customer_filter(doc, customers):",
      "args": [
        "doc",
        "customers"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\quotation\\test_quotation.py": [
    {
      "type": "function",
      "line_start": 807,
      "code_text": "def make_quotation(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 788,
      "code_text": "def enable_calculate_bundle_price(enable=1):\n\tselling_settings = frappe.get_doc(\"Selling Settings\")\n\tselling_settings.editable_bundle_item_rates = enable\n\tselling_settings.save()",
      "args": [
        "enable"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestQuotation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestQuotation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_quotation_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_make_quotation_without_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef test_make_sales_order_terms_copied(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef test_do_not_add_ordered_items_in_new_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef test_gross_profit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef test_maintain_rate_in_sales_cycle_is_enforced(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef test_make_sales_order_with_different_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_make_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef test_make_sales_order_with_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef test_valid_till_before_transaction_date(self):\n\t\tquotation = frappe.copy_doc(self.globalTestRecords[\"Quotation\"][0])\n\t\tquotation.valid_till = add_days(quotation.transaction_date, -1)\n\t\tself.assertRaises(frappe.ValidationError, quotation.validate)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef test_so_from_expired_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef test_create_quotation_with_margin(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef test_create_two_quotations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 320,
      "code_text": "\tdef test_quotation_expiry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 336,
      "code_text": "\tdef test_product_bundle_mapping_on_creating_so(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 392,
      "code_text": "\tdef test_product_bundle_price_calculation_when_calculate_bundle_price_is_unchecked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 411,
      "code_text": "\tdef test_product_bundle_price_calculation_when_calculate_bundle_price_is_checked(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef test_product_bundle_price_calculation_for_multiple_product_bundles_when_calculate_bundle_price_is_checked(\n\t\tself,\n\t):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 483,
      "code_text": "\tdef test_packed_items_indices_are_reset_when_product_bundle_is_deleted_from_items_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 533,
      "code_text": "\tdef test_alternative_items_with_stock_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 577,
      "code_text": "\tdef test_alternative_items_with_service_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef test_amount_calculation_for_alternative_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 664,
      "code_text": "\tdef test_alternative_items_sales_order_mapping_with_stock_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 704,
      "code_text": "\tdef test_uom_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 720,
      "code_text": "\tdef test_item_tax_template_for_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 773,
      "code_text": "\tdef test_grand_total_and_rounded_total_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 794,
      "code_text": "def get_quotation_dict(party_name=None, item_code=None):",
      "args": [
        "party_name",
        "item_code"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\repost_item_valuation\\repost_item_valuation.py": [
    {
      "type": "function",
      "line_start": 265,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Repost Item Valuation\", [\"warehouse\", \"item_code\"], \"item_warehouse\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def repost(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 446,
      "code_text": "def repost_entries():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 435,
      "code_text": "def get_recipients():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 478,
      "code_text": "def in_configured_timeslot(repost_settings=None, current_time=None):",
      "args": [
        "repost_settings",
        "current_time"
      ]
    },
    {
      "type": "function",
      "line_start": 343,
      "code_text": "def repost_sl_entries(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 467,
      "code_text": "def get_repost_item_valuation_entries():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class RepostItemValuation(Document):"
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef clear_old_logs(days=None):",
      "args": [
        "days"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef validate_period_closing_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef reset_recreate_stock_ledgers(self):\n\t\tif self.recreate_stock_ledgers and self.based_on != \"Transaction\":\n\t\t\tself.recreate_stock_ledgers = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef get_closing_stock_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef get_max_period_closing_date(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef validate_accounts_freeze(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef reset_field_values(self):\n\t\tif self.based_on == \"Transaction\":\n\t\t\tself.item_code = None\n\t\t\tself.warehouse = None\n\n\t\tself.allow_negative_stock = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef on_cancel(self):\n\t\tself.clear_attachment()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef on_trash(self):\n\t\tself.clear_attachment()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef set_company(self):\n\t\tif self.based_on == \"Transaction\":\n\t\t\tself.company = frappe.get_cached_value(self.voucher_type, self.voucher_no, \"company\")\n\t\telif self.warehouse:\n\t\t\tself.company = frappe.get_cached_value(\"Warehouse\", self.warehouse, \"company\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef set_status(self, status=None, write=True):",
      "args": [
        "self",
        "status",
        "write"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef clear_attachment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef before_cancel(self):\n\t\tself.check_pending_repost_against_cancelled_transaction()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef check_pending_repost_against_cancelled_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef restart_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef deduplicate_similar_repost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef recreate_stock_ledger_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 336,
      "code_text": "def remove_attached_file(docname):\n\tif file_name := frappe.db.get_value(\n\t\t\"File\", {\"attached_to_name\": docname, \"attached_to_doctype\": \"Repost Item Valuation\"}, \"name\"\n\t):\n\t\tfrappe.delete_doc(\"File\", file_name, ignore_permissions=True, delete_permanently=True, force=True)",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 370,
      "code_text": "def repost_gl_entries(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 385,
      "code_text": "def _get_directly_dependent_vouchers(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 417,
      "code_text": "def notify_error_to_stock_managers(doc, traceback):",
      "args": [
        "doc",
        "traceback"
      ]
    },
    {
      "type": "function",
      "line_start": 502,
      "code_text": "def execute_repost_item_valuation():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withholding_category\\tax_withholding_category.py": [
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_party_details(inv):",
      "args": [
        "inv"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def get_party_tax_withholding_details(inv, tax_withholding_category=None):",
      "args": [
        "inv",
        "tax_withholding_category"
      ]
    },
    {
      "type": "function",
      "line_start": 180,
      "code_text": "def get_cost_center(inv):",
      "args": [
        "inv"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def get_tax_withholding_rates(tax_withholding, posting_date):",
      "args": [
        "tax_withholding",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 743,
      "code_text": "def get_lower_deduction_amount(current_amount, limit_consumed, certificate_limit, rate, tax_details):",
      "args": [
        "current_amount",
        "limit_consumed",
        "certificate_limit",
        "rate",
        "tax_details"
      ]
    },
    {
      "type": "function",
      "line_start": 753,
      "code_text": "def is_valid_certificate(ldc, posting_date, limit_consumed):\n\tavailable_amount = flt(ldc.certificate_limit) - flt(limit_consumed)\n\tif (getdate(ldc.valid_from) <= getdate(posting_date) <= getdate(ldc.valid_upto)) and available_amount > 0:\n\t\treturn True\n\n\treturn False",
      "args": [
        "ldc",
        "posting_date",
        "limit_consumed"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TaxWithholdingCategory(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tself.validate_dates()\n\t\tself.validate_companies_and_accounts()\n\t\tself.validate_thresholds()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef validate_companies_and_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_thresholds(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def get_tax_withholding_details(tax_withholding_category, posting_date, company):",
      "args": [
        "tax_withholding_category",
        "posting_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 224,
      "code_text": "def get_tax_row_for_tcs(inv, tax_details, tax_amount, tax_deducted):",
      "args": [
        "inv",
        "tax_details",
        "tax_amount",
        "tax_deducted"
      ]
    },
    {
      "type": "function",
      "line_start": 254,
      "code_text": "def get_tax_row_for_tds(tax_details, tax_amount):",
      "args": [
        "tax_details",
        "tax_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 265,
      "code_text": "def get_lower_deduction_certificate(company, posting_date, tax_details, pan_no):",
      "args": [
        "company",
        "posting_date",
        "tax_details",
        "pan_no"
      ]
    },
    {
      "type": "function",
      "line_start": 282,
      "code_text": "def get_tax_amount(party_type, parties, inv, tax_details, posting_date, pan_no=None):",
      "args": [
        "party_type",
        "parties",
        "inv",
        "tax_details",
        "posting_date",
        "pan_no"
      ]
    },
    {
      "type": "function",
      "line_start": 361,
      "code_text": "def is_tax_deducted_on_the_basis_of_inv(vouchers):",
      "args": [
        "vouchers"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def get_invoice_vouchers(parties, tax_details, company, party_type=\"Supplier\"):",
      "args": [
        "parties",
        "tax_details",
        "company",
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 469,
      "code_text": "def get_payment_entry_vouchers(parties, tax_details, company, party_type=\"Supplier\"):",
      "args": [
        "parties",
        "tax_details",
        "company",
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 483,
      "code_text": "def get_advance_vouchers(parties, company=None, from_date=None, to_date=None, party_type=\"Supplier\"):",
      "args": [
        "parties",
        "company",
        "from_date",
        "to_date",
        "party_type"
      ]
    },
    {
      "type": "function",
      "line_start": 514,
      "code_text": "def get_taxes_deducted_on_advances_allocated(inv, tax_details):",
      "args": [
        "inv",
        "tax_details"
      ]
    },
    {
      "type": "function",
      "line_start": 538,
      "code_text": "def get_deducted_tax(taxable_vouchers, tax_details):",
      "args": [
        "taxable_vouchers",
        "tax_details"
      ]
    },
    {
      "type": "function",
      "line_start": 553,
      "code_text": "def get_advance_tax_across_fiscal_year(tax_deducted_on_advances, tax_details):",
      "args": [
        "tax_deducted_on_advances",
        "tax_details"
      ]
    },
    {
      "type": "function",
      "line_start": 563,
      "code_text": "def get_tds_amount(ldc, parties, inv, tax_details, voucher_wise_amount):",
      "args": [
        "ldc",
        "parties",
        "inv",
        "tax_details",
        "voucher_wise_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 645,
      "code_text": "def get_tcs_amount(parties, inv, tax_details, vouchers, adv_vouchers):",
      "args": [
        "parties",
        "inv",
        "tax_details",
        "vouchers",
        "adv_vouchers"
      ]
    },
    {
      "type": "function",
      "line_start": 711,
      "code_text": "def get_advance_adjusted_in_invoice(inv):\n\tadvances_adjusted = 0\n\tfor row in inv.get(\"advances\", []):\n\t\tadvances_adjusted += row.allocated_amount\n\n\treturn advances_adjusted",
      "args": [
        "inv"
      ]
    },
    {
      "type": "function",
      "line_start": 719,
      "code_text": "def get_invoice_total_without_tcs(inv, tax_details):\n\ttcs_tax_row = [d for d in inv.taxes if d.account_head == tax_details.account_head]\n\ttcs_tax_row_amount = tcs_tax_row[0].base_tax_amount if tcs_tax_row else 0\n\n\treturn inv.grand_total - tcs_tax_row_amount",
      "args": [
        "inv",
        "tax_details"
      ]
    },
    {
      "type": "function",
      "line_start": 726,
      "code_text": "def get_limit_consumed(ldc, parties):",
      "args": [
        "ldc",
        "parties"
      ]
    },
    {
      "type": "function",
      "line_start": 761,
      "code_text": "def normal_round(number):",
      "args": [
        "number"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\material_request\\test_material_request.py": [
    {
      "type": "function",
      "line_start": 957,
      "code_text": "def make_material_request(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class UnitTestMaterialRequest(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 34,
      "code_text": "class TestMaterialRequest(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef test_material_request_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef test_make_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef test_make_subcontracted_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef test_make_supplier_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef test_make_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef test_partial_make_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef test_in_transit_make_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef _insert_stock_entry(self, qty1, qty2, warehouse=None):",
      "args": [
        "self",
        "qty1",
        "qty2",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef test_cannot_stop_cancelled_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 241,
      "code_text": "\tdef test_mr_changes_from_stopped_to_pending_after_reopen(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef test_cannot_submit_cancelled_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef test_mr_changes_from_pending_to_cancelled_after_cancel(self):\n\t\tmr = frappe.copy_doc(self.globalTestRecords[\"Material Request\"][0])\n\t\tmr.insert()\n\t\tmr.submit()\n\t\tmr.cancel()\n\t\tself.assertEqual(\"Cancelled\", mr.status)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef test_cannot_change_cancelled_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 282,
      "code_text": "\tdef test_cannot_submit_deleted_material_request(self):\n\t\tmr = frappe.copy_doc(self.globalTestRecords[\"Material Request\"][0])\n\t\tmr.insert()\n\t\tmr.delete()\n\n\t\tself.assertRaises(frappe.ValidationError, mr.submit)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef test_cannot_delete_submitted_mr(self):\n\t\tmr = frappe.copy_doc(self.globalTestRecords[\"Material Request\"][0])\n\t\tmr.insert()\n\t\tmr.submit()\n\n\t\tself.assertRaises(frappe.ValidationError, mr.delete)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef test_stopped_mr_changes_to_pending_after_reopen(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef test_pending_mr_changes_to_stopped_after_stop(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 315,
      "code_text": "\tdef test_cannot_stop_unsubmitted_mr(self):\n\t\tmr = frappe.copy_doc(self.globalTestRecords[\"Material Request\"][0])\n\t\tmr.insert()\n\t\tself.assertRaises(frappe.InvalidStatusError, mr.update_status, \"Stopped\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 320,
      "code_text": "\tdef test_completed_qty_for_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 392,
      "code_text": "\tdef test_completed_qty_for_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 492,
      "code_text": "\tdef test_over_transfer_qty_allowance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 554,
      "code_text": "\tdef test_completed_qty_for_over_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 636,
      "code_text": "\tdef test_incorrect_mapping_of_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 683,
      "code_text": "\tdef test_warehouse_company_validation(self):\n\t\tfrom erpnext.stock.utils import InvalidWarehouseCompany\n\n\t\tmr = frappe.copy_doc(self.globalTestRecords[\"Material Request\"][0])\n\t\tmr.company = \"_Test Company 1\"\n\t\tself.assertRaises(InvalidWarehouseCompany, mr.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 690,
      "code_text": "\tdef _get_requested_qty(self, item_code, warehouse):\n\t\treturn flt(\n\t\t\tfrappe.db.get_value(\"Bin\", {\"item_code\": item_code, \"warehouse\": warehouse}, \"indented_qty\")\n\t\t)",
      "args": [
        "self",
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 695,
      "code_text": "\tdef test_make_stock_entry_for_material_issue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 708,
      "code_text": "\tdef test_completed_qty_for_issue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 747,
      "code_text": "\tdef test_material_request_type_manufacture(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef test_requested_qty_multi_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 819,
      "code_text": "\tdef test_multi_uom_for_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 855,
      "code_text": "\tdef test_customer_provided_parts_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 872,
      "code_text": "\tdef test_auto_email_users_with_company_user_permissions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 929,
      "code_text": "def get_in_transit_warehouse(company):",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\controllers\\buying_controller.py": [
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class BuyingController(SubcontractingController):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class QtyMismatchError(ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 1000,
      "code_text": "def validate_item_type(doc, fieldname, message):",
      "args": [
        "doc",
        "fieldname",
        "message"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef __setup__(self):\n\t\tself.flags.ignore_permlevel_for_fields = [\"buying_price_list\", \"price_list_currency\"]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef onload(self):\n\t\tsuper().onload()\n\t\tself.set_onload(\n\t\t\t\"backflush_based_on\",\n\t\t\tfrappe.db.get_single_value(\"Buying Settings\", \"backflush_raw_materials_of_subcontract_based_on\"),\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef create_package_for_transfer(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef set_rate_for_standalone_debit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef set_missing_values(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef set_supplier_from_item_default(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef validate_stock_or_nonstock_items(self):\n\t\tif self.meta.get_field(\"taxes\") and not self.get_stock_items() and not self.get_asset_items():\n\t\t\tmsg = _('Tax Category has been changed to \"Total\" because all the Items are non-stock items')\n\t\t\tself.update_tax_category(msg)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef update_tax_category(self, msg):",
      "args": [
        "self",
        "msg"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef validate_asset_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef get_asset_items(self):\n\t\tif self.doctype not in [\"Purchase Order\", \"Purchase Invoice\", \"Purchase Receipt\"]:\n\t\t\treturn []\n\n\t\treturn [d.item_code for d in self.items if d.is_fixed_asset]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef set_landed_cost_voucher_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef validate_from_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 241,
      "code_text": "\tdef set_supplier_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef set_total_in_words(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef update_valuation_rate(self, reset_outgoing_rate=True):",
      "args": [
        "self",
        "reset_outgoing_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 347,
      "code_text": "\tdef set_incoming_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef set_sales_incoming_rate_for_internal_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 431,
      "code_text": "\tdef validate_for_subcontracting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 461,
      "code_text": "\tdef set_qty_as_per_stock_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef validate_purchase_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 503,
      "code_text": "\tdef validate_accepted_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 518,
      "code_text": "\tdef validate_negative_quantity(self, item_row, field_list):",
      "args": [
        "self",
        "item_row",
        "field_list"
      ]
    },
    {
      "type": "method",
      "line_start": 533,
      "code_text": "\tdef check_for_on_hold_or_closed_status(self, ref_doctype, ref_fieldname):",
      "args": [
        "self",
        "ref_doctype",
        "ref_fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 546,
      "code_text": "\tdef update_stock_ledger(self, allow_negative_stock=False, via_landed_cost_voucher=False):",
      "args": [
        "self",
        "allow_negative_stock",
        "via_landed_cost_voucher"
      ]
    },
    {
      "type": "method",
      "line_start": 683,
      "code_text": "\tdef get_package_for_target_warehouse(self, item, warehouse=None, type_of_transaction=None) -> str:",
      "args": [
        "self",
        "item",
        "warehouse",
        "type_of_transaction"
      ]
    },
    {
      "type": "method",
      "line_start": 694,
      "code_text": "\tdef update_ordered_and_reserved_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 720,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 734,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 753,
      "code_text": "\tdef validate_budget(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 771,
      "code_text": "\tdef process_fixed_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 779,
      "code_text": "\tdef auto_make_assets(self, asset_items):",
      "args": [
        "self",
        "asset_items"
      ]
    },
    {
      "type": "method",
      "line_start": 843,
      "code_text": "\tdef make_asset(self, row, accounting_dimensions, is_grouped_asset=False):",
      "args": [
        "self",
        "row",
        "accounting_dimensions",
        "is_grouped_asset"
      ]
    },
    {
      "type": "method",
      "line_start": 894,
      "code_text": "\tdef update_fixed_asset(self, field, delete_asset=False):",
      "args": [
        "self",
        "field",
        "delete_asset"
      ]
    },
    {
      "type": "method",
      "line_start": 936,
      "code_text": "\tdef delete_linked_asset(self):\n\t\tif self.doctype == \"Purchase Invoice\" and not self.get(\"update_stock\"):\n\t\t\treturn\n\n\t\tasset_movement = frappe.db.get_value(\"Asset Movement\", {\"reference_name\": self.name}, \"name\")\n\t\tfrappe.delete_doc(\"Asset Movement\", asset_movement, force=1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 943,
      "code_text": "\tdef validate_schedule_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 977,
      "code_text": "\tdef validate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 988,
      "code_text": "def get_asset_item_details(asset_items):",
      "args": [
        "asset_items"
      ]
    },
    {
      "type": "function",
      "line_start": 1042,
      "code_text": "def update_regional_item_valuation_rate(doc):\n\tpass",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\holiday_list\\holiday_list.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class OverlapError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def get_events(start, end, filters=None):",
      "args": [
        "start",
        "end",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 202,
      "code_text": "def local_country_name(country_code: str) -> str:\n\t\"\"\"Return the localized country name for the given country code.\"\"\"\n\tfrom babel import Locale\n\n\treturn Locale.parse(frappe.local.lang, sep=\"-\").territories.get(country_code, country_code)",
      "args": [
        "country_code: str"
      ]
    },
    {
      "type": "function",
      "line_start": 192,
      "code_text": "def is_holiday(holiday_list, date=None):",
      "args": [
        "holiday_list",
        "date"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class HolidayList(Document):"
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate(self):\n\t\tself.validate_days()\n\t\tself.total_holidays = len(self.holidays)\n\t\tself.validate_duplicate_date()\n\t\tself.sort_holidays()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef get_weekly_off_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef get_supported_countries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef get_local_holidays(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef sort_holidays(self):\n\t\tself.holidays.sort(key=lambda x: getdate(x.holiday_date))\n\t\tfor i in range(len(self.holidays)):\n\t\t\tself.holidays[i].idx = i + 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef get_holidays(self) -> list[date]:\n\t\treturn [getdate(holiday.holiday_date) for holiday in self.holidays]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef validate_days(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef get_weekly_off_date_list(self, start_date, end_date):",
      "args": [
        "self",
        "start_date",
        "end_date"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef clear_table(self):\n\t\tself.set(\"holidays\", [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef validate_duplicate_date(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\inventory_dimension\\test_inventory_dimension.py": [
    {
      "type": "function",
      "line_start": 675,
      "code_text": "def prepare_data_for_internal_transfer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 660,
      "code_text": "def create_inventory_dimension(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 515,
      "code_text": "def get_voucher_sl_entries(voucher_no, fields):\n\treturn frappe.get_all(\n\t\t\"Stock Ledger Entry\", filters={\"voucher_no\": voucher_no}, fields=fields, order_by=\"creation\"\n\t)",
      "args": [
        "voucher_no",
        "fields"
      ]
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class UnitTestInventoryDimension(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 32,
      "code_text": "class TestInventoryDimension(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef setUp(self):\n\t\tprepare_test_data()\n\t\tcreate_store_dimension()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_validate_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef test_delete_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef test_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef test_inventory_dimension_for_purchase_receipt_and_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 213,
      "code_text": "\tdef test_check_standard_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef test_check_mandatory_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef test_check_mandatory_depends_on_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef test_for_purchase_sales_and_stock_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 383,
      "code_text": "\tdef test_inter_transfer_return_against_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 449,
      "code_text": "\tdef test_validate_negative_stock_for_inventory_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 521,
      "code_text": "def create_store_dimension():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 550,
      "code_text": "def prepare_test_data():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice_merge_log\\pos_invoice_merge_log.py": [
    {
      "type": "function",
      "line_start": 452,
      "code_text": "def consolidate_pos_invoices(pos_invoices=None, closing_entry=None):",
      "args": [
        "pos_invoices",
        "closing_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 533,
      "code_text": "def create_merge_logs(invoice_by_customer, closing_entry=None):",
      "args": [
        "invoice_by_customer",
        "closing_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 401,
      "code_text": "def update_item_wise_tax_detail(consolidate_tax_row, tax_row):",
      "args": [
        "consolidate_tax_row",
        "tax_row"
      ]
    },
    {
      "type": "function",
      "line_start": 571,
      "code_text": "def cancel_merge_logs(merge_logs, closing_entry=None):",
      "args": [
        "merge_logs",
        "closing_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 601,
      "code_text": "def enqueue_job(job, **kwargs):",
      "args": [
        "job",
        "**kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 631,
      "code_text": "def get_error_message(message) -> str:\n\ttry:\n\t\treturn message[\"message\"]\n\texcept Exception:\n\t\treturn str(message)",
      "args": [
        "message"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class POSInvoiceMergeLog(Document):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef validate(self):\n\t\tself.validate_customer()\n\t\tself.validate_pos_invoice_status()\n\t\tself.validate_duplicate_pos_invoices()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef validate_duplicate_pos_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef validate_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef validate_pos_invoice_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef process_merging_into_sales_invoice(self, data):",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef process_merging_into_credit_notes(self, data):",
      "args": [
        "self",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef distinguish_return_pos_invoices(self, data, sales_invoice_doc=None):",
      "args": [
        "self",
        "data",
        "sales_invoice_doc"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef merge_pos_invoice_into(self, invoice, data):",
      "args": [
        "self",
        "invoice",
        "data"
      ]
    },
    {
      "type": "method",
      "line_start": 327,
      "code_text": "\tdef get_new_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 336,
      "code_text": "\tdef update_pos_invoices(self, invoice_docs, sales_invoice=\"\", credit_notes=None):",
      "args": [
        "self",
        "invoice_docs",
        "sales_invoice",
        "credit_notes"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef serial_and_batch_bundle_reference_for_pos_invoice(self):\n\t\tfor d in self.pos_invoices:\n\t\t\tpos_invoice = frappe.get_doc(\"POS Invoice\", d.pos_invoice)\n\t\t\tfor table_name in [\"items\", \"packed_items\"]:\n\t\t\t\tpos_invoice.set_serial_and_batch_bundle(table_name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef delink_serial_and_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 369,
      "code_text": "\tdef get_serial_and_batch_bundles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 387,
      "code_text": "\tdef cancel_linked_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 419,
      "code_text": "def get_all_unconsolidated_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 441,
      "code_text": "def get_invoice_customer_map(pos_invoices):",
      "args": [
        "pos_invoices"
      ]
    },
    {
      "type": "function",
      "line_start": 466,
      "code_text": "def unconsolidate_pos_invoices(closing_entry):",
      "args": [
        "closing_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 478,
      "code_text": "def split_invoices(invoices):",
      "args": [
        "invoices"
      ]
    },
    {
      "type": "function",
      "line_start": 626,
      "code_text": "def check_scheduler_status():\n\tif is_scheduler_inactive() and not frappe.flags.in_test:\n\t\tfrappe.throw(_(\"Scheduler is inactive. Cannot enqueue job.\"), title=_(\"Scheduler Inactive\"))",
      "args": []
    },
    {
      "type": "function",
      "line_start": 638,
      "code_text": "def get_sales_invoice_item(return_against_pos_invoice, pos_invoice_item):",
      "args": [
        "return_against_pos_invoice",
        "pos_invoice_item"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\inventory_dimension\\inventory_dimension.py": [
    {
      "type": "function",
      "line_start": 391,
      "code_text": "def get_inventory_dimensions():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 308,
      "code_text": "def field_exists(doctype, fieldname) -> str or None:\n\treturn frappe.db.get_value(\"DocField\", {\"parent\": doctype, \"fieldname\": fieldname}, \"name\")",
      "args": [
        "doctype",
        "fieldname"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class DoNotChangeError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class CanNotBeChildDoc(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class CanNotBeDefaultDimension(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class InventoryDimension(Document):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef onload(self):\n\t\tif not self.is_new() and frappe.db.has_column(\"Stock Ledger Entry\", self.target_fieldname):\n\t\t\tself.set_onload(\"has_stock_ledger\", self.has_stock_ledger())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef has_stock_ledger(self) -> str:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate(self):\n\t\tself.validate_reference_document()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef before_save(self):\n\t\tself.do_not_update_document()\n\t\tself.reset_value()\n\t\tself.set_source_and_target_fieldname()\n\t\tself.set_type_of_transaction()\n\t\tself.set_fetch_value_from()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef set_type_of_transaction(self):\n\t\tif self.apply_to_all_doctypes:\n\t\t\tself.type_of_transaction = \"Both\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef set_fetch_value_from(self):\n\t\tif self.apply_to_all_doctypes:\n\t\t\tself.fetch_from_parent = self.reference_document",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef do_not_update_document(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef on_trash(self):\n\t\tself.delete_custom_fields()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef delete_custom_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef reset_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef validate_reference_document(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef set_source_and_target_fieldname(self) -> None:\n\t\tif not self.source_fieldname:\n\t\t\tself.source_fieldname = scrub(self.dimension_name)\n\n\t\tif not self.target_fieldname:\n\t\t\tself.target_fieldname = scrub(self.reference_document)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef on_update(self):\n\t\tself.add_custom_fields()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef get_insert_after_fieldname(doctype):",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef get_dimension_fields(self, doctype=None):",
      "args": [
        "self",
        "doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef add_custom_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 260,
      "code_text": "\tdef add_transfer_field(self, doctype, dimension_fields):",
      "args": [
        "self",
        "doctype",
        "dimension_fields"
      ]
    },
    {
      "type": "function",
      "line_start": 313,
      "code_text": "def get_inventory_documents(\n\tdoctype=None, txt=None, searchfield=None, start=None, page_len=None, filters=None\n):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 336,
      "code_text": "def get_evaluated_inventory_dimension(doc, sl_dict, parent_doc=None):",
      "args": [
        "doc",
        "sl_dict",
        "parent_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 366,
      "code_text": "def get_document_wise_inventory_dimensions(doctype) -> dict:",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 415,
      "code_text": "def delete_dimension(dimension):\n\tdoc = frappe.get_doc(\"Inventory Dimension\", dimension)\n\tdoc.delete()",
      "args": [
        "dimension"
      ]
    },
    {
      "type": "function",
      "line_start": 421,
      "code_text": "def get_parent_fields(child_doctype, dimension_name):",
      "args": [
        "child_doctype",
        "dimension_name"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\department\\department.py": [
    {
      "type": "function",
      "line_start": 74,
      "code_text": "def get_children(doctype, parent=None, company=None, is_root=False, include_disabled=False):",
      "args": [
        "doctype",
        "parent",
        "company",
        "is_root",
        "include_disabled"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def add_node():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 63,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Department\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_abbreviated_name(name, company):\n\tabbr = frappe.get_cached_value(\"Company\", company, \"abbr\")\n\tnew_name = f\"{name} - {abbr}\"\n\treturn new_name",
      "args": [
        "name",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class Department(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef autoname(self):\n\t\troot = get_root_of(\"Department\")\n\t\tif root and self.department_name != root:\n\t\t\tself.name = get_abbreviated_name(self.department_name, self.company)\n\t\telse:\n\t\t\tself.name = self.department_name",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef validate(self):\n\t\tif not self.parent_department:\n\t\t\troot = get_root_of(\"Department\")\n\t\t\tif root:\n\t\t\t\tself.parent_department = root",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef before_rename(self, old, new, merge=False):\n\t\t# renaming consistency with abbreviation\n\t\tif frappe.get_cached_value(\"Company\", self.company, \"abbr\") not in new:\n\t\t\tnew = get_abbreviated_name(new, self.company)\n\n\t\treturn new",
      "args": [
        "self",
        "old",
        "new",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef on_update(self):\n\t\tif not (frappe.local.flags.ignore_update_nsm or frappe.flags.in_setup_wizard):\n\t\t\tsuper().on_update()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef on_trash(self):\n\t\tsuper().on_trash()\n\t\tdelete_events(self.doctype, self.name)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\item_variant.py": [
    {
      "type": "function",
      "line_start": 201,
      "code_text": "def create_variant(item, args, use_template_image=False):",
      "args": [
        "item",
        "args",
        "use_template_image"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class InvalidItemAttributeValueError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_variant(template, args=None, variant=None, manufacturer=None, manufacturer_part_no=None):",
      "args": [
        "template",
        "args",
        "variant",
        "manufacturer",
        "manufacturer_part_no"
      ]
    },
    {
      "type": "function",
      "line_start": 321,
      "code_text": "def copy_attributes_to_variant(item, variant):",
      "args": [
        "item",
        "variant"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def make_variant_item_code(template_item_code, template_item_name, variant):",
      "args": [
        "template_item_code",
        "template_item_name",
        "variant"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class ItemVariantExistsError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def validate_item_variant_attributes(item, args=None):",
      "args": [
        "item",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def validate_is_incremental(numeric_attribute, attribute, value, item):",
      "args": [
        "numeric_attribute",
        "attribute",
        "value",
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 132,
      "code_text": "def validate_item_attribute_value(attributes_list, attribute, attribute_value, item, from_variant=True):",
      "args": [
        "attributes_list",
        "attribute",
        "attribute_value",
        "item",
        "from_variant"
      ]
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class ItemTemplateCannotHaveStock(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def make_variant_based_on_manufacturer(template, manufacturer, manufacturer_part_no):",
      "args": [
        "template",
        "manufacturer",
        "manufacturer_part_no"
      ]
    },
    {
      "type": "function",
      "line_start": 158,
      "code_text": "def get_attribute_values(item):",
      "args": [
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 178,
      "code_text": "def find_variant(template, args, variant_item_code=None):",
      "args": [
        "template",
        "args",
        "variant_item_code"
      ]
    },
    {
      "type": "function",
      "line_start": 226,
      "code_text": "def enqueue_multiple_variant_creation(item, args, use_template_image=False):",
      "args": [
        "item",
        "args",
        "use_template_image"
      ]
    },
    {
      "type": "function",
      "line_start": 250,
      "code_text": "def create_multiple_variants(item, args, use_template_image=False):",
      "args": [
        "item",
        "args",
        "use_template_image"
      ]
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def generate_keyed_value_combinations(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 406,
      "code_text": "def create_variant_doc_for_quick_entry(template, args):",
      "args": [
        "template",
        "args"
      ]
    }
  ],
  "erpnext\\utilities\\transaction_base.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TransactionBase(StatusUpdater):"
    },
    {
      "type": "function",
      "line_start": 525,
      "code_text": "def validate_uom_is_integer(doc, uom_field, qty_fields, child_dt=None):",
      "args": [
        "doc",
        "uom_field",
        "qty_fields",
        "child_dt"
      ]
    },
    {
      "type": "function",
      "line_start": 504,
      "code_text": "def delete_events(ref_type, ref_name):",
      "args": [
        "ref_type",
        "ref_name"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class UOMMustBeIntegerError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef validate_posting_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef validate_uom_is_integer(self, uom_field, qty_fields, child_dt=None):\n\t\tvalidate_uom_is_integer(self, uom_field, qty_fields, child_dt)",
      "args": [
        "self",
        "uom_field",
        "qty_fields",
        "child_dt"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate_with_previous_doc(self, ref):",
      "args": [
        "self",
        "ref"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef compare_values(self, ref_doc, fields, doc=None):",
      "args": [
        "self",
        "ref_doc",
        "fields",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef get_prev_doc_reference_details(self, reference_names, reference_doctype, fields):",
      "args": [
        "self",
        "reference_names",
        "reference_doctype",
        "fields"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef validate_rate_with_reference_doc(self, ref_details):",
      "args": [
        "self",
        "ref_details"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef get_reference_details(self, reference_names, reference_doctype):",
      "args": [
        "self",
        "reference_names",
        "reference_doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef get_link_filters(self, for_doctype):",
      "args": [
        "self",
        "for_doctype"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef reset_default_field_value(self, default_field: str, child_table: str, child_table_field: str):",
      "args": [
        "self",
        "default_field: str",
        "child_table: str",
        "child_table_field: str"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef validate_currency_for_receivable_payable_and_advance_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef fetch_item_details(self, item: dict) -> dict:",
      "args": [
        "self",
        "item: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 291,
      "code_text": "\tdef process_item_selection(self, item_idx):",
      "args": [
        "self",
        "item_idx"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef set_fetched_values(self, item_obj: object, item_details: dict) -> None:\n\t\tfor k, v in item_details.items():\n\t\t\tif hasattr(item_obj, k):\n\t\t\t\tsetattr(item_obj, k, v)",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 311,
      "code_text": "\tdef handle_internal_parties(self, item_obj: object, item_details: dict) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef add_taxes_from_item_template(self, item_obj: object, item_details: dict) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 359,
      "code_text": "\tdef set_rate_based_on_price_list(self, item_obj: object, item_details: dict) -> None:\n\t\tif item_obj.price_list_rate and item_obj.discount_percentage:\n\t\t\titem_obj.rate = flt(\n\t\t\t\titem_obj.price_list_rate * (1 - item_obj.discount_percentage / 100.0),\n\t\t\t\titem_obj.precision(\"rate\"),\n\t\t\t)",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 366,
      "code_text": "\tdef copy_from_first_row(self, row, fields):\n\t\tif self.items and row:\n\t\t\tfields.extend([x.get(\"fieldname\") for x in get_dimensions(True)[0]])\n\t\t\tfirst_row = self.items[0]\n\t\t\t[setattr(row, k, first_row.get(k)) for k in fields if hasattr(first_row, k)]",
      "args": [
        "self",
        "row",
        "fields"
      ]
    },
    {
      "type": "method",
      "line_start": 372,
      "code_text": "\tdef add_free_item(self, item_obj: object, item_details: dict) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 393,
      "code_text": "\tdef conversion_factor(self, item_obj: object, item_details: dict) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef calculate_stock_uom_rate(self, item_obj: object) -> None:\n\t\tif item_obj.rate:\n\t\t\titem_obj.stock_uom_rate = flt(item_obj.rate) / flt(item_obj.conversion_factor)",
      "args": [
        "self",
        "item_obj: object"
      ]
    },
    {
      "type": "method",
      "line_start": 417,
      "code_text": "\tdef set_item_rate_and_discounts(self, item_obj: object, item_details: dict) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "item_details: dict"
      ]
    },
    {
      "type": "method",
      "line_start": 451,
      "code_text": "\tdef calculate_net_weight(self):\n\t\tself.total_net_weight = sum([x.get(\"total_weight\") or 0 for x in self.items])\n\t\tself.apply_shipping_rule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 455,
      "code_text": "\tdef _apply_price_list(self, item_obj: object, reset_plc_conversion: bool) -> None:",
      "args": [
        "self",
        "item_obj: object",
        "reset_plc_conversion: bool"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule\\pricing_rule.py": [
    {
      "type": "function",
      "line_start": 706,
      "code_text": "def make_pricing_rule(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 393,
      "code_text": "def get_pricing_rule_for_item(args, doc=None, for_validate=False):",
      "args": [
        "args",
        "doc",
        "for_validate"
      ]
    },
    {
      "type": "function",
      "line_start": 621,
      "code_text": "def remove_pricing_rule_for_item(pricing_rules, item_details, item_code=None, rate=None):",
      "args": [
        "pricing_rules",
        "item_details",
        "item_code",
        "rate"
      ]
    },
    {
      "type": "function",
      "line_start": 686,
      "code_text": "def set_transaction_type(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class PricingRule(Document):"
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef validate_duplicate_apply_on(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef validate_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef validate_applicable_for_selling_or_buying(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 222,
      "code_text": "\tdef validate_min_max_qty(self):\n\t\tif self.min_qty and self.max_qty and flt(self.min_qty) > flt(self.max_qty):\n\t\t\tthrow(_(\"Min Qty can not be greater than Max Qty\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef validate_min_max_amt(self):\n\t\tif self.min_amt and self.max_amt and flt(self.min_amt) > flt(self.max_amt):\n\t\t\tthrow(_(\"Min Amt can not be greater than Max Amt\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef validate_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 242,
      "code_text": "\tdef cleanup_fields_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 276,
      "code_text": "\tdef validate_rate_or_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef validate_max_discount(self):\n\t\tif self.rate_or_discount == \"Discount Percentage\" and self.get(\"items\"):\n\t\t\tfor d in self.items:\n\t\t\t\tmax_discount = frappe.get_cached_value(\"Item\", d.item_code, \"max_discount\")\n\t\t\t\tif max_discount and flt(self.discount_percentage) > flt(max_discount):\n\t\t\t\t\tthrow(_(\"Max discount allowed for item: {0} is {1}%\").format(d.item_code, max_discount))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef validate_price_list_with_currency(self):\n\t\tif self.currency and self.for_price_list:\n\t\t\tprice_list_currency = frappe.db.get_value(\"Price List\", self.for_price_list, \"currency\", True)\n\t\t\tif self.currency != price_list_currency:\n\t\t\t\tthrow(_(\"Currency should be same as Price List Currency: {0}\").format(price_list_currency))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef validate_dates(self):\n\t\tif self.is_cumulative and not (self.valid_from and self.valid_upto):\n\t\t\tfrappe.throw(_(\"Valid from and valid upto fields are mandatory for the cumulative\"))\n\n\t\tself.validate_from_to_dates(\"valid_from\", \"valid_upto\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef validate_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef validate_mixed_with_recursion(self):\n\t\tif self.mixed_conditions and self.is_recursive:\n\t\t\tfrappe.throw(_(\"Recursive Discounts with Mixed condition is not supported by the system\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 323,
      "code_text": "def apply_pricing_rule(args, doc=None):",
      "args": [
        "args",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 381,
      "code_text": "def update_pricing_rule_uom(pricing_rule, args):",
      "args": [
        "pricing_rule",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 517,
      "code_text": "def update_args_for_pricing_rule(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 545,
      "code_text": "def get_pricing_rule_details(args, pricing_rule):",
      "args": [
        "args",
        "pricing_rule"
      ]
    },
    {
      "type": "function",
      "line_start": 557,
      "code_text": "def apply_price_discount_rule(pricing_rule, item_details, args):",
      "args": [
        "pricing_rule",
        "item_details",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 669,
      "code_text": "def remove_pricing_rules(item_list):",
      "args": [
        "item_list"
      ]
    },
    {
      "type": "function",
      "line_start": 718,
      "code_text": "def get_item_uoms(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_receipt\\test_subcontracting_receipt.py": [
    {
      "type": "function",
      "line_start": 1563,
      "code_text": "def get_items(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1545,
      "code_text": "def make_return_subcontracting_receipt(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 43,
      "code_text": "class UnitTestSubcontractingReceipt(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 52,
      "code_text": "class TestSubcontractingReceipt(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef setUp(self):\n\t\tmake_subcontracted_items()\n\t\tmake_raw_materials()\n\t\tmake_service_items()\n\t\tmake_bom_for_subcontracted_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_subcontracting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_available_qty_for_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef test_subcontracting_gle_fg_item_rate_zero(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef test_subcontracting_over_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef test_subcontracting_receipt_partial_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 276,
      "code_text": "\tdef test_subcontracting_receipt_over_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef test_subcontracting_receipt_no_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef test_subcontracting_receipt_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 385,
      "code_text": "\tdef test_subcontracting_receipt_with_zero_service_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 431,
      "code_text": "\tdef test_supplied_items_consumed_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 504,
      "code_text": "\tdef test_supplied_items_cost_after_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 567,
      "code_text": "\tdef test_subcontracting_receipt_for_batch_raw_materials_without_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 632,
      "code_text": "\tdef test_subcontracting_receipt_valuation_with_auto_created_serial_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 714,
      "code_text": "\tdef test_subcontracting_receipt_valuation_for_fg_with_auto_created_serial_batch_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 809,
      "code_text": "\tdef test_subcontracting_receipt_raw_material_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 871,
      "code_text": "\tdef test_quality_inspection_for_subcontracting_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 929,
      "code_text": "\tdef test_scrap_items_for_subcontracting_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1000,
      "code_text": "\tdef test_subcontracting_receipt_cancel_with_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1086,
      "code_text": "\tdef test_auto_create_purchase_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1150,
      "code_text": "\tdef test_auto_create_purchase_receipt_with_no_reference_of_po_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1223,
      "code_text": "\tdef test_use_serial_batch_fields_for_subcontracting_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1294,
      "code_text": "\tdef test_use_serial_batch_fields_for_subcontracting_receipt_with_rejected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1374,
      "code_text": "\tdef test_subcontracting_receipt_for_batch_materials_without_use_serial_batch_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1484,
      "code_text": "\tdef test_change_batch_for_raw_materials(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_capitalization\\asset_capitalization.py": [
    {
      "type": "function",
      "line_start": 766,
      "code_text": "def get_warehouse_details(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 783,
      "code_text": "def get_consumed_asset_details(ctx):",
      "args": [
        "ctx"
      ]
    },
    {
      "type": "class",
      "line_start": 51,
      "code_text": "class AssetCapitalization(StockController):"
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef on_update(self):\n\t\tif self.stock_items:\n\t\t\tself.set_serial_and_batch_bundle(table_name=\"stock_items\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef before_submit(self):\n\t\tself.validate_source_mandatory()\n\t\tself.create_target_asset()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef on_submit(self):\n\t\tself.make_bundle_using_old_serial_batch_fields()\n\t\tself.update_stock_ledger()\n\t\tself.make_gl_entries()\n\t\tself.repost_future_sle_and_gle()\n\t\tself.update_target_asset()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef set_title(self):\n\t\tself.title = self.target_asset_name or self.target_item_name or self.target_item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef set_missing_values(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef validate_target_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef validate_target_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef validate_consumed_stock_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef validate_consumed_asset_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 283,
      "code_text": "\tdef validate_service_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef validate_source_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef validate_item(self, item):\n\t\tfrom erpnext.stock.doctype.item.item import validate_end_of_life\n\n\t\tvalidate_end_of_life(item.name, item.end_of_life, item.disabled)",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 324,
      "code_text": "\tdef get_asset_for_validation(self, asset):",
      "args": [
        "self",
        "asset"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef set_warehouse_details(self):\n\t\tfor d in self.get(\"stock_items\"):\n\t\t\tif d.item_code and d.warehouse:\n\t\t\t\targs = self.get_args_for_incoming_rate(d)\n\t\t\t\twarehouse_details = get_warehouse_details(args)\n\t\t\t\td.update(warehouse_details)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 341,
      "code_text": "\tdef set_asset_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 352,
      "code_text": "\tdef get_args_for_incoming_rate(self, item):",
      "args": [
        "self",
        "item"
      ]
    },
    {
      "type": "method",
      "line_start": 369,
      "code_text": "\tdef calculate_totals(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 396,
      "code_text": "\tdef update_stock_ledger(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef make_gl_entries(self, gl_entries=None, from_repost=False):",
      "args": [
        "self",
        "gl_entries",
        "from_repost"
      ]
    },
    {
      "type": "method",
      "line_start": 425,
      "code_text": "\tdef get_gl_entries(self, warehouse_account=None, default_expense_account=None, default_cost_center=None):",
      "args": [
        "self",
        "warehouse_account",
        "default_expense_account",
        "default_cost_center"
      ]
    },
    {
      "type": "method",
      "line_start": 447,
      "code_text": "\tdef get_target_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 461,
      "code_text": "\tdef get_gl_entries_for_consumed_stock_items(self, gl_entries, target_account, target_against, precision):",
      "args": [
        "self",
        "gl_entries",
        "target_account",
        "target_against",
        "precision"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef get_gl_entries_for_consumed_asset_items(self, gl_entries, target_account, target_against, precision):",
      "args": [
        "self",
        "gl_entries",
        "target_account",
        "target_against",
        "precision"
      ]
    },
    {
      "type": "method",
      "line_start": 523,
      "code_text": "\tdef get_gl_entries_for_consumed_service_items(\n\t\tself, gl_entries, target_account, target_against, precision\n\t):",
      "args": [
        "self",
        "gl_entries",
        "target_account",
        "target_against",
        "precision"
      ]
    },
    {
      "type": "method",
      "line_start": 545,
      "code_text": "\tdef get_gl_entries_for_target_item(self, gl_entries, target_account, target_against, precision):",
      "args": [
        "self",
        "gl_entries",
        "target_account",
        "target_against",
        "precision"
      ]
    },
    {
      "type": "method",
      "line_start": 561,
      "code_text": "\tdef create_target_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 600,
      "code_text": "\tdef update_target_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 619,
      "code_text": "\tdef restore_consumed_asset_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef set_consumed_asset_status(self, asset):",
      "args": [
        "self",
        "asset"
      ]
    },
    {
      "type": "function",
      "line_start": 655,
      "code_text": "def get_target_item_details(item_code=None, company=None):",
      "args": [
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 692,
      "code_text": "def get_target_asset_details(asset=None, company=None):",
      "args": [
        "asset",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 720,
      "code_text": "def get_consumed_stock_item_details(ctx: ItemDetailsCtx):",
      "args": [
        "ctx: ItemDetailsCtx"
      ]
    },
    {
      "type": "function",
      "line_start": 829,
      "code_text": "def get_service_item_details(ctx):",
      "args": [
        "ctx"
      ]
    },
    {
      "type": "function",
      "line_start": 851,
      "code_text": "def get_items_tagged_to_wip_composite_asset(params):",
      "args": [
        "params"
      ]
    },
    {
      "type": "function",
      "line_start": 894,
      "code_text": "def process_stock_item(d):",
      "args": [
        "d"
      ]
    },
    {
      "type": "function",
      "line_start": 913,
      "code_text": "def process_fixed_asset(d):",
      "args": [
        "d"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reservation_entry\\test_stock_reservation_entry.py": [
    {
      "type": "function",
      "line_start": 699,
      "code_text": "def create_items() -> dict:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 738,
      "code_text": "def create_material_receipt(\n\titems: dict, warehouse: str = \"_Test Warehouse - _TC\", qty: float = 100",
      "args": [
        "items: dict",
        "warehouse: str",
        "qty: float"
      ]
    },
    {
      "type": "function",
      "line_start": 777,
      "code_text": "def make_stock_reservation_entry(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 770,
      "code_text": "def cancel_all_stock_reservation_entries() -> None:\n\tsre_list = frappe.db.get_all(\"Stock Reservation Entry\", filters={\"docstatus\": 1}, pluck=\"name\")\n\n\tfor sre in sre_list:\n\t\tfrappe.get_doc(\"Stock Reservation Entry\", sre).cancel()",
      "args": []
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestStockReservationEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestStockReservationEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef setUp(self) -> None:\n\t\tself.warehouse = \"_Test Warehouse - _TC\"\n\t\tself.sr_item = make_item(properties={\"is_stock_item\": 1, \"valuation_rate\": 100})\n\t\tcreate_material_receipt(items={self.sr_item.name: self.sr_item}, warehouse=self.warehouse, qty=100)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_validate_stock_reservation_settings(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef test_get_available_qty_to_reserve(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef test_update_status(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef test_update_reserved_qty_in_voucher(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 204,
      "code_text": "\tdef test_cant_consume_reserved_stock(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef test_stock_reservation_against_sales_order(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 388,
      "code_text": "\tdef test_auto_reserve_serial_and_batch(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 508,
      "code_text": "\tdef test_stock_reservation_from_pick_list(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef test_stock_reservation_from_purchase_receipt(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 669,
      "code_text": "\tdef test_consider_reserved_stock_while_cancelling_an_inward_transaction(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 694,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tcancel_all_stock_reservation_entries()\n\t\treturn super().tearDown()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\selling_controller.py": [
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class SellingController(StockController):"
    },
    {
      "type": "function",
      "line_start": 938,
      "code_text": "def set_default_income_account_for_item(obj):\n\tfor d in obj.get(\"items\"):\n\t\tif d.item_code:\n\t\t\tif getattr(d, \"income_account\", None):\n\t\t\t\tset_item_default(d.item_code, obj.company, \"income_account\", d.income_account)",
      "args": [
        "obj"
      ]
    },
    {
      "type": "function",
      "line_start": 945,
      "code_text": "def get_serial_and_batch_bundle(child, parent, delivery_note_child=None):",
      "args": [
        "child",
        "parent",
        "delivery_note_child"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef __setup__(self):\n\t\tself.flags.ignore_permlevel_for_fields = [\"selling_price_list\", \"price_list_currency\"]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef onload(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef set_missing_values(self, for_validate=False):\n\t\tsuper().set_missing_values(for_validate)\n\n\t\t# set contact and address details for customer, if they are not mentioned\n\t\tself.set_missing_lead_customer_details(for_validate=for_validate)\n\t\tself.set_price_list_and_item_details(for_validate=for_validate)",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef set_missing_lead_customer_details(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef set_price_list_and_item_details(self, for_validate=False):\n\t\tself.set_price_list_currency(\"Selling\")\n\t\tself.set_missing_item_details(for_validate=for_validate)",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef remove_shipping_charge(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef set_total_in_words(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef calculate_commission(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef calculate_contribution(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 192,
      "code_text": "\tdef validate_sales_team(self, sales_team):",
      "args": [
        "self",
        "sales_team"
      ]
    },
    {
      "type": "method",
      "line_start": 206,
      "code_text": "\tdef validate_max_discount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef set_qty_as_per_stock_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef validate_selling_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 316,
      "code_text": "\tdef get_item_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 374,
      "code_text": "\tdef has_product_bundle(self, item_code):",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 384,
      "code_text": "\tdef _fetch_product_bundle_items(self, item_code):",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 402,
      "code_text": "\tdef get_already_delivered_qty(self, current_docname, so, so_detail):",
      "args": [
        "self",
        "current_docname",
        "so",
        "so_detail"
      ]
    },
    {
      "type": "method",
      "line_start": 427,
      "code_text": "\tdef get_so_qty_and_warehouse(self, so_detail):",
      "args": [
        "self",
        "so_detail"
      ]
    },
    {
      "type": "method",
      "line_start": 438,
      "code_text": "\tdef check_sales_order_on_hold_or_close(self, ref_fieldname):\n\t\tfor d in self.get(\"items\"):\n\t\t\tif d.get(ref_fieldname):\n\t\t\t\tstatus = frappe.db.get_value(\"Sales Order\", d.get(ref_fieldname), \"status\")\n\t\t\t\tif status in (\"Closed\", \"On Hold\") and not self.is_return:\n\t\t\t\t\tfrappe.throw(_(\"Sales Order {0} is {1}\").format(d.get(ref_fieldname), status))",
      "args": [
        "self",
        "ref_fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 445,
      "code_text": "\tdef update_reserved_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 468,
      "code_text": "\tdef set_incoming_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 558,
      "code_text": "\tdef update_stock_ledger(self, allow_negative_stock=False):",
      "args": [
        "self",
        "allow_negative_stock"
      ]
    },
    {
      "type": "method",
      "line_start": 590,
      "code_text": "\tdef get_sle_for_source_warehouse(self, item_row):",
      "args": [
        "self",
        "item_row"
      ]
    },
    {
      "type": "method",
      "line_start": 623,
      "code_text": "\tdef get_sle_for_target_warehouse(self, item_row):",
      "args": [
        "self",
        "item_row"
      ]
    },
    {
      "type": "method",
      "line_start": 649,
      "code_text": "\tdef set_po_nos(self, for_validate=False):",
      "args": [
        "self",
        "for_validate"
      ]
    },
    {
      "type": "method",
      "line_start": 659,
      "code_text": "\tdef set_pos_for_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 667,
      "code_text": "\tdef set_pos_for_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 675,
      "code_text": "\tdef get_po_nos(self, ref_doctype, ref_fieldname, po_nos):",
      "args": [
        "self",
        "ref_doctype",
        "ref_fieldname",
        "po_nos"
      ]
    },
    {
      "type": "method",
      "line_start": 684,
      "code_text": "\tdef set_gross_profit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 692,
      "code_text": "\tdef set_customer_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 706,
      "code_text": "\tdef validate_for_duplicate_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 769,
      "code_text": "\tdef validate_target_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 786,
      "code_text": "\tdef validate_items(self):\n\t\t# validate items to see if they have is_sales_item enabled\n\t\tfrom erpnext.controllers.buying_controller import validate_item_type\n\n\t\tvalidate_item_type(self, \"is_sales_item\", \"sales\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 792,
      "code_text": "\tdef update_stock_reservation_entries(self) -> None:",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\tax_rule\\test_tax_rule.py": [
    {
      "type": "function",
      "line_start": 292,
      "code_text": "def make_tax_rule(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestTaxRule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tfrappe.db.set_single_value(\"Shopping Cart Settings\", \"enabled\", 0)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.sql(\"delete from `tabTax Rule`\")",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.db.sql(\"delete from `tabTax Rule`\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_conflict(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_conflict_with_non_overlapping_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_for_parent_customer_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef test_conflict_with_overlapping_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef test_tax_template(self):\n\t\ttax_rule = make_tax_rule()\n\t\tself.assertEqual(tax_rule.purchase_tax_template, None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef test_select_tax_rule_based_on_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef test_select_tax_rule_based_on_tax_category(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef test_select_tax_rule_based_on_better_match(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef test_select_tax_rule_based_on_state_match(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef test_select_tax_rule_based_on_better_priority(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef test_select_tax_rule_based_cross_matching_keys(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 252,
      "code_text": "\tdef test_select_tax_rule_based_cross_partially_keys(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef test_taxes_fetch_via_tax_rule(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\subscription\\subscription.py": [
    {
      "type": "function",
      "line_start": 746,
      "code_text": "def get_prorata_factor(\n\tperiod_end: DateTimeLikeObject,",
      "args": [
        "period_end: DateTimeLikeObject",
        "period_start: DateTimeLikeObject",
        "is_prepaid"
      ]
    },
    {
      "type": "class",
      "line_start": 31,
      "code_text": "class InvoiceCancelled(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 35,
      "code_text": "class InvoiceNotCancelled(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 42,
      "code_text": "class Subscription(Document):"
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef before_insert(self):\n\t\t# update start just before the subscription doc is created\n\t\tself.update_subscription_period(self.start_date)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef update_subscription_period(self, date: DateTimeLikeObject | None = None):",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef _get_subscription_period(self, date: DateTimeLikeObject | None = None):\n\t\t_current_invoice_start = self.get_current_invoice_start(date)\n\t\t_current_invoice_end = self.get_current_invoice_end(_current_invoice_start)\n\n\t\treturn _current_invoice_start, _current_invoice_end",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef get_current_invoice_start(self, date: DateTimeLikeObject | None = None) -> DateTimeLikeObject:",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef get_current_invoice_end(self, date: DateTimeLikeObject | None = None) -> DateTimeLikeObject:",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 168,
      "code_text": "\tdef validate_plans_billing_cycle(billing_cycle_data: list[dict[str, str]]) -> None:",
      "args": [
        "billing_cycle_data"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef get_billing_cycle_and_interval(self) -> list[dict[str, str]]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef get_billing_cycle_data(self) -> dict[str, int]:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef set_subscription_status(self, posting_date: DateTimeLikeObject | None = None) -> None:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 236,
      "code_text": "\tdef is_trialling(self) -> bool:\n\t\t\"\"\"\n\t\tReturns `True` if the `Subscription` is in trial period.\n\t\t\"\"\"\n\t\treturn not self.period_has_passed(self.trial_period_end)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 243,
      "code_text": "\tdef period_has_passed(\n\t\tend_date: DateTimeLikeObject, posting_date: DateTimeLikeObject | None = None",
      "args": [
        "end_date: DateTimeLikeObject",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef get_status_for_past_grace_period(self) -> str:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 264,
      "code_text": "\tdef is_past_grace_period(self, posting_date: DateTimeLikeObject | None = None) -> bool:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 274,
      "code_text": "\tdef current_invoice_is_past_due(self, posting_date: DateTimeLikeObject | None = None) -> bool:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 284,
      "code_text": "\tdef invoice_document_type(self) -> str:\n\t\treturn \"Sales Invoice\" if self.party_type == \"Customer\" else \"Purchase Invoice\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef validate(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef validate_party_billing_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 330,
      "code_text": "\tdef validate_trial_period(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 344,
      "code_text": "\tdef validate_end_date(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef validate_to_follow_calendar_months(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 365,
      "code_text": "\tdef generate_invoice(\n\t\tself,\n\t\tfrom_date: DateTimeLikeObject | None = None,",
      "args": [
        "self",
        "from_date",
        "to_date",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 378,
      "code_text": "\tdef create_invoice(\n\t\tself,\n\t\tfrom_date: DateTimeLikeObject | None = None,",
      "args": [
        "self",
        "from_date",
        "to_date",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 486,
      "code_text": "\tdef get_items_from_plans(self, plans: list[dict[str, str]], prorate: bool | None = None) -> list[dict]:",
      "args": [
        "self",
        "plans",
        "prorate"
      ]
    },
    {
      "type": "method",
      "line_start": 562,
      "code_text": "\tdef process(self, posting_date: DateTimeLikeObject | None = None) -> bool:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 587,
      "code_text": "\tdef can_generate_new_invoice(self, posting_date: DateTimeLikeObject | None = None) -> bool:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 607,
      "code_text": "\tdef is_current_invoice_generated(\n\t\tself,\n\t\t_current_start_date: DateTimeLikeObject | None = None,",
      "args": [
        "self",
        "_current_start_date",
        "_current_end_date"
      ]
    },
    {
      "type": "method",
      "line_start": 625,
      "code_text": "\tdef current_invoice(self) -> Document | None:\n\t\t\"\"\"\n\t\tAdds property for accessing the current_invoice\n\t\t\"\"\"\n\t\treturn self.get_current_invoice()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 631,
      "code_text": "\tdef get_current_invoice(self) -> Document | None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 646,
      "code_text": "\tdef cancel_subscription_at_period_end(self) -> None:\n\t\t\"\"\"\n\t\tCalled when `Subscription.cancel_at_period_end` is truthy\n\t\t\"\"\"\n\t\tself.status = \"Cancelled\"\n\t\tself.cancelation_date = nowdate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 654,
      "code_text": "\tdef invoices(self) -> list[dict]:\n\t\treturn frappe.get_all(\n\t\t\tself.invoice_document_type,\n\t\t\tfilters={\"subscription\": self.name},\n\t\t\torder_by=\"from_date asc\",\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 662,
      "code_text": "\tdef is_paid(invoice: Document) -> bool:\n\t\t\"\"\"\n\t\tReturn `True` if the given invoice is paid\n\t\t\"\"\"\n\t\treturn invoice.status == \"Paid\"",
      "args": [
        "invoice: Document"
      ]
    },
    {
      "type": "method",
      "line_start": 668,
      "code_text": "\tdef has_outstanding_invoice(self) -> int:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 682,
      "code_text": "\tdef cancel_subscription(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 705,
      "code_text": "\tdef restart_subscription(self, posting_date: DateTimeLikeObject | None = None) -> None:",
      "args": [
        "self",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 720,
      "code_text": "\tdef force_fetch_subscription_updates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 742,
      "code_text": "def is_prorate() -> int:\n\treturn cint(frappe.db.get_single_value(\"Subscription Settings\", \"prorate\"))",
      "args": []
    },
    {
      "type": "function",
      "line_start": 759,
      "code_text": "def process_all(subscription: str | None = None, posting_date: DateTimeLikeObject | None = None) -> None:",
      "args": [
        "subscription",
        "posting_date"
      ]
    }
  ],
  "erpnext\\stock\\tests\\test_valuation.py": [
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestFIFOValuation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):\n\t\tself.queue = FIFOValuation([])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef tearDown(self):\n\t\tqty, value = self.queue.get_total_stock_and_value()\n\t\tself.assertTotalQty(qty)\n\t\tself.assertTotalValue(value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef assertTotalQty(self, qty):\n\t\tself.assertAlmostEqual(sum(q for q, _ in self.queue), qty, msg=f\"queue: {self.queue}\", places=4)",
      "args": [
        "self",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef assertTotalValue(self, value):\n\t\tself.assertAlmostEqual(sum(q * r for q, r in self.queue), value, msg=f\"queue: {self.queue}\", places=2)",
      "args": [
        "self",
        "value"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_simple_addition(self):\n\t\tself.queue.add_stock(1, 10)\n\t\tself.assertTotalQty(1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_simple_removal(self):\n\t\tself.queue.add_stock(1, 10)\n\t\tself.queue.remove_stock(1)\n\t\tself.assertTotalQty(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_merge_new_stock(self):\n\t\tself.queue.add_stock(1, 10)\n\t\tself.queue.add_stock(1, 10)\n\t\tself.assertEqual(self.queue, [[2, 10]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_adding_negative_stock_keeps_rate(self):\n\t\tself.queue = FIFOValuation([[-5.0, 100]])\n\t\tself.queue.add_stock(1, 10)\n\t\tself.assertEqual(self.queue, [[-4, 100]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_adding_negative_stock_updates_rate(self):\n\t\tself.queue = FIFOValuation([[-5.0, 100]])\n\t\tself.queue.add_stock(6, 10)\n\t\tself.assertEqual(self.queue, [[1, 10]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef test_removing_specified_rate(self):\n\t\tself.queue.add_stock(1, 10)\n\t\tself.queue.add_stock(1, 20)\n\n\t\tself.queue.remove_stock(1, 20)\n\t\tself.assertEqual(self.queue, [[1, 10]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef test_remove_multiple_bins(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef test_remove_multiple_bins_with_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef test_queue_with_unknown_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef test_rounding_off(self):\n\t\tself.queue.add_stock(1.0, 1.0)\n\t\tself.queue.remove_stock(1.0 - 1e-9)\n\t\tself.assertTotalQty(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef test_rounding_off_near_zero(self):\n\t\tself.assertEqual(round_off_if_near_zero(0), 0)\n\t\tself.assertEqual(round_off_if_near_zero(1), 1)\n\t\tself.assertEqual(round_off_if_near_zero(-1), -1)\n\t\tself.assertEqual(round_off_if_near_zero(-1e-8), 0)\n\t\tself.assertEqual(round_off_if_near_zero(1e-8), 0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_totals(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_fifo_qty_hypothesis(self, stock_queue):",
      "args": [
        "self",
        "stock_queue"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef test_fifo_qty_value_nonneg_hypothesis(self, stock_queue):",
      "args": [
        "self",
        "stock_queue"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef test_fifo_qty_value_nonneg_hypothesis_with_outgoing_rate(self, stock_queue, outgoing_rate):",
      "args": [
        "self",
        "stock_queue",
        "outgoing_rate"
      ]
    },
    {
      "type": "class",
      "line_start": 198,
      "code_text": "class TestLIFOValuation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef setUp(self):\n\t\tself.stack = LIFOValuation([])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef tearDown(self):\n\t\tqty, value = self.stack.get_total_stock_and_value()\n\t\tself.assertTotalQty(qty)\n\t\tself.assertTotalValue(value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef assertTotalQty(self, qty):\n\t\tself.assertAlmostEqual(sum(q for q, _ in self.stack), qty, msg=f\"stack: {self.stack}\", places=4)",
      "args": [
        "self",
        "qty"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef assertTotalValue(self, value):\n\t\tself.assertAlmostEqual(sum(q * r for q, r in self.stack), value, msg=f\"stack: {self.stack}\", places=2)",
      "args": [
        "self",
        "value"
      ]
    },
    {
      "type": "method",
      "line_start": 213,
      "code_text": "\tdef test_simple_addition(self):\n\t\tself.stack.add_stock(1, 10)\n\t\tself.assertTotalQty(1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef test_merge_new_stock(self):\n\t\tself.stack.add_stock(1, 10)\n\t\tself.stack.add_stock(1, 10)\n\t\tself.assertEqual(self.stack, [[2, 10]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 222,
      "code_text": "\tdef test_simple_removal(self):\n\t\tself.stack.add_stock(1, 10)\n\t\tself.stack.remove_stock(1)\n\t\tself.assertTotalQty(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef test_adding_negative_stock_keeps_rate(self):\n\t\tself.stack = LIFOValuation([[-5.0, 100]])\n\t\tself.stack.add_stock(1, 10)\n\t\tself.assertEqual(self.stack, [[-4, 100]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef test_adding_negative_stock_updates_rate(self):\n\t\tself.stack = LIFOValuation([[-5.0, 100]])\n\t\tself.stack.add_stock(6, 10)\n\t\tself.assertEqual(self.stack, [[1, 10]])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef test_rounding_off(self):\n\t\tself.stack.add_stock(1.0, 1.0)\n\t\tself.stack.remove_stock(1.0 - 1e-9)\n\t\tself.assertTotalQty(0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 242,
      "code_text": "\tdef test_lifo_consumption(self):\n\t\tself.stack.add_stock(10, 10)\n\t\tself.stack.add_stock(10, 20)\n\t\tconsumed = self.stack.remove_stock(15)\n\t\tself.assertEqual(consumed, [[10, 20], [5, 10]])\n\t\tself.assertTotalQty(5)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef test_lifo_consumption_going_negative(self):\n\t\tself.stack.add_stock(10, 10)\n\t\tself.stack.add_stock(10, 20)\n\t\tconsumed = self.stack.remove_stock(25)\n\t\tself.assertEqual(consumed, [[10, 20], [10, 10], [5, 10]])\n\t\tself.assertTotalQty(-5)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef test_lifo_consumption_multiple(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 275,
      "code_text": "\tdef test_lifo_qty_hypothesis(self, stock_stack):",
      "args": [
        "self",
        "stock_stack"
      ]
    },
    {
      "type": "method",
      "line_start": 295,
      "code_text": "\tdef test_lifo_qty_value_nonneg_hypothesis(self, stock_stack):",
      "args": [
        "self",
        "stock_stack"
      ]
    },
    {
      "type": "class",
      "line_start": 320,
      "code_text": "class TestLIFOValuationSLE(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 325,
      "code_text": "\tdef setUpClass(cls) -> None:\n\t\tsuper().setUpClass()\n\t\tmake_item(cls.ITEM_CODE, {\"valuation_method\": \"LIFO\"})",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 329,
      "code_text": "\tdef _make_stock_entry(self, qty, rate=None):",
      "args": [
        "self",
        "qty",
        "rate"
      ]
    },
    {
      "type": "method",
      "line_start": 338,
      "code_text": "\tdef assertStockQueue(self, se, expected_queue):",
      "args": [
        "self",
        "se",
        "expected_queue"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef test_lifo_values(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\transaction_deletion_record\\transaction_deletion_record.py": [
    {
      "type": "function",
      "line_start": 457,
      "code_text": "def get_doctypes_to_be_ignored():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 485,
      "code_text": "def is_deletion_doc_running(company: str | None = None, err_msg: str | None = None):",
      "args": [
        "company",
        "err_msg"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TransactionDeletionRecord(Document):"
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef validate(self):\n\t\tfrappe.only_for(\"System Manager\")\n\t\tself.validate_doctypes_to_be_ignored()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_doctypes_to_be_ignored(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef generate_job_name_for_task(self, task=None):\n\t\tmethod = self.task_to_internal_method_map[task]\n\t\treturn f\"{self.name}_{method}\"",
      "args": [
        "self",
        "task"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef generate_job_name_for_next_tasks(self, task=None):",
      "args": [
        "self",
        "task"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef generate_job_name_for_all_tasks(self):\n\t\tjob_names = []\n\t\tfor task in self.task_to_internal_method_map.keys():\n\t\t\tjob_names.append(self.generate_job_name_for_task(task))\n\t\treturn job_names",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef before_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef reset_task_flags(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef before_save(self):\n\t\tself.status = \"\"\n\t\tself.doctypes.clear()\n\t\tself.reset_task_flags()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"status\", \"Queued\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef enqueue_task(self, task: str | None = None):",
      "args": [
        "self",
        "task"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef execute_task(self, task_to_execute: str | None = None):",
      "args": [
        "self",
        "task_to_execute"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef delete_notifications(self):\n\t\tself.validate_doc_status()\n\t\tif not self.clear_notifications:\n\t\t\tclear_notifications()\n\t\t\tself.db_set(\"clear_notifications\", 1)\n\t\tself.enqueue_task(task=\"Initialize Summary Table\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef populate_doctypes_to_be_ignored_table(self):\n\t\tdoctypes_to_be_ignored_list = get_doctypes_to_be_ignored()\n\t\tfor doctype in doctypes_to_be_ignored_list:\n\t\t\tself.append(\"doctypes_to_be_ignored\", {\"doctype_name\": doctype})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef validate_running_task_for_doc(self, job_names: list | None = None):",
      "args": [
        "self",
        "job_names"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef validate_doc_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef start_deletion_tasks(self):\n\t\t# This method is the entry point for the chain of events that follow\n\t\tself.db_set(\"status\", \"Running\")\n\t\tself.enqueue_task(task=\"Delete Bins\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef delete_bins(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef delete_lead_addresses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 270,
      "code_text": "\tdef reset_company_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 280,
      "code_text": "\tdef initialize_doctypes_to_be_deleted_table(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 297,
      "code_text": "\tdef delete_company_transactions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef get_doctypes_to_be_ignored_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 357,
      "code_text": "\tdef get_doctypes_with_company_field(self, doctypes_to_be_ignored_list):",
      "args": [
        "self",
        "doctypes_to_be_ignored_list"
      ]
    },
    {
      "type": "method",
      "line_start": 370,
      "code_text": "\tdef get_all_child_doctypes(self):\n\t\treturn frappe.get_all(\"DocType\", filters={\"istable\": 1}, pluck=\"name\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 373,
      "code_text": "\tdef get_number_of_docs_linked_with_specified_company(self, doctype, company_fieldname):\n\t\treturn frappe.db.count(doctype, {company_fieldname: self.company})",
      "args": [
        "self",
        "doctype",
        "company_fieldname"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef populate_doctypes_table(self, tables, doctype, fieldname, no_of_docs):",
      "args": [
        "self",
        "tables",
        "doctype",
        "fieldname",
        "no_of_docs"
      ]
    },
    {
      "type": "method",
      "line_start": 384,
      "code_text": "\tdef delete_child_tables(self, doctype, reference_doc_names):",
      "args": [
        "self",
        "doctype",
        "reference_doc_names"
      ]
    },
    {
      "type": "method",
      "line_start": 392,
      "code_text": "\tdef delete_docs_linked_with_specified_company(self, doctype, reference_doc_names):\n\t\tfrappe.db.delete(doctype, {\"name\": (\"in\", reference_doc_names)})",
      "args": [
        "self",
        "doctype",
        "reference_doc_names"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef update_naming_series(self, naming_series, doctype_name):",
      "args": [
        "self",
        "naming_series",
        "doctype_name"
      ]
    },
    {
      "type": "method",
      "line_start": 412,
      "code_text": "\tdef delete_version_log(self, doctype, docnames):\n\t\tversions = qb.DocType(\"Version\")\n\t\tqb.from_(versions).delete().where(\n\t\t\t(versions.ref_doctype == doctype) & (versions.docname.isin(docnames))\n\t\t).run()",
      "args": [
        "self",
        "doctype",
        "docnames"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef delete_communications(self, doctype, reference_doc_names):",
      "args": [
        "self",
        "doctype",
        "reference_doc_names"
      ]
    },
    {
      "type": "method",
      "line_start": 431,
      "code_text": "\tdef delete_comments(self, doctype, reference_doc_names):\n\t\tif reference_doc_names:\n\t\t\tcomment = qb.DocType(\"Comment\")\n\t\t\tqb.from_(comment).delete().where(\n\t\t\t\t(comment.reference_doctype == doctype) & (comment.reference_name.isin(reference_doc_names))\n\t\t\t).run()",
      "args": [
        "self",
        "doctype",
        "reference_doc_names"
      ]
    },
    {
      "type": "method",
      "line_start": 438,
      "code_text": "\tdef unlink_attachments(self, doctype, reference_doc_names):",
      "args": [
        "self",
        "doctype",
        "reference_doc_names"
      ]
    },
    {
      "type": "function",
      "line_start": 506,
      "code_text": "def check_for_running_deletion_job(doc, method=None):",
      "args": [
        "doc",
        "method"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\landed_cost_voucher\\test_landed_cost_voucher.py": [
    {
      "type": "function",
      "line_start": 1121,
      "code_text": "def create_landed_cost_voucher(receipt_document_type, receipt_document, company, charges=50):",
      "args": [
        "receipt_document_type",
        "receipt_document",
        "company",
        "charges"
      ]
    },
    {
      "type": "function",
      "line_start": 1081,
      "code_text": "def make_landed_cost_voucher(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 1161,
      "code_text": "def distribute_landed_cost_on_items(lcv):",
      "args": [
        "lcv"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestLandedCostVoucher(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class TestLandedCostVoucher(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_landed_cost_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef assertPurchaseReceiptLCVGLEntries(self, pr):",
      "args": [
        "self",
        "pr"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef test_landed_cost_voucher_stock_impact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef test_landed_cost_voucher_for_zero_purchase_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 242,
      "code_text": "\tdef test_landed_cost_voucher_against_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 307,
      "code_text": "\tdef test_landed_cost_voucher_for_serialized_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 357,
      "code_text": "\tdef test_serialized_lcv_delivered(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef test_landed_cost_voucher_for_odd_numbers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 459,
      "code_text": "\tdef test_multiple_landed_cost_voucher_against_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 513,
      "code_text": "\tdef test_multi_currency_lcv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 572,
      "code_text": "\tdef test_asset_lcv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 608,
      "code_text": "\tdef test_landed_cost_voucher_with_serial_batch_for_legacy_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 757,
      "code_text": "\tdef test_do_not_validate_landed_cost_voucher_with_serial_batch_for_legacy_pr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 958,
      "code_text": "\tdef test_do_not_validate_against_landed_cost_voucher_for_serial_for_legacy_pr(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_ledger_entry\\stock_ledger_entry.py": [
    {
      "type": "function",
      "line_start": 345,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Stock Ledger Entry\", [\"voucher_no\", \"voucher_type\"])\n\tfrappe.db.add_index(\"Stock Ledger Entry\", [\"batch_no\", \"item_code\", \"warehouse\"])\n\tfrappe.db.add_index(\"Stock Ledger Entry\", [\"warehouse\", \"item_code\"], \"item_warehouse\")\n\tfrappe.db.add_index(\"Stock Ledger Entry\", [\"posting_datetime\", \"creation\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class StockFreezeError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class InventoryDimensionNegativeStockError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class BackDatedStockTransaction(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class StockLedgerEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef set_posting_datetime(self):\n\t\tfrom erpnext.stock.utils import get_combine_datetime\n\n\t\tself.posting_datetime = get_combine_datetime(self.posting_date, self.posting_time)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef validate_inventory_dimension_negative_stock(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef get_available_qty_after_prev_transaction(self, dimension, dimension_value):",
      "args": [
        "self",
        "dimension",
        "dimension_value"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef throw_validation_error(self, diff, dimension, dimension_value):",
      "args": [
        "self",
        "diff",
        "dimension",
        "dimension_value"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef _get_inventory_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef validate_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 197,
      "code_text": "\tdef validate_serial_batch_no_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef throw_error_message(self, message, exception=frappe.ValidationError):\n\t\tfrappe.throw(_(message), exception)",
      "args": [
        "self",
        "message",
        "exception"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef check_stock_frozen_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef scrub_posting_time(self):\n\t\tif not self.posting_time or self.posting_time == \"00:0\":\n\t\t\tself.posting_time = \"00:00\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef validate_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 286,
      "code_text": "\tdef validate_and_set_fiscal_year(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef block_transactions_against_group_warehouse(self):\n\t\tfrom erpnext.stock.utils import is_group_warehouse\n\n\t\tis_group_warehouse(self.warehouse)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 301,
      "code_text": "\tdef validate_with_last_transaction_posting_time(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 339,
      "code_text": "\tdef on_cancel(self):\n\t\tmsg = _(\"Individual Stock Ledger Entry cannot be cancelled.\")\n\t\tmsg += \"<br>\" + _(\"Please cancel related transaction.\")\n\t\tfrappe.throw(msg)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\packed_item\\packed_item.py": [
    {
      "type": "function",
      "line_start": 320,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Packed Item\", [\"item_code\", \"warehouse\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 66,
      "code_text": "def make_packing_list(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class PackedItem(Document):"
    },
    {
      "type": "function",
      "line_start": 101,
      "code_text": "def is_product_bundle(item_code: str) -> bool:\n\treturn bool(frappe.db.exists(\"Product Bundle\", {\"new_item_code\": item_code, \"disabled\": 0}))",
      "args": [
        "item_code: str"
      ]
    },
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def get_product_bundle_items(item_code):",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef set_actual_and_projected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 105,
      "code_text": "def get_indexed_packed_items_table(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def reset_packing_list(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 164,
      "code_text": "def add_packed_item_row(doc, packing_item, main_item_row, packed_items_table, reset):",
      "args": [
        "doc",
        "packing_item",
        "main_item_row",
        "packed_items_table",
        "reset"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def get_packed_item_details(item_code, company):",
      "args": [
        "item_code",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def update_packed_item_basic_data(main_item_row, pi_row, packing_item, item_data):",
      "args": [
        "main_item_row",
        "pi_row",
        "packing_item",
        "item_data"
      ]
    },
    {
      "type": "function",
      "line_start": 221,
      "code_text": "def update_packed_item_stock_data(main_item_row, pi_row, packing_item, item_data, doc):",
      "args": [
        "main_item_row",
        "pi_row",
        "packing_item",
        "item_data",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def update_packed_item_price_data(pi_row, item_data, doc):",
      "args": [
        "pi_row",
        "item_data",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 263,
      "code_text": "def update_packed_item_from_cancelled_doc(main_item_row, packing_item, pi_row, doc):",
      "args": [
        "main_item_row",
        "packing_item",
        "pi_row",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 278,
      "code_text": "def get_packed_item_bin_qty(item, warehouse):",
      "args": [
        "item",
        "warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 289,
      "code_text": "def get_cancelled_doc_packed_item_details(old_packed_items):\n\tprev_doc_packed_items_map = {}\n\tfor items in old_packed_items:\n\t\tprev_doc_packed_items_map.setdefault((items.item_code, items.parent_item), []).append(items.as_dict())\n\treturn prev_doc_packed_items_map",
      "args": [
        "old_packed_items"
      ]
    },
    {
      "type": "function",
      "line_start": 296,
      "code_text": "def update_product_bundle_rate(parent_items_price, pi_row, item_row):",
      "args": [
        "parent_items_price",
        "pi_row",
        "item_row"
      ]
    },
    {
      "type": "function",
      "line_start": 311,
      "code_text": "def set_product_bundle_rate_amount(doc, parent_items_price):",
      "args": [
        "doc",
        "parent_items_price"
      ]
    },
    {
      "type": "function",
      "line_start": 325,
      "code_text": "def get_items_from_product_bundle(row):",
      "args": [
        "row"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\blanket_order\\blanket_order.py": [
    {
      "type": "function",
      "line_start": 128,
      "code_text": "def make_order(source_name):",
      "args": [
        "source_name"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def validate_against_blanket_order(order_doc):",
      "args": [
        "order_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class BlanketOrder(Document):"
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate(self):\n\t\tself.validate_dates()\n\t\tself.validate_duplicate_items()\n\t\tself.validate_item_qty()\n\t\tself.set_party_item_code()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef validate_dates(self):\n\t\tif getdate(self.from_date) > getdate(self.to_date):\n\t\t\tfrappe.throw(_(\"From date cannot be greater than To date\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef set_party_item_code(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef get_customer_items_ref(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef get_supplier_items_ref(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef validate_duplicate_items(self):\n\t\titem_list = []\n\t\tfor item in self.items:\n\t\t\tif item.item_code in item_list:\n\t\t\t\tfrappe.throw(_(\"Note: Item {0} added multiple times\").format(frappe.bold(item.item_code)))\n\t\t\titem_list.append(item.item_code)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef update_ordered_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef validate_item_qty(self):\n\t\tfor d in self.items:\n\t\t\tif d.qty < 0:\n\t\t\t\tfrappe.throw(_(\"Row {0}: Quantity cannot be negative.\").format(d.idx))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_reconciliation\\payment_reconciliation.py": [
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class PaymentReconciliation(Document):"
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.common_filter_conditions = []\n\t\tself.accounting_dimension_filter_conditions = []\n\t\tself.ple_posting_date_filter = []\n\t\tself.dimensions = get_dimensions()[0]",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef load_from_db(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef save(self):\n\t\treturn",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef get_list(args):\n\t\tpass",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef get_count(args):\n\t\tpass",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 116,
      "code_text": "\tdef get_stats(args):\n\t\tpass",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef db_insert(self, *args, **kwargs):\n\t\tpass",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef db_update(self, *args, **kwargs):\n\t\tpass",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef delete(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef get_unreconciled_entries(self):\n\t\tself.get_nonreconciled_payment_entries()\n\t\tself.get_invoice_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef get_nonreconciled_payment_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef get_payment_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef get_jv_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef get_return_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef get_dr_or_cr_notes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 332,
      "code_text": "\tdef add_payment_entries(self, non_reconciled_payments):",
      "args": [
        "self",
        "non_reconciled_payments"
      ]
    },
    {
      "type": "method",
      "line_start": 340,
      "code_text": "\tdef get_invoice_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 381,
      "code_text": "\tdef add_invoice_entries(self, non_reconciled_invoices):",
      "args": [
        "self",
        "non_reconciled_invoices"
      ]
    },
    {
      "type": "method",
      "line_start": 394,
      "code_text": "\tdef get_difference_amount(self, payment_entry, invoice, allocated_amount):",
      "args": [
        "self",
        "payment_entry",
        "invoice",
        "allocated_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef is_auto_process_enabled(self):\n\t\treturn frappe.db.get_single_value(\"Accounts Settings\", \"auto_reconcile_payments\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 413,
      "code_text": "\tdef calculate_difference_on_allocation_change(self, payment_entry, invoice, allocated_amount):",
      "args": [
        "self",
        "payment_entry",
        "invoice",
        "allocated_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 425,
      "code_text": "\tdef allocate_entries(self, args):",
      "args": [
        "self",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 479,
      "code_text": "\tdef update_dimension_values_in_allocated_entries(self, res):\n\t\tfor x in self.dimensions:\n\t\t\tdimension = x.fieldname\n\t\t\tif self.get(dimension):\n\t\t\t\tres[dimension] = self.get(dimension)\n\t\treturn res",
      "args": [
        "self",
        "res"
      ]
    },
    {
      "type": "method",
      "line_start": 486,
      "code_text": "\tdef get_allocated_entry(self, pay, inv, allocated_amount):",
      "args": [
        "self",
        "pay",
        "inv",
        "allocated_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 506,
      "code_text": "\tdef reconcile_allocations(self, skip_ref_details_update_for_pe=False):",
      "args": [
        "self",
        "skip_ref_details_update_for_pe"
      ]
    },
    {
      "type": "method",
      "line_start": 534,
      "code_text": "\tdef reconcile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 559,
      "code_text": "\tdef get_payment_details(self, row, dr_or_cr):",
      "args": [
        "self",
        "row",
        "dr_or_cr"
      ]
    },
    {
      "type": "method",
      "line_start": 589,
      "code_text": "\tdef check_mandatory_to_fetch(self):\n\t\tfor fieldname in [\"company\", \"party_type\", \"party\", \"receivable_payable_account\"]:\n\t\t\tif not self.get(fieldname):\n\t\t\t\tfrappe.throw(_(\"Please select {0} first\").format(self.meta.get_label(fieldname)))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 594,
      "code_text": "\tdef validate_entries(self):\n\t\tif not self.get(\"invoices\"):\n\t\t\tfrappe.throw(_(\"No records found in the Invoices table\"))\n\n\t\tif not self.get(\"payments\"):\n\t\t\tfrappe.throw(_(\"No records found in the Payments table\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 601,
      "code_text": "\tdef get_invoice_exchange_map(self, invoices, payments):",
      "args": [
        "self",
        "invoices",
        "payments"
      ]
    },
    {
      "type": "method",
      "line_start": 668,
      "code_text": "\tdef validate_allocation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 699,
      "code_text": "\tdef build_dimensions_filter_conditions(self):\n\t\tple = qb.DocType(\"Payment Ledger Entry\")\n\t\tfor x in self.dimensions:\n\t\t\tdimension = x.fieldname\n\t\t\tif self.get(dimension):\n\t\t\t\tself.accounting_dimension_filter_conditions.append(ple[dimension] == self.get(dimension))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 706,
      "code_text": "\tdef build_qb_filter_conditions(self, get_invoices=False, get_return_invoices=False):",
      "args": [
        "self",
        "get_invoices",
        "get_return_invoices"
      ]
    },
    {
      "type": "method",
      "line_start": 731,
      "code_text": "\tdef get_journal_filter_conditions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 752,
      "code_text": "def reconcile_dr_cr_note(dr_cr_notes, company, active_dimensions=None):",
      "args": [
        "dr_cr_notes",
        "company",
        "active_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 849,
      "code_text": "def adjust_allocations_for_taxes(doc):\n\tpass",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 854,
      "code_text": "def get_queries_for_dimension_filters(company: str | None = None):",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\customer\\test_customer.py": [
    {
      "type": "function",
      "line_start": 414,
      "code_text": "def create_internal_customer(customer_name=None, represents_company=None, allowed_to_interact_with=None):",
      "args": [
        "customer_name",
        "represents_company",
        "allowed_to_interact_with"
      ]
    },
    {
      "type": "function",
      "line_start": 389,
      "code_text": "def get_customer_dict(customer_name):",
      "args": [
        "customer_name"
      ]
    },
    {
      "type": "function",
      "line_start": 399,
      "code_text": "def set_credit_limit(customer, company, credit_limit):",
      "args": [
        "customer",
        "company",
        "credit_limit"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestCustomer(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestCustomer(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef tearDown(self):\n\t\tset_credit_limit(\"_Test Customer\", \"_Test Company\", 0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_get_customer_group_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef test_party_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef test_party_details_tax_category(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef test_rename(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef test_freezed_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef test_delete_customer_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef test_disabled_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef test_duplicate_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef get_customer_outstanding_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 269,
      "code_text": "\tdef test_customer_credit_limit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef test_customer_credit_limit_after_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 329,
      "code_text": "\tdef test_customer_credit_limit_on_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 342,
      "code_text": "\tdef test_customer_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 372,
      "code_text": "\tdef test_parse_full_name(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\opening_invoice_creation_tool\\test_opening_invoice_creation_tool.py": [
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def make_customer(customer=None):",
      "args": [
        "customer"
      ]
    },
    {
      "type": "function",
      "line_start": 202,
      "code_text": "def make_company():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class UnitTestOpeningInvoiceCreationTool(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestOpeningInvoiceCreationTool(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef setUpClass(cls):\n\t\tif not frappe.db.exists(\"Company\", \"_Test Opening Invoice Company\"):\n\t\t\tmake_company()\n\t\tcreate_dimension()\n\t\treturn super().setUpClass()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef make_invoices(\n\t\tself,\n\t\tinvoice_type=\"Sales\",\n\t\tcompany=None,\n\t\tparty_1=None,\n\t\tparty_2=None,\n\t\tinvoice_number=None,\n\t\tdepartment=None,\n\t):",
      "args": [
        "self",
        "invoice_type",
        "company",
        "party_1",
        "party_2",
        "invoice_number",
        "department"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef test_opening_sales_invoice_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef check_expected_values(self, invoices, expected_value, invoice_type=\"Sales\"):",
      "args": [
        "self",
        "invoices",
        "expected_value",
        "invoice_type"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef test_opening_purchase_invoice_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef test_opening_sales_invoice_creation_with_missing_debit_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef test_renaming_of_invoice_using_invoice_number_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef test_opening_invoice_with_accounting_dimension(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef tearDown(self):\n\t\tdisable_dimension()",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 165,
      "code_text": "def get_opening_invoice_creation_dict(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\tax_rule\\tax_rule.py": [
    {
      "type": "function",
      "line_start": 138,
      "code_text": "def get_party_details(party, party_type, args=None):",
      "args": [
        "party",
        "party_type",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 171,
      "code_text": "def get_tax_template(posting_date, args):",
      "args": [
        "posting_date",
        "args"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class ConflictingTaxRule(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class IncorrectCustomerGroup(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class IncorrectSupplierType(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class TaxRule(Document):"
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate(self):\n\t\tself.validate_tax_template()\n\t\tself.validate_from_to_dates(\"from_date\", \"to_date\")\n\t\tself.validate_filters()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef validate_tax_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef validate_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 236,
      "code_text": "def get_customer_group_condition(customer_group):\n\tcondition = \"\"\n\tcustomer_groups = [\"%s\" % (frappe.db.escape(d.name)) for d in get_parent_customer_groups(customer_group)]\n\tif customer_groups:\n\t\tcondition = \",\".join([\"%s\"] * len(customer_groups)) % (tuple(customer_groups))\n\treturn condition",
      "args": [
        "customer_group"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\putaway_rule\\test_putaway_rule.py": [
    {
      "type": "function",
      "line_start": 469,
      "code_text": "def create_putaway_rule(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class UnitTestPutawayRule(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestPutawayRule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef assertUnchangedItemsOnResave(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef test_putaway_rules_priority(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef test_putaway_rules_with_same_priority(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef test_putaway_rules_with_insufficient_capacity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef test_putaway_rules_multi_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef test_putaway_rules_multi_uom_whole_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef test_putaway_rules_with_reoccurring_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef test_validate_over_receipt_in_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef test_putaway_rule_on_stock_entry_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef test_putaway_rule_on_stock_entry_material_transfer_reoccuring_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 347,
      "code_text": "\tdef test_putaway_rule_on_stock_entry_material_transfer_batch_serial_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 426,
      "code_text": "\tdef test_putaway_rule_on_stock_entry_material_receipt(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 454,
      "code_text": "\tdef test_warehouse_capacity_dashbord(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\budget\\test_budget.py": [
    {
      "type": "function",
      "line_start": 399,
      "code_text": "def make_budget(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 353,
      "code_text": "def set_total_expense_zero(posting_date, budget_against_field=None, budget_against_CC=None):",
      "args": [
        "posting_date",
        "budget_against_field",
        "budget_against_CC"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestBudget(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef test_monthly_budget_crossed_ignore(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef test_monthly_budget_crossed_stop1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_exception_approver_role(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef test_monthly_budget_crossed_for_mr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef test_monthly_budget_crossed_for_po(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef test_monthly_budget_crossed_stop2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef test_yearly_budget_crossed_stop1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef test_yearly_budget_crossed_stop2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef test_monthly_budget_on_cancellation1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef test_monthly_budget_on_cancellation2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 268,
      "code_text": "\tdef test_monthly_budget_against_group_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 288,
      "code_text": "\tdef test_monthly_budget_against_parent_group_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef test_monthly_budget_against_main_cost_center(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_repair\\test_asset_repair.py": [
    {
      "type": "function",
      "line_start": 288,
      "code_text": "def create_asset_repair(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 284,
      "code_text": "def num_of_depreciations(asset):\n\treturn asset.finance_books[0].total_number_of_depreciations",
      "args": [
        "asset"
      ]
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestAssetRepair(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tset_depreciation_settings_in_company()\n\t\tcreate_asset_data()\n\t\tcreate_item(\"_Test Stock Item\")\n\t\tfrappe.db.sql(\"delete from `tabTax Rule`\")",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_stock_item_total_value(self):\n\t\tasset_repair = create_asset_repair(stock_consumption=1)\n\n\t\tfor item in asset_repair.stock_items:\n\t\t\ttotal_value = flt(item.valuation_rate) * flt(item.consumed_quantity)\n\t\t\tself.assertEqual(item.total_value, total_value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef test_total_repair_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_repair_status_after_submit(self):\n\t\tasset_repair = create_asset_repair(submit=1)\n\t\tself.assertNotEqual(asset_repair.repair_status, \"Pending\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef test_stock_items(self):\n\t\tasset_repair = create_asset_repair(stock_consumption=1)\n\t\tself.assertTrue(asset_repair.stock_consumption)\n\t\tself.assertTrue(asset_repair.stock_items)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef test_warehouse(self):\n\t\tasset_repair = create_asset_repair(stock_consumption=1)\n\t\tself.assertTrue(asset_repair.stock_consumption)\n\t\tself.assertTrue(asset_repair.stock_items[0].warehouse)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_decrease_stock_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef test_serialized_item_consumption(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef test_no_increase_in_asset_value_when_not_capitalized(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef test_increase_in_asset_value_due_to_repair_cost_capitalisation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef test_purchase_invoice(self):\n\t\tasset_repair = create_asset_repair(capitalize_repair_cost=1, item=\"_Test Non Stock Item\", submit=1)\n\t\tself.assertTrue(asset_repair.invoices)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef test_gl_entries_with_perpetual_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef test_gl_entries_with_periodical_inventory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 255,
      "code_text": "\tdef test_increase_in_asset_life(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 277,
      "code_text": "\tdef test_asset_repiar_link_in_stock_entry(self):\n\t\tasset = create_asset(calculate_depreciation=1, submit=1)\n\t\tasset_repair = create_asset_repair(asset=asset, stock_consumption=1, submit=1)\n\t\tstock_entry = frappe.get_last_doc(\"Stock Entry\")\n\t\tself.assertEqual(stock_entry.asset_repair, asset_repair.name)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\gl_entry\\gl_entry.py": [
    {
      "type": "function",
      "line_start": 440,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"GL Entry\", [\"voucher_type\", \"voucher_no\"])\n\tfrappe.db.add_index(\"GL Entry\", [\"posting_date\", \"company\"])\n\tfrappe.db.add_index(\"GL Entry\", [\"party_type\", \"party\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 446,
      "code_text": "def rename_gle_sle_docs():\n\tfor doctype in [\"GL Entry\", \"Stock Ledger Entry\"]:\n\t\trename_temporarily_named_docs(doctype)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 308,
      "code_text": "def validate_balance_type(account, adv_adj=False):",
      "args": [
        "account",
        "adv_adj"
      ]
    },
    {
      "type": "function",
      "line_start": 398,
      "code_text": "def validate_frozen_account(account, adv_adj=None):",
      "args": [
        "account",
        "adv_adj"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class GLEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef check_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef pl_must_have_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef validate_dimensions_for_pl_and_bs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef check_pl_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef validate_account_details(self, adv_adj):",
      "args": [
        "self",
        "adv_adj"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef validate_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 273,
      "code_text": "\tdef validate_party(self):\n\t\tvalidate_party_frozen_disabled(self.party_type, self.party)\n\t\tvalidate_account_party_type(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 277,
      "code_text": "\tdef validate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef validate_and_set_fiscal_year(self):\n\t\tif not self.fiscal_year:\n\t\t\tself.fiscal_year = get_fiscal_year(self.posting_date, company=self.company)[0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef on_cancel(self):\n\t\tmsg = _(\"Individual GL Entry cannot be cancelled.\")\n\t\tmsg += \"<br>\" + _(\"Please cancel related transaction.\")\n\t\tfrappe.throw(msg)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 326,
      "code_text": "def update_outstanding_amt(\n\taccount, party_type, party, against_voucher_type, against_voucher, on_cancel=False\n):",
      "args": [
        "account",
        "party_type",
        "party",
        "against_voucher_type",
        "against_voucher",
        "on_cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 411,
      "code_text": "def update_against_account(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 451,
      "code_text": "def rename_temporarily_named_docs(doctype):",
      "args": [
        "doctype"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\period_closing_voucher\\period_closing_voucher.py": [
    {
      "type": "function",
      "line_start": 437,
      "code_text": "def process_gl_and_closing_entries(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 455,
      "code_text": "def process_cancellation(voucher_type, voucher_no):",
      "args": [
        "voucher_type",
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 487,
      "code_text": "def get_previous_closed_period_in_current_year(fiscal_year, company):",
      "args": [
        "fiscal_year",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class PeriodClosingVoucher(AccountsController):"
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate(self):\n\t\tself.validate_start_and_end_date()\n\t\tself.check_if_previous_year_closed()\n\t\tself.block_if_future_closing_voucher_exists()\n\t\tself.check_closing_account_type()\n\t\tself.check_closing_account_currency()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef validate_start_and_end_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef check_if_previous_year_closed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef block_if_future_closing_voucher_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef get_future_closing_voucher(self):\n\t\treturn frappe.db.get_value(\n\t\t\t\"Period Closing Voucher\",\n\t\t\t{\"period_end_date\": (\">\", self.period_end_date), \"docstatus\": 1, \"company\": self.company},\n\t\t\t\"name\",\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef check_closing_account_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef check_closing_account_currency(self):\n\t\taccount_currency = get_account_currency(self.closing_account_head)\n\t\tcompany_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\t\tif account_currency != company_currency:\n\t\t\tfrappe.throw(_(\"Currency of the Closing Account must be {0}\").format(company_currency))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"gle_processing_status\", \"In Progress\")\n\t\tself.make_gl_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef on_cancel(self):\n\t\tself.ignore_linked_doctypes = (\"GL Entry\", \"Stock Ledger Entry\", \"Payment Ledger Entry\")\n\t\tself.block_if_future_closing_voucher_exists()\n\t\tself.db_set(\"gle_processing_status\", \"In Progress\")\n\t\tself.cancel_gl_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef make_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef get_pcv_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef get_gle_for_pl_account(self, acc, balances, dimensions):",
      "args": [
        "self",
        "acc",
        "balances",
        "dimensions"
      ]
    },
    {
      "type": "method",
      "line_start": 207,
      "code_text": "\tdef get_gle_for_closing_account(self, dimension_balance, dimensions):",
      "args": [
        "self",
        "dimension_balance",
        "dimensions"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef update_default_dimensions(self, gl_entry, dimensions):\n\t\tfor i, dimension in enumerate(self.accounting_dimension_fields):\n\t\t\tgl_entry[dimension] = dimensions[i]",
      "args": [
        "self",
        "gl_entry",
        "dimensions"
      ]
    },
    {
      "type": "method",
      "line_start": 241,
      "code_text": "\tdef get_account_balances_based_on_dimensions(self, report_type):",
      "args": [
        "self",
        "report_type"
      ]
    },
    {
      "type": "method",
      "line_start": 259,
      "code_text": "\tdef get_accounting_dimension_fields(self):\n\t\tdefault_dimensions = [\"cost_center\", \"finance_book\", \"project\"]\n\t\tself.accounting_dimension_fields = default_dimensions + get_accounting_dimensions()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 263,
      "code_text": "\tdef get_gl_entries_for_current_period(self, report_type, only_opening_entries=False, as_iterator=False):",
      "args": [
        "self",
        "report_type",
        "only_opening_entries",
        "as_iterator"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef set_account_balance_dict(self, gle, acc_bal_dict):",
      "args": [
        "self",
        "gle",
        "acc_bal_dict"
      ]
    },
    {
      "type": "method",
      "line_start": 339,
      "code_text": "\tdef get_key(self, gle):\n\t\treturn tuple([gle.get(dimension) for dimension in self.accounting_dimension_fields])",
      "args": [
        "self",
        "gle"
      ]
    },
    {
      "type": "method",
      "line_start": 342,
      "code_text": "\tdef get_account_closing_balances(self):\n\t\tpl_closing_entries = self.get_closing_entries_for_pl_accounts()\n\t\tbs_closing_entries = self.get_closing_entries_for_balance_sheet_accounts()\n\t\tclosing_entries_for_closing_account = self.get_closing_entries_for_closing_account()\n\t\tclosing_entries = pl_closing_entries + bs_closing_entries + closing_entries_for_closing_account\n\t\treturn closing_entries",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 349,
      "code_text": "\tdef get_closing_entries_for_pl_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 364,
      "code_text": "\tdef get_closing_entries_for_balance_sheet_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 378,
      "code_text": "\tdef get_closing_entry(self, account, balances, dimensions):",
      "args": [
        "self",
        "account",
        "balances",
        "dimensions"
      ]
    },
    {
      "type": "method",
      "line_start": 396,
      "code_text": "\tdef get_closing_entries_for_closing_account(self):\n\t\tclosing_entries = copy.deepcopy(self.closing_account_gle)\n\t\tfor d in closing_entries:\n\t\t\td.period_closing_voucher = self.name\n\n\t\treturn closing_entries",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 403,
      "code_text": "\tdef is_first_period_closing_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 414,
      "code_text": "\tdef cancel_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 430,
      "code_text": "\tdef get_gle_count_against_current_pcv(self):\n\t\treturn frappe.db.count(\n\t\t\t\"GL Entry\",\n\t\t\t{\"voucher_type\": \"Period Closing Voucher\", \"voucher_no\": self.name, \"is_cancelled\": 0},\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 468,
      "code_text": "def delete_closing_entries(voucher_no):\n\tclosing_balance = frappe.qb.DocType(\"Account Closing Balance\")\n\tfrappe.qb.from_(closing_balance).delete().where(\n\t\tclosing_balance.period_closing_voucher == voucher_no\n\t).run()",
      "args": [
        "voucher_no"
      ]
    },
    {
      "type": "function",
      "line_start": 476,
      "code_text": "def get_period_start_end_date(fiscal_year, company):",
      "args": [
        "fiscal_year",
        "company"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\bin\\bin.py": [
    {
      "type": "function",
      "line_start": 241,
      "code_text": "def get_bin_details(bin_name):",
      "args": [
        "bin_name"
      ]
    },
    {
      "type": "function",
      "line_start": 237,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_unique(\"Bin\", [\"item_code\", \"warehouse\"], constraint_name=\"unique_item_warehouse\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 259,
      "code_text": "def update_qty(bin_name, args):",
      "args": [
        "bin_name",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 302,
      "code_text": "def get_actual_qty(item_code, warehouse):",
      "args": [
        "item_code",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class Bin(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef recalculate_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef before_save(self):\n\t\tif self.get(\"__islocal\") or not self.stock_uom:\n\t\t\tself.stock_uom = frappe.get_cached_value(\"Item\", self.item_code, \"stock_uom\")\n\t\tself.set_projected_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef set_projected_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef update_reserved_qty_for_production_plan(self, skip_project_qty_update=False, update_qty=True):",
      "args": [
        "self",
        "skip_project_qty_update",
        "update_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef update_reserved_qty_for_for_sub_assembly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef update_reserved_qty_for_production(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef update_reserved_qty_for_sub_contracting(\n\t\tself, subcontract_doctype=\"Subcontracting Order\", update_qty=True\n\t):",
      "args": [
        "self",
        "subcontract_doctype",
        "update_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef update_reserved_stock(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\batch\\test_batch.py": [
    {
      "type": "function",
      "line_start": 560,
      "code_text": "def create_batch(item_code, rate, create_item_price_for_batch):",
      "args": [
        "item_code",
        "rate",
        "create_item_price_for_batch"
      ]
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class TestBatch(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef make_batch_item(cls, item_name=None):\n\t\tfrom erpnext.stock.doctype.item.test_item import make_item\n\n\t\tif not frappe.db.exists(item_name):\n\t\t\treturn make_item(item_name, dict(has_batch_no=1, create_new_batch=1, is_stock_item=1))",
      "args": [
        "cls",
        "item_name"
      ]
    },
    {
      "type": "function",
      "line_start": 592,
      "code_text": "def make_new_batch(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 580,
      "code_text": "def create_price_list_for_batch(item_code, batch, rate):",
      "args": [
        "item_code",
        "batch",
        "rate"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class UnitTestBatch(UnitTestCase):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_item_has_batch_enabled(self):\n\t\tself.assertRaises(\n\t\t\tValidationError,\n\t\t\tfrappe.get_doc({\"doctype\": \"Batch\", \"name\": \"_test Batch\", \"item\": \"_Test Item\"}).save,\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef test_purchase_receipt(self, batch_qty=100):",
      "args": [
        "self",
        "batch_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef test_batch_stock_levels(self, batch_qty=100):",
      "args": [
        "self",
        "batch_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef test_stock_entry_incoming(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef test_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef test_batch_negative_stock_error(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef test_stock_entry_outgoing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef test_batch_split(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 308,
      "code_text": "\tdef test_get_batch_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 324,
      "code_text": "\tdef test_total_batch_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 337,
      "code_text": "\tdef make_new_batch_and_entry(cls, item_name, batch_name, warehouse):",
      "args": [
        "cls",
        "item_name",
        "batch_name",
        "warehouse"
      ]
    },
    {
      "type": "method",
      "line_start": 385,
      "code_text": "\tdef test_batch_name_with_naming_series(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 406,
      "code_text": "\tdef make_new_batch(self, item_name=None, batch_id=None, do_not_insert=0):",
      "args": [
        "self",
        "item_name",
        "batch_id",
        "do_not_insert"
      ]
    },
    {
      "type": "method",
      "line_start": 419,
      "code_text": "\tdef test_batch_wise_item_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 469,
      "code_text": "\tdef test_basic_batch_wise_valuation(self, batch_qty=100):",
      "args": [
        "self",
        "batch_qty"
      ]
    },
    {
      "type": "method",
      "line_start": 515,
      "code_text": "\tdef test_update_batch_properties(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 532,
      "code_text": "\tdef test_autocreation_of_batches(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\report\\sales_pipeline_analytics\\test_sales_pipeline_analytics.py": [
    {
      "type": "function",
      "line_start": 193,
      "code_text": "def create_customer():\n\tdoc = frappe.db.exists(\"Customer\", \"_Test NC\")\n\tif not doc:\n\t\tdoc = frappe.new_doc(\"Customer\")\n\t\tdoc.customer_name = \"_Test NC\"\n\t\tdoc.insert()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def create_company():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 201,
      "code_text": "def create_opportunity():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestSalesPipelineAnalytics(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef setUp(self):\n\t\tcreate_company()\n\t\tcreate_customer()\n\t\tcreate_opportunity()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_sales_pipeline_analytics(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef check_for_monthly_and_number(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef check_for_monthly_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef check_for_quarterly_and_number(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef check_for_quarterly_and_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef check_for_all_filters(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_statement_of_accounts\\process_statement_of_accounts.py": [
    {
      "type": "function",
      "line_start": 343,
      "code_text": "def get_context(customer, doc):",
      "args": [
        "customer",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def get_statement_dict(doc, get_statement_dict=False):",
      "args": [
        "doc",
        "get_statement_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_report_pdf(doc, consolidated=True):",
      "args": [
        "doc",
        "consolidated"
      ]
    },
    {
      "type": "function",
      "line_start": 452,
      "code_text": "def send_emails(document_name, from_scheduler=False, posting_date=None):",
      "args": [
        "document_name",
        "from_scheduler",
        "posting_date"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class ProcessStatementOfAccounts(Document):"
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 165,
      "code_text": "def set_ageing(doc, entry):",
      "args": [
        "doc",
        "entry"
      ]
    },
    {
      "type": "function",
      "line_start": 187,
      "code_text": "def get_common_filters(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 199,
      "code_text": "def get_gl_filters(doc, entry, tax_id, presentation_currency):",
      "args": [
        "doc",
        "entry",
        "tax_id",
        "presentation_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 217,
      "code_text": "def get_ar_filters(doc, entry):",
      "args": [
        "doc",
        "entry"
      ]
    },
    {
      "type": "function",
      "line_start": 237,
      "code_text": "def get_html(doc, filters, entry, col, res, ageing):",
      "args": [
        "doc",
        "filters",
        "entry",
        "col",
        "res",
        "ageing"
      ]
    },
    {
      "type": "function",
      "line_start": 276,
      "code_text": "def get_customers_based_on_territory_or_customer_group(customer_collection, collection_name):",
      "args": [
        "customer_collection",
        "collection_name"
      ]
    },
    {
      "type": "function",
      "line_start": 298,
      "code_text": "def get_customers_based_on_sales_person(sales_person):",
      "args": [
        "sales_person"
      ]
    },
    {
      "type": "function",
      "line_start": 323,
      "code_text": "def get_recipients_and_cc(customer, doc):",
      "args": [
        "customer",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 356,
      "code_text": "def fetch_customers(customer_collection, collection_name, primary_mandatory):",
      "args": [
        "customer_collection",
        "collection_name",
        "primary_mandatory"
      ]
    },
    {
      "type": "function",
      "line_start": 396,
      "code_text": "def get_customer_emails(customer_name, primary_mandatory, billing_and_primary=True):",
      "args": [
        "customer_name",
        "primary_mandatory",
        "billing_and_primary"
      ]
    },
    {
      "type": "function",
      "line_start": 442,
      "code_text": "def download_statements(document_name):",
      "args": [
        "document_name"
      ]
    },
    {
      "type": "function",
      "line_start": 508,
      "code_text": "def send_auto_email():",
      "args": []
    }
  ],
  "erpnext\\assets\\doctype\\asset_repair\\asset_repair.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class AssetRepair(AccountsController):"
    },
    {
      "type": "function",
      "line_start": 479,
      "code_text": "def expense_item_pi_query(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_dates(self):\n\t\tif self.completion_date and (self.failure_date > self.completion_date):\n\t\t\tfrappe.throw(\n\t\t\t\t_(\"Completion Date can not be before Failure Date. Please adjust the dates accordingly.\")\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef validate_purchase_invoice(self):\n\t\tquery = expense_item_pi_query(self.company)\n\t\tpurchase_invoice_list = [item[0] for item in query.run()]\n\t\tfor pi in self.invoices:\n\t\t\tif pi.purchase_invoice not in purchase_invoice_list:\n\t\t\t\tfrappe.throw(_(\"Expense item not present in Purchase Invoice\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef validate_purchase_invoice_repair_cost(self):\n\t\tfor pi in self.invoices:\n\t\t\tif flt(pi.repair_cost) > frappe.db.get_value(\n\t\t\t\t\"Purchase Invoice\", pi.purchase_invoice, \"base_net_total\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\"Repair cost cannot be greater than purchase invoice base net total\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef validate_purchase_invoice_expense_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef set_stock_items_cost(self):\n\t\tfor item in self.get(\"stock_items\"):\n\t\t\titem.total_value = flt(item.valuation_rate) * flt(item.consumed_quantity)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef calculate_repair_cost(self):\n\t\tself.repair_cost = sum(flt(pi.repair_cost) for pi in self.invoices)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef calculate_total_repair_cost(self):\n\t\tself.total_repair_cost = flt(self.repair_cost)\n\n\t\ttotal_value_of_stock_consumed = self.get_total_value_of_stock_consumed()\n\t\tself.total_repair_cost += total_value_of_stock_consumed",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef before_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef before_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef after_delete(self):\n\t\tfrappe.get_doc(\"Asset\", self.asset).set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef check_repair_status(self):\n\t\tif self.repair_status == \"Pending\":\n\t\t\tfrappe.throw(_(\"Please update Repair Status.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef check_for_stock_items_and_warehouse(self):\n\t\tif not self.get(\"stock_items\"):\n\t\t\tfrappe.throw(_(\"Please enter Stock Items consumed during the Repair.\"), title=_(\"Missing Items\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 219,
      "code_text": "\tdef increase_asset_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef decrease_asset_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef get_total_value_of_stock_consumed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 247,
      "code_text": "\tdef decrease_stock_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef validate_serial_no(self, stock_item):",
      "args": [
        "self",
        "stock_item"
      ]
    },
    {
      "type": "method",
      "line_start": 289,
      "code_text": "\tdef make_gl_entries(self, cancel=False):\n\t\tif flt(self.total_repair_cost) > 0:\n\t\t\tgl_entries = self.get_gl_entries()\n\t\t\tmake_gl_entries(gl_entries, cancel)",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef get_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 303,
      "code_text": "\tdef get_gl_entries_for_repair_cost(self, gl_entries, fixed_asset_account):",
      "args": [
        "self",
        "gl_entries",
        "fixed_asset_account"
      ]
    },
    {
      "type": "method",
      "line_start": 346,
      "code_text": "\tdef get_gl_entries_for_consumed_items(self, gl_entries, fixed_asset_account):",
      "args": [
        "self",
        "gl_entries",
        "fixed_asset_account"
      ]
    },
    {
      "type": "method",
      "line_start": 399,
      "code_text": "\tdef modify_depreciation_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef calculate_last_schedule_date(self, asset, row, extra_months):",
      "args": [
        "self",
        "asset",
        "row",
        "extra_months"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef revert_depreciation_schedule_on_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 442,
      "code_text": "\tdef calculate_last_schedule_date_before_modification(self, asset, row, extra_months):",
      "args": [
        "self",
        "asset",
        "row",
        "extra_months"
      ]
    },
    {
      "type": "function",
      "line_start": 468,
      "code_text": "def get_downtime(failure_date, completion_date):\n\tdowntime = time_diff_in_hours(completion_date, failure_date)\n\treturn round(downtime, 2)",
      "args": [
        "failure_date",
        "completion_date"
      ]
    },
    {
      "type": "function",
      "line_start": 474,
      "code_text": "def get_purchase_invoice(doctype, txt, searchfield, start, page_len, filters):\n\tquery = expense_item_pi_query(filters.get(\"company\"))\n\treturn query.run(as_list=1)",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_reconciliation_tool\\bank_reconciliation_tool.py": [
    {
      "type": "function",
      "line_start": 469,
      "code_text": "def reconcile_vouchers(bank_transaction_name, vouchers):",
      "args": [
        "bank_transaction_name",
        "vouchers"
      ]
    },
    {
      "type": "function",
      "line_start": 484,
      "code_text": "def get_linked_payments(\n\tbank_transaction_name,\n\tdocument_types=None,\n\tfrom_date=None,\n\tto_date=None,\n\tfilter_by_reference_date=None,\n\tfrom_reference_date=None,\n\tto_reference_date=None,\n):",
      "args": [
        "bank_transaction_name",
        "document_types",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def get_bank_transactions(bank_account, from_date=None, to_date=None):",
      "args": [
        "bank_account",
        "from_date",
        "to_date"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class BankReconciliationTool(Document):"
    },
    {
      "type": "function",
      "line_start": 83,
      "code_text": "def get_account_balance(bank_account, till_date, company):",
      "args": [
        "bank_account",
        "till_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def update_bank_transaction(bank_transaction_name, reference_number, party_type=None, party=None):",
      "args": [
        "bank_transaction_name",
        "reference_number",
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def create_journal_entry_bts(\n\tbank_transaction_name,\n\treference_number=None,\n\treference_date=None,\n\tposting_date=None,\n\tentry_type=None,\n\tsecond_account=None,\n\tmode_of_payment=None,\n\tparty_type=None,\n\tparty=None,\n\tallow_edit=None,\n):",
      "args": [
        "bank_transaction_name",
        "reference_number",
        "reference_date",
        "posting_date",
        "entry_type",
        "second_account",
        "mode_of_payment",
        "party_type",
        "party",
        "allow_edit"
      ]
    },
    {
      "type": "function",
      "line_start": 296,
      "code_text": "def create_payment_entry_bts(\n\tbank_transaction_name,\n\treference_number=None,\n\treference_date=None,\n\tparty_type=None,\n\tparty=None,\n\tposting_date=None,\n\tmode_of_payment=None,\n\tproject=None,\n\tcost_center=None,\n\tallow_edit=None,\n):",
      "args": [
        "bank_transaction_name",
        "reference_number",
        "reference_date",
        "party_type",
        "party",
        "posting_date",
        "mode_of_payment",
        "project",
        "cost_center",
        "allow_edit"
      ]
    },
    {
      "type": "function",
      "line_start": 369,
      "code_text": "def auto_reconcile_vouchers(\n\tbank_account,\n\tfrom_date=None,\n\tto_date=None,\n\tfilter_by_reference_date=None,\n\tfrom_reference_date=None,\n\tto_reference_date=None,\n):",
      "args": [
        "bank_account",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date"
      ]
    },
    {
      "type": "function",
      "line_start": 402,
      "code_text": "def start_auto_reconcile(\n\tbank_transactions, from_date, to_date, filter_by_reference_date, from_reference_date, to_reference_date\n):",
      "args": [
        "bank_transactions",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date"
      ]
    },
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def get_auto_reconcile_message(partially_reconciled, reconciled):",
      "args": [
        "partially_reconciled",
        "reconciled"
      ]
    },
    {
      "type": "function",
      "line_start": 513,
      "code_text": "def subtract_allocations(gl_account, vouchers):",
      "args": [
        "gl_account",
        "vouchers"
      ]
    },
    {
      "type": "function",
      "line_start": 528,
      "code_text": "def get_allocated_amount(voucher_allocated_amounts, voucher, gl_account):",
      "args": [
        "voucher_allocated_amounts",
        "voucher",
        "gl_account"
      ]
    },
    {
      "type": "function",
      "line_start": 538,
      "code_text": "def check_matching(\n\tbank_account,\n\tcompany,\n\ttransaction,\n\tdocument_types=None,\n\tfrom_date=None,\n\tto_date=None,\n\tfilter_by_reference_date=None,\n\tfrom_reference_date=None,\n\tto_reference_date=None,\n):",
      "args": [
        "bank_account",
        "company",
        "transaction",
        "document_types",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date"
      ]
    },
    {
      "type": "function",
      "line_start": 583,
      "code_text": "def get_queries(\n\tbank_account,\n\tcompany,\n\ttransaction,\n\tdocument_types=None,\n\tfrom_date=None,\n\tto_date=None,\n\tfilter_by_reference_date=None,\n\tfrom_reference_date=None,\n\tto_reference_date=None,\n\texact_match=None,\n\tcommon_filters=None,\n):",
      "args": [
        "bank_account",
        "company",
        "transaction",
        "document_types",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date",
        "exact_match",
        "common_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 623,
      "code_text": "def get_matching_queries(\n\tbank_account,\n\tcompany,\n\ttransaction,\n\tdocument_types=None,\n\texact_match=None,\n\taccount_from_to=None,\n\tfrom_date=None,\n\tto_date=None,\n\tfilter_by_reference_date=None,\n\tfrom_reference_date=None,\n\tto_reference_date=None,\n\tcommon_filters=None,\n):",
      "args": [
        "bank_account",
        "company",
        "transaction",
        "document_types",
        "exact_match",
        "account_from_to",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date",
        "common_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 683,
      "code_text": "def get_bt_matching_query(exact_match, transaction):",
      "args": [
        "exact_match",
        "transaction"
      ]
    },
    {
      "type": "function",
      "line_start": 727,
      "code_text": "def get_pe_matching_query(\n\texact_match,\n\taccount_from_to,\n\ttransaction,\n\tfrom_date,\n\tto_date,\n\tfilter_by_reference_date,\n\tfrom_reference_date,\n\tto_reference_date,\n\tcommon_filters,\n):",
      "args": [
        "exact_match",
        "account_from_to",
        "transaction",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date",
        "common_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 789,
      "code_text": "def get_je_matching_query(\n\texact_match,\n\ttransaction,\n\tfrom_date,\n\tto_date,\n\tfilter_by_reference_date,\n\tfrom_reference_date,\n\tto_reference_date,\n\tcommon_filters,\n):",
      "args": [
        "exact_match",
        "transaction",
        "from_date",
        "to_date",
        "filter_by_reference_date",
        "from_reference_date",
        "to_reference_date",
        "common_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 856,
      "code_text": "def get_si_matching_query(exact_match, currency, common_filters):",
      "args": [
        "exact_match",
        "currency",
        "common_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 894,
      "code_text": "def get_pi_matching_query(exact_match, currency, common_filters):",
      "args": [
        "exact_match",
        "currency",
        "common_filters"
      ]
    }
  ],
  "erpnext\\accounts\\deferred_revenue.py": [
    {
      "type": "function",
      "line_start": 465,
      "code_text": "def make_gl_entries(\n\tdoc,\n\tcredit_account,\n\tdebit_account,\n\tagainst,\n\tamount,\n\tbase_amount,\n\tposting_date,\n\tproject,\n\taccount_currency,\n\tcost_center,\n\titem,\n\tdeferred_process=None,\n):",
      "args": [
        "doc",
        "credit_account",
        "debit_account",
        "against",
        "amount",
        "base_amount",
        "posting_date",
        "project",
        "account_currency",
        "cost_center",
        "item",
        "deferred_process"
      ]
    },
    {
      "type": "function",
      "line_start": 271,
      "code_text": "def get_already_booked_amount(doc, item):",
      "args": [
        "doc",
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 538,
      "code_text": "def send_mail(deferred_process):",
      "args": [
        "deferred_process"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def validate_service_stop_date(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 317,
      "code_text": "def book_deferred_income_or_expense(doc, deferred_process, posting_date=None):",
      "args": [
        "doc",
        "deferred_process",
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 431,
      "code_text": "def process_deferred_accounting(posting_date=None):",
      "args": [
        "posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def build_conditions(process_type, account, company):",
      "args": [
        "process_type",
        "account",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def convert_deferred_expense_to_expense(deferred_process, start_date=None, end_date=None, conditions=\"\"):",
      "args": [
        "deferred_process",
        "start_date",
        "end_date",
        "conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def convert_deferred_revenue_to_income(deferred_process, start_date=None, end_date=None, conditions=\"\"):",
      "args": [
        "deferred_process",
        "start_date",
        "end_date",
        "conditions"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_booking_dates(doc, item, posting_date=None, prev_posting_date=None):",
      "args": [
        "doc",
        "item",
        "posting_date",
        "prev_posting_date"
      ]
    },
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def calculate_monthly_amount(\n\tdoc, item, last_gl_entry, start_date, end_date, total_days, total_booking_days, account_currency\n):",
      "args": [
        "doc",
        "item",
        "last_gl_entry",
        "start_date",
        "end_date",
        "total_days",
        "total_booking_days",
        "account_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 245,
      "code_text": "def calculate_amount(doc, item, last_gl_entry, total_days, total_booking_days, account_currency):",
      "args": [
        "doc",
        "item",
        "last_gl_entry",
        "total_days",
        "total_booking_days",
        "account_currency"
      ]
    },
    {
      "type": "function",
      "line_start": 548,
      "code_text": "def book_revenue_via_journal_entry(\n\tdoc,\n\tcredit_account,\n\tdebit_account,\n\tamount,\n\tbase_amount,\n\tposting_date,\n\tproject,\n\taccount_currency,\n\tcost_center,\n\titem,\n\tdeferred_process=None,\n\tsubmit=\"No\",\n):",
      "args": [
        "doc",
        "credit_account",
        "debit_account",
        "amount",
        "base_amount",
        "posting_date",
        "project",
        "account_currency",
        "cost_center",
        "item",
        "deferred_process",
        "submit"
      ]
    },
    {
      "type": "function",
      "line_start": 616,
      "code_text": "def get_deferred_booking_accounts(doctype, voucher_detail_no, dr_or_cr):",
      "args": [
        "doctype",
        "voucher_detail_no",
        "dr_or_cr"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\delivery_trip\\delivery_trip.py": [
    {
      "type": "function",
      "line_start": 448,
      "code_text": "def get_attachments(delivery_stop):",
      "args": [
        "delivery_stop"
      ]
    },
    {
      "type": "function",
      "line_start": 339,
      "code_text": "def get_default_address(out, name):",
      "args": [
        "out",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 313,
      "code_text": "def get_default_contact(out, name):",
      "args": [
        "out",
        "name"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class DeliveryTrip(Document):"
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef on_update(self):\n\t\tself.update_delivery_notes()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef on_trash(self):\n\t\tself.update_delivery_notes(delete=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef on_update_after_submit(self):\n\t\tself.update_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_status()\n\t\tself.update_delivery_notes(delete=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef validate_stop_addresses(self):\n\t\tfor stop in self.delivery_stops:\n\t\t\tif not stop.customer_address:\n\t\t\t\tstop.customer_address = get_address_display(frappe.get_doc(\"Address\", stop.address).as_dict())",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef validate_delivery_note_not_draft(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef update_delivery_notes(self, delete=False):",
      "args": [
        "self",
        "delete"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef process_route(self, optimize):",
      "args": [
        "self",
        "optimize"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef form_route_list(self, optimize):",
      "args": [
        "self",
        "optimize"
      ]
    },
    {
      "type": "method",
      "line_start": 240,
      "code_text": "\tdef rearrange_stops(self, optimized_order, start):",
      "args": [
        "self",
        "optimized_order",
        "start"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef get_directions(self, route, optimize):",
      "args": [
        "self",
        "route",
        "optimize"
      ]
    },
    {
      "type": "function",
      "line_start": 304,
      "code_text": "def get_contact_and_address(name):",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 366,
      "code_text": "def get_contact_display(contact):",
      "args": [
        "contact"
      ]
    },
    {
      "type": "function",
      "line_start": 381,
      "code_text": "def sanitize_address(address):",
      "args": [
        "address"
      ]
    },
    {
      "type": "function",
      "line_start": 402,
      "code_text": "def notify_customers(delivery_trip):",
      "args": [
        "delivery_trip"
      ]
    },
    {
      "type": "function",
      "line_start": 467,
      "code_text": "def get_driver_email(driver):\n\temployee = frappe.db.get_value(\"Driver\", driver, \"employee\")\n\temail = frappe.db.get_value(\"Employee\", employee, \"prefered_email\")\n\treturn {\"email\": email}",
      "args": [
        "driver"
      ]
    }
  ],
  "erpnext\\accounts\\test\\accounts_mixin.py": [
    {
      "type": "class",
      "line_start": 7,
      "code_text": "class AccountsTestMixin:"
    },
    {
      "type": "method",
      "line_start": 8,
      "code_text": "\tdef create_customer(self, customer_name=\"_Test Customer\", currency=None):",
      "args": [
        "self",
        "customer_name",
        "currency"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef create_supplier(self, supplier_name=\"_Test Supplier\", currency=None):",
      "args": [
        "self",
        "supplier_name",
        "currency"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef create_item(self, item_name=\"_Test Item\", is_stock=0, warehouse=None, company=None, valuation_rate=0):",
      "args": [
        "self",
        "item_name",
        "is_stock",
        "warehouse",
        "company",
        "valuation_rate"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef create_company(self, company_name=\"_Test Company\", abbr=\"_TC\"):",
      "args": [
        "self",
        "company_name",
        "abbr"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef enable_advance_as_liability(self):\n\t\tcompany = frappe.get_doc(\"Company\", self.company)\n\t\tcompany.book_advance_payments_in_separate_party_account = True\n\t\tcompany.default_advance_received_account = self.advance_received\n\t\tcompany.default_advance_paid_account = self.advance_paid\n\t\tcompany.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef disable_advance_as_liability(self):\n\t\tcompany = frappe.get_doc(\"Company\", self.company)\n\t\tcompany.book_advance_payments_in_separate_party_account = False\n\t\tcompany.default_advance_paid_account = company.default_advance_received_account = None\n\t\tcompany.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef identify_default_warehouses(self):\n\t\tfor w in frappe.db.get_all(\n\t\t\t\"Warehouse\", filters={\"company\": self.company}, fields=[\"name\", \"warehouse_name\"]\n\t\t):\n\t\t\tsetattr(self, \"warehouse_\" + w.warehouse_name.lower().strip().replace(\" \", \"_\"), w.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef create_usd_receivable_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef create_usd_payable_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 196,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef create_price_list(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\www\\book_appointment\\index.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 163,
      "code_text": "def _deltatime_to_datetime(date, deltatime):\n\ttime = (datetime.datetime.min + deltatime).time()\n\treturn datetime.datetime.combine(date.date(), time)",
      "args": [
        "date",
        "deltatime"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def convert_to_system_timezone(guest_tz, datetimeobject):\n\tguest_tz = zoneinfo.ZoneInfo(guest_tz)\n\tdatetimeobject = datetimeobject.replace(tzinfo=guest_tz)\n\tsystem_tz = zoneinfo.ZoneInfo(get_system_timezone())\n\tdatetimeobject = datetimeobject.astimezone(system_tz)\n\treturn datetimeobject",
      "args": [
        "guest_tz",
        "datetimeobject"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def convert_to_guest_timezone(guest_tz, datetimeobject):\n\tguest_tz = zoneinfo.ZoneInfo(guest_tz)\n\tlocal_timezone = zoneinfo.ZoneInfo(get_system_timezone())\n\tdatetimeobject = datetimeobject.replace(tzinfo=local_timezone)\n\tdatetimeobject = datetimeobject.astimezone(guest_tz)\n\treturn datetimeobject",
      "args": [
        "guest_tz",
        "datetimeobject"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_appointment_settings():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def get_timezones():\n\treturn zoneinfo.available_timezones()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_appointment_slots(date, timezone):",
      "args": [
        "date",
        "timezone"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_available_slots_between(query_start_time, query_end_time, settings):",
      "args": [
        "query_start_time",
        "query_end_time",
        "settings"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def create_appointment(date, time, tz, contact):",
      "args": [
        "date",
        "time",
        "tz",
        "contact"
      ]
    },
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def filter_timeslots(date, timeslots):\n\tfiltered_timeslots = []\n\tfor timeslot in timeslots:\n\t\tif timeslot[\"time\"].date() == date:\n\t\t\tfiltered_timeslots.append(timeslot)\n\treturn filtered_timeslots",
      "args": [
        "date",
        "timeslots"
      ]
    },
    {
      "type": "function",
      "line_start": 141,
      "code_text": "def check_availabilty(timeslot, settings):\n\treturn frappe.db.count(\"Appointment\", {\"scheduled_time\": timeslot}) < settings.number_of_agents",
      "args": [
        "timeslot",
        "settings"
      ]
    },
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def _is_holiday(date, holiday_list):\n\tfor holiday in holiday_list.holidays:\n\t\tif holiday.holiday_date == date:\n\t\t\treturn True\n\treturn False",
      "args": [
        "date",
        "holiday_list"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def _get_records(start_time, end_time, settings):",
      "args": [
        "start_time",
        "end_time",
        "settings"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def _datetime_to_deltatime(date_time):\n\tmidnight = datetime.datetime.combine(date_time.date(), datetime.time.min)\n\treturn date_time - midnight",
      "args": [
        "date_time"
      ]
    }
  ],
  "erpnext\\accounts\\report\\sales_payment_summary\\test_sales_payment_summary.py": [
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def get_filters():\n\treturn {\"from_date\": \"1900-01-01\", \"to_date\": today(), \"company\": \"_Test Company\"}",
      "args": []
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def create_sales_invoice_record(qty=1):",
      "args": [
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def create_records():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestSalesPaymentSummary(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_get_mode_of_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef test_get_mode_of_payments_details(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\opportunity\\test_opportunity.py": [
    {
      "type": "function",
      "line_start": 123,
      "code_text": "def create_communication(reference_doctype, reference_name, sender, sent_or_received=None, creation=None):",
      "args": [
        "reference_doctype",
        "reference_name",
        "sender",
        "sent_or_received",
        "creation"
      ]
    },
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def make_opportunity(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestOpportunity(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef test_opportunity_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_make_new_lead_if_required(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_opportunity_item(self):\n\t\topportunity_doc = make_opportunity(with_items=1, rate=1100, qty=2)\n\t\tself.assertEqual(opportunity_doc.total, 2200)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_carry_forward_of_email_and_comments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def make_opportunity_from_lead():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection\\quality_inspection.py": [
    {
      "type": "function",
      "line_start": 384,
      "code_text": "def item_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 478,
      "code_text": "def parse_float(num: str) -> float:",
      "args": [
        "num: str"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class QualityInspection(Document):"
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef set_company(self):\n\t\tif self.reference_type and self.reference_name:\n\t\t\tcompany = frappe.get_cached_value(self.reference_type, self.reference_name, \"company\")\n\t\t\tif company != self.company:\n\t\t\t\tself.company = company",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef set_child_row_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef distribute_child_row_reference(self, child_row_references):",
      "args": [
        "self",
        "child_row_references"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef validate_inspection_required(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef before_submit(self):\n\t\tself.validate_readings_status_mandatory()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef get_item_specification_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef get_quality_inspection_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef on_update(self):\n\t\tif (\n\t\t\tfrappe.db.get_single_value(\"Stock Settings\", \"action_if_quality_inspection_is_not_submitted\")\n\t\t\t== \"Warn\"\n\t\t):\n\t\t\tself.update_qc_reference()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef on_submit(self):\n\t\tif (\n\t\t\tfrappe.db.get_single_value(\"Stock Settings\", \"action_if_quality_inspection_is_not_submitted\")\n\t\t\t== \"Stop\"\n\t\t):\n\t\t\tself.update_qc_reference()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 219,
      "code_text": "\tdef on_cancel(self):\n\t\tself.ignore_linked_doctypes = \"Serial and Batch Bundle\"\n\n\t\tself.update_qc_reference()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef on_trash(self):\n\t\tself.update_qc_reference(remove_reference=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 227,
      "code_text": "\tdef validate_readings_status_mandatory(self):\n\t\tfor reading in self.readings:\n\t\t\tif not reading.status:\n\t\t\t\tfrappe.throw(_(\"Row #{0}: Status is mandatory\").format(reading.idx))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef update_qc_reference(self, remove_reference=False):",
      "args": [
        "self",
        "remove_reference"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef inspect_and_set_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 300,
      "code_text": "\tdef set_status_based_on_acceptance_values(self, reading):",
      "args": [
        "self",
        "reading"
      ]
    },
    {
      "type": "method",
      "line_start": 309,
      "code_text": "\tdef min_max_criteria_passed(self, reading):",
      "args": [
        "self",
        "reading"
      ]
    },
    {
      "type": "method",
      "line_start": 323,
      "code_text": "\tdef set_status_based_on_acceptance_formula(self, reading):",
      "args": [
        "self",
        "reading"
      ]
    },
    {
      "type": "method",
      "line_start": 350,
      "code_text": "\tdef get_formula_evaluation_data(self, reading):",
      "args": [
        "self",
        "reading"
      ]
    },
    {
      "type": "method",
      "line_start": 367,
      "code_text": "\tdef calculate_mean(self, reading):",
      "args": [
        "self",
        "reading"
      ]
    },
    {
      "type": "function",
      "line_start": 440,
      "code_text": "def quality_inspection_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 456,
      "code_text": "def make_quality_inspection(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\chart_of_accounts_importer\\chart_of_accounts_importer.py": [
    {
      "type": "function",
      "line_start": 113,
      "code_text": "def generate_data_from_csv(file_doc, as_dict=False):",
      "args": [
        "file_doc",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def generate_data_from_excel(file_doc, extension, as_dict=False):",
      "args": [
        "file_doc",
        "extension",
        "as_dict"
      ]
    },
    {
      "type": "function",
      "line_start": 419,
      "code_text": "def get_root_types():\n\treturn (\"Asset\", \"Liability\", \"Expense\", \"Income\", \"Equity\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_file(file_name):",
      "args": [
        "file_name"
      ]
    },
    {
      "type": "function",
      "line_start": 190,
      "code_text": "def build_forest(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class ChartofAccountsImporter(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tif self.import_file:\n\t\t\tget_coa(\"Chart of Accounts Importer\", \"All Accounts\", file_name=self.import_file, for_validate=1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def validate_columns(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def validate_company(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def import_coa(file_name, company):",
      "args": [
        "file_name",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def get_coa(doctype, parent, is_root=False, file_name=None, for_validate=0):",
      "args": [
        "doctype",
        "parent",
        "is_root",
        "file_name",
        "for_validate"
      ]
    },
    {
      "type": "function",
      "line_start": 289,
      "code_text": "def build_response_as_excel(writer):",
      "args": [
        "writer"
      ]
    },
    {
      "type": "function",
      "line_start": 310,
      "code_text": "def download_template(file_type, template_type, company):",
      "args": [
        "file_type",
        "template_type",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 322,
      "code_text": "def get_template(template_type, company):",
      "args": [
        "template_type",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 353,
      "code_text": "def get_sample_template(writer, company):",
      "args": [
        "writer",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 364,
      "code_text": "def validate_accounts(file_doc, extension):",
      "args": [
        "file_doc",
        "extension"
      ]
    },
    {
      "type": "function",
      "line_start": 388,
      "code_text": "def validate_root(accounts):",
      "args": [
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 410,
      "code_text": "def validate_missing_roots(roots):",
      "args": [
        "roots"
      ]
    },
    {
      "type": "function",
      "line_start": 423,
      "code_text": "def get_report_type(root_type):\n\tif root_type in (\"Asset\", \"Liability\", \"Equity\"):\n\t\treturn \"Balance Sheet\"\n\telse:\n\t\treturn \"Profit and Loss\"",
      "args": [
        "root_type"
      ]
    },
    {
      "type": "function",
      "line_start": 430,
      "code_text": "def get_mandatory_group_accounts():\n\treturn (\"Bank\", \"Cash\", \"Stock\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 434,
      "code_text": "def get_mandatory_account_types():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 448,
      "code_text": "def unset_existing_data(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 470,
      "code_text": "def set_default_accounts(company):",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_program\\test_loyalty_program.py": [
    {
      "type": "function",
      "line_start": 300,
      "code_text": "def create_sales_invoice_record(qty=1):",
      "args": [
        "qty"
      ]
    },
    {
      "type": "function",
      "line_start": 328,
      "code_text": "def create_records():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def get_points_earned(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestLoyaltyProgram(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\t# create relevant item, customer, loyalty program, etc\n\t\tcreate_records()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_loyalty_points_earned_single_tier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef test_loyalty_points_earned_multiple_tier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef test_cancel_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef test_sales_invoice_return(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 197,
      "code_text": "\tdef test_loyalty_points_for_dashboard(self):\n\t\tdoc = frappe.get_doc(\"Customer\", \"Test Loyalty Customer\")\n\t\tcompany_wise_info = get_dashboard_info(\"Customer\", doc.name, doc.loyalty_program)\n\n\t\tfor d in company_wise_info:\n\t\t\tself.assertTrue(d.get(\"loyalty_points\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 205,
      "code_text": "\tdef test_tier_selection(self, mock_get_loyalty_details):",
      "args": [
        "self",
        "mock_get_loyalty_details"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\sales_person\\sales_person.py": [
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Sales Person\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def get_timeline_data(doctype: str, name: str) -> dict[int, int]:",
      "args": [
        "doctype: str",
        "name: str"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class SalesPerson(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef onload(self):\n\t\tself.load_dashboard_info()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef load_dashboard_info(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef on_update(self):\n\t\tsuper().on_update()\n\t\tself.validate_one_root()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef validate_sales_person(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef get_email_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef validate_employee_id(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center\\test_cost_center.py": [
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def create_cost_center(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCostCenter(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_cost_center_creation_against_child_node(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\pick_list\\test_pick_list.py": [
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class UnitTestPickList(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class TestPickList(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_pick_list_picks_warehouse_for_each_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef test_pick_list_splits_row_according_to_warehouse_availability(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef test_pick_list_shows_serial_no_for_serialized_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 239,
      "code_text": "\tdef test_pick_list_shows_batch_no_for_batched_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 279,
      "code_text": "\tdef test_pick_list_for_batched_and_serialised_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 331,
      "code_text": "\tdef test_pick_list_for_items_from_multiple_sales_orders(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 409,
      "code_text": "\tdef test_pick_list_for_items_with_multiple_UOM(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 481,
      "code_text": "\tdef test_pick_list_grouping_before_print(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 527,
      "code_text": "\tdef test_multiple_dn_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 641,
      "code_text": "\tdef test_picklist_with_multi_uom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 657,
      "code_text": "\tdef test_picklist_for_batch_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 718,
      "code_text": "\tdef test_picklist_for_serial_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 765,
      "code_text": "\tdef test_picklist_with_bundles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 792,
      "code_text": "\tdef test_picklist_with_partial_bundles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 826,
      "code_text": "\tdef test_pick_list_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 859,
      "code_text": "\tdef test_pick_list_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 884,
      "code_text": "\tdef test_pick_list_validation_for_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 915,
      "code_text": "\tdef test_pick_list_validation_for_batch_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 951,
      "code_text": "\tdef test_pick_list_validation_for_batch_no_and_serial_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 991,
      "code_text": "\tdef test_pick_list_validation_for_multiple_batches_and_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1027,
      "code_text": "\tdef test_pick_list_for_multiple_sales_order_with_multiple_batches(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1064,
      "code_text": "\tdef test_pick_list_for_multiple_sales_order_with_multiple_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1107,
      "code_text": "\tdef test_pick_list_for_multiple_sales_orders_for_non_serialized_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1145,
      "code_text": "\tdef test_validate_picked_qty_with_manual_option(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1188,
      "code_text": "\tdef test_over_allowance_picking(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1219,
      "code_text": "\tdef test_ignore_pricing_rule_in_pick_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1281,
      "code_text": "\tdef test_pick_list_not_reset_batch(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_balance\\test_stock_balance.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def stock_balance(filters):\n\t\"\"\"Get rows from stock balance report\"\"\"\n\treturn [_dict(row) for row in execute(filters)[1]]",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestStockBalance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef assertPartialDictEq(self, expected: dict[str, Any], actual: dict[str, Any]):\n\t\tfor k, v in expected.items():\n\t\t\tself.assertEqual(v, actual[k], msg=f\"{expected=}\\n{actual=}\")",
      "args": [
        "self",
        "expected",
        "actual"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef generate_stock_ledger(self, item_code: str, movements):\n\t\tfor movement in map(_dict, movements):\n\t\t\tif \"to_warehouse\" not in movement:\n\t\t\t\tmovement.to_warehouse = \"_Test Warehouse - _TC\"\n\t\t\tmake_stock_entry(item_code=item_code, **movement)",
      "args": [
        "self",
        "item_code: str",
        "movements"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef assertInvariants(self, rows):",
      "args": [
        "self",
        "rows"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef test_basic_stock_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef test_opening_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef test_uom_converted_info(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef test_item_group(self):\n\t\tself.filters.pop(\"item_code\", None)\n\t\trows = stock_balance(self.filters.update({\"item_group\": self.item.item_group}))\n\t\tself.assertTrue(all(r.item_group == self.item.item_group for r in rows))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef test_child_warehouse_balances(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef test_show_item_attr(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\status_updater.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class OverAllowanceError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 170,
      "code_text": "class StatusUpdater(Document):"
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def validate_status(status, options):\n\tif status not in options:\n\t\tfrappe.throw(_(\"Status must be one of {0}\").format(comma_or(options)))",
      "args": [
        "status",
        "options"
      ]
    },
    {
      "type": "function",
      "line_start": 641,
      "code_text": "def get_allowance_for(\n\titem_code,\n\titem_allowance=None,\n\tglobal_qty_allowance=None,\n\tglobal_amount_allowance=None,\n\tqty_or_amount=\"qty\",\n):",
      "args": [
        "item_code",
        "item_allowance",
        "global_qty_allowance",
        "global_amount_allowance",
        "qty_or_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 178,
      "code_text": "\tdef update_prevdoc_status(self):\n\t\tself.update_qty()\n\t\tself.validate_qty()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef set_status(self, update=False, status=None, update_modified=True):",
      "args": [
        "self",
        "update",
        "status",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef get_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 250,
      "code_text": "\tdef validate_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 319,
      "code_text": "\tdef check_overflow_with_allowance(self, item, args):",
      "args": [
        "self",
        "item",
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 360,
      "code_text": "\tdef limits_crossed_error(self, args, item, qty_or_amount):",
      "args": [
        "self",
        "args",
        "item",
        "qty_or_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 401,
      "code_text": "\tdef warn_about_bypassing_with_role(self, item, qty_or_amount, role):",
      "args": [
        "self",
        "item",
        "qty_or_amount",
        "role"
      ]
    },
    {
      "type": "method",
      "line_start": 418,
      "code_text": "\tdef update_qty(self, update_modified=True):",
      "args": [
        "self",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 435,
      "code_text": "\tdef _update_children(self, args, update_modified):",
      "args": [
        "self",
        "args",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 495,
      "code_text": "\tdef _calculate_target_parent_percentage(\n\t\tname, target_parent_dt, target_dt, target_ref_field, target_field\n\t):",
      "args": [
        "name",
        "target_parent_dt",
        "target_dt",
        "target_ref_field",
        "target_field"
      ]
    },
    {
      "type": "method",
      "line_start": 519,
      "code_text": "\tdef _determine_status(percentage, keyword):",
      "args": [
        "percentage",
        "keyword"
      ]
    },
    {
      "type": "method",
      "line_start": 527,
      "code_text": "\tdef _update_percent_field_in_targets(self, args, update_modified=True):",
      "args": [
        "self",
        "args",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 544,
      "code_text": "\tdef _update_percent_field(self, args, update_modified=True):",
      "args": [
        "self",
        "args",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 571,
      "code_text": "\tdef _update_modified(self, args, update_modified):",
      "args": [
        "self",
        "args",
        "update_modified"
      ]
    },
    {
      "type": "method",
      "line_start": 580,
      "code_text": "\tdef update_billing_status_for_zero_amount_refdoc(self, ref_dt):",
      "args": [
        "self",
        "ref_dt"
      ]
    },
    {
      "type": "method",
      "line_start": 604,
      "code_text": "\tdef update_billing_status(self, zero_amount_refdoc, ref_dt, ref_fieldname):",
      "args": [
        "self",
        "zero_amount_refdoc",
        "ref_dt",
        "ref_fieldname"
      ]
    }
  ],
  "erpnext\\selling\\page\\sales_funnel\\sales_funnel.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def validate_filters(from_date, to_date, company):\n\tif from_date and to_date and (from_date >= to_date):\n\t\tfrappe.throw(_(\"To Date must be greater than From Date\"))\n\n\tif not company:\n\t\tfrappe.throw(_(\"Please Select a Company\"))",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def get_opp_by(by_field, from_date, to_date, company):",
      "args": [
        "by_field",
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def get_funnel_data(from_date, to_date, company):",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 63,
      "code_text": "def get_opp_by_utm_source(from_date, to_date, company):\n\treturn get_opp_by(\"utm_source\", from_date, to_date, company)",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_opp_by_utm_campaign(from_date, to_date, company):\n\treturn get_opp_by(\"utm_campaign\", from_date, to_date, company)",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_opp_by_utm_medium(from_date, to_date, company):\n\treturn get_opp_by(\"utm_medium\", from_date, to_date, company)",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def get_pipeline_data(from_date, to_date, company):",
      "args": [
        "from_date",
        "to_date",
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_period\\accounting_period.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class OverlapError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class ClosedAccountingPeriod(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class AccountingPeriod(Document):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef validate(self):\n\t\tself.validate_overlap()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef before_insert(self):\n\t\tself.bootstrap_doctypes_for_closing()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef autoname(self):\n\t\tcompany_abbr = frappe.get_cached_value(\"Company\", self.company, \"abbr\")\n\t\tself.name = \" - \".join([self.period_name, company_abbr])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef validate_overlap(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef get_doctypes_for_closing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef bootstrap_doctypes_for_closing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 94,
      "code_text": "def validate_accounting_period_on_doc_save(doc, method=None):",
      "args": [
        "doc",
        "method"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_closing_entry\\test_pos_closing_entry.py": [
    {
      "type": "function",
      "line_start": 293,
      "code_text": "def init_user_and_profile(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 312,
      "code_text": "def get_test_item_qty(pos_profile):",
      "args": [
        "pos_profile"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestPOSClosingEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef setUp(self):\n\t\t# Make stock available for POS Sales\n\t\tmake_stock_entry(target=\"_Test Warehouse - _TC\", qty=2, basic_rate=100)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.set_user(\"Administrator\")\n\t\tfrappe.db.sql(\"delete from `tabPOS Profile`\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_pos_closing_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef test_pos_closing_without_item_code(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_pos_qty_for_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef test_cancelling_of_pos_closing_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 156,
      "code_text": "\tdef test_pos_closing_for_required_accounting_dimension_in_pos_profile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 194,
      "code_text": "\tdef test_merging_into_sales_invoice_for_batched_item(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation\\process_payment_reconciliation.py": [
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def is_job_running(job_name: str) -> bool:\n\tjobs = frappe.db.get_all(\"RQ Job\", filters={\"status\": [\"in\", [\"started\", \"queued\"]]})\n\tfor x in jobs:\n\t\tif x.job_name == job_name:\n\t\t\treturn True\n\treturn False",
      "args": [
        "job_name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 306,
      "code_text": "def get_next_allocation(log: str) -> list:",
      "args": [
        "log: str"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def get_pr_instance(doc: str):",
      "args": [
        "doc: str"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class ProcessPaymentReconciliation(Document):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef validate(self):\n\t\tself.validate_receivable_payable_account()\n\t\tself.validate_bank_cash_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate_receivable_payable_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate_bank_cash_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef before_save(self):\n\t\tself.status = \"\"\n\t\tself.error_log = \"\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef on_submit(self):\n\t\tself.db_set(\"status\", \"Queued\")\n\t\tself.db_set(\"error_log\", None)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef on_cancel(self):\n\t\tself.db_set(\"status\", \"Cancelled\")\n\t\tlog = frappe.db.get_value(\"Process Payment Reconciliation Log\", filters={\"process_pr\": self.name})\n\t\tif log:\n\t\t\tfrappe.db.set_value(\"Process Payment Reconciliation Log\", log, \"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_reconciled_count(docname: str | None = None) -> float:",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def pause_job_for_doc(docname: str | None = None):\n\tif docname:\n\t\tfrappe.db.set_value(\"Process Payment Reconciliation\", docname, \"status\", \"Paused\")\n\t\tlog = frappe.db.get_value(\"Process Payment Reconciliation Log\", filters={\"process_pr\": docname})\n\t\tif log:\n\t\t\tfrappe.db.set_value(\"Process Payment Reconciliation Log\", log, \"status\", \"Paused\")",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 138,
      "code_text": "def trigger_job_for_doc(docname: str | None = None):",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def trigger_reconciliation_for_queued_docs():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 240,
      "code_text": "def reconcile_based_on_filters(doc: None | str = None) -> None:",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 334,
      "code_text": "def fetch_and_allocate(doc: str) -> None:",
      "args": [
        "doc: str"
      ]
    },
    {
      "type": "function",
      "line_start": 391,
      "code_text": "def reconcile(doc: None | str = None) -> None:",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 505,
      "code_text": "def is_any_doc_running(for_filter: str | dict | None = None) -> str | None:",
      "args": [
        "for_filter"
      ]
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_schedule\\test_maintenance_schedule.py": [
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def get_events(ms):\n\treturn frappe.get_all(\n\t\t\"Event Participants\",\n\t\tfilters={\"reference_doctype\": ms.doctype, \"reference_docname\": ms.name, \"parenttype\": \"Event\"},\n\t)",
      "args": [
        "ms"
      ]
    },
    {
      "type": "function",
      "line_start": 173,
      "code_text": "def make_maintenance_schedule(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 155,
      "code_text": "def make_serial_item_with_serial(self, item_code):",
      "args": [
        "self",
        "item_code"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestMaintenanceSchedule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_events_should_be_created_and_deleted(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_make_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef test_serial_no_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef test_schedule_with_serials(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\shipment\\test_shipment.py": [
    {
      "type": "function",
      "line_start": 195,
      "code_text": "def create_material_receipt(item, company):",
      "args": [
        "item",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def get_shipment_customer():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 142,
      "code_text": "def get_shipment_company():\n\treturn frappe.get_doc(\"Company\", \"_Test Company\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 159,
      "code_text": "def create_shipment_address(address_title, company_name, postal_code):",
      "args": [
        "address_title",
        "company_name",
        "postal_code"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class UnitTestShipment(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class TestShipment(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef test_shipment_from_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_get_total_weight(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def create_test_delivery_note():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def create_test_shipment(delivery_notes=None):",
      "args": [
        "delivery_notes"
      ]
    },
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def get_shipment_customer_contact(customer_name):",
      "args": [
        "customer_name"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def get_shipment_customer_address(customer_name):",
      "args": [
        "customer_name"
      ]
    },
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def get_shipment_company_address(company_name):",
      "args": [
        "company_name"
      ]
    },
    {
      "type": "function",
      "line_start": 146,
      "code_text": "def get_shipment_item(company_name):",
      "args": [
        "company_name"
      ]
    },
    {
      "type": "function",
      "line_start": 171,
      "code_text": "def create_customer_contact(fname, lname):",
      "args": [
        "fname",
        "lname"
      ]
    },
    {
      "type": "function",
      "line_start": 185,
      "code_text": "def create_shipment_customer(customer_name):",
      "args": [
        "customer_name"
      ]
    },
    {
      "type": "function",
      "line_start": 216,
      "code_text": "def create_shipment_item(item_name, company_name):",
      "args": [
        "item_name",
        "company_name"
      ]
    }
  ],
  "erpnext\\accounts\\report\\accounts_receivable\\test_accounts_receivable.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestAccountsReceivable(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tself.create_usd_receivable_account()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef create_sales_invoice(self, no_payment_schedule=False, do_not_submit=False, **args):",
      "args": [
        "self",
        "no_payment_schedule",
        "do_not_submit",
        "**args"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef create_payment_entry(self, docname, do_not_submit=False):",
      "args": [
        "self",
        "docname",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef create_credit_note(self, docname, do_not_submit=False):",
      "args": [
        "self",
        "docname",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef test_pos_receivable(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef test_accounts_receivable_with_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef test_accounts_receivable_without_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef test_accounts_receivable_with_partial_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 263,
      "code_text": "\tdef test_cr_note_flag_to_update_self(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 336,
      "code_text": "\tdef test_payment_againt_po_in_receivable_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef test_exchange_revaluation_for_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 433,
      "code_text": "\tdef test_payment_against_credit_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 488,
      "code_text": "\tdef test_group_by_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 544,
      "code_text": "\tdef test_future_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 619,
      "code_text": "\tdef test_sales_person(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 644,
      "code_text": "\tdef test_cost_center_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 658,
      "code_text": "\tdef test_customer_group_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 677,
      "code_text": "\tdef test_multi_customer_group_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 698,
      "code_text": "\tdef test_party_account_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 767,
      "code_text": "\tdef test_usd_customer_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 801,
      "code_text": "\tdef test_multi_select_party_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 836,
      "code_text": "\tdef test_report_output_if_party_is_missing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 922,
      "code_text": "\tdef test_future_payments_on_foreign_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1008,
      "code_text": "\tdef test_accounts_receivable_output_for_minor_outstanding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 1034,
      "code_text": "\tdef test_cost_center_on_report_output(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_schedule\\maintenance_schedule.py": [
    {
      "type": "function",
      "line_start": 446,
      "code_text": "def make_maintenance_visit(source_name, target_doc=None, item_name=None, s_id=None):",
      "args": [
        "source_name",
        "target_doc",
        "item_name",
        "s_id"
      ]
    },
    {
      "type": "function",
      "line_start": 432,
      "code_text": "def get_serial_nos_from_schedule(item_code, schedule=None):",
      "args": [
        "item_code",
        "schedule"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class MaintenanceSchedule(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef generate_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_end_date_visits(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef create_schedule_list(self, start_date, end_date, no_of_visit, sales_person):",
      "args": [
        "self",
        "start_date",
        "end_date",
        "no_of_visit",
        "sales_person"
      ]
    },
    {
      "type": "method",
      "line_start": 179,
      "code_text": "\tdef validate_schedule_date_for_holiday_list(self, schedule_date, sales_person):",
      "args": [
        "self",
        "schedule_date",
        "sales_person"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef validate_dates_with_periodicity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 222,
      "code_text": "\tdef validate_maintenance_detail(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef validate_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef validate_items_table_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 269,
      "code_text": "\tdef validate_no_of_visits(self):\n\t\treturn len(self.schedules) != sum(d.no_of_visits for d in self.items)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 272,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 281,
      "code_text": "\tdef validate_serial_no_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 298,
      "code_text": "\tdef on_update(self):\n\t\tself.db_set(\"status\", \"Draft\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 301,
      "code_text": "\tdef update_amc_date(self, serial_nos, amc_expiry_date=None):\n\t\tfor serial_no in serial_nos:\n\t\t\tserial_no_doc = frappe.get_doc(\"Serial No\", serial_no)\n\t\t\tserial_no_doc.amc_expiry_date = amc_expiry_date\n\t\t\tserial_no_doc.save()",
      "args": [
        "self",
        "serial_nos",
        "amc_expiry_date"
      ]
    },
    {
      "type": "method",
      "line_start": 307,
      "code_text": "\tdef validate_serial_no(self, item_code, serial_nos, amc_start_date):",
      "args": [
        "self",
        "item_code",
        "serial_nos",
        "amc_start_date"
      ]
    },
    {
      "type": "method",
      "line_start": 354,
      "code_text": "\tdef validate_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 376,
      "code_text": "\tdef check_serial_no_added(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 391,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 404,
      "code_text": "\tdef on_trash(self):\n\t\tdelete_events(self.doctype, self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 408,
      "code_text": "\tdef get_pending_data(self, data_type, s_date=None, item_name=None):",
      "args": [
        "self",
        "data_type",
        "s_date",
        "item_name"
      ]
    }
  ],
  "erpnext\\crm\\utils.py": [
    {
      "type": "function",
      "line_start": 101,
      "code_text": "def get_linked_prospect(reference_doctype, reference_name):",
      "args": [
        "reference_doctype",
        "reference_name"
      ]
    },
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def copy_comments(doctype, docname, doc):",
      "args": [
        "doctype",
        "docname",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def link_communications(doctype, docname, doc):\n\tcommunication_list = get_linked_communication_list(doctype, docname)\n\n\tfor communication in communication_list:\n\t\tcommunication_doc = frappe.get_doc(\"Communication\", communication)\n\t\tcommunication_doc.add_link(doc.doctype, doc.name, autosave=True)",
      "args": [
        "doctype",
        "docname",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def get_linked_communication_list(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 154,
      "code_text": "def get_open_todos(ref_doctype, ref_docname):",
      "args": [
        "ref_doctype",
        "ref_docname"
      ]
    },
    {
      "type": "function",
      "line_start": 167,
      "code_text": "def get_open_events(ref_doctype, ref_docname):",
      "args": [
        "ref_doctype",
        "ref_docname"
      ]
    },
    {
      "type": "class",
      "line_start": 215,
      "code_text": "class CRMNote(Document):"
    },
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def update_lead_phone_numbers(contact, method):",
      "args": [
        "contact",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def link_communications_with_prospect(communication, method):",
      "args": [
        "communication",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def update_modified_timestamp(communication, method):",
      "args": [
        "communication",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 118,
      "code_text": "def link_events_with_prospect(event, method):",
      "args": [
        "event",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 128,
      "code_text": "def link_open_tasks(ref_doctype, ref_docname, doc):",
      "args": [
        "ref_doctype",
        "ref_docname",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 138,
      "code_text": "def link_open_events(ref_doctype, ref_docname, doc):\n\tevents = get_open_events(ref_doctype, ref_docname)\n\tfor event in events:\n\t\tevent_doc = frappe.get_doc(\"Event\", event.name)\n\t\tevent_doc.add_participant(doc.doctype, doc.name)\n\t\tevent_doc.save()",
      "args": [
        "ref_doctype",
        "ref_docname",
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 147,
      "code_text": "def get_open_activities(ref_doctype, ref_docname):\n\ttasks = get_open_todos(ref_doctype, ref_docname)\n\tevents = get_open_events(ref_doctype, ref_docname)\n\n\treturn {\"tasks\": tasks, \"events\": events}",
      "args": [
        "ref_doctype",
        "ref_docname"
      ]
    },
    {
      "type": "function",
      "line_start": 194,
      "code_text": "def open_leads_opportunities_based_on_todays_event():",
      "args": []
    },
    {
      "type": "method",
      "line_start": 217,
      "code_text": "\tdef add_note(self, note):\n\t\tself.append(\"notes\", {\"note\": note, \"added_by\": frappe.session.user, \"added_on\": now()})\n\t\tself.save()\n\t\tnotify_mentions(self.doctype, self.name, note)",
      "args": [
        "self",
        "note"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef edit_note(self, note, row_id):\n\t\tfor d in self.notes:\n\t\t\tif cstr(d.name) == row_id:\n\t\t\t\td.note = note\n\t\t\t\td.db_update()",
      "args": [
        "self",
        "note",
        "row_id"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef delete_note(self, row_id):\n\t\tfor d in self.notes:\n\t\t\tif cstr(d.name) == row_id:\n\t\t\t\tself.remove(d)\n\t\t\t\tbreak\n\t\tself.save()",
      "args": [
        "self",
        "row_id"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction\\bank_transaction.py": [
    {
      "type": "function",
      "line_start": 414,
      "code_text": "def get_total_allocated_amount(docs):",
      "args": [
        "docs"
      ]
    },
    {
      "type": "function",
      "line_start": 460,
      "code_text": "def get_reconciled_bank_transactions(doctype, docname):\n\treturn frappe.get_all(\n\t\t\"Bank Transaction Payments\",\n\t\tfilters={\"payment_document\": doctype, \"payment_entry\": docname},\n\t\tpluck=\"parent\",\n\t)",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class BankTransaction(Document):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef before_validate(self):\n\t\tself.update_allocated_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef validate(self):\n\t\tself.validate_duplicate_references()\n\t\tself.validate_currency()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef set_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef validate_duplicate_references(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef update_allocated_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef delink_old_payment_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef before_submit(self):\n\t\tself.allocate_payment_entries()\n\t\tself.set_status()\n\n\t\tif frappe.db.get_single_value(\"Accounts Settings\", \"enable_party_matching\"):\n\t\t\tself.auto_set_party()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef before_update_after_submit(self):\n\t\tself.validate_duplicate_references()\n\t\tself.update_allocated_amount()\n\t\tself.delink_old_payment_entries()\n\t\tself.allocate_payment_entries()\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef on_cancel(self):\n\t\tfor payment_entry in self.payment_entries:\n\t\t\tself.delink_payment_entry(payment_entry)\n\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef add_payment_entries(self, vouchers):",
      "args": [
        "self",
        "vouchers"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef allocate_payment_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef remove_payment_entries(self):\n\t\tfor payment_entry in self.payment_entries:\n\t\t\tself.remove_payment_entry(payment_entry)\n\n\t\tself.save()  # runs before_update_after_submit",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef remove_payment_entry(self, payment_entry):\n\t\t\"Clear payment entry and clearance\"\n\t\tself.delink_payment_entry(payment_entry)\n\t\tself.remove(payment_entry)",
      "args": [
        "self",
        "payment_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 231,
      "code_text": "\tdef delink_payment_entry(self, payment_entry):\n\t\tif payment_entry.payment_document == \"Bank Transaction\":\n\t\t\tself.update_linked_bank_transaction(payment_entry.payment_entry, allocated_amount=None)\n\t\telse:\n\t\t\tself.clear_linked_payment_entry(payment_entry, clearance_date=None)",
      "args": [
        "self",
        "payment_entry"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef clear_linked_payment_entry(self, payment_entry, clearance_date=None):",
      "args": [
        "self",
        "payment_entry",
        "clearance_date"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef update_linked_bank_transaction(self, bank_transaction_name, allocated_amount=None):",
      "args": [
        "self",
        "bank_transaction_name",
        "allocated_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 287,
      "code_text": "\tdef auto_set_party(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 312,
      "code_text": "def get_doctypes_for_bank_reconciliation():\n\t\"\"\"Get Bank Reconciliation doctypes from all the apps\"\"\"\n\treturn frappe.get_hooks(\"bank_reconciliation_doctypes\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 317,
      "code_text": "def get_clearance_details(transaction, payment_entry, bt_allocations, gl_entries, gl_bank_account):",
      "args": [
        "transaction",
        "payment_entry",
        "bt_allocations",
        "gl_entries",
        "gl_bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 377,
      "code_text": "def get_related_bank_gl_entries(docs):",
      "args": [
        "docs"
      ]
    },
    {
      "type": "function",
      "line_start": 468,
      "code_text": "def remove_from_bank_transaction(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\repost_accounting_ledger\\repost_accounting_ledger.py": [
    {
      "type": "function",
      "line_start": 216,
      "code_text": "def validate_docs_for_deferred_accounting(sales_docs, purchase_docs):",
      "args": [
        "sales_docs",
        "purchase_docs"
      ]
    },
    {
      "type": "function",
      "line_start": 241,
      "code_text": "def validate_docs_for_voucher_types(doc_voucher_types):",
      "args": [
        "doc_voucher_types"
      ]
    },
    {
      "type": "function",
      "line_start": 207,
      "code_text": "def get_allowed_types_from_settings():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class RepostAccountingLedger(Document):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself._allowed_types = get_allowed_types_from_settings()",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tself.validate_vouchers()\n\t\tself.validate_for_closed_fiscal_year()\n\t\tself.validate_for_deferred_accounting()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate_for_deferred_accounting(self):\n\t\tsales_docs = [x.voucher_no for x in self.vouchers if x.voucher_type == \"Sales Invoice\"]\n\t\tpurchase_docs = [x.voucher_no for x in self.vouchers if x.voucher_type == \"Purchase Invoice\"]\n\t\tvalidate_docs_for_deferred_accounting(sales_docs, purchase_docs)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef validate_for_closed_fiscal_year(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef validate_vouchers(self):\n\t\tif self.vouchers:\n\t\t\tvalidate_docs_for_voucher_types([x.voucher_type for x in self.vouchers])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef get_existing_ledger_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef generate_preview_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef generate_preview(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 151,
      "code_text": "def start_repost(account_repost_doc=str) -> None:",
      "args": [
        "account_repost_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 262,
      "code_text": "def get_repost_allowed_types(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_closing_entry\\stock_closing_entry.py": [
    {
      "type": "class",
      "line_start": 158,
      "code_text": "class StockClosing:"
    },
    {
      "type": "function",
      "line_start": 146,
      "code_text": "def prepare_closing_stock_balance(name):",
      "args": [
        "name"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class StockClosingEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef before_save(self):\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef set_status(self, save=False):",
      "args": [
        "self",
        "save"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef validate(self):\n\t\tself.validate_duplicate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate_duplicate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef on_submit(self):\n\t\tself.set_status(save=True)\n\t\tself.enqueue_job()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef on_cancel(self):\n\t\tself.set_status(save=True)\n\t\tself.remove_stock_closing()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef remove_stock_closing(self):\n\t\ttable = frappe.qb.DocType(\"Stock Closing Balance\")\n\t\tfrappe.qb.from_(table).delete().where(table.stock_closing_entry == self.name).run()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef enqueue_job(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef regenerate_closing_balance(self):\n\t\tself.remove_stock_closing()\n\t\tself.enqueue_job()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef create_stock_closing_balance_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef get_prepared_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef __init__(self, company, from_date, to_date, **kwargs):",
      "args": [
        "self",
        "company",
        "from_date",
        "to_date",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 167,
      "code_text": "\tdef get_stock_closing_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 197,
      "code_text": "\tdef update_fifo_queue(self, fifo_queue, actual_qty, posting_date):",
      "args": [
        "self",
        "fifo_queue",
        "actual_qty",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef get_initialized_entry(self, row, dimension_fields):",
      "args": [
        "self",
        "row",
        "dimension_fields"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef get_sle_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 302,
      "code_text": "\tdef get_entries(self, doctype, fields, filters, **kwargs):",
      "args": [
        "self",
        "doctype",
        "fields",
        "filters",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 339,
      "code_text": "\tdef get_last_stock_closing_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 350,
      "code_text": "\tdef get_keys(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 395,
      "code_text": "\tdef get_stock_closing_balance(self, kwargs, for_batch=False):",
      "args": [
        "self",
        "kwargs",
        "for_batch"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\product_bundle\\test_product_bundle.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def make_product_bundle(parent, items, qty=None):",
      "args": [
        "parent",
        "items",
        "qty"
      ]
    }
  ],
  "erpnext\\crm\\frappe_crm_api.py": [
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def create_customer(customer_data=None):",
      "args": [
        "customer_data"
      ]
    },
    {
      "type": "function",
      "line_start": 94,
      "code_text": "def create_address(doctype, docname, address):",
      "args": [
        "doctype",
        "docname",
        "address"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def create_contacts(contacts, organization=None, link_doctype=None, link_docname=None):",
      "args": [
        "contacts",
        "organization",
        "link_doctype",
        "link_docname"
      ]
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def link_doc(doc, link_doctype, link_docname):",
      "args": [
        "doc",
        "link_doctype",
        "link_docname"
      ]
    },
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def create_custom_fields_for_frappe_crm():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 33,
      "code_text": "def create_prospect_against_crm_deal():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 139,
      "code_text": "def contact_exists(email, mobile_no):",
      "args": [
        "email",
        "mobile_no"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card\\test_job_card.py": [
    {
      "type": "function",
      "line_start": 714,
      "code_text": "def create_bom_with_multiple_operations():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 749,
      "code_text": "def make_wo_with_transfer_against_jc():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 30,
      "code_text": "class UnitTestJobCard(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class TestJobCard(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef setUp(self):\n\t\tself.make_bom_for_jc_tests()\n\t\tself.transfer_material_against: Literal[\"Work Order\", \"Job Card\"] = \"Work Order\"\n\t\tself.source_warehouse = None\n\t\tself._work_order = None",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef make_bom_for_jc_tests(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef work_order(self) -> WorkOrder:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef generate_required_stock(self, work_order: WorkOrder) -> None:",
      "args": [
        "self",
        "work_order: WorkOrder"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef test_job_card_operations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_job_card_with_different_work_station(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef test_job_card_overlap(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef test_job_card_overlap_with_capacity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 197,
      "code_text": "\tdef test_job_card_multiple_materials_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 228,
      "code_text": "\tdef test_job_card_excess_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef test_job_card_excess_material_transfer_block(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 294,
      "code_text": "\tdef test_job_card_excess_material_transfer_with_no_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 328,
      "code_text": "\tdef test_job_card_partial_material_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 368,
      "code_text": "\tdef test_job_card_material_transfer_correctness(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 404,
      "code_text": "\tdef test_corrective_costing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 448,
      "code_text": "\tdef test_if_corrective_jc_ops_cost_is_added_to_manufacture_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 529,
      "code_text": "\tdef test_job_card_statuses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 554,
      "code_text": "\tdef test_job_card_material_request_and_bom_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef test_job_card_proccess_qty_and_completed_qty(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center\\cost_center.py": [
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Cost Center\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class CostCenter(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.cost_center_number, self.cost_center_name, self.company)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tself.validate_mandatory()\n\t\tself.validate_parent_cost_center()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate_mandatory(self):\n\t\tif self.cost_center_name != self.company and not self.parent_cost_center:\n\t\t\tfrappe.throw(_(\"Please enter parent cost center\"))\n\t\telif self.cost_center_name == self.company and self.parent_cost_center:\n\t\t\tfrappe.throw(_(\"Root cannot have a parent cost center\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef validate_parent_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef convert_group_to_ledger(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef convert_ledger_to_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef check_gle_exists(self):\n\t\treturn frappe.db.get_value(\"GL Entry\", {\"cost_center\": self.name})",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef check_if_child_exists(self):\n\t\treturn frappe.db.sql(\n\t\t\t\"select name from `tabCost Center` where \\\n\t\t\tparent_cost_center = %s and docstatus != 2\",\n\t\t\tself.name,\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef if_allocation_exists_against_cost_center(self):\n\t\treturn frappe.db.get_value(\n\t\t\t\"Cost Center Allocation\", filters={\"main_cost_center\": self.name, \"docstatus\": 1}\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef check_if_part_of_cost_center_allocation(self):\n\t\treturn frappe.db.get_value(\n\t\t\t\"Cost Center Allocation Percentage\", filters={\"cost_center\": self.name, \"docstatus\": 1}\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef before_rename(self, olddn, newdn, merge=False):",
      "args": [
        "self",
        "olddn",
        "newdn",
        "merge"
      ]
    },
    {
      "type": "method",
      "line_start": 116,
      "code_text": "\tdef after_rename(self, olddn, newdn, merge=False):",
      "args": [
        "self",
        "olddn",
        "newdn",
        "merge"
      ]
    },
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_name_with_number(new_account, account_number):\n\tif account_number and not new_account[0].isdigit():\n\t\tnew_account = account_number + \" - \" + new_account\n\treturn new_account",
      "args": [
        "new_account",
        "account_number"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\exchange_rate_revaluation\\exchange_rate_revaluation.py": [
    {
      "type": "function",
      "line_start": 615,
      "code_text": "def get_account_details(\n\tcompany, posting_date, account, party_type=None, party=None, rounding_loss_allowance: float | None = None",
      "args": [
        "company",
        "posting_date",
        "account",
        "party_type",
        "party",
        "rounding_loss_allowance"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class ExchangeRateRevaluation(Document):"
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate(self):\n\t\tself.validate_rounding_loss_allowance()\n\t\tself.set_total_gain_loss()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef validate_rounding_loss_allowance(self):\n\t\tif self.rounding_loss_allowance < 0 or self.rounding_loss_allowance >= 1:\n\t\t\tfrappe.throw(_(\"Rounding Loss Allowance should be between 0 and 1\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef set_total_gain_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate_mandatory(self):\n\t\tif not (self.company and self.posting_date):\n\t\t\tfrappe.throw(_(\"Please select Company and Posting Date to getting entries\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef before_submit(self):\n\t\tself.remove_accounts_without_gain_loss()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef remove_accounts_without_gain_loss(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef on_cancel(self):\n\t\tself.ignore_linked_doctypes = \"GL Entry\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef check_journal_entry_condition(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef fetch_and_calculate_accounts_data(self):\n\t\taccounts = self.get_accounts_data()\n\t\tif accounts:\n\t\t\tfor acc in accounts:\n\t\t\t\tself.append(\"accounts\", acc)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef get_accounts_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef get_account_balance_from_gle(\n\t\tcompany, posting_date, account, party_type, party, rounding_loss_allowance\n\t):",
      "args": [
        "company",
        "posting_date",
        "account",
        "party_type",
        "party",
        "rounding_loss_allowance"
      ]
    },
    {
      "type": "method",
      "line_start": 249,
      "code_text": "\tdef calculate_new_account_balance(company, posting_date, account_details):",
      "args": [
        "company",
        "posting_date",
        "account_details"
      ]
    },
    {
      "type": "method",
      "line_start": 325,
      "code_text": "\tdef throw_invalid_response_message(self, account_details):\n\t\tif account_details:\n\t\t\tmessage = _(\"No outstanding invoices require exchange rate revaluation\")\n\t\telse:\n\t\t\tmessage = _(\"No outstanding invoices found\")\n\t\tfrappe.msgprint(message)",
      "args": [
        "self",
        "account_details"
      ]
    },
    {
      "type": "method",
      "line_start": 332,
      "code_text": "\tdef get_for_unrealized_gain_loss_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 343,
      "code_text": "\tdef make_jv_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 359,
      "code_text": "\tdef make_jv_for_zero_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef make_jv_for_revaluation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 571,
      "code_text": "def calculate_exchange_rate_using_last_gle(company, account, party_type, party):",
      "args": [
        "company",
        "account",
        "party_type",
        "party"
      ]
    }
  ],
  "erpnext\\edi\\doctype\\common_code\\common_code.py": [
    {
      "type": "function",
      "line_start": 113,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Common Code\", [\"code_list\", \"common_code\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class CommonCode(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tself.validate_distinct_references()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate_distinct_references(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef from_genericode(self, column_map: dict, xml_element: \"etree.Element\"):",
      "args": [
        "self",
        "column_map: dict",
        "xml_element"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def simple_hash(input_string, length=6):\n\treturn hashlib.blake2b(input_string.encode(), digest_size=length // 2).hexdigest()",
      "args": [
        "input_string",
        "length"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def import_genericode(code_list: str, file_name: str, column_map: dict, filters: dict | None = None):",
      "args": [
        "code_list: str",
        "file_name: str",
        "column_map: dict",
        "filters"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard\\supplier_scorecard.py": [
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_timeline_data(doctype, name):",
      "args": [
        "doctype",
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 201,
      "code_text": "def make_all_scorecards(docname):",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 259,
      "code_text": "def get_scorecard_date(period, start_date):",
      "args": [
        "period",
        "start_date"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class SupplierScorecard(Document):"
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate(self):\n\t\tself.validate_standings()\n\t\tself.validate_criteria_weights()\n\t\tself.calculate_total_score()\n\t\tself.update_standing()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef on_update(self):\n\t\tscore = make_all_scorecards(self.name)\n\t\tif score > 0:\n\t\t\tself.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef validate_standings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef validate_criteria_weights(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef calculate_total_score(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef update_standing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 178,
      "code_text": "def daterange(start_date, end_date):\n\tfor n in range(int((end_date - start_date).days) + 1):\n\t\tyield start_date + timedelta(n)",
      "args": [
        "start_date",
        "end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 183,
      "code_text": "def refresh_scorecards():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def make_default_records():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\trial_balance\\test_trial_balance.py": [
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def create_company(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 107,
      "code_text": "def disable_dimension(**args):\n\targs = frappe._dict(args)\n\tdocument_type = args.document_type or \"Branch\"\n\tdimension = frappe.get_doc(\"Accounting Dimension\", document_type)\n\tdimension.disabled = 1\n\tdimension.save()",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def create_accounting_dimension(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def clear_dimension_defaults(dimension_name):\n\taccounting_dimension = frappe.get_doc(\"Accounting Dimension\", dimension_name)\n\taccounting_dimension.dimension_defaults = []\n\taccounting_dimension.save()",
      "args": [
        "dimension_name"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestTrialBalance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_offsetting_entries_for_accounting_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef tearDown(self):\n\t\tclear_dimension_defaults(\"Branch\")\n\t\tdisable_dimension()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_creator\\test_bom_creator.py": [
    {
      "type": "function",
      "line_start": 258,
      "code_text": "def create_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 306,
      "code_text": "def make_bom_creator(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class UnitTestBomCreator(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class TestBOMCreator(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef setUp(self) -> None:\n\t\tcreate_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef test_bom_sub_assembly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_bom_raw_material(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef test_convert_to_sub_assembly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_make_boms_from_bom_creator(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction\\test_bank_transaction.py": [
    {
      "type": "function",
      "line_start": 226,
      "code_text": "def create_bank_account(\n\tbank_name=\"Citi Bank\", gl_account=\"_Test Bank - _TC\", bank_account_name=\"Checking Account\"\n):",
      "args": [
        "bank_name",
        "gl_account",
        "bank_account_name"
      ]
    },
    {
      "type": "function",
      "line_start": 254,
      "code_text": "def create_gl_account(gl_account_name=\"_Test Bank - _TC\"):",
      "args": [
        "gl_account_name"
      ]
    },
    {
      "type": "function",
      "line_start": 268,
      "code_text": "def add_transactions(bank_account=\"_Test Bank - _TC\"):",
      "args": [
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 447,
      "code_text": "def create_loan_and_repayment():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestBankTransaction(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestBankTransaction(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef test_linked_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef test_reconcile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef test_cancel_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_debit_credit_output(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 131,
      "code_text": "\tdef test_already_reconciled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef test_clear_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 196,
      "code_text": "\tdef test_matching_loan_repayment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 330,
      "code_text": "def add_vouchers(gl_account=\"_Test Bank - _TC\"):",
      "args": [
        "gl_account"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\invoice_discounting\\invoice_discounting.py": [
    {
      "type": "function",
      "line_start": 320,
      "code_text": "def get_invoices(filters):",
      "args": [
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 360,
      "code_text": "def get_party_account_based_on_invoice_discounting(sales_invoice):",
      "args": [
        "sales_invoice"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class InvoiceDiscounting(AccountsController):"
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef validate(self):\n\t\tself.validate_mandatory()\n\t\tself.validate_invoices()\n\t\tself.calculate_total_amount()\n\t\tself.set_status()\n\t\tself.set_end_date()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef set_end_date(self):\n\t\tif self.loan_start_date and self.loan_period:\n\t\t\tself.loan_end_date = add_days(self.loan_start_date, self.loan_period)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate_mandatory(self):\n\t\tif self.docstatus == 1 and not (self.loan_start_date and self.loan_period):\n\t\t\tfrappe.throw(_(\"Loan Start Date and Loan Period are mandatory to save the Invoice Discounting\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef validate_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef calculate_total_amount(self):\n\t\tself.total_amount = sum(flt(d.outstanding_amount) for d in self.invoices)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_sales_invoice()\n\t\tself.make_gl_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef on_cancel(self):\n\t\tself.set_status(cancel=1)\n\t\tself.update_sales_invoice()\n\t\tself.make_gl_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef set_status(self, status=None, cancel=0):",
      "args": [
        "self",
        "status",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef update_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef make_gl_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 193,
      "code_text": "\tdef create_disbursement_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 258,
      "code_text": "\tdef close_loan(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\promotional_scheme\\promotional_scheme.py": [
    {
      "type": "function",
      "line_start": 346,
      "code_text": "def prepare_pricing_rule(\n\targs, doc, child_doc, discount_fields, d, docname=None, applicable_for=None, value=None\n):",
      "args": [
        "args",
        "doc",
        "child_doc",
        "discount_fields",
        "d",
        "docname",
        "applicable_for",
        "value"
      ]
    },
    {
      "type": "class",
      "line_start": 73,
      "code_text": "class TransactionExists(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 269,
      "code_text": "def get_pricing_rules(doc, rules=None):",
      "args": [
        "doc",
        "rules"
      ]
    },
    {
      "type": "function",
      "line_start": 283,
      "code_text": "def _get_pricing_rules(doc, child_doc, discount_fields, rules=None):",
      "args": [
        "doc",
        "child_doc",
        "discount_fields",
        "rules"
      ]
    },
    {
      "type": "function",
      "line_start": 332,
      "code_text": "def get_pricing_rule_docname(\n\trow: dict, applicable_for: str | None = None, applicable_for_value: str | None = None",
      "args": [
        "row: dict",
        "applicable_for",
        "applicable_for_value"
      ]
    },
    {
      "type": "class",
      "line_start": 77,
      "code_text": "class PromotionalScheme(Document):"
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef validate_applicable_for(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef validate_pricing_rules(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef get_invalid_pricing_rules(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 212,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef validate_mixed_with_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef update_pricing_rules(self, pricing_rules):",
      "args": [
        "self",
        "pricing_rules"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef on_trash(self):\n\t\tfor rule in frappe.get_all(\"Pricing Rule\", {\"promotional_scheme\": self.name}):\n\t\t\tfrappe.delete_doc(\"Pricing Rule\", rule.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 261,
      "code_text": "def raise_for_transaction_exists(name):\n\tmsg = f\"\"\"You can't change the {frappe.bold(_('Applicable For'))}\n\t\tbecause transactions are present against the Promotional Scheme {frappe.bold(name)}. \"\"\"\n\tmsg += \"Kindly disable this Promotional Scheme and create new for new Applicable For.\"\n\n\tfrappe.throw(_(msg), TransactionExists)",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 363,
      "code_text": "def set_args(args, pr, doc, child_doc, discount_fields, child_doc_fields):",
      "args": [
        "args",
        "pr",
        "doc",
        "child_doc",
        "discount_fields",
        "child_doc_fields"
      ]
    },
    {
      "type": "function",
      "line_start": 388,
      "code_text": "def get_args_for_pricing_rule(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\templates\\pages\\projects.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 116,
      "code_text": "def get_attachments(project):\n\treturn frappe.get_all(\n\t\t\"File\",\n\t\tfilters={\"attached_to_name\": project, \"attached_to_doctype\": \"Project\", \"is_private\": 0},\n\t\tfields=[\"file_name\", \"file_url\", \"file_size\"],\n\t)",
      "args": [
        "project"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_tasks(project, start=0, search=None, item_status=None):",
      "args": [
        "project",
        "start",
        "search",
        "item_status"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def get_timesheets(project, start=0, search=None):",
      "args": [
        "project",
        "start",
        "search"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_task_html(project, start=0, item_status=None):",
      "args": [
        "project",
        "start",
        "item_status"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_timesheet_html(project, start=0):\n\treturn frappe.render_template(\n\t\t\"erpnext/templates/includes/projects/project_timesheets.html\",\n\t\t{\"doc\": {\"timesheets\": get_timesheets(project, start)}},\n\t\tis_path=True,\n\t)",
      "args": [
        "project",
        "start"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\blanket_order\\test_blanket_order.py": [
    {
      "type": "function",
      "line_start": 126,
      "code_text": "def make_blanket_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestBlanketOrder(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestBlanketOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.flags.args = frappe._dict()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_sales_order_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_purchase_order_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef test_blanket_order_allowance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef test_party_item_code(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier\\test_supplier.py": [
    {
      "type": "function",
      "line_start": 163,
      "code_text": "def create_supplier(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class UnitTestSupplier(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class TestSupplier(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef test_get_supplier_group_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_supplier_default_payment_terms(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef test_supplier_disabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef test_supplier_country(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef test_party_details_tax_category(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 189,
      "code_text": "class TestSupplierPortal(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_portal_user_can_access_supplier_data(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\startup\\boot.py": [
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def bootinfo(bootinfo):\n\tif bootinfo.get(\"user\") and bootinfo[\"user\"].get(\"name\"):\n\t\tbootinfo[\"user\"][\"employee\"] = \"\"\n\t\temployee = frappe.db.get_value(\"Employee\", {\"user_id\": bootinfo[\"user\"][\"name\"]}, \"name\")\n\t\tif employee:\n\t\t\tbootinfo[\"user\"][\"employee\"] = employee",
      "args": [
        "bootinfo"
      ]
    },
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def boot_session(bootinfo):",
      "args": [
        "bootinfo"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def update_page_info(bootinfo):",
      "args": [
        "bootinfo"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection\\test_quality_inspection.py": [
    {
      "type": "function",
      "line_start": 290,
      "code_text": "def create_quality_inspection(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 325,
      "code_text": "def create_quality_inspection_parameter(parameter):\n\tif not frappe.db.exists(\"Quality Inspection Parameter\", parameter):\n\t\tfrappe.get_doc(\n\t\t\t{\"doctype\": \"Quality Inspection Parameter\", \"parameter\": parameter, \"description\": parameter}\n\t\t).insert()",
      "args": [
        "parameter"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class UnitTestQualityInspection(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 28,
      "code_text": "class TestQualityInspection(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tcreate_item(\"_Test Item with QA\")\n\t\tfrappe.db.set_value(\"Item\", \"_Test Item with QA\", \"inspection_required_before_delivery\", 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_qa_for_delivery(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_qa_not_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_value_based_qi_readings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 99,
      "code_text": "\tdef test_formula_based_qi_readings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef test_make_quality_inspections_from_linked_document(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef test_rejected_qi_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 196,
      "code_text": "\tdef test_qi_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef test_diff_number_format(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef test_delete_quality_inspection_linked_with_stock_entry(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\request_for_quotation\\test_request_for_quotation.py": [
    {
      "type": "function",
      "line_start": 185,
      "code_text": "def make_request_for_quotation(**args) -> \"RequestforQuotation\":",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 222,
      "code_text": "def get_supplier_data():\n\treturn [\n\t\t{\"supplier\": \"_Test Supplier\", \"supplier_name\": \"_Test Supplier\"},\n\t\t{\"supplier\": \"_Test Supplier 1\", \"supplier_name\": \"_Test Supplier 1\"},\n\t]",
      "args": []
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class UnitTestRequestForQuotation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 33,
      "code_text": "class TestRequestforQuotation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_rfq_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_quote_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_make_supplier_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef test_make_supplier_quotation_with_special_characters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef test_make_supplier_quotation_from_portal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef test_make_multi_uom_supplier_quotation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef test_make_rfq_from_opportunity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 147,
      "code_text": "\tdef test_get_link(self):\n\t\trfq = make_request_for_quotation()\n\t\tparsed_link = urlparse(rfq.get_link())\n\t\tself.assertEqual(parsed_link.path, f\"/rfq/{rfq.name}\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef test_get_pdf(self):\n\t\trfq = make_request_for_quotation()\n\t\tget_pdf(rfq.name, rfq.get(\"suppliers\")[0].supplier)\n\t\tself.assertEqual(frappe.local.response.type, \"pdf\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_portal_user_with_new_supplier(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_stock_calculated\\test_bom_stock_calculated.py": [
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def create_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def get_expected_data(bom, qty_to_make):",
      "args": [
        "bom",
        "qty_to_make"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestBOMStockCalculated(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):\n\t\tself.fg_item, self.rm_items = create_items()\n\t\tself.boms = create_boms(self.fg_item, self.rm_items)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef test_bom_stock_calculated(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 74,
      "code_text": "def create_boms(fg_item, rm_items):",
      "args": [
        "fg_item",
        "rm_items"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\delivery_trip\\test_delivery_trip.py": [
    {
      "type": "function",
      "line_start": 113,
      "code_text": "def create_address(driver):",
      "args": [
        "driver"
      ]
    },
    {
      "type": "function",
      "line_start": 135,
      "code_text": "def create_driver():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class UnitTestDeliveryTrip(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class TestDeliveryTrip(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.sql(\"delete from `tabDriver`\")\n\t\tfrappe.db.sql(\"delete from `tabVehicle`\")\n\t\tfrappe.db.sql(\"delete from `tabEmail Template`\")\n\t\tfrappe.db.sql(\"delete from `tabDelivery Trip`\")\n\t\treturn super().tearDown()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_delivery_trip_notify_customers(self):\n\t\tnotify_customers(delivery_trip=self.delivery_trip.name)\n\t\tself.delivery_trip.load_from_db()\n\t\tself.assertEqual(self.delivery_trip.email_notification_sent, 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_unoptimized_route_list_without_locks(self):\n\t\troute_list = self.delivery_trip.form_route_list(optimize=False)\n\n\t\t# Return a single list of destinations, from home address and back\n\t\tself.assertEqual(len(route_list), 1)\n\t\tself.assertEqual(len(route_list[0]), 4)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef test_unoptimized_route_list_with_locks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef test_optimized_route_list_without_locks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef test_optimized_route_list_with_locks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef test_delivery_trip_status_draft(self):\n\t\tself.assertEqual(self.delivery_trip.status, \"Draft\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef test_delivery_trip_status_scheduled(self):\n\t\tself.delivery_trip.submit()\n\t\tself.assertEqual(self.delivery_trip.status, \"Scheduled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_delivery_trip_status_cancelled(self):\n\t\tself.delivery_trip.submit()\n\t\tself.delivery_trip.cancel()\n\t\tself.assertEqual(self.delivery_trip.status, \"Cancelled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef test_delivery_trip_status_in_transit(self):\n\t\tself.delivery_trip.submit()\n\t\tself.delivery_trip.delivery_stops[0].visited = 1\n\t\tself.delivery_trip.save()\n\t\tself.assertEqual(self.delivery_trip.status, \"In Transit\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef test_delivery_trip_status_completed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 151,
      "code_text": "def create_delivery_notification():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 169,
      "code_text": "def create_vehicle():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def create_delivery_trip(driver, address, contact=None):",
      "args": [
        "driver",
        "address",
        "contact"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\lead\\test_lead.py": [
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def make_lead(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 158,
      "code_text": "def create_event(subject, starts_on, reference_type, reference_name):",
      "args": [
        "subject",
        "starts_on",
        "reference_type",
        "reference_name"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestLead(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_make_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_make_customer_from_organization(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef test_create_lead_and_unlinking_dynamic_links(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef test_prospect_creation_from_lead(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 108,
      "code_text": "\tdef test_opportunity_from_lead(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef test_copy_events_from_lead_to_prospect(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def create_todo(description, reference_type, reference_name):",
      "args": [
        "description",
        "reference_type",
        "reference_name"
      ]
    }
  ],
  "erpnext\\manufacturing\\report\\bom_stock_report\\test_bom_stock_report.py": [
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def create_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_expected_data(bom, warehouse, qty_to_produce, show_exploded_view=False):",
      "args": [
        "bom",
        "warehouse",
        "qty_to_produce",
        "show_exploded_view"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestBomStockReport(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):\n\t\tself.warehouse = \"_Test Warehouse - _TC\"\n\t\tself.fg_item, self.rm_items = create_items()\n\t\tmake_stock_entry(target=self.warehouse, item_code=self.rm_items[0], qty=20, basic_rate=100)\n\t\tmake_stock_entry(target=self.warehouse, item_code=self.rm_items[1], qty=40, basic_rate=200)\n\t\tself.bom = make_bom(item=self.fg_item, quantity=1, raw_materials=self.rm_items, rm_qty=10)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_bom_stock_report(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_queries.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def add_default_params(func, doctype):\n\treturn partial(func, doctype=doctype, txt=\"\", searchfield=\"name\", start=0, page_len=20, filters=None)",
      "args": [
        "func",
        "doctype"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestQueries(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef assert_nested_in(self, item, container):\n\t\tself.assertIn(item, [vals for tuples in container for vals in tuples])",
      "args": [
        "self",
        "item",
        "container"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_employee_query(self):\n\t\tquery = add_default_params(queries.employee_query, \"Employee\")\n\n\t\tself.assertGreaterEqual(len(query(txt=\"_Test Employee\")), 3)\n\t\tself.assertGreaterEqual(len(query(txt=\"_Test Employee 1\")), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_lead_query(self):\n\t\tquery = add_default_params(queries.lead_query, \"Lead\")\n\n\t\tself.assertGreaterEqual(len(query(txt=\"_Test Lead\")), 4)\n\t\tself.assertEqual(len(query(txt=\"_Test Lead 4\")), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef test_item_query(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_bom_qury(self):\n\t\tquery = add_default_params(queries.bom, \"BOM\")\n\n\t\tself.assertGreaterEqual(len(query(txt=\"_Test Item Home Desktop Manufactured\")), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef test_project_query(self):\n\t\tquery = add_default_params(queries.get_project_name, \"Project\")\n\n\t\tself.assertGreaterEqual(len(query(txt=\"_Test Project\")), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef test_account_query(self):\n\t\tquery = add_default_params(queries.get_account_list, \"Account\")\n\n\t\tdebtor_accounts = query(txt=\"Debtors\", filters={\"company\": \"_Test Company\"})\n\t\tself.assert_nested_in(\"Debtors - _TC\", debtor_accounts)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef test_income_account_query(self):\n\t\tquery = add_default_params(queries.get_income_account, \"Account\")\n\n\t\tself.assertGreaterEqual(len(query(filters={\"company\": \"_Test Company\"})), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef test_expense_account_query(self):\n\t\tquery = add_default_params(queries.get_expense_account, \"Account\")\n\n\t\tself.assertGreaterEqual(len(query(filters={\"company\": \"_Test Company\"})), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef test_warehouse_query(self):\n\t\tquery = add_default_params(queries.warehouse_query, \"Account\")\n\n\t\twh = query(filters=[[\"Bin\", \"item_code\", \"=\", \"_Test Item\"]])\n\t\tself.assertGreaterEqual(len(wh), 1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef test_default_uoms(self):\n\t\tself.assertGreaterEqual(frappe.db.count(\"UOM\", {\"enabled\": 1}), 10)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_employee_query_with_user_permissions(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_review\\quality_review.py": [
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def create_review(goal):\n\tgoal = frappe.get_doc(\"Quality Goal\", goal)\n\n\treview = frappe.get_doc({\"doctype\": \"Quality Review\", \"goal\": goal.name, \"date\": frappe.utils.getdate()})\n\n\treview.insert(ignore_permissions=True)",
      "args": [
        "goal"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def review():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityReview(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef set_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def get_quarter(month):\n\tif month in [\"January\", \"April\", \"July\", \"October\"]:\n\t\treturn True\n\telse:\n\t\treturn False",
      "args": [
        "month"
      ]
    }
  ],
  "erpnext\\setup\\demo.py": [
    {
      "type": "function",
      "line_start": 228,
      "code_text": "def get_warehouse(company):\n\twarehouses = frappe.db.get_all(\"Warehouse\", {\"company\": company, \"is_group\": 0})\n\treturn warehouses[randint(0, 3)].name",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 220,
      "code_text": "def read_data_file_using_hooks(doctype):\n\tpath = os.path.join(os.path.dirname(__file__), \"demo_data\")\n\twith open(os.path.join(path, doctype + \".json\")) as f:\n\t\tdata = f.read()\n\n\treturn data",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def setup_demo_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def get_random_date(start_date, start_range, end_range):\n\treturn add_days(start_date, randint(start_range, end_range))",
      "args": [
        "start_date",
        "start_range",
        "end_range"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def clear_demo_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def create_demo_company():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 84,
      "code_text": "def process_masters():\n\tfor doctype in frappe.get_hooks(\"demo_master_doctypes\"):\n\t\tdata = read_data_file_using_hooks(doctype)\n\t\tif data:\n\t\t\tfor item in json.loads(data):\n\t\t\t\tcreate_demo_record(item)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def create_demo_record(doctype):\n\tfrappe.get_doc(doctype).insert(ignore_permissions=True)",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def make_transactions(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def create_transaction(doctype, company, start_date):",
      "args": [
        "doctype",
        "company",
        "start_date"
      ]
    },
    {
      "type": "function",
      "line_start": 145,
      "code_text": "def convert_order_to_invoices():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 180,
      "code_text": "def create_transaction_deletion_record(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def clear_masters():\n\tfor doctype in frappe.get_hooks(\"demo_master_doctypes\")[::-1]:\n\t\tdata = read_data_file_using_hooks(doctype)\n\t\tif data:\n\t\t\tfor item in json.loads(data):\n\t\t\t\tclear_demo_record(item)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 197,
      "code_text": "def clear_demo_record(document):",
      "args": [
        "document"
      ]
    },
    {
      "type": "function",
      "line_start": 215,
      "code_text": "def delete_company(company):\n\tfrappe.db.set_single_value(\"Global Defaults\", \"demo_company\", \"\")\n\tfrappe.delete_doc(\"Company\", company, ignore_permissions=True)",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\item_group\\item_group.py": [
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def get_item_group_defaults(item, company):",
      "args": [
        "item",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 74,
      "code_text": "def get_child_item_groups(item_group_name):",
      "args": [
        "item_group_name"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class ItemGroup(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tif not self.parent_item_group and not frappe.flags.in_test:\n\t\t\tif frappe.db.exists(\"Item Group\", _(\"All Item Groups\")):\n\t\t\t\tself.parent_item_group = _(\"All Item Groups\")\n\t\tself.validate_item_group_defaults()\n\t\tself.check_item_tax()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef check_item_tax(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef on_update(self):\n\t\tNestedSet.on_update(self)\n\t\tself.validate_one_root()\n\t\tself.delete_child_item_groups_key()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef on_trash(self):\n\t\tNestedSet.on_trash(self, allow_root_deletion=True)\n\t\tself.delete_child_item_groups_key()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef delete_child_item_groups_key(self):\n\t\tfrappe.cache().hdel(\"child_item_groups\", self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef validate_item_group_defaults(self):\n\t\tfrom erpnext.stock.doctype.item.item import validate_item_default_company_links\n\n\t\tvalidate_item_default_company_links(self.item_group_defaults)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_request\\test_payment_request.py": [
    {
      "type": "class",
      "line_start": 61,
      "code_text": "class UnitTestPaymentRequest(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 70,
      "code_text": "class TestPaymentRequest(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef test_payment_request_linkings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 136,
      "code_text": "\tdef test_payment_channels(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef test_payment_entry_against_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef test_multiple_payment_entry_against_purchase_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef test_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 365,
      "code_text": "\tdef test_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 393,
      "code_text": "\tdef test_multiple_payment_entries_against_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 415,
      "code_text": "\tdef test_conversion_on_foreign_currency_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 431,
      "code_text": "\tdef test_multiple_payment_if_partially_paid_for_same_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 509,
      "code_text": "\tdef test_multiple_payment_if_partially_paid_for_multi_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 577,
      "code_text": "\tdef test_single_payment_with_payment_term_for_same_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 627,
      "code_text": "\tdef test_single_payment_with_payment_term_for_multi_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 670,
      "code_text": "\tdef test_payment_cancel_process(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 715,
      "code_text": "\tdef test_partial_paid_invoice_with_payment_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 733,
      "code_text": "\tdef test_partial_paid_invoice_with_more_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 772,
      "code_text": "\tdef test_consider_journal_entry_and_return_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 801,
      "code_text": "def test_partial_paid_invoice_with_submitted_payment_entry(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_program\\loyalty_program.py": [
    {
      "type": "function",
      "line_start": 81,
      "code_text": "def get_loyalty_program_details_with_points(\n\tcustomer,\n\tloyalty_program=None,\n\texpiry_date=None,\n\tcompany=None,\n\tsilent=False,\n\tinclude_expired_entry=False,\n\tcurrent_transaction_amount=0,\n):",
      "args": [
        "customer",
        "loyalty_program",
        "expiry_date",
        "company",
        "silent",
        "include_expired_entry",
        "current_transaction_amount"
      ]
    },
    {
      "type": "function",
      "line_start": 151,
      "code_text": "def validate_loyalty_points(ref_doc, points_to_redeem):",
      "args": [
        "ref_doc",
        "points_to_redeem"
      ]
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def get_loyalty_details(\n\tcustomer, loyalty_program, expiry_date=None, company=None, include_expired_entry=False\n):",
      "args": [
        "customer",
        "loyalty_program",
        "expiry_date",
        "company",
        "include_expired_entry"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class LoyaltyProgram(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tself.validate_lowest_tier()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate_lowest_tier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 112,
      "code_text": "def get_loyalty_program_details(\n\tcustomer,\n\tloyalty_program=None,\n\texpiry_date=None,\n\tcompany=None,\n\tsilent=False,\n\tinclude_expired_entry=False,\n):",
      "args": [
        "customer",
        "loyalty_program",
        "expiry_date",
        "company",
        "silent",
        "include_expired_entry"
      ]
    },
    {
      "type": "function",
      "line_start": 140,
      "code_text": "def get_redeemption_factor(loyalty_program=None, customer=None):",
      "args": [
        "loyalty_program",
        "customer"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center_allocation\\test_cost_center_allocation.py": [
    {
      "type": "function",
      "line_start": 194,
      "code_text": "def create_cost_center_allocation(\n\tcompany,\n\tmain_cost_center,\n\tallocation_percentages,\n\tvalid_from=None,\n\tvalid_upto=None,\n\tsave=True,\n\tsubmit=True,\n):",
      "args": [
        "company",
        "main_cost_center",
        "allocation_percentages",
        "valid_from",
        "valid_upto",
        "save",
        "submit"
      ]
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestCostCenterAllocation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_gle_based_on_cost_center_allocation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef test_main_cost_center_cant_be_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef test_invalid_main_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef test_if_child_cost_center_has_any_allocation_record(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef test_total_percentage(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef test_valid_from_based_on_existing_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef test_multiple_cost_center_allocation_on_same_main_cost_center(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\install.py": [
    {
      "type": "function",
      "line_start": 47,
      "code_text": "def make_default_operations():\n\tfor operation in [\"Assembly\"]:\n\t\tif not frappe.db.exists(\"Operation\", operation):\n\t\t\tdoc = frappe.get_doc({\"doctype\": \"Operation\", \"name\": operation})\n\t\t\tdoc.flags.ignore_mandatory = True\n\t\t\tdoc.insert(ignore_permissions=True)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 81,
      "code_text": "def setup_currency_exchange():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def create_marketgin_campagin_custom_fields():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 143,
      "code_text": "def create_default_success_action():\n\tfor success_action in get_default_success_action():\n\t\tif not frappe.db.exists(\"Success Action\", success_action.get(\"ref_doctype\")):\n\t\t\tdoc = frappe.get_doc(success_action)\n\t\t\tdoc.insert(ignore_permissions=True)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 150,
      "code_text": "def create_default_energy_point_rules():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def add_standard_navbar_items():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 20,
      "code_text": "def after_install():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def check_setup_wizard_not_completed():\n\tif cint(frappe.db.get_single_value(\"System Settings\", \"setup_complete\") or 0):\n\t\tmessage = \"\"\"ERPNext can only be installed on a fresh site where the setup wizard is not completed.\nYou can reinstall this site (after saving your data) using: bench --site [sitename] reinstall\"\"\"\n\t\tfrappe.throw(message)  # nosemgrep",
      "args": []
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def set_single_defaults():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def create_print_setting_custom_fields():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 162,
      "code_text": "def add_company_to_session_defaults():\n\tsettings = frappe.get_single(\"Session Default Settings\")\n\tsettings.append(\"session_defaults\", {\"ref_doctype\": \"Company\"})\n\tsettings.save()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 227,
      "code_text": "def add_app_name():\n\tfrappe.db.set_single_value(\"System Settings\", \"app_name\", \"ERPNext\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 231,
      "code_text": "def update_roles():\n\twebsite_user_roles = (\"Customer\", \"Supplier\")\n\tfor role in website_user_roles:\n\t\tfrappe.db.set_value(\"Role\", role, \"desk_access\", 0)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 237,
      "code_text": "def create_default_role_profiles():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\pos_profile\\pos_profile.py": [
    {
      "type": "function",
      "line_start": 246,
      "code_text": "def get_child_nodes(group_type, root):",
      "args": [
        "group_type",
        "root"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def get_item_groups(pos_profile):",
      "args": [
        "pos_profile"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class POSProfile(Document):"
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate(self):\n\t\tself.validate_default_profile()\n\t\tself.validate_all_link_fields()\n\t\tself.validate_duplicate_groups()\n\t\tself.validate_payment_methods()\n\t\tself.validate_accounting_dimensions()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef validate_accounting_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef validate_default_profile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef validate_all_link_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef validate_duplicate_groups(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef validate_payment_methods(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef on_update(self):\n\t\tself.set_defaults()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 185,
      "code_text": "\tdef on_trash(self):\n\t\tself.set_defaults(include_current_pos=False)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef set_defaults(self, include_current_pos=True):",
      "args": [
        "self",
        "include_current_pos"
      ]
    },
    {
      "type": "function",
      "line_start": 230,
      "code_text": "def get_permitted_nodes(group_type):",
      "args": [
        "group_type"
      ]
    },
    {
      "type": "function",
      "line_start": 257,
      "code_text": "def pos_profile_query(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 301,
      "code_text": "def set_default_profile(pos_profile, company):",
      "args": [
        "pos_profile",
        "company"
      ]
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order\\test_subcontracting_order.py": [
    {
      "type": "function",
      "line_start": 713,
      "code_text": "def create_subcontracting_order(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class UnitTestSubcontractingOrder(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 45,
      "code_text": "class TestSubcontractingOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef setUp(self):\n\t\tmake_subcontracted_items()\n\t\tmake_raw_materials()\n\t\tmake_service_items()\n\t\tmake_bom_for_subcontracted_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_set_missing_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef test_update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 124,
      "code_text": "\tdef test_make_rm_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef test_make_rm_stock_entry_for_serial_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef test_make_rm_stock_entry_for_batch_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 195,
      "code_text": "\tdef test_make_rm_stock_entry_for_batch_items_with_less_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 229,
      "code_text": "\tdef test_update_reserved_qty_for_subcontracting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef test_exploded_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 375,
      "code_text": "\tdef test_backflush_based_on_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 472,
      "code_text": "\tdef test_supplied_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 545,
      "code_text": "\tdef test_get_materials_from_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 573,
      "code_text": "\tdef test_ordered_qty_for_subcontracting_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 634,
      "code_text": "\tdef test_requested_qty_for_subcontracting_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 690,
      "code_text": "\tdef test_subcontracting_order_rm_required_items_for_precision(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction\\test_auto_match_party.py": [
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def create_supplier_for_match(supplier_name=\"John Doe & Co.\", iban=None, account_no=None):",
      "args": [
        "supplier_name",
        "iban",
        "account_no"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def create_bank_transaction(\n\tdescription=None,\n\twithdrawal=0,\n\tdeposit=0,\n\ttransaction_id=None,\n\tparty_name=None,\n\taccount_no=None,\n\tiban=None,\n):",
      "args": [
        "description",
        "withdrawal",
        "deposit",
        "transaction_id",
        "party_name",
        "account_no",
        "iban"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class UnitTestBankTransaction(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestAutoMatchParty(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef setUpClass(cls):\n\t\tcreate_bank_account()\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"enable_party_matching\", 1)\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"enable_fuzzy_matching\", 1)\n\t\treturn super().setUpClass()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"enable_party_matching\", 0)\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"enable_fuzzy_matching\", 0)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_match_by_account_number(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef test_match_by_iban(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_match_by_party_name(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_match_by_description(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef test_skip_match_if_multiple_close_results(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\erpnext_integrations\\doctype\\plaid_settings\\plaid_settings.py": [
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def add_bank_accounts(response, bank, company):",
      "args": [
        "response",
        "bank",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 184,
      "code_text": "def add_account_type(account_type):\n\ttry:\n\t\tfrappe.get_doc({\"doctype\": \"Bank Account Type\", \"account_type\": account_type}).insert()\n\texcept Exception:\n\t\tfrappe.throw(frappe.get_traceback())",
      "args": [
        "account_type"
      ]
    },
    {
      "type": "function",
      "line_start": 191,
      "code_text": "def add_account_subtype(account_subtype):\n\ttry:\n\t\tfrappe.get_doc({\"doctype\": \"Bank Account Subtype\", \"account_subtype\": account_subtype}).insert()\n\texcept Exception:\n\t\tfrappe.throw(frappe.get_traceback())",
      "args": [
        "account_subtype"
      ]
    },
    {
      "type": "function",
      "line_start": 257,
      "code_text": "def new_bank_transaction(transaction):",
      "args": [
        "transaction"
      ]
    },
    {
      "type": "function",
      "line_start": 342,
      "code_text": "def get_company(bank_account_name):",
      "args": [
        "bank_account_name"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class PlaidSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef get_link_token():\n\t\tplaid = PlaidConnector()\n\t\treturn plaid.get_link_token()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 41,
      "code_text": "def get_plaid_configuration():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def add_institution(token, response):",
      "args": [
        "token",
        "response"
      ]
    },
    {
      "type": "function",
      "line_start": 198,
      "code_text": "def sync_transactions(bank, bank_account):",
      "args": [
        "bank",
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 230,
      "code_text": "def get_transactions(bank, bank_account=None, start_date=None, end_date=None):",
      "args": [
        "bank",
        "bank_account",
        "start_date",
        "end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 316,
      "code_text": "def automatic_synchronization():\n\tsettings = frappe.get_doc(\"Plaid Settings\", \"Plaid Settings\")\n\tif settings.enabled == 1 and settings.automatic_sync == 1:\n\t\tenqueue_synchronization()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 323,
      "code_text": "def enqueue_synchronization():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 337,
      "code_text": "def get_link_token_for_update(access_token):\n\tplaid = PlaidConnector(access_token)\n\treturn plaid.get_link_token(update_mode=True)",
      "args": [
        "access_token"
      ]
    },
    {
      "type": "function",
      "line_start": 357,
      "code_text": "def update_bank_account_ids(response):\n\tdata = json.loads(response)\n\tinstitution_name = data[\"institution\"][\"name\"]\n\tbank = frappe.get_doc(\"Bank\", institution_name).as_dict()\n\tbank_account_name = f\"{data['account']['name']} - {institution_name}\"\n\treturn add_bank_accounts(response, bank, get_company(bank_account_name))",
      "args": [
        "response"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\invoice_discounting\\test_invoice_discounting.py": [
    {
      "type": "function",
      "line_start": 309,
      "code_text": "def create_invoice_discounting(invoices, **args):",
      "args": [
        "invoices",
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestInvoiceDiscounting(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_total_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_gl_entries_in_base_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_loan_on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef test_on_disbursed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 139,
      "code_text": "\tdef test_on_close_after_loan_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef test_on_close_after_loan_period_after_inv_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 210,
      "code_text": "\tdef test_on_close_before_loan_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 238,
      "code_text": "\tdef test_make_payment_before_loan_period(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 270,
      "code_text": "\tdef test_make_payment_before_after_period(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\templates\\pages\\rfq.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def check_supplier_has_docname_access(supplier):",
      "args": [
        "supplier"
      ]
    },
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def get_supplier():\n\tdoctype = frappe.form_dict.doctype\n\tparties_doctype = \"Request for Quotation Supplier\" if doctype == \"Request for Quotation\" else doctype\n\tcustomers, suppliers = get_customers_suppliers(parties_doctype, frappe.session.user)\n\n\treturn suppliers[0] if suppliers else \"\"",
      "args": []
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def unauthorized_user(supplier):\n\tstatus = check_supplier_has_docname_access(supplier) or False\n\tif status is False:\n\t\tfrappe.throw(_(\"Not Permitted\"), frappe.PermissionError)",
      "args": [
        "supplier"
      ]
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def update_supplier_details(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def get_link_quotation(supplier, rfq):",
      "args": [
        "supplier",
        "rfq"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_ledger_entry\\test_payment_ledger_entry.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class UnitTestPaymentLedgerEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class TestPaymentLedgerEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef setUp(self):\n\t\tself.ple = qb.DocType(\"Payment Ledger Entry\")\n\t\tself.create_company()\n\t\tself.create_item()\n\t\tself.create_customer()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef create_item(self):\n\t\titem_name = \"_Test PL Item\"\n\t\titem = create_item(\n\t\t\titem_code=item_name, is_stock_item=0, company=self.company, warehouse=self.warehouse\n\t\t)\n\t\tself.item = item if isinstance(item, str) else item.item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef create_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 95,
      "code_text": "\tdef create_sales_invoice(\n\t\tself, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef create_payment_entry(self, amount=100, posting_date=None):",
      "args": [
        "self",
        "amount",
        "posting_date"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef create_sales_order(self, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef create_journal_entry(self, acc1=None, acc2=None, amount=0, posting_date=None, cost_center=None):",
      "args": [
        "self",
        "acc1",
        "acc2",
        "amount",
        "posting_date",
        "cost_center"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef test_payment_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 248,
      "code_text": "\tdef test_partial_payment_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 296,
      "code_text": "\tdef test_cr_note_against_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 364,
      "code_text": "\tdef test_je_against_inv_and_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 461,
      "code_text": "\tdef test_multi_payment_unlink_on_invoice_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 490,
      "code_text": "\tdef test_multi_je_unlink_on_invoice_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 527,
      "code_text": "\tdef test_advance_payment_unlink_on_order_cancellation(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_statement_import\\bank_statement_import.py": [
    {
      "type": "function",
      "line_start": 144,
      "code_text": "def start_import(data_import, bank_account, import_file_path, google_sheets_url, bank, template_options):",
      "args": [
        "data_import",
        "bank_account",
        "import_file_path",
        "google_sheets_url",
        "bank",
        "template_options"
      ]
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class BankStatementImport(DataImport):"
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef start_import(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_preview_from_template(data_import, import_file=None, google_sheets_url=None):\n\treturn frappe.get_doc(\"Bank Statement Import\", data_import).get_preview_from_template(\n\t\timport_file, google_sheets_url\n\t)",
      "args": [
        "data_import",
        "import_file",
        "google_sheets_url"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def form_start_import(data_import):\n\tjob_id = frappe.get_doc(\"Bank Statement Import\", data_import).start_import()\n\treturn job_id is not None",
      "args": [
        "data_import"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def download_errored_template(data_import_name):\n\tdata_import = frappe.get_doc(\"Bank Statement Import\", data_import_name)\n\tdata_import.export_errored_rows()",
      "args": [
        "data_import_name"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def download_import_log(data_import_name):\n\treturn frappe.get_doc(\"Bank Statement Import\", data_import_name).download_import_log()",
      "args": [
        "data_import_name"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def parse_data_from_template(raw_data):",
      "args": [
        "raw_data"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def update_mapping_db(bank, template_options):",
      "args": [
        "bank",
        "template_options"
      ]
    },
    {
      "type": "function",
      "line_start": 187,
      "code_text": "def add_bank_account(data, bank_account):",
      "args": [
        "data",
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 203,
      "code_text": "def write_files(import_file, data):",
      "args": [
        "import_file",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 217,
      "code_text": "def write_xlsx(data, sheet_name, wb=None, column_widths=None, file_path=None):",
      "args": [
        "data",
        "sheet_name",
        "wb",
        "column_widths",
        "file_path"
      ]
    },
    {
      "type": "function",
      "line_start": 253,
      "code_text": "def get_import_status(docname):",
      "args": [
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 281,
      "code_text": "def get_import_logs(docname: str):",
      "args": [
        "docname: str"
      ]
    },
    {
      "type": "function",
      "line_start": 294,
      "code_text": "def upload_bank_statement(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_dimension\\test_accounting_dimension.py": [
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def disable_dimension():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 85,
      "code_text": "def create_dimension():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestAccountingDimension(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUp(self):\n\t\tcreate_dimension()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef test_dimension_against_sales_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_dimension_against_journal_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef test_mandatory(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef tearDown(self):\n\t\tdisable_dimension()\n\t\tfrappe.flags.accounting_dimensions_details = None\n\t\tfrappe.flags.dimension_filter_map = None",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\templates\\pages\\order.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def get_attachments(dt, dn):\n\treturn frappe.get_all(\n\t\t\"File\",\n\t\tfields=[\"name\", \"file_name\", \"file_url\", \"is_private\"],\n\t\tfilters={\"attached_to_name\": dn, \"attached_to_doctype\": dt, \"is_private\": 0},\n\t)",
      "args": [
        "dt",
        "dn"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_payment_details(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_closing_entry\\pos_closing_entry.py": [
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def make_closing_entry_from_opening(opening_entry):",
      "args": [
        "opening_entry"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class POSClosingEntry(StatusUpdater):"
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef validate_duplicate_pos_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef validate_pos_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef get_payment_reconciliation_details(self):\n\t\tcurrency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\t\treturn frappe.render_template(\n\t\t\t\"erpnext/accounts/doctype/pos_closing_entry/closing_voucher_details.html\",\n\t\t\t{\"data\": self, \"currency\": currency},\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 133,
      "code_text": "\tdef on_cancel(self):\n\t\tunconsolidate_pos_invoices(closing_entry=self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef retry(self):\n\t\tconsolidate_pos_invoices(closing_entry=self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef update_opening_entry(self, for_cancel=False):\n\t\topening_entry = frappe.get_doc(\"POS Opening Entry\", self.pos_opening_entry)\n\t\topening_entry.pos_closing_entry = self.name if not for_cancel else None\n\t\topening_entry.set_status()\n\t\topening_entry.save()",
      "args": [
        "self",
        "for_cancel"
      ]
    },
    {
      "type": "function",
      "line_start": 149,
      "code_text": "def get_cashiers(doctype, txt, searchfield, start, page_len, filters):\n\tcashiers_list = frappe.get_all(\"POS Profile User\", filters=filters, fields=[\"user\"], as_list=1)\n\treturn [c for c in cashiers_list]",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 155,
      "code_text": "def get_pos_invoices(start, end, pos_profile, user):",
      "args": [
        "start",
        "end",
        "pos_profile",
        "user"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_profile\\test_pos_profile.py": [
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def make_pos_profile(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestPOSProfile(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef test_pos_profile(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_customers_list(pos_profile=None):",
      "args": [
        "pos_profile"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def get_items_list(pos_profile, company):",
      "args": [
        "pos_profile",
        "company"
      ]
    }
  ],
  "erpnext\\buying\\utils.py": [
    {
      "type": "function",
      "line_start": 109,
      "code_text": "def check_on_hold_or_closed_status(doctype, docname) -> None:\n\tstatus = frappe.db.get_value(doctype, docname, \"status\")\n\n\tif status in (\"Closed\", \"On Hold\"):\n\t\tfrappe.throw(_(\"{0} {1} status is {2}\").format(doctype, docname, status), frappe.InvalidStatusError)",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 46,
      "code_text": "def validate_for_items(doc) -> None:",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def update_last_purchase_rate(doc, is_submit) -> None:",
      "args": [
        "doc",
        "is_submit"
      ]
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def set_stock_levels(row) -> None:",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def validate_item_and_get_basic_data(row) -> dict:",
      "args": [
        "row"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def validate_stock_item_warehouse(row, item) -> None:",
      "args": [
        "row",
        "item"
      ]
    },
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def get_linked_material_requests(items):",
      "args": [
        "items"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center_allocation\\cost_center_allocation.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class MainCostCenterCantBeChild(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class InvalidMainCostCenter(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class InvalidChildCostCenter(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class WrongPercentageAllocation(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class InvalidDateError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 30,
      "code_text": "class CostCenterAllocation(Document):"
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself._skip_from_date_validation = False",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef validate_total_allocation_percentage(self):\n\t\ttotal_percentage = sum([flt(d.percentage) for d in self.get(\"allocation_percentages\", [])])\n\n\t\tif total_percentage != 100:\n\t\t\tfrappe.throw(_(\"Total percentage against cost centers should be 100\"), WrongPercentageAllocation)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef validate_from_date_based_on_existing_gle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef validate_backdated_allocation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 119,
      "code_text": "\tdef validate_main_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef validate_child_cost_centers(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\templates\\pages\\search_help.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 26,
      "code_text": "def get_help_results_sections(text):",
      "args": [
        "text"
      ]
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def get_response(api, text):\n\tresponse = requests.get(api.base_url + \"/\" + api.query_route, data={api.search_term_param_name: text})\n\n\tresponse.raise_for_status()\n\treturn response.json()",
      "args": [
        "api",
        "text"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def get_topics_data(api, response_json):",
      "args": [
        "api",
        "response_json"
      ]
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def prepare_api_results(api, topics_data):",
      "args": [
        "api",
        "topics_data"
      ]
    },
    {
      "type": "function",
      "line_start": 90,
      "code_text": "def prepare_doctype_results(api, raw):",
      "args": [
        "api",
        "raw"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\employee\\test_employee.py": [
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def make_employee(user, company=None, **kwargs):",
      "args": [
        "user",
        "company",
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestEmployee(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_employee_status_left(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_user_has_employee(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\opening_invoice_creation_tool\\opening_invoice_creation_tool.py": [
    {
      "type": "function",
      "line_start": 293,
      "code_text": "def get_temporary_opening_account(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 249,
      "code_text": "def start_import(invoices):",
      "args": [
        "invoices"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class OpeningInvoiceCreationTool(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load the Opening Invoice summary\"\"\"\n\t\tsummary, max_count = self.get_opening_invoice_summary()\n\t\tself.set_onload(\"opening_invoices_summary\", summary)\n\t\tself.set_onload(\"max_count\", max_count)\n\t\tself.set_onload(\"temporary_opening_account\", get_temporary_opening_account(self.company))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef get_opening_invoice_summary(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef validate_company(self):\n\t\tif not self.company:\n\t\t\tfrappe.throw(_(\"Please select the Company\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef set_missing_values(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef validate_mandatory_invoice_fields(self, row):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef get_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef add_party(self, party_type, party):",
      "args": [
        "self",
        "party_type",
        "party"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef get_invoice_dict(self, row=None):",
      "args": [
        "self",
        "row"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef make_invoices(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 279,
      "code_text": "def publish(index, total, doctype):",
      "args": [
        "index",
        "total",
        "doctype"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction\\auto_match_party.py": [
    {
      "type": "class",
      "line_start": 6,
      "code_text": "class AutoMatchParty:"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef __init__(self, **kwargs) -> None:\n\t\tself.__dict__.update(kwargs)",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef get(self, key):\n\t\treturn self.__dict__.get(key, None)",
      "args": [
        "self",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef match(self) -> tuple | None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 37,
      "code_text": "class AutoMatchbyAccountIBAN:"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef __init__(self, **kwargs) -> None:\n\t\tself.__dict__.update(kwargs)",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef get(self, key):\n\t\treturn self.__dict__.get(key, None)",
      "args": [
        "self",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef match(self):\n\t\tif not (self.bank_party_account_number or self.bank_party_iban):\n\t\t\treturn None\n\n\t\treturn self.match_account_in_party()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef match_account_in_party(self) -> tuple | None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef get_or_filters(self, party: str | None = None) -> dict:",
      "args": [
        "self",
        "party"
      ]
    },
    {
      "type": "class",
      "line_start": 90,
      "code_text": "class AutoMatchbyPartyNameDescription:"
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef __init__(self, **kwargs) -> None:\n\t\tself.__dict__.update(kwargs)",
      "args": [
        "self",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef get(self, key):\n\t\treturn self.__dict__.get(key, None)",
      "args": [
        "self",
        "key"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef match(self) -> tuple | None:\n\t\t# fuzzy search by customer/supplier & employee\n\t\tif not (self.bank_party_name or self.description):\n\t\t\treturn None\n\n\t\treturn self.match_party_name_desc_in_party()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef match_party_name_desc_in_party(self) -> tuple | None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef fuzzy_search_and_return_result(self, party, names, field) -> tuple | None:",
      "args": [
        "self",
        "party",
        "names",
        "field"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef process_fuzzy_result(self, result: list | None):",
      "args": [
        "self",
        "result"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def get_parties_in_order(deposit: float) -> list:\n\treturn (\n\t\t[\"Customer\", \"Supplier\", \"Employee\"]  # most -> least likely to pay us\n\t\tif flt(deposit) > 0\n\t\telse [\"Supplier\", \"Employee\", \"Customer\"]  # most -> least likely to receive from us\n\t)",
      "args": [
        "deposit: float"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_ledger_entry\\payment_ledger_entry.py": [
    {
      "type": "function",
      "line_start": 182,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Payment Ledger Entry\", [\"against_voucher_no\", \"against_voucher_type\"])\n\tfrappe.db.add_index(\"Payment Ledger Entry\", [\"voucher_no\", \"voucher_type\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class PaymentLedgerEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef validate_account_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef validate_allowed_dimensions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef validate_dimensions_for_pl_and_bs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef validate(self):\n\t\tself.validate_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\appointment\\appointment.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class Appointment(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef find_lead_by_email(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef find_customer_by_email(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef before_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef after_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef send_confirmation_email(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef on_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef set_verified(self, email):",
      "args": [
        "self",
        "email"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef create_lead_and_link(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef auto_assign(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef get_assignee_from_latest_opportunity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef create_calendar_event(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef _get_verify_url(self):\n\t\tverify_route = \"/book_appointment/verify\"\n\t\tparams = {\"email\": self.customer_email, \"appointment\": self.name}\n\t\treturn get_url(verify_route + \"?\" + get_signed_params(params))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef assign_agent(self, agent):\n\t\tif not frappe.has_permission(doc=self, user=agent):\n\t\t\tadd_docshare(self.doctype, self.name, agent, flags={\"ignore_share_permission\": True})\n\n\t\tadd_assignment({\"doctype\": self.doctype, \"name\": self.name, \"assign_to\": [agent]})",
      "args": [
        "self",
        "agent"
      ]
    },
    {
      "type": "function",
      "line_start": 230,
      "code_text": "def _get_agents_sorted_by_asc_workload(date):",
      "args": [
        "date"
      ]
    },
    {
      "type": "function",
      "line_start": 247,
      "code_text": "def _get_agent_list_as_strings():\n\tagent_list_as_strings = []\n\tagent_list = frappe.get_doc(\"Appointment Booking Settings\").agent_list\n\tfor agent in agent_list:\n\t\tagent_list_as_strings.append(agent.user)\n\treturn agent_list_as_strings",
      "args": []
    },
    {
      "type": "function",
      "line_start": 255,
      "code_text": "def _check_agent_availability(agent_email, scheduled_time):\n\tappointemnts_at_scheduled_time = frappe.get_all(\"Appointment\", filters={\"scheduled_time\": scheduled_time})\n\tfor appointment in appointemnts_at_scheduled_time:\n\t\tif appointment._assign == agent_email:\n\t\t\treturn False\n\treturn True",
      "args": [
        "agent_email",
        "scheduled_time"
      ]
    },
    {
      "type": "function",
      "line_start": 263,
      "code_text": "def _get_employee_from_user(user):\n\temployee_docname = frappe.db.get_value(\"Employee\", {\"user_id\": user})\n\tif employee_docname:\n\t\treturn frappe.get_doc(\"Employee\", employee_docname)\n\treturn None",
      "args": [
        "user"
      ]
    }
  ],
  "erpnext\\accounts\\report\\gross_profit\\test_gross_profit.py": [
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestGrossProfit(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef create_item(self):\n\t\titem = create_item(\n\t\t\titem_code=\"_Test GP Item\", is_stock_item=1, company=self.company, warehouse=self.warehouse\n\t\t)\n\t\tself.item = item if isinstance(item, str) else item.item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef create_bundle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef create_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef create_sales_invoice(\n\t\tself, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef create_delivery_note(\n\t\tself, item=None, qty=1, rate=100, posting_date=None, do_not_save=False, do_not_submit=False\n\t):",
      "args": [
        "self",
        "item",
        "qty",
        "rate",
        "posting_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 145,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_invoice_without_only_delivery_note(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 262,
      "code_text": "\tdef test_bundled_delivery_note_with_different_warehouses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 314,
      "code_text": "\tdef test_order_connected_dn_and_inv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 394,
      "code_text": "\tdef test_crnote_against_invoice_with_multiple_instances_of_same_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 439,
      "code_text": "\tdef test_standalone_cr_notes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 476,
      "code_text": "\tdef test_different_rates_in_si_and_dn(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 569,
      "code_text": "\tdef test_valuation_rate_without_previous_sle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 616,
      "code_text": "\tdef test_gross_profit_groupby_invoices(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\packing_slip\\test_packing_slip.py": [
    {
      "type": "function",
      "line_start": 117,
      "code_text": "def create_items():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class UnitTestPackingSlip(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class TestPackingSlip(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_packing_slip(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\dunning\\test_dunning.py": [
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def create_dunning(overdue_days, dunning_type_name=None):",
      "args": [
        "overdue_days",
        "dunning_type_name"
      ]
    },
    {
      "type": "function",
      "line_start": 168,
      "code_text": "def create_dunning_type(title, fee, interest, is_default):",
      "args": [
        "title",
        "fee",
        "interest",
        "is_default"
      ]
    },
    {
      "type": "function",
      "line_start": 192,
      "code_text": "def get_income_account(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class UnitTestDunning(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 34,
      "code_text": "class TestDunning(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcreate_dunning_type(\"First Notice\", fee=0.0, interest=0.0, is_default=1)\n\t\tcreate_dunning_type(\"Second Notice\", fee=10.0, interest=10.0, is_default=0)\n\t\tunlink_payment_on_cancel_of_invoice()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef tearDownClass(cls):\n\t\tunlink_payment_on_cancel_of_invoice(0)\n\t\tsuper().tearDownClass()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_dunning_without_fees(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef test_dunning_with_fees_and_interest(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef test_dunning_with_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef test_fetch_overdue_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef test_dunning_and_payment_against_partially_due_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 208,
      "code_text": "def create_payment_terms_template_for_dunning():",
      "args": []
    }
  ],
  "erpnext\\stock\\__init__.py": [
    {
      "type": "function",
      "line_start": 19,
      "code_text": "def get_warehouse_account_map(company=None):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def get_warehouse_account(warehouse, warehouse_account=None):",
      "args": [
        "warehouse",
        "warehouse_account"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def get_company_default_inventory_account(company):\n\treturn frappe.get_cached_value(\"Company\", company, \"default_inventory_account\")",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\routing\\test_routing.py": [
    {
      "type": "function",
      "line_start": 116,
      "code_text": "def create_routing(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def setup_bom(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "function",
      "line_start": 107,
      "code_text": "def setup_operations(rows):",
      "args": [
        "rows"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestRouting(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestRouting(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.item_code = \"Test Routing Item - A\"",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.sql(\"delete from tabBOM where item=%s\", cls.item_code)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_sequence_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef test_update_bom_operation_time(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_activity\\asset_activity.py": [
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def add_asset_activity(asset, subject):",
      "args": [
        "asset",
        "subject"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AssetActivity(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\packed_item\\test_packed_item.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def create_product_bundle(\n\tquantities: list[int] | None = None, warehouse: str | None = None",
      "args": [
        "quantities",
        "warehouse"
      ]
    },
    {
      "type": "class",
      "line_start": 43,
      "code_text": "class UnitTestPackedItem(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 52,
      "code_text": "class TestPackedItem(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef setUpClass(cls) -> None:",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef test_adding_bundle_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef test_updating_bundle_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef test_recurring_bundle_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef test_bundle_item_cumulative_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef test_newly_mapped_doc_packed_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 159,
      "code_text": "\tdef test_reposting_packed_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef assertReturns(self, original, returned):",
      "args": [
        "self",
        "original",
        "returned"
      ]
    },
    {
      "type": "method",
      "line_start": 201,
      "code_text": "\tdef test_returning_full_bundles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 230,
      "code_text": "\tdef test_returning_partial_bundles(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 267,
      "code_text": "\tdef test_returning_partial_bundle_qty(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\putaway_rule\\putaway_rule.py": [
    {
      "type": "function",
      "line_start": 263,
      "code_text": "def add_row(item, to_allocate, warehouse, updated_table, rule=None):",
      "args": [
        "item",
        "to_allocate",
        "warehouse",
        "updated_table",
        "rule"
      ]
    },
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def apply_putaway_rule(doctype, items, company, sync=None, purpose=None):",
      "args": [
        "doctype",
        "items",
        "company",
        "sync",
        "purpose"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class PutawayRule(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tself.validate_duplicate_rule()\n\t\tself.validate_warehouse_and_company()\n\t\tself.validate_capacity()\n\t\tself.validate_priority()\n\t\tself.set_stock_capacity()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef validate_duplicate_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef validate_priority(self):\n\t\tif self.priority < 1:\n\t\t\tfrappe.throw(_(\"Priority cannot be lesser than 1.\"), title=_(\"Invalid Priority\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef validate_warehouse_and_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_capacity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef set_stock_capacity(self):\n\t\tself.stock_capacity = (flt(self.conversion_factor) or 1) * flt(self.capacity)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def get_available_putaway_capacity(rule):",
      "args": [
        "rule"
      ]
    },
    {
      "type": "function",
      "line_start": 189,
      "code_text": "def _items_changed(old, new, doctype: str) -> bool:",
      "args": [
        "old",
        "new",
        "doctype: str"
      ]
    },
    {
      "type": "function",
      "line_start": 229,
      "code_text": "def get_ordered_putaway_rules(item_code, company, source_warehouse=None):",
      "args": [
        "item_code",
        "company",
        "source_warehouse"
      ]
    },
    {
      "type": "function",
      "line_start": 287,
      "code_text": "def show_unassigned_items_message(items_not_accomodated):",
      "args": [
        "items_not_accomodated"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ageing\\test_stock_ageing.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestStockAgeing(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self) -> None:\n\t\tself.filters = frappe._dict(company=\"_Test Company\", to_date=\"2021-12-10\", ranges=[\"30\", \"60\", \"90\"])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_normal_inward_outward_queue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef test_insufficient_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_basic_stock_reconciliation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef test_sequential_stock_reco_same_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 235,
      "code_text": "\tdef test_sequential_stock_reco_different_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 304,
      "code_text": "\tdef test_repack_entry_same_item_split_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 378,
      "code_text": "\tdef test_repack_entry_same_item_overconsume(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 438,
      "code_text": "\tdef test_repack_entry_same_item_overconsume_with_split_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 511,
      "code_text": "\tdef test_repack_entry_same_item_overproduce(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 572,
      "code_text": "\tdef test_repack_entry_same_item_overproduce_with_split_rows(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 646,
      "code_text": "\tdef test_negative_stock_same_voucher(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 727,
      "code_text": "\tdef test_precision(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 764,
      "code_text": "\tdef test_ageing_stock_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 872,
      "code_text": "def generate_item_and_item_wh_wise_slots(filters, sle):",
      "args": [
        "filters",
        "sle"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier\\supplier.py": [
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class Supplier(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)\n\t\tself.load_dashboard_info()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef before_save(self):\n\t\tif not self.on_hold:\n\t\t\tself.hold_type = \"\"\n\t\t\tself.release_date = \"\"\n\t\telif self.on_hold and not self.hold_type:\n\t\t\tself.hold_type = \"All\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef load_dashboard_info(self):\n\t\tinfo = get_dashboard_info(self.doctype, self.name)\n\t\tself.set_onload(\"dashboard_info\", info)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef on_update(self):\n\t\tself.create_primary_contact()\n\t\tself.create_primary_address()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef add_role_for_user(self):\n\t\tfor portal_user in self.portal_users:\n\t\t\tadd_role_for_portal_user(portal_user, \"Supplier\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 110,
      "code_text": "\tdef _add_supplier_role(self, portal_user):",
      "args": [
        "self",
        "portal_user"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef get_supplier_group_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 160,
      "code_text": "\tdef validate_internal_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 181,
      "code_text": "\tdef create_primary_contact(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 191,
      "code_text": "\tdef create_primary_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 211,
      "code_text": "\tdef after_rename(self, olddn, newdn, merge=False):\n\t\tif frappe.defaults.get_global_default(\"supp_master_name\") == \"Supplier Name\":\n\t\t\tself.db_set(\"supplier_name\", newdn)",
      "args": [
        "self",
        "olddn",
        "newdn",
        "merge"
      ]
    },
    {
      "type": "function",
      "line_start": 218,
      "code_text": "def get_supplier_primary_contact(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\repost_item_valuation\\test_repost_item_valuation.py": [
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class TestRepostItemValuation(IntegrationTestCase, StockTestMixin):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.flags.dont_execute_stock_reposts = False",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_repost_time_slot(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef test_clear_old_logs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef test_create_item_wise_repost_item_valuation_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef test_deduplication(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 177,
      "code_text": "\tdef test_stock_freeze_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef test_prevention_of_cancelled_transaction_riv(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 218,
      "code_text": "\tdef test_queue_progress_serialization(self):\n\t\t# Make sure set/tuple -> list behaviour is retained.\n\t\tself.assertEqual(\n\t\t\t[[\"a\", \"b\"], [\"c\", \"d\"]],\n\t\t\tsorted(frappe.parse_json(frappe.as_json(set([(\"a\", \"b\"), (\"c\", \"d\")])))),\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 225,
      "code_text": "\tdef test_gl_repost_progress(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 253,
      "code_text": "\tdef test_gl_complete_gl_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 299,
      "code_text": "\tdef test_duplicate_ple_on_repost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 353,
      "code_text": "\tdef test_account_freeze_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 377,
      "code_text": "\tdef test_create_repost_entry_for_cancelled_document(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 393,
      "code_text": "\tdef test_repost_item_valuation_for_closing_stock_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 424,
      "code_text": "\tdef test_remove_attached_file(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account\\bank_account.py": [
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def get_party_bank_account(party_type, party):\n\treturn frappe.db.get_value(\n\t\t\"Bank Account\",\n\t\t{\"party_type\": party_type, \"party\": party, \"is_default\": 1, \"disabled\": 0},\n\t\t\"name\",\n\t)",
      "args": [
        "party_type",
        "party"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class BankAccount(Document):"
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef autoname(self):\n\t\tself.name = self.account_name + \" - \" + self.bank",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef on_trash(self):\n\t\tdelete_contact_and_address(\"Bank Account\", self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate(self):\n\t\tself.validate_company()\n\t\tself.validate_iban()\n\t\tself.validate_account()\n\t\tself.update_default_bank_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef validate_company(self):\n\t\tif self.is_company_account and not self.company:\n\t\t\tfrappe.throw(_(\"Company is mandatory for company account\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef validate_iban(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef update_default_bank_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def make_bank_account(doctype, docname):\n\tdoc = frappe.new_doc(\"Bank Account\")\n\tdoc.party_type = doctype\n\tdoc.party = docname\n\n\treturn doc",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def get_default_company_bank_account(company, party_type, party):",
      "args": [
        "company",
        "party_type",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 152,
      "code_text": "def get_bank_account_details(bank_account):\n\treturn frappe.get_cached_value(\n\t\t\"Bank Account\", bank_account, [\"account\", \"bank\", \"bank_account_no\"], as_dict=1\n\t)",
      "args": [
        "bank_account"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_log\\bom_updation_utils.py": [
    {
      "type": "function",
      "line_start": 206,
      "code_text": "def set_values_in_log(log_name: str, values: dict[str, Any], commit: bool = False) -> None:",
      "args": [
        "log_name: str",
        "values",
        "commit: bool"
      ]
    },
    {
      "type": "function",
      "line_start": 223,
      "code_text": "def handle_exception(doc: \"BOMUpdateLog\") -> None:\n\t\"Rolls back and fails BOM Update Log.\"\n\n\tfrappe.db.rollback()\n\terror_log = doc.log_error(\"BOM Update Tool Error\")\n\tset_values_in_log(doc.name, {\"status\": \"Failed\", \"error_log\": error_log.name})",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def get_ancestor_boms(new_bom: str, bom_list: list | None = None) -> list:",
      "args": [
        "new_bom: str",
        "bom_list"
      ]
    },
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def replace_bom(boms: dict, log_name: str) -> None:",
      "args": [
        "boms: dict",
        "log_name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 46,
      "code_text": "def update_cost_in_level(doc: \"BOMUpdateLog\", bom_list: list[str], batch_name: int | str) -> None:",
      "args": [
        "doc",
        "bom_list",
        "batch_name"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def update_new_bom_in_bom_items(unit_cost: float, current_bom: str, new_bom: str) -> None:",
      "args": [
        "unit_cost: float",
        "current_bom: str",
        "new_bom: str"
      ]
    },
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_bom_unit_cost(bom_name: str) -> float:",
      "args": [
        "bom_name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def update_cost_in_boms(bom_list: list[str]) -> None:",
      "args": [
        "bom_list"
      ]
    },
    {
      "type": "function",
      "line_start": 127,
      "code_text": "def get_next_higher_level_boms(child_boms: list[str], processed_boms: dict[str, bool]) -> list[str]:",
      "args": [
        "child_boms",
        "processed_boms"
      ]
    },
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def get_leaf_boms() -> list[str]:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 171,
      "code_text": "def _generate_dependence_map() -> defaultdict:",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\item_group\\test_item_group.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestItem(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef test_basic_tree(self, records=None):",
      "args": [
        "self",
        "records"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef test_recursion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_rebuild_tree(self):\n\t\trebuild_tree(\"Item Group\")\n\t\tself.test_basic_tree()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef test_move_group_into_another(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef test_move_group_into_root(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef test_move_leaf_into_another_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef test_delete_leaf(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 154,
      "code_text": "\tdef test_delete_group(self):\n\t\t# cannot delete group with child, but can delete leaf\n\t\tself.assertRaises(NestedSetChildExistsError, frappe.delete_doc, \"Item Group\", \"_Test Item Group B\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 158,
      "code_text": "\tdef test_merge_groups(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 179,
      "code_text": "\tdef test_merge_leaves(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef test_merge_leaf_into_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 199,
      "code_text": "\tdef test_merge_group_into_leaf(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 209,
      "code_text": "\tdef _move_it_back(self):\n\t\tgroup_b = frappe.get_doc(\"Item Group\", \"_Test Item Group B\")\n\t\tgroup_b.parent_item_group = \"All Item Groups\"\n\t\tgroup_b.save()\n\t\tself.test_basic_tree()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef _get_no_of_children(self, item_group):",
      "args": [
        "self",
        "item_group"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef _print_tree(self):\n\t\timport json\n\n\t\tprint(json.dumps(frappe.db.sql(\"select name, lft, rgt from `tabItem Group` order by lft\"), indent=1))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\share_transfer\\share_transfer.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class ShareDontExists(ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class ShareTransfer(Document):"
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 169,
      "code_text": "\tdef basic_validations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 204,
      "code_text": "\tdef share_exists(self, shareholder):",
      "args": [
        "self",
        "shareholder"
      ]
    },
    {
      "type": "method",
      "line_start": 222,
      "code_text": "\tdef folio_no_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 242,
      "code_text": "\tdef autoname_folio(self, shareholder, is_company=False):",
      "args": [
        "self",
        "shareholder",
        "is_company"
      ]
    },
    {
      "type": "method",
      "line_start": 251,
      "code_text": "\tdef remove_shares(self, shareholder):",
      "args": [
        "self",
        "shareholder"
      ]
    },
    {
      "type": "method",
      "line_start": 306,
      "code_text": "\tdef return_share_balance_entry(self, from_no, to_no, rate):",
      "args": [
        "self",
        "from_no",
        "to_no",
        "rate"
      ]
    },
    {
      "type": "method",
      "line_start": 317,
      "code_text": "\tdef get_shareholder_doc(self, shareholder):",
      "args": [
        "self",
        "shareholder"
      ]
    },
    {
      "type": "method",
      "line_start": 326,
      "code_text": "\tdef get_company_shareholder(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 344,
      "code_text": "def make_jv_entry(\n\tcompany,\n\taccount,\n\tamount,\n\tpayment_account,\n\tcredit_applicant_type,\n\tcredit_applicant,\n\tdebit_applicant_type,\n\tdebit_applicant,\n):",
      "args": [
        "company",
        "account",
        "amount",
        "payment_account",
        "credit_applicant_type",
        "credit_applicant",
        "debit_applicant_type",
        "debit_applicant"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_procedure\\test_quality_procedure.py": [
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def create_procedure(kwargs=None):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class UnitTestQualityProcedure(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestQualityProcedure(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef test_add_node(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef test_remove_parent_from_old_child(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef remove_child_from_old_parent(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\www\\support\\index.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_favorite_articles_by_page_view():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def get_favorite_articles(favorite_articles):",
      "args": [
        "favorite_articles"
      ]
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def get_help_article_list():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\item_price\\test_item_price.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestItemPrice(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestItemPrice(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tfrappe.db.sql(\"delete from `tabItem Price`\")\n\t\tmake_test_records_for_doctype(\"Item Price\", force=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_template_item_price(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef test_duplicate_item(self):\n\t\tdoc = frappe.copy_doc(self.globalTestRecords[\"Item Price\"][0])\n\t\tself.assertRaises(ItemPriceDuplicateItem, doc.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef test_addition_of_new_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef test_dates_validation_error(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef test_price_in_a_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef test_price_with_no_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef test_prices_at_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_prices_at_invalid_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 144,
      "code_text": "\tdef test_prices_outside_of_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 161,
      "code_text": "\tdef test_lowest_price_when_no_date_provided(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 176,
      "code_text": "\tdef test_invalid_item(self):\n\t\tdoc = frappe.copy_doc(self.globalTestRecords[\"Item Price\"][1])\n\t\t# Enter invalid item code\n\t\tdoc.item_code = \"This is not an item code\"\n\t\t# Valid item codes must already exist\n\t\tself.assertRaises(frappe.ValidationError, doc.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 183,
      "code_text": "\tdef test_invalid_price_list(self):\n\t\tdoc = frappe.copy_doc(self.globalTestRecords[\"Item Price\"][1])\n\t\t# Check for invalid price list\n\t\tdoc.price_list = \"This is not a price list\"\n\t\t# Valid price list must already exist\n\t\tself.assertRaises(frappe.ValidationError, doc.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_empty_duplicate_validation(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\serial_no\\test_serial_no.py": [
    {
      "type": "function",
      "line_start": 340,
      "code_text": "def get_auto_serial_nos(kwargs):",
      "args": [
        "kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class UnitTestSerialNo(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 36,
      "code_text": "class TestSerialNo(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_cannot_create_direct(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_inter_company_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_inter_company_transfer_intermediate_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef test_inter_company_transfer_fallback_on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef test_correct_serial_no_incoming_rate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 234,
      "code_text": "\tdef test_auto_fetch(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\promotional_scheme\\test_promotional_scheme.py": [
    {
      "type": "function",
      "line_start": 177,
      "code_text": "def make_promotional_scheme(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestPromotionalScheme(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef setUp(self):\n\t\tif frappe.db.exists(\"Promotional Scheme\", \"_Test Scheme\"):\n\t\t\tfrappe.delete_doc(\"Promotional Scheme\", \"_Test Scheme\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef test_promotional_scheme(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_promotional_scheme_without_applicable_for(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef test_change_applicable_for_in_promotional_scheme(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef test_change_applicable_for_values_in_promotional_scheme(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef test_min_max_amount_configuration(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 135,
      "code_text": "\tdef test_pricing_rule_for_product_discount_slabs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 157,
      "code_text": "\tdef test_validation_on_recurse_with_mixed_condition(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\customer_group\\customer_group.py": [
    {
      "type": "function",
      "line_start": 88,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Customer Group\", [\"lft\", \"rgt\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class CustomerGroup(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef validate(self):\n\t\tif not self.parent_customer_group:\n\t\t\tself.parent_customer_group = get_root_of(\"Customer Group\")\n\t\tself.validate_currency_for_receivable_and_advance_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef validate_currency_for_receivable_and_advance_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef on_update(self):\n\t\tsuper().on_update()\n\t\tself.validate_one_root()",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def get_parent_customer_groups(customer_group):",
      "args": [
        "customer_group"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_value_adjustment\\asset_value_adjustment.py": [
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class AssetValueAdjustment(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate(self):\n\t\tself.validate_date()\n\t\tself.set_current_asset_value()\n\t\tself.set_difference_amount()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef validate_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef set_difference_amount(self):\n\t\tself.difference_amount = flt(self.new_asset_value - self.current_asset_value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 83,
      "code_text": "\tdef set_value_after_depreciation(self):\n\t\tfrappe.db.set_value(\"Asset\", self.asset, \"value_after_depreciation\", self.new_asset_value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef set_current_asset_value(self):\n\t\tif not self.current_asset_value and self.asset:\n\t\t\tself.current_asset_value = get_asset_value_after_depreciation(self.asset, self.finance_book)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef make_depreciation_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 166,
      "code_text": "\tdef update_asset(self, asset_value=None):",
      "args": [
        "self",
        "asset_value"
      ]
    },
    {
      "type": "function",
      "line_start": 203,
      "code_text": "def get_value_of_accounting_dimensions(asset_name):\n\tdimension_fields = [*frappe.get_list(\"Accounting Dimension\", pluck=\"fieldname\"), \"cost_center\"]\n\treturn frappe.db.get_value(\"Asset\", asset_name, fieldname=dimension_fields, as_dict=True)",
      "args": [
        "asset_name"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\account\\chart_of_accounts\\chart_of_accounts.py": [
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_chart(chart_template, existing_company=None):",
      "args": [
        "chart_template",
        "existing_company"
      ]
    },
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def create_charts(\n\tcompany, chart_template=None, existing_company=None, custom_chart=None, from_coa_importer=None\n):",
      "args": [
        "company",
        "chart_template",
        "existing_company",
        "custom_chart",
        "from_coa_importer"
      ]
    },
    {
      "type": "function",
      "line_start": 95,
      "code_text": "def identify_is_group(child):",
      "args": [
        "child"
      ]
    },
    {
      "type": "function",
      "line_start": 214,
      "code_text": "def build_account_tree(tree, parent, all_accounts):",
      "args": [
        "tree",
        "parent",
        "all_accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 271,
      "code_text": "def build_tree_from_json(chart_template, chart_data=None, from_coa_importer=False):",
      "args": [
        "chart_template",
        "chart_data",
        "from_coa_importer"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def add_suffix_if_duplicate(account_name, account_number, accounts):",
      "args": [
        "account_name",
        "account_number",
        "accounts"
      ]
    },
    {
      "type": "function",
      "line_start": 153,
      "code_text": "def get_charts_for_country(country, with_standard=False):",
      "args": [
        "country",
        "with_standard"
      ]
    },
    {
      "type": "function",
      "line_start": 188,
      "code_text": "def get_account_tree_from_existing_company(existing_company):",
      "args": [
        "existing_company"
      ]
    },
    {
      "type": "function",
      "line_start": 246,
      "code_text": "def validate_bank_account(coa, bank_account):",
      "args": [
        "coa",
        "bank_account"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_log\\bom_update_log.py": [
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class BOMMissingError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class BOMUpdateLog(Document):"
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef clear_old_logs(days=None):",
      "args": [
        "days"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef validate_boms_are_specified(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef validate_same_bom(self):\n\t\tif cstr(self.current_bom) == cstr(self.new_bom):\n\t\t\tfrappe.throw(_(\"Current BOM and New BOM can not be same\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef validate_bom_items(self):\n\t\tcurrent_bom_item = frappe.db.get_value(\"BOM\", self.current_bom, \"item\")\n\t\tnew_bom_item = frappe.db.get_value(\"BOM\", self.new_bom, \"item\")\n\n\t\tif current_bom_item != new_bom_item:\n\t\t\tfrappe.throw(_(\"The selected BOMs are not for the same item\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef validate_bom_cost_update_in_progress(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def run_replace_bom_job(\n\tdoc: \"BOMUpdateLog\",",
      "args": [
        "doc",
        "boms"
      ]
    },
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def process_boms_cost_level_wise(\n\tupdate_doc: \"BOMUpdateLog\", parent_boms: list[str] | None = None",
      "args": [
        "update_doc",
        "parent_boms"
      ]
    },
    {
      "type": "function",
      "line_start": 183,
      "code_text": "def queue_bom_cost_jobs(current_boms_list: list[str], update_doc: \"BOMUpdateLog\", current_level: int) -> None:",
      "args": [
        "current_boms_list",
        "update_doc",
        "current_level: int"
      ]
    },
    {
      "type": "function",
      "line_start": 210,
      "code_text": "def resume_bom_cost_update_jobs():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 266,
      "code_text": "def get_processed_current_boms(\n\tlog: dict[str, Any], bom_batches: dict[str, Any]",
      "args": [
        "log",
        "bom_batches"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\landed_cost_voucher\\landed_cost_voucher.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class LandedCostVoucher(Document):"
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef get_items_from_purchase_receipts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef validate_line_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef check_mandatory(self):\n\t\tif not self.get(\"purchase_receipts\"):\n\t\t\tfrappe.throw(_(\"Please enter Receipt Document\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef validate_receipt_documents(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 140,
      "code_text": "\tdef set_total_taxes_and_charges(self):\n\t\tself.total_taxes_and_charges = sum(flt(d.base_amount) for d in self.get(\"taxes\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 143,
      "code_text": "\tdef set_applicable_charges_on_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef validate_applicable_charges_for_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef on_submit(self):\n\t\tself.validate_applicable_charges_for_item()\n\t\tself.update_landed_cost()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 219,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_landed_cost()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 222,
      "code_text": "\tdef update_landed_cost(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef validate_asset_qty_and_status(self, receipt_document_type, receipt_document):",
      "args": [
        "self",
        "receipt_document_type",
        "receipt_document"
      ]
    },
    {
      "type": "method",
      "line_start": 293,
      "code_text": "\tdef update_rate_in_serial_no_for_non_asset_items(self, receipt_document):",
      "args": [
        "self",
        "receipt_document"
      ]
    },
    {
      "type": "function",
      "line_start": 306,
      "code_text": "def get_pr_items(purchase_receipt):",
      "args": [
        "purchase_receipt"
      ]
    }
  ],
  "erpnext\\support\\report\\issue_analytics\\test_issue_analytics.py": [
    {
      "type": "function",
      "line_start": 128,
      "code_text": "def create_records():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestIssueAnalytics(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_issue_analytics(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef compare_result_for_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef compare_result_for_issue_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef compare_result_for_issue_priority(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef compare_result_for_assignment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def create_issue_types():\n\tfor entry in [\"Bug\", \"Service Request\", \"Discomfort\"]:\n\t\tif not frappe.db.exists(\"Issue Type\", entry):\n\t\t\tfrappe.get_doc({\"doctype\": \"Issue Type\", \"__newname\": entry}).insert()",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\shipping_rule\\shipping_rule.py": [
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class OverlappingConditionError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class FromGreaterThanToError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class ManyBlankToValuesError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class ShippingRule(Document):"
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef validate(self):\n\t\tself.validate_from_to_values()\n\t\tself.sort_shipping_rule_conditions()\n\t\tself.validate_overlapping_shipping_rule_conditions()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef validate_from_to_values(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef apply(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 116,
      "code_text": "\tdef get_shipping_amount_from_rules(self, value):\n\t\tfor condition in self.get(\"conditions\"):\n\t\t\tif not condition.to_value or (flt(condition.from_value) <= flt(value) <= flt(condition.to_value)):\n\t\t\t\treturn condition.shipping_amount\n\n\t\treturn 0.0",
      "args": [
        "self",
        "value"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef validate_countries(self, doc):",
      "args": [
        "self",
        "doc"
      ]
    },
    {
      "type": "method",
      "line_start": 138,
      "code_text": "\tdef add_shipping_rule_to_tax_table(self, doc, shipping_amount):",
      "args": [
        "self",
        "doc",
        "shipping_amount"
      ]
    },
    {
      "type": "method",
      "line_start": 167,
      "code_text": "\tdef sort_shipping_rule_conditions(self):\n\t\t\"\"\"Sort Shipping Rule Conditions based on increasing From Value\"\"\"\n\t\tself.shipping_rules_conditions = sorted(self.conditions, key=lambda d: flt(d.from_value))\n\t\tfor i, d in enumerate(self.conditions):\n\t\t\td.idx = i + 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef validate_overlapping_shipping_rule_conditions(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\www\\payment_setup_certification.py": [
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def get_context(context):\n\tif frappe.session.user != \"Guest\":\n\t\tcontext.all_certifications = get_all_certifications_of_a_member()\n\t\tcontext.show_sidebar = True",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_all_certifications_of_a_member():",
      "args": []
    }
  ],
  "erpnext\\templates\\pages\\material_request_info.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_more_items_info(items, material_request):",
      "args": [
        "items",
        "material_request"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bisect_accounting_statements\\bisect_accounting_statements.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class BisectAccountingStatements(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tself.validate_dates()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef validate_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef bfs(self, from_date: datetime, to_date: datetime):",
      "args": [
        "self",
        "from_date: datetime",
        "to_date: datetime"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef dfs(self, from_date: datetime, to_date: datetime):",
      "args": [
        "self",
        "from_date: datetime",
        "to_date: datetime"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef build_tree(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 148,
      "code_text": "\tdef get_report_summary(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 162,
      "code_text": "\tdef update_node(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 170,
      "code_text": "\tdef current_node_has_summary_info(self):\n\t\t\"Assertion method\"\n\t\treturn frappe.db.get_value(\"Bisect Nodes\", self.current_node, \"generated\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef fetch_summary_info_from_current_node(self):\n\t\tcurrent_node = frappe.get_doc(\"Bisect Nodes\", self.current_node)\n\t\tself.p_l_summary = current_node.balance_sheet_summary\n\t\tself.b_s_summary = current_node.profit_loss_summary\n\t\tself.difference = abs(self.p_l_summary - self.b_s_summary)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef fetch_or_calculate(self):\n\t\tif self.current_node_has_summary_info():\n\t\t\tself.fetch_summary_info_from_current_node()\n\t\telse:\n\t\t\tself.get_report_summary()\n\t\t\tself.update_node()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef bisect_left(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 202,
      "code_text": "\tdef bisect_right(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 216,
      "code_text": "\tdef move_up(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_settings\\stock_settings.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class StockSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef validate_warehouses(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef cant_change_valuation_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 142,
      "code_text": "\tdef validate_clean_description_html(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef validate_pending_reposts(self):\n\t\tif self.stock_frozen_upto:\n\t\t\tcheck_pending_reposting(self.stock_frozen_upto)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 155,
      "code_text": "\tdef validate_stock_reservation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 221,
      "code_text": "\tdef on_update(self):\n\t\tself.toggle_warehouse_field_for_inter_warehouse_transfer()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef change_precision_for_for_sales(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 236,
      "code_text": "\tdef change_precision_for_purchase(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 256,
      "code_text": "\tdef make_property_setter_for_precision(doctypes):",
      "args": [
        "doctypes"
      ]
    },
    {
      "type": "method",
      "line_start": 274,
      "code_text": "\tdef toggle_warehouse_field_for_inter_warehouse_transfer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 309,
      "code_text": "def clean_all_descriptions():\n\tfor item in frappe.get_all(\"Item\", [\"name\", \"description\"]):\n\t\tif item.description:\n\t\t\tclean_description = clean_html(item.description)\n\t\tif item.description != clean_description:\n\t\t\tfrappe.db.set_value(\"Item\", item.name, \"description\", clean_description)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 318,
      "code_text": "def get_enable_stock_uom_editing():",
      "args": []
    }
  ],
  "erpnext\\assets\\doctype\\asset_depreciation_schedule\\test_asset_depreciation_schedule.py": [
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class UnitTestAssetDepreciationSchedule(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestAssetDepreciationSchedule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef setUp(self):\n\t\tcreate_asset_data()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_throw_error_if_another_asset_depr_schedule_exist(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_daily_prorata_based_depr_on_sl_method(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef test_schedule_for_slm_for_existing_asset_daily_pro_rata_enabled(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef test_schedule_for_slm_for_existing_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 166,
      "code_text": "\tdef test_schedule_sl_method_for_existing_asset_with_frequency_of_3_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef test_daily_prorata_based_depr_after_enabling_configuration(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 261,
      "code_text": "\tdef test_for_daily_prorata_based_depreciation_wdv_method_frequency_3_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 291,
      "code_text": "\tdef test_for_daily_prorata_based_depreciation_wdv_method_frequency_6_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 321,
      "code_text": "\tdef test_for_daily_prorata_based_depreciation_wdv_method_frequency_12_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 348,
      "code_text": "\tdef test_update_total_number_of_booked_depreciations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef test_schedule_for_wdv_method_for_existing_asset(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_period\\supplier_scorecard_period.py": [
    {
      "type": "function",
      "line_start": 130,
      "code_text": "def make_supplier_scorecard(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def import_string_path(path):\n\tcomponents = path.split(\".\")\n\tmod = __import__(components[0])\n\tfor comp in components[1:]:\n\t\tmod = getattr(mod, comp)\n\treturn mod",
      "args": [
        "path"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class SupplierScorecardPeriod(Document):"
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate(self):\n\t\tself.validate_criteria_weights()\n\t\tself.calculate_variables()\n\t\tself.calculate_criteria()\n\t\tself.calculate_score()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef validate_criteria_weights(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef calculate_variables(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef calculate_criteria(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef calculate_score(self):\n\t\tmyscore = 0\n\t\tfor crit in self.criteria:\n\t\t\tmyscore += crit.score * crit.weight / 100.0\n\t\tself.total_score = myscore",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef calculate_weighted_score(self, weighing_function):",
      "args": [
        "self",
        "weighing_function"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef get_eval_statement(self, formula):",
      "args": [
        "self",
        "formula"
      ]
    }
  ],
  "erpnext\\telephony\\doctype\\call_log\\call_log.py": [
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def get_employees_with_number(number):",
      "args": [
        "number"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class CallLog(Document):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef validate(self):\n\t\tdeduplicate_dynamic_links(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef before_insert(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef after_insert(self):\n\t\tself.trigger_call_popup()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef is_incoming_call(self):\n\t\treturn self.type == \"Incoming\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef add_link(self, link_type, link_name):\n\t\tself.append(\"links\", {\"link_doctype\": link_type, \"link_name\": link_name})",
      "args": [
        "self",
        "link_type",
        "link_name"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef trigger_call_popup(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef update_received_by(self):\n\t\tif employees := get_employees_with_number(self.get(\"to\")):\n\t\t\tself.call_received_by = employees[0].get(\"name\")\n\t\t\tself.employee_user_id = employees[0].get(\"user_id\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 129,
      "code_text": "def add_call_summary_and_call_type(call_log, summary, call_type):\n\tdoc = frappe.get_doc(\"Call Log\", call_log)\n\tdoc.type_of_call = call_type\n\tdoc.save()\n\tdoc.add_comment(\"Comment\", frappe.bold(_(\"Call Summary\")) + \"<br><br>\" + summary)",
      "args": [
        "call_log",
        "summary",
        "call_type"
      ]
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def link_existing_conversations(doc, state):",
      "args": [
        "doc",
        "state"
      ]
    },
    {
      "type": "function",
      "line_start": 198,
      "code_text": "def get_linked_call_logs(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    }
  ],
  "erpnext\\accounts\\report\\tax_withholding_details\\test_tax_withholding_details.py": [
    {
      "type": "function",
      "line_start": 146,
      "code_text": "def create_tax_category(category=\"TCS\", rate=0.075, account=\"TCS - _TC\", cumulative_threshold=0):",
      "args": [
        "category",
        "rate",
        "account",
        "cumulative_threshold"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestTaxWithholdingDetails(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.clear_old_entries()\n\t\tcreate_tax_accounts()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef test_tax_withholding_for_customers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_single_account_for_multiple_categories(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_date_filters_in_multiple_tax_withholding_rules(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef check_expected_values(self, result, expected_values):",
      "args": [
        "self",
        "result",
        "expected_values"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef tearDown(self):\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def create_tax_accounts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 161,
      "code_text": "def create_tcs_payment_entry():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 186,
      "code_text": "def create_tcs_journal_entry():",
      "args": []
    }
  ],
  "erpnext\\stock\\reorder_item.py": [
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def reorder_item():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 332,
      "code_text": "def get_email_list(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 25,
      "code_text": "def _reorder_item():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def get_items_for_reorder() -> dict[str, list]:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 156,
      "code_text": "def get_reorder_levels_for_variants(itemwise_reorder):",
      "args": [
        "itemwise_reorder"
      ]
    },
    {
      "type": "function",
      "line_start": 185,
      "code_text": "def get_item_warehouse_projected_qty(items_to_consider):",
      "args": [
        "items_to_consider"
      ]
    },
    {
      "type": "function",
      "line_start": 217,
      "code_text": "def create_material_request(material_requests):",
      "args": [
        "material_requests"
      ]
    },
    {
      "type": "function",
      "line_start": 318,
      "code_text": "def send_email_notification(company_wise_mr):",
      "args": [
        "company_wise_mr"
      ]
    },
    {
      "type": "function",
      "line_start": 358,
      "code_text": "def get_comapny_wise_users(company):",
      "args": [
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 373,
      "code_text": "def notify_errors(exceptions_list):",
      "args": [
        "exceptions_list"
      ]
    }
  ],
  "erpnext\\templates\\pages\\timelog_info.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_context(context):\n\tcontext.no_cache = 1\n\n\ttimelog = frappe.get_doc(\"Time Log\", frappe.form_dict.timelog)\n\n\tcontext.doc = timelog",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\www\\book_appointment\\verify\\index.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\setup_wizard.py": [
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def fin(args):\n\tfrappe.local.message_log = []\n\tlogin_as_first_user(args)",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def stage_fixtures(args):\n\tfixtures.install(args.get(\"country\"))",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def setup_company(args):\n\tfixtures.install_company(args)",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def setup_defaults(args):\n\tfixtures.install_defaults(frappe._dict(args))",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_setup_stages(args=None):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def setup_demo(args):\n\tif args.get(\"setup_demo\"):\n\t\tfrappe.enqueue(setup_demo_data, enqueue_after_commit=True, at_front=True)",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def login_as_first_user(args):\n\tif args.get(\"email\") and hasattr(frappe.local, \"login_manager\"):\n\t\tfrappe.local.login_manager.login_as(args.get(\"email\"))",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def setup_complete(args=None):\n\tstage_fixtures(args)\n\tsetup_company(args)\n\tsetup_defaults(args)\n\tfin(args)",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\stock\\deprecated_serial_batch.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class DeprecatedSerialNoValuation:"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef calculate_stock_value_from_deprecarated_ledgers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef get_filterd_serial_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef get_incoming_value_for_serial_nos(self, serial_nos):",
      "args": [
        "self",
        "serial_nos"
      ]
    },
    {
      "type": "function",
      "line_start": 93,
      "code_text": "def has_sle_for_serial_nos(item_code):",
      "args": [
        "item_code"
      ]
    },
    {
      "type": "class",
      "line_start": 106,
      "code_text": "class DeprecatedBatchNoValuation:"
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef calculate_avg_rate_from_deprecarated_ledgers(self):\n\t\tentries = self.get_sle_for_batches()\n\t\tfor ledger in entries:\n\t\t\tself.stock_value_differece[ledger.batch_no] += flt(ledger.batch_value)\n\t\t\tself.available_qty[ledger.batch_no] += flt(ledger.batch_qty)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef get_sle_for_batches(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 180,
      "code_text": "\tdef calculate_avg_rate_for_non_batchwise_valuation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 226,
      "code_text": "\tdef set_balance_value_for_non_batchwise_valuation_batches(self):\n\t\tself.last_sle = self.get_last_sle_for_non_batch()\n\t\tself.set_balance_value_from_sl_entries()\n\t\tself.set_balance_value_from_bundle()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 237,
      "code_text": "\tdef set_balance_value_from_sl_entries(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 285,
      "code_text": "\tdef get_last_sle_for_non_batch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 331,
      "code_text": "\tdef set_balance_value_from_bundle(self) -> None:",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\utilities\\web_form\\addresses\\addresses.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_context(context):\n\t# do your magic here\n\tcontext.show_sidebar = True",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\currency_exchange\\test_currency_exchange.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def save_new_records(test_records):",
      "args": [
        "test_records"
      ]
    },
    {
      "type": "function",
      "line_start": 52,
      "code_text": "def patched_requests_get(*args, **kwargs):",
      "args": [
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 81,
      "code_text": "class TestCurrencyExchange(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef clear_cache(self):\n\t\tcache = frappe.cache()\n\t\tfor date in test_exchange_values.keys():\n\t\t\tkey = \"currency_exchange_rate_{}:{}:{}\".format(date, \"USD\", \"INR\")\n\t\t\tcache.delete(key)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.set_single_value(\"Accounts Settings\", \"allow_stale\", 1)\n\t\tself.clear_cache()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef test_exchange_rate(self, mock_get):",
      "args": [
        "self",
        "mock_get"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef test_exchange_rate_via_exchangerate_host(self, mock_get):",
      "args": [
        "self",
        "mock_get"
      ]
    },
    {
      "type": "method",
      "line_start": 153,
      "code_text": "\tdef test_exchange_rate_strict(self, mock_get):",
      "args": [
        "self",
        "mock_get"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef test_exchange_rate_strict_switched(self, mock_get):",
      "args": [
        "self",
        "mock_get"
      ]
    }
  ],
  "erpnext\\accounts\\notification\\notification_for_new_fiscal_year\\notification_for_new_fiscal_year.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_context(context):\n\t# do your magic here\n\tpass",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_qty_based_taxes.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def uuid4():\n\treturn str(_uuid4())",
      "args": []
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestTaxes(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef tearDown(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\templates\\pages\\task_info.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def get_context(context):",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\manufacturing\\notification\\material_request_receipt_notification\\material_request_receipt_notification.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_context(context):\n\t# do your magic here\n\tpass",
      "args": [
        "context"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\installation_note\\installation_note.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class InstallationNote(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef __init__(self, *args, **kwargs):",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef is_serial_no_added(self, item_code, serial_no):\n\t\thas_serial_no = frappe.db.get_value(\"Item\", item_code, \"has_serial_no\")\n\t\tif has_serial_no == 1 and not serial_no:\n\t\t\tfrappe.throw(_(\"Serial No is mandatory for Item {0}\").format(item_code))\n\t\telif has_serial_no != 1 and cstr(serial_no).strip():\n\t\t\tfrappe.throw(_(\"Item {0} is not a serialized Item\").format(item_code))",
      "args": [
        "self",
        "item_code",
        "serial_no"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef is_serial_no_exist(self, item_code, serial_no):\n\t\tfor x in serial_no:\n\t\t\tif not frappe.db.exists(\"Serial No\", x):\n\t\t\t\tfrappe.throw(_(\"Serial No {0} does not exist\").format(x))",
      "args": [
        "self",
        "item_code",
        "serial_no"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef get_prevdoc_serial_no(self, prevdoc_detail_docname):\n\t\tserial_nos = frappe.db.get_value(\"Delivery Note Item\", prevdoc_detail_docname, \"serial_no\")\n\t\treturn get_valid_serial_nos(serial_nos)",
      "args": [
        "self",
        "prevdoc_detail_docname"
      ]
    },
    {
      "type": "method",
      "line_start": 90,
      "code_text": "\tdef is_serial_no_match(self, cur_s_no, prevdoc_s_no, prevdoc_docname):\n\t\tfor sr in cur_s_no:\n\t\t\tif sr not in prevdoc_s_no:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\"Serial No {0} does not belong to Delivery Note {1}\").format(sr, prevdoc_docname)\n\t\t\t\t)",
      "args": [
        "self",
        "cur_s_no",
        "prevdoc_s_no",
        "prevdoc_docname"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef validate_serial_no(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 109,
      "code_text": "\tdef validate_installation_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 118,
      "code_text": "\tdef check_item_table(self):\n\t\tif not (self.get(\"items\")):\n\t\t\tfrappe.throw(_(\"Please pull items from Delivery Note\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 122,
      "code_text": "\tdef on_update(self):\n\t\tself.db_set(\"status\", \"Draft\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef on_submit(self):\n\t\tself.validate_serial_no()\n\t\tself.update_prevdoc_status()\n\t\tself.db_set(\"status\", \"Submitted\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef on_cancel(self):\n\t\tself.update_prevdoc_status()\n\t\tself.db_set(\"status\", \"Cancelled\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\unreconcile_payment\\test_unreconcile_payment.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestUnreconcilePayment(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_usd_receivable_account()\n\t\tself.create_item()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef create_sales_invoice(self, do_not_submit=False):",
      "args": [
        "self",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef create_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef create_sales_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef test_01_unreconcile_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef test_02_unreconcile_one_payment_among_multi_payments(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 179,
      "code_text": "\tdef test_03_unreconciliation_on_multi_currency_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 244,
      "code_text": "\tdef test_04_unreconciliation_on_multi_currency_invoice(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 333,
      "code_text": "\tdef test_05_unreconcile_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 375,
      "code_text": "\tdef test_06_unreconcile_advance_from_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 426,
      "code_text": "\tdef test_07_adv_from_so_to_invoice(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\contract\\test_contract.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestContract(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.db.sql(\"delete from `tabContract`\")\n\t\tself.contract_doc = get_contract()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_validate_start_date_before_end_date(self):\n\t\tself.contract_doc.start_date = nowdate()\n\t\tself.contract_doc.end_date = add_days(nowdate(), -1)\n\n\t\tself.assertRaises(frappe.ValidationError, self.contract_doc.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_unsigned_contract_status(self):\n\t\tself.contract_doc.insert()\n\t\tself.assertEqual(self.contract_doc.status, \"Unsigned\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef test_active_signed_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_past_inactive_signed_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef test_future_inactive_signed_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_contract_status_with_no_fulfilment_terms(self):\n\t\tself.contract_doc.contract_term = \"_Test Customer Contract\"\n\t\tself.contract_doc.insert()\n\n\t\tself.assertEqual(self.contract_doc.fulfilment_status, \"N/A\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 55,
      "code_text": "\tdef test_unfulfilled_contract_status(self):\n\t\tself.contract_doc.contract_term = \"_Test Customer Contract with Requirements\"\n\t\tself.contract_doc.requires_fulfilment = 1\n\t\tself.contract_doc.save()\n\t\tself.assertEqual(self.contract_doc.fulfilment_status, \"Unfulfilled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_fulfilled_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef test_partially_fulfilled_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef test_lapsed_contract_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def get_contract():\n\tdoc = frappe.new_doc(\"Contract\")\n\tdoc.party_type = \"Customer\"\n\tdoc.party_name = \"_Test Customer\"\n\tdoc.contract_terms = \"This is a test customer contract.\"\n\treturn doc",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_tool\\bom_update_tool.py": [
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def enqueue_replace_bom(boms: dict | str | None = None, args: dict | str | None = None) -> \"BOMUpdateLog\":",
      "args": [
        "boms",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def create_bom_update_log(\n\tboms: dict[str, str] | None = None,",
      "args": [
        "boms",
        "update_type"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class BOMUpdateTool(Document):"
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def enqueue_update_cost() -> \"BOMUpdateLog\":\n\t\"\"\"Returns a BOM Update Log (that queues a job) for BOM Cost Updation.\"\"\"\n\tupdate_log = create_bom_update_log(update_type=\"Update Cost\")\n\treturn update_log",
      "args": []
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def auto_update_latest_price_in_all_boms() -> None:",
      "args": []
    },
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def is_older_log(log: dict) -> bool:\n\tno_of_days = date_diff(get_datetime(now()), get_datetime(log.creation))\n\treturn no_of_days > 10",
      "args": [
        "log: dict"
      ]
    }
  ],
  "erpnext\\utilities\\doctype\\video\\video.py": [
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def get_id_from_url(url):",
      "args": [
        "url"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def batch_update_youtube_data():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class Video(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tif self.provider == \"YouTube\" and is_tracking_enabled():\n\t\t\tself.set_video_id()\n\t\t\tself.set_youtube_statistics()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef set_video_id(self):\n\t\tif self.url and not self.get(\"youtube_video_id\"):\n\t\t\tself.youtube_video_id = get_id_from_url(self.url)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef set_youtube_statistics(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def is_tracking_enabled():\n\treturn frappe.db.get_single_value(\"Video Settings\", \"enable_youtube_tracking\")",
      "args": []
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_frequency(value):",
      "args": [
        "value"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def update_youtube_data():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 98,
      "code_text": "def get_formatted_ids(video_list):",
      "args": [
        "video_list"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\work_order_item\\work_order_item.py": [
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Work Order Item\", [\"item_code\", \"source_warehouse\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class WorkOrderItem(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_category\\asset_category.py": [
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def get_asset_category_account(\n\tfieldname, item=None, asset=None, account=None, asset_category=None, company=None\n):",
      "args": [
        "fieldname",
        "item",
        "asset",
        "account",
        "asset_category",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class AssetCategory(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tself.validate_finance_books()\n\t\tself.validate_account_types()\n\t\tself.validate_account_currency()\n\t\tself.valide_cwip_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate_finance_books(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef validate_account_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate_account_types(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef valide_cwip_account(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\company\\test_company.py": [
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class TestCompany(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef test_coa_based_on_existing_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_coa_based_on_country_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef delete_mode_of_payment(self, company):\n\t\tfrappe.db.sql(\n\t\t\t\"\"\" delete from `tabMode of Payment Account`\n\t\t\twhere company =%s \"\"\",\n\t\t\t(company),\n\t\t)",
      "args": [
        "self",
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef test_basic_tree(self, records=None):",
      "args": [
        "self",
        "records"
      ]
    },
    {
      "type": "method",
      "line_start": 141,
      "code_text": "\tdef test_primary_address(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 173,
      "code_text": "\tdef get_no_of_children(self, company):",
      "args": [
        "self",
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 190,
      "code_text": "\tdef test_change_parent_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef test_demo_data(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 220,
      "code_text": "def create_company_communication(doctype, docname):",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 234,
      "code_text": "def create_child_company():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 252,
      "code_text": "def create_test_lead_in_company(company):",
      "args": [
        "company"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\repost_accounting_ledger\\test_repost_accounting_ledger.py": [
    {
      "type": "function",
      "line_start": 281,
      "code_text": "def update_repost_settings():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestRepostAccountingLedger(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.enterClassContext(cls.change_settings(\"Selling Settings\", validate_selling_price=0))",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tupdate_repost_settings()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_01_basic_functions(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef test_02_deferred_accounting_valiations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef test_04_pcv_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 164,
      "code_text": "\tdef test_03_deletion_flag_and_preview_function(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 189,
      "code_text": "\tdef test_05_without_deletion_flag(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 214,
      "code_text": "\tdef test_06_repost_purchase_receipt(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\email_campaign\\email_campaign.py": [
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def send_mail(entry, email_campaign):",
      "args": [
        "entry",
        "email_campaign"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class EmailCampaign(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef set_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate_lead(self):\n\t\tlead_email_id = frappe.db.get_value(\"Lead\", self.recipient, \"email_id\")\n\t\tif not lead_email_id:\n\t\t\tlead_name = frappe.db.get_value(\"Lead\", self.recipient, \"lead_name\")\n\t\t\tfrappe.throw(_(\"Please set an email id for the Lead {0}\").format(lead_name))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate_email_campaign_already_exists(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef update_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def send_email_to_leads_or_contacts():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def unsubscribe_recipient(unsubscribe, method):\n\tif unsubscribe.reference_doctype == \"Email Campaign\":\n\t\tfrappe.db.set_value(\"Email Campaign\", unsubscribe.reference_name, \"status\", \"Unsubscribed\")",
      "args": [
        "unsubscribe",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 142,
      "code_text": "def set_email_campaign_status():\n\temail_campaigns = frappe.get_all(\"Email Campaign\", filters={\"status\": (\"!=\", \"Unsubscribed\")})\n\tfor entry in email_campaigns:\n\t\temail_campaign = frappe.get_doc(\"Email Campaign\", entry.name)\n\t\temail_campaign.update_status()\n\t\temail_campaign.save()",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\sales_order_item\\sales_order_item.py": [
    {
      "type": "function",
      "line_start": 102,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Sales Order Item\", [\"item_code\", \"warehouse\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class SalesOrderItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\material_request_item\\material_request_item.py": [
    {
      "type": "function",
      "line_start": 64,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Material Request Item\", [\"item_code\", \"warehouse\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class MaterialRequestItem(Document):"
    }
  ],
  "erpnext\\startup\\leaderboard.py": [
    {
      "type": "function",
      "line_start": 232,
      "code_text": "def parse_date_range(date_range):\n\tif date_range:\n\t\tdate_range = frappe.parse_json(date_range)\n\t\treturn date_range[0], date_range[1]\n\n\treturn None, None",
      "args": [
        "date_range"
      ]
    },
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def get_leaderboards():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 57,
      "code_text": "def get_all_customers(date_range, company, field, limit=None):",
      "args": [
        "date_range",
        "company",
        "field",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def get_all_items(date_range, company, field, limit=None):",
      "args": [
        "date_range",
        "company",
        "field",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 138,
      "code_text": "def get_all_suppliers(date_range, company, field, limit=None):",
      "args": [
        "date_range",
        "company",
        "field",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def get_all_sales_partner(date_range, company, field, limit=None):",
      "args": [
        "date_range",
        "company",
        "field",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 199,
      "code_text": "def get_all_sales_person(date_range, company, field=None, limit=0):",
      "args": [
        "date_range",
        "company",
        "field",
        "limit"
      ]
    },
    {
      "type": "function",
      "line_start": 223,
      "code_text": "def get_date_condition(date_range, field):",
      "args": [
        "date_range",
        "field"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance\\asset_maintenance.py": [
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def calculate_next_due_date(\n\tperiodicity, start_date=None, end_date=None, last_completion_date=None, next_due_date=None\n):",
      "args": [
        "periodicity",
        "start_date",
        "end_date",
        "last_completion_date",
        "next_due_date"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class AssetMaintenance(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef on_update(self):\n\t\tfor task in self.get(\"asset_maintenance_tasks\"):\n\t\t\tassign_tasks(self.name, task.assign_to, task.maintenance_task, task.next_due_date)\n\t\tself.sync_maintenance_tasks()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef after_delete(self):\n\t\tasset = frappe.get_doc(\"Asset\", self.asset_name)\n\t\tif asset.status == \"In Maintenance\":\n\t\t\tasset.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef sync_maintenance_tasks(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def assign_tasks(asset_maintenance_name, assign_to_member, maintenance_task, next_due_date):",
      "args": [
        "asset_maintenance_name",
        "assign_to_member",
        "maintenance_task",
        "next_due_date"
      ]
    },
    {
      "type": "function",
      "line_start": 125,
      "code_text": "def update_maintenance_log(asset_maintenance, item_code, item_name, task):",
      "args": [
        "asset_maintenance",
        "item_code",
        "item_name",
        "task"
      ]
    },
    {
      "type": "function",
      "line_start": 167,
      "code_text": "def get_team_members(doctype, txt, searchfield, start, page_len, filters):\n\treturn frappe.db.get_values(\n\t\t\"Maintenance Team Member\", {\"parent\": filters.get(\"maintenance_team\")}, \"team_member\"\n\t)",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 174,
      "code_text": "def get_maintenance_log(asset_name):",
      "args": [
        "asset_name"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_shift_allocation\\asset_shift_allocation.py": [
    {
      "type": "function",
      "line_start": 262,
      "code_text": "def find_subsets_with_sum(numbers, k, target_sum, current_subset, result):",
      "args": [
        "numbers",
        "k",
        "target_sum",
        "current_subset",
        "result"
      ]
    },
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class AssetShiftAllocation(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef after_insert(self):\n\t\tself.fetch_and_set_depr_schedule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef validate(self):\n\t\tself.asset_depr_schedule_doc = get_asset_depr_schedule_doc(self.asset, \"Active\", self.finance_book)\n\n\t\tself.validate_invalid_shift_change()\n\t\tself.update_depr_schedule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef on_submit(self):\n\t\tself.create_new_asset_depr_schedule()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef fetch_and_set_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 86,
      "code_text": "\tdef validate_invalid_shift_change(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef update_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef allocate_shift_diff_in_depr_schedule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 223,
      "code_text": "\tdef create_new_asset_depr_schedule(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\workstation\\test_workstation.py": [
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def make_workstation(*args, **kwargs):",
      "args": [
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class UnitTestWorkstation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 26,
      "code_text": "class TestWorkstation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef test_validate_timings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef test_update_bom_operation_rate(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\purchase_order_item\\purchase_order_item.py": [
    {
      "type": "function",
      "line_start": 103,
      "code_text": "def on_doctype_update():\n\tfrappe.db.add_index(\"Purchase Order Item\", [\"item_code\", \"warehouse\"])",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PurchaseOrderItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\dunning\\dunning.py": [
    {
      "type": "class",
      "line_start": 24,
      "code_text": "class Dunning(AccountsController):"
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef validate(self):\n\t\tself.validate_same_currency()\n\t\tself.validate_overdue_payments()\n\t\tself.validate_totals()\n\t\tself.set_party_details()\n\t\tself.set_dunning_level()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef validate_same_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef validate_overdue_payments(self):\n\t\tdaily_interest = self.rate_of_interest / 100 / 365\n\n\t\tfor row in self.overdue_payments:\n\t\t\trow.overdue_days = (getdate(self.posting_date) - getdate(row.due_date)).days or 0\n\t\t\trow.interest = row.outstanding * daily_interest * row.overdue_days",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef validate_totals(self):\n\t\tself.total_outstanding = sum(row.outstanding for row in self.overdue_payments)\n\t\tself.total_interest = sum(row.interest for row in self.overdue_payments)\n\t\tself.dunning_amount = self.total_interest + self.dunning_fee\n\t\tself.base_dunning_amount = self.dunning_amount * self.conversion_rate\n\t\tself.grand_total = self.total_outstanding + self.dunning_amount",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 112,
      "code_text": "\tdef set_party_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 137,
      "code_text": "\tdef set_dunning_level(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def resolve_dunning(doc, state):",
      "args": [
        "doc",
        "state"
      ]
    },
    {
      "type": "function",
      "line_start": 205,
      "code_text": "def get_linked_dunnings_as_per_state(sales_invoice, state):",
      "args": [
        "sales_invoice",
        "state"
      ]
    },
    {
      "type": "function",
      "line_start": 223,
      "code_text": "def get_dunning_letter_text(dunning_type: str, doc: str | dict, language: str | None = None) -> dict:",
      "args": [
        "dunning_type: str",
        "doc",
        "language"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_clearance\\test_bank_clearance.py": [
    {
      "type": "function",
      "line_start": 137,
      "code_text": "def add_transactions():\n\tmake_payment_entry()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 141,
      "code_text": "def make_payment_entry():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestBankClearance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_bank_clearance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef test_bank_clearance_with_loan(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef test_update_clearance_date_on_si(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def make_bank_account():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 160,
      "code_text": "def make_pos_sales_invoice():",
      "args": []
    }
  ],
  "erpnext\\selling\\report\\sales_order_analysis\\test_sales_order_analysis.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestSalesOrderAnalysis(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef create_sales_order(self, transaction_date, do_not_save=False, do_not_submit=False):",
      "args": [
        "self",
        "transaction_date",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef create_sales_invoice(self, so, do_not_save=False, do_not_submit=False):",
      "args": [
        "self",
        "so",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef create_delivery_note(self, so, do_not_save=False, do_not_submit=False):",
      "args": [
        "self",
        "so",
        "do_not_save",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef test_01_so_to_deliver_and_bill(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef test_02_so_to_deliver(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 107,
      "code_text": "\tdef test_03_so_to_bill(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 134,
      "code_text": "\tdef test_04_so_completed(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 163,
      "code_text": "\tdef test_05_all_so_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef test_06_so_pending_delivery_with_multiple_delivery_notes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 220,
      "code_text": "\tdef test_07_so_delivered_with_multiple_delivery_notes(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\operations\\taxes_setup.py": [
    {
      "type": "function",
      "line_start": 133,
      "code_text": "def make_taxes_and_charges_template(company_name, doctype, template):",
      "args": [
        "company_name",
        "doctype",
        "template"
      ]
    },
    {
      "type": "function",
      "line_start": 209,
      "code_text": "def get_or_create_account(company_name, account):",
      "args": [
        "company_name",
        "account"
      ]
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def setup_taxes_and_charges(company_name: str, country: str):",
      "args": [
        "company_name: str",
        "country: str"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def simple_to_detailed(templates):",
      "args": [
        "templates"
      ]
    },
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def from_detailed_data(company_name, data):",
      "args": [
        "company_name",
        "data"
      ]
    },
    {
      "type": "function",
      "line_start": 120,
      "code_text": "def update_regional_tax_settings(country, company):",
      "args": [
        "country",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 176,
      "code_text": "def make_item_tax_template(company_name, template):",
      "args": [
        "company_name",
        "template"
      ]
    },
    {
      "type": "function",
      "line_start": 246,
      "code_text": "def get_or_create_tax_group(company_name, root_type):",
      "args": [
        "company_name",
        "root_type"
      ]
    },
    {
      "type": "function",
      "line_start": 302,
      "code_text": "def make_tax_category(tax_category):",
      "args": [
        "tax_category"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\prospect\\test_prospect.py": [
    {
      "type": "function",
      "line_start": 67,
      "code_text": "def make_address(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestProspect(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_add_lead_to_prospect_and_address_linking(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_make_customer_from_prospect(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def make_prospect(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_log\\test_bom_update_log.py": [
    {
      "type": "function",
      "line_start": 131,
      "code_text": "def update_cost_in_all_boms_in_test():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class UnitTestBomUpdateLog(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class TestBOMUpdateLog(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_bom_update_log_validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_bom_update_log_completion(self):\n\t\t\"Test if BOM Update Log handles job completion correctly.\"\n\n\t\tlog = enqueue_replace_bom(boms=self.boms)\n\t\tlog.reload()\n\t\tself.assertEqual(log.status, \"Completed\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef test_bom_replace_for_root_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def remove_bom(item_code):",
      "args": [
        "item_code"
      ]
    }
  ],
  "erpnext\\bulk_transaction\\doctype\\bulk_transaction_log\\bulk_transaction_log.py": [
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def serialize_transaction_log(data):",
      "args": [
        "data"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class BulkTransactionLog(Document):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef db_insert(self, *args, **kwargs):\n\t\tpass",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef load_from_db(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef get_list(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef get_count(args):\n\t\tpass",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 98,
      "code_text": "\tdef get_stats(args):\n\t\tpass",
      "args": [
        "args"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef db_update(self, *args, **kwargs):\n\t\tpass",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef delete(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 118,
      "code_text": "def parse_list_filters(args):",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice_merge_log\\test_pos_invoice_merge_log.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class UnitTestPosInvoiceMergeLog(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class TestPOSInvoiceMergeLog(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.enterClassContext(cls.change_settings(\"Selling Settings\", validate_selling_price=0))",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef test_consolidated_invoice_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef test_consolidated_credit_note_creation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef test_consolidated_invoice_item_taxes(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 188,
      "code_text": "\tdef test_consolidation_round_off_error_1(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 251,
      "code_text": "\tdef test_consolidation_round_off_error_2(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 321,
      "code_text": "\tdef test_consolidation_round_off_error_3(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 380,
      "code_text": "\tdef test_consolidation_rounding_adjustment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 417,
      "code_text": "\tdef test_serial_no_case_1(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_analytics\\test_stock_analytics.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def stock_analytics(filters):\n\tcol, data, *_ = execute(filters)\n\treturn col, data",
      "args": [
        "filters"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestStockAnalyticsReport(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUp(self) -> None:\n\t\tself.item = make_item().name\n\t\tself.warehouse = \"_Test Warehouse - _TC\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef assert_single_item_report(self, movement, expected_buckets):",
      "args": [
        "self",
        "movement",
        "expected_buckets"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef generate_stock(self, movement):\n\t\tfor qty, posting_date in movement:\n\t\t\targs = {\"item\": self.item, \"qty\": abs(qty), \"posting_date\": posting_date}\n\t\t\targs[\"to_warehouse\" if qty > 0 else \"from_warehouse\"] = self.warehouse\n\t\t\tmake_stock_entry(**args)",
      "args": [
        "self",
        "movement"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef compare_analytics_row(self, report_row, columns, expected_buckets):",
      "args": [
        "self",
        "report_row",
        "columns",
        "expected_buckets"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_get_period_date_ranges(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef test_get_period_date_ranges_yearly(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_basic_report_functionality(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 94,
      "code_text": "\tdef test_empty_month_in_between(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef test_multi_month_missings(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_statement_of_accounts\\test_process_statement_of_accounts.py": [
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def create_process_soa(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestProcessStatementOfAccounts(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcls.enterClassContext(cls.change_settings(\"Selling Settings\", validate_selling_price=0))",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_process_soa_for_gl(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_process_soa_for_ar(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 80,
      "code_text": "\tdef test_auto_email_for_process_soa_ar(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 88,
      "code_text": "\tdef check_ageing_summary(self, ageing, expected_ageing):\n\t\tfor age_range in expected_ageing:\n\t\t\tself.assertEqual(expected_ageing[age_range], ageing.get(age_range))",
      "args": [
        "self",
        "ageing",
        "expected_ageing"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard\\test_supplier_scorecard.py": [
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def make_supplier_scorecard():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def delete_test_scorecards():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UnitTestSupplierScorecard(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestSupplierScorecard(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_create_scorecard(self):\n\t\tdoc = make_supplier_scorecard().insert()\n\t\tself.assertEqual(doc.name, valid_scorecard[0].get(\"supplier\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_criteria_weight(self):\n\t\tdelete_test_scorecards()\n\t\tmy_doc = make_supplier_scorecard()\n\t\tfor d in my_doc.criteria:\n\t\t\td.weight = 0\n\t\tself.assertRaises(frappe.ValidationError, my_doc.insert)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_visit\\maintenance_visit.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class MaintenanceVisit(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef validate_serial_no(self):\n\t\tfor d in self.get(\"purposes\"):\n\t\t\tif d.serial_no and not frappe.db.exists(\"Serial No\", d.serial_no):\n\t\t\t\tfrappe.throw(_(\"Serial No {0} does not exist\").format(d.serial_no))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate_purpose_table(self):\n\t\tif not self.purposes:\n\t\t\tfrappe.throw(_(\"Add Items in the Purpose Table\"), title=_(\"Purposes Required\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef validate_maintenance_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef validate(self):\n\t\tself.validate_serial_no()\n\t\tself.validate_maintenance_date()\n\t\tself.validate_purpose_table()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 102,
      "code_text": "\tdef update_status_and_actual_date(self, cancel=False):",
      "args": [
        "self",
        "cancel"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef update_customer_issue(self, flag):",
      "args": [
        "self",
        "flag"
      ]
    },
    {
      "type": "method",
      "line_start": 174,
      "code_text": "\tdef check_if_last_visit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 198,
      "code_text": "\tdef on_submit(self):\n\t\tself.update_customer_issue(1)\n\t\tself.db_set(\"status\", \"Submitted\")\n\t\tself.update_status_and_actual_date()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 203,
      "code_text": "\tdef on_cancel(self):\n\t\tself.check_if_last_visit()\n\t\tself.db_set(\"status\", \"Cancelled\")\n\t\tself.update_status_and_actual_date(cancel=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 208,
      "code_text": "\tdef on_update(self):\n\t\tpass",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance\\test_asset_maintenance.py": [
    {
      "type": "function",
      "line_start": 99,
      "code_text": "def set_depreciation_settings_in_company():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestAssetMaintenance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef test_create_asset_maintenance_with_log(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_maintenance_tasks():",
      "args": []
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_bom\\subcontracting_bom.py": [
    {
      "type": "function",
      "line_start": 87,
      "code_text": "def get_subcontracting_boms_for_finished_goods(fg_items: str | list) -> dict:",
      "args": [
        "fg_items"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class SubcontractingBOM(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):\n\t\tself.validate_finished_good()\n\t\tself.validate_service_item()\n\t\tself.validate_is_active()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef before_save(self):\n\t\tself.set_conversion_factor()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate_finished_good(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef validate_service_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef validate_is_active(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef set_conversion_factor(self):\n\t\tself.conversion_factor = flt(self.service_item_qty) / flt(self.finished_good_qty)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 106,
      "code_text": "def get_subcontracting_boms_for_service_item(service_item: str) -> dict:",
      "args": [
        "service_item: str"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry_type\\stock_entry_type.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class StockEntryType(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tself.validate_standard_type()\n\t\tif self.add_to_transit and self.purpose != \"Material Transfer\":\n\t\t\tself.add_to_transit = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate_standard_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "class",
      "line_start": 57,
      "code_text": "class ManufactureEntry:"
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef __init__(self, kwargs) -> None:\n\t\tfor key, value in kwargs.items():\n\t\t\tsetattr(self, key, value)",
      "args": [
        "self",
        "kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef make_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 79,
      "code_text": "\tdef prepare_source_warehouse(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef add_raw_materials(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 113,
      "code_text": "\tdef get_items_from_job_card(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 152,
      "code_text": "\tdef add_finished_good(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_value_adjustment\\test_asset_value_adjustment.py": [
    {
      "type": "function",
      "line_start": 298,
      "code_text": "def make_asset_value_adjustment(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestAssetValueAdjustment(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUp(self):\n\t\tcreate_asset_data()\n\t\tfrappe.db.set_value(\n\t\t\t\"Company\", \"_Test Company\", \"capital_work_in_progress_account\", \"CWIP Account - _TC\"\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_current_asset_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef test_asset_depreciation_value_adjustment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef test_depreciation_after_cancelling_asset_repair(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 264,
      "code_text": "\tdef test_difference_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 317,
      "code_text": "def make_difference_account(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\tests\\utils.py": [
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def if_lending_app_installed(function):",
      "args": [
        "function"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def execute_script_report(\n\treport_name: ReportName,",
      "args": [
        "report_name: ReportName",
        "module: str",
        "filters: ReportFilters",
        "default_filters",
        "optional_filters"
      ]
    },
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def create_test_contact_and_address():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 108,
      "code_text": "def if_lending_app_not_installed(function):",
      "args": [
        "function"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice_item\\sales_invoice_item.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class SalesInvoiceItem(Document):"
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef validate_cost_center(self, company: str):",
      "args": [
        "self",
        "company: str"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef set_actual_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef set_income_account_for_fixed_asset(self, company: str):",
      "args": [
        "self",
        "company: str"
      ]
    }
  ],
  "erpnext\\stock\\tests\\test_utils.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class StockTestMixin:"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef make_item(self, item_code=None, properties=None, *args, **kwargs):\n\t\tfrom erpnext.stock.doctype.item.test_item import make_item\n\n\t\treturn make_item(item_code, properties, *args, **kwargs)",
      "args": [
        "self",
        "item_code",
        "properties",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef assertSLEs(self, doc, expected_sles, sle_filters=None):",
      "args": [
        "self",
        "doc",
        "expected_sles",
        "sle_filters"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef assertGLEs(self, doc, expected_gles, gle_filters=None, order_by=None):",
      "args": [
        "self",
        "doc",
        "expected_gles",
        "gle_filters",
        "order_by"
      ]
    },
    {
      "type": "class",
      "line_start": 60,
      "code_text": "class TestStockUtilities(IntegrationTestCase, StockTestMixin):"
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_barcode_scanning(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\repost_payment_ledger\\repost_payment_ledger.py": [
    {
      "type": "function",
      "line_start": 16,
      "code_text": "def repost_ple_for_voucher(voucher_type, voucher_no, gle_map=None):\n\tif voucher_type and voucher_no and gle_map:\n\t\t_delete_pl_entries(voucher_type, voucher_no)\n\t\tcreate_payment_ledger_entry(gle_map, cancel=0)",
      "args": [
        "voucher_type",
        "voucher_no",
        "gle_map"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def start_payment_ledger_repost(docname=None):",
      "args": [
        "docname"
      ]
    },
    {
      "type": "class",
      "line_start": 54,
      "code_text": "class RepostPaymentLedger(Document):"
    },
    {
      "type": "method",
      "line_start": 77,
      "code_text": "\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.vouchers = []",
      "args": [
        "self",
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef before_validate(self):\n\t\tself.load_vouchers_based_on_filters()\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef load_vouchers_based_on_filters(self):\n\t\tif not self.add_manually:\n\t\t\tself.repost_vouchers.clear()\n\t\t\tself.get_vouchers()\n\t\t\tself.extend(\"repost_vouchers\", copy.deepcopy(self.vouchers))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef get_vouchers(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef set_status(self):\n\t\tif self.docstatus == 0:\n\t\t\tself.repost_status = \"Queued\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 115,
      "code_text": "\tdef on_submit(self):\n\t\texecute_repost_payment_ledger(self.name)\n\t\tfrappe.msgprint(_(\"Repost started in the background\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 121,
      "code_text": "def execute_repost_payment_ledger(docname):",
      "args": [
        "docname"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_price\\item_price.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class ItemPriceDuplicateItem(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class ItemPrice(Document):"
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef update_price_list_details(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef update_item_details(self):\n\t\tif self.item_code:\n\t\t\tself.item_name, self.item_description = frappe.db.get_value(\n\t\t\t\t\"Item\", self.item_code, [\"item_name\", \"description\"]\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef validate_item_template(self):\n\t\tif frappe.get_cached_value(\"Item\", self.item_code, \"has_variants\"):\n\t\t\tmsg = f\"Item Price cannot be created for the template item {bold(self.item_code)}\"\n\n\t\t\tfrappe.throw(_(msg))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 87,
      "code_text": "\tdef check_duplicates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef before_save(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\edi\\doctype\\code_list\\code_list.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class CodeList(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef on_trash(self):\n\t\tif not frappe.flags.in_bulk_delete:\n\t\t\tself.__delete_linked_docs()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef __delete_linked_docs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef get_codes_for(self, doctype: str, name: str) -> tuple[str]:\n\t\t\"\"\"Get the applicable codes for a doctype and name\"\"\"\n\t\treturn get_codes_for(self.name, doctype, name)",
      "args": [
        "self",
        "doctype: str",
        "name: str"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef get_docnames_for(self, doctype: str, code: str) -> tuple[str]:\n\t\t\"\"\"Get the mapped docnames for a doctype and code\"\"\"\n\t\treturn get_docnames_for(self.name, doctype, code)",
      "args": [
        "self",
        "doctype: str",
        "code: str"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef get_default_code(self) -> str | None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef from_genericode(self, root: \"Element\"):",
      "args": [
        "self",
        "root"
      ]
    },
    {
      "type": "function",
      "line_start": 78,
      "code_text": "def get_codes_for(code_list: str, doctype: str, name: str) -> tuple[str]:",
      "args": [
        "code_list: str",
        "doctype: str",
        "name: str"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def get_docnames_for(code_list: str, doctype: str, code: str) -> tuple[str]:",
      "args": [
        "code_list: str",
        "doctype: str",
        "code: str"
      ]
    },
    {
      "type": "function",
      "line_start": 122,
      "code_text": "def get_default_code(code_list: str) -> str | None:\n\t\"\"\"Return the default common code for a given code list\"\"\"\n\tcode_id = frappe.db.get_value(\"Code List\", code_list, \"default_common_code\")\n\treturn frappe.db.get_value(\"Common Code\", code_id, \"common_code\") if code_id else None",
      "args": [
        "code_list: str"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_movement\\test_asset_movement.py": [
    {
      "type": "function",
      "line_start": 151,
      "code_text": "def create_asset_movement(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestAssetMovement(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUp(self):\n\t\tfrappe.db.set_value(\n\t\t\t\"Company\", \"_Test Company\", \"capital_work_in_progress_account\", \"CWIP Account - _TC\"\n\t\t)\n\t\tcreate_asset_data()\n\t\tmake_location()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef test_movement(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef test_last_movement_cancellation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 175,
      "code_text": "def make_location():\n\tfor location in [\"Pune\", \"Mumbai\", \"Nagpur\"]:\n\t\tif not frappe.db.exists(\"Location\", location):\n\t\t\tfrappe.get_doc({\"doctype\": \"Location\", \"location_name\": location}).insert(ignore_permissions=True)",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\brand\\brand.py": [
    {
      "type": "function",
      "line_start": 31,
      "code_text": "def get_brand_defaults(item, company):",
      "args": [
        "item",
        "company"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class Brand(Document):"
    }
  ],
  "erpnext\\selling\\report\\sales_person_target_variance_based_on_item_group\\test_sales_person_target_variance_based_on_item_group.py": [
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def create_sales_target_doc(\n\tsales_field_dt, sales_field_name, sales_field_value, fiscal_year, distribution_id\n):",
      "args": [
        "sales_field_dt",
        "sales_field_name",
        "sales_field_value",
        "fiscal_year",
        "distribution_id"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def create_target_distribution(fiscal_year):\n\tdistribution = frappe.new_doc(\"Monthly Distribution\")\n\tdistribution.distribution_id = \"Target Report Distribution\"\n\tdistribution.fiscal_year = fiscal_year\n\tdistribution.get_months()\n\treturn distribution.insert()",
      "args": [
        "fiscal_year"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestSalesPersonTargetVarianceBasedOnItemGroup(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef setUp(self):\n\t\tself.fiscal_year = get_fiscal_year(nowdate())[0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_achieved_target_and_variance(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\fiscal_year\\fiscal_year.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class FiscalYear(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef validate_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 69,
      "code_text": "\tdef on_update(self):\n\t\tcheck_duplicate_fiscal_year(self)\n\t\tfrappe.cache().delete_value(\"fiscal_years\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef on_trash(self):\n\t\tfrappe.cache().delete_value(\"fiscal_years\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef validate_overlap(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def check_duplicate_fiscal_year(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def auto_create_fiscal_year():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 158,
      "code_text": "def get_from_and_to_date(fiscal_year):\n\tfields = [\"year_start_date\", \"year_end_date\"]\n\tcached_results = frappe.get_cached_value(\"Fiscal Year\", fiscal_year, fields, as_dict=1)\n\treturn dict(from_date=cached_results.year_start_date, to_date=cached_results.year_end_date)",
      "args": [
        "fiscal_year"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\advance_payment_ledger_entry\\test_advance_payment_ledger_entry.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestAdvancePaymentLedgerEntry(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_usd_receivable_account()\n\t\tself.create_usd_payable_account()\n\t\tself.create_item()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef create_sales_order(self, qty=1, rate=100, currency=\"INR\", do_not_submit=False):",
      "args": [
        "self",
        "qty",
        "rate",
        "currency",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef create_purchase_order(self, qty=1, rate=100, currency=\"INR\", do_not_submit=False):",
      "args": [
        "self",
        "qty",
        "rate",
        "currency",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_so_advance_paid_and_currency_with_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 101,
      "code_text": "\tdef test_so_advance_paid_and_currency_with_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 149,
      "code_text": "\tdef test_po_advance_paid_and_currency_with_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 182,
      "code_text": "\tdef test_po_advance_paid_and_currency_with_journal(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reposting_settings\\stock_reposting_settings.py": [
    {
      "type": "function",
      "line_start": 97,
      "code_text": "def create_repost_item_valuation(item_code, warehouse, posting_date):",
      "args": [
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class StockRepostingSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):\n\t\tself.set_minimum_reposting_time_slot()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef before_save(self):\n\t\tif self.do_reposting_for_each_stock_transaction:\n\t\t\tself.item_based_reposting = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef set_minimum_reposting_time_slot(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 54,
      "code_text": "\tdef convert_to_item_wh_reposting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 81,
      "code_text": "def get_reposting_entries():\n\treturn frappe.get_all(\n\t\t\"Repost Item Valuation\",\n\t\tfields=[\"voucher_no\", \"name\"],\n\t\tfilters={\"status\": (\"in\", [\"Queued\", \"In Progress\"]), \"docstatus\": 1, \"based_on\": \"Transaction\"},\n\t)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_stock_ledgers(vouchers):\n\treturn frappe.get_all(\n\t\t\"Stock Ledger Entry\",\n\t\tfields=[\"item_code\", \"warehouse\", \"posting_date\"],\n\t\tfilters={\"voucher_no\": (\"in\", vouchers)},\n\t)",
      "args": [
        "vouchers"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_attribute\\item_attribute.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class ItemAttributeIncrementError(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class ItemAttribute(Document):"
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef validate(self):\n\t\tfrappe.flags.attribute_values = None\n\t\tself.validate_numeric()\n\t\tself.validate_duplication()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef on_update(self):\n\t\tself.validate_exising_items()\n\t\tself.set_enabled_disabled_in_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef set_enabled_disabled_in_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef validate_exising_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef validate_numeric(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 103,
      "code_text": "\tdef validate_duplication(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_criteria\\supplier_scorecard_criteria.py": [
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def _get_variables(criteria):",
      "args": [
        "criteria"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class InvalidFormulaVariable(frappe.ValidationError):\n\tpass"
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class SupplierScorecardCriteria(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tself.validate_variables()\n\t\tself.validate_formula()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef validate_variables(self):\n\t\t# make sure all the variables exist\n\t\t_get_variables(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate_formula(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 57,
      "code_text": "def get_criteria_list():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 71,
      "code_text": "def get_variables(criteria_name):\n\tcriteria = frappe.get_doc(\"Supplier Scorecard Criteria\", criteria_name)\n\treturn _get_variables(criteria)",
      "args": [
        "criteria_name"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice_item\\pos_invoice_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSInvoiceItem(SalesInvoiceItem):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_opening_entry\\test_pos_opening_entry.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def create_opening_entry(pos_profile, user):",
      "args": [
        "pos_profile",
        "user"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestPOSOpeningEntry(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance_log\\asset_maintenance_log.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class AssetMaintenanceLog(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef on_submit(self):\n\t\tif self.maintenance_status not in [\"Completed\", \"Cancelled\"]:\n\t\t\tfrappe.throw(_(\"Maintenance Status has to be Cancelled or Completed to Submit\"))\n\t\tself.update_maintenance_task()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef update_maintenance_task(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 80,
      "code_text": "def update_asset_maintenance_log_status():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 93,
      "code_text": "def get_maintenance_tasks(doctype, txt, searchfield, start, page_len, filters):\n\tasset_maintenance_tasks = frappe.db.get_values(\n\t\t\"Asset Maintenance Task\", {\"parent\": filters.get(\"asset_maintenance\")}, \"maintenance_task\"\n\t)\n\treturn asset_maintenance_tasks",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\erpnext_integrations\\doctype\\plaid_settings\\plaid_connector.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class PlaidConnector:"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef __init__(self, access_token=None):",
      "args": [
        "self",
        "access_token"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef get_access_token(self, public_token):\n\t\tif public_token is None:\n\t\t\tfrappe.log_error(\"Plaid: Public token is missing\")\n\t\tresponse = self.client.Item.public_token.exchange(public_token)\n\t\taccess_token = response[\"access_token\"]\n\t\treturn access_token",
      "args": [
        "self",
        "public_token"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef get_token_request(self, update_mode=False):",
      "args": [
        "self",
        "update_mode"
      ]
    },
    {
      "type": "method",
      "line_start": 58,
      "code_text": "\tdef get_link_token(self, update_mode=False):",
      "args": [
        "self",
        "update_mode"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef get_transactions(self, start_date, end_date, account_id=None):",
      "args": [
        "self",
        "start_date",
        "end_date",
        "account_id"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\operations\\defaults_setup.py": [
    {
      "type": "function",
      "line_start": 124,
      "code_text": "def get_fy_details(fy_start_date, fy_end_date):",
      "args": [
        "fy_start_date",
        "fy_end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def set_default_settings(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 61,
      "code_text": "def set_no_copy_fields_in_variant_settings():\n\t# set no copy fields of an item doctype to item variant settings\n\tdoc = frappe.get_doc(\"Item Variant Settings\")\n\tdoc.set_default_fields()\n\tdoc.save()",
      "args": []
    },
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def create_price_lists(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def create_employee_for_self(args):",
      "args": [
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def create_territories():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 119,
      "code_text": "def create_feed_and_todo():\n\t\"\"\"update Activity feed and create todo for creation of item, customer, vendor\"\"\"\n\treturn",
      "args": []
    }
  ],
  "erpnext\\accounts\\test\\test_utils.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestUtils(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tmake_test_objects(\"Address\", ADDRESS_RECORDS)",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.rollback()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_get_party_shipping_address(self):\n\t\taddress = get_party_shipping_address(\"Customer\", \"_Test Customer 1\")\n\t\tself.assertEqual(address, \"_Test Billing Address 2 Title-Billing\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_get_party_shipping_address2(self):\n\t\taddress = get_party_shipping_address(\"Customer\", \"_Test Customer 2\")\n\t\tself.assertEqual(address, \"_Test Shipping Address 2 Title-Shipping\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef test_get_voucher_wise_gl_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_stock_voucher_sorting(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_update_reference_in_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef test_naming_series_variable_parsing(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\deferred_revenue_and_expense\\test_deferred_revenue_and_expense.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestDeferredRevenueAndExpense(IntegrationTestCase, AccountsTestMixin):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef setup_deferred_accounts_and_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer(\"_Test Customer\")\n\t\tself.create_supplier(\"_Test Furniture Supplier\")\n\t\tself.setup_deferred_accounts_and_items()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef test_deferred_revenue(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 143,
      "code_text": "\tdef test_deferred_expense(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 215,
      "code_text": "\tdef test_zero_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 285,
      "code_text": "\tdef test_zero_amount(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\exchange_rate_revaluation\\test_exchange_rate_revaluation.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestExchangeRateRevaluation(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef set_system_and_company_settings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_01_revaluation_of_forex_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 95,
      "code_text": "\tdef test_02_accounts_only_with_base_currency_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 165,
      "code_text": "\tdef test_03_accounts_only_with_account_currency_balance(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 254,
      "code_text": "\tdef test_04_get_account_details_function(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\selling\\report\\payment_terms_status_for_sales_order\\test_payment_terms_status_for_sales_order.py": [
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class TestPaymentTermsStatusForSalesOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef create_payment_terms_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef test_01_payment_terms_status(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 128,
      "code_text": "\tdef create_exchange_rate(self, date):",
      "args": [
        "self",
        "date"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef test_02_alternate_currency(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 224,
      "code_text": "\tdef test_03_group_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 355,
      "code_text": "\tdef test_04_due_date_filter(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\sales_taxes_and_charges_template\\sales_taxes_and_charges_template.py": [
    {
      "type": "function",
      "line_start": 53,
      "code_text": "def valdiate_taxes_and_charges_template(doc):",
      "args": [
        "doc"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class SalesTaxesandChargesTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tvaldiate_taxes_and_charges_template(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef autoname(self):\n\t\tif self.company and self.title:\n\t\t\tabbr = frappe.get_cached_value(\"Company\", self.company, \"abbr\")\n\t\t\tself.name = f\"{self.title} - {abbr}\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef set_missing_values(self):\n\t\tfor data in self.taxes:\n\t\t\tif data.charge_type == \"On Net Total\" and flt(data.rate) == 0.0:\n\t\t\t\tdata.rate = frappe.get_cached_value(\"Account\", data.account_head, \"tax_rate\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def validate_disabled(doc):\n\tif doc.is_default and doc.disabled:\n\t\tfrappe.throw(_(\"Disabled template must not be default template\"))",
      "args": [
        "doc"
      ]
    },
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def validate_for_tax_category(doc):",
      "args": [
        "doc"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_health\\test_ledger_health.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestLedgerHealth(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.configure_monitoring_tool()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef configure_monitoring_tool(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef clear_old_entries(self):\n\t\tsuper().clear_old_entries()\n\t\tlh = qb.DocType(\"Ledger Health\")\n\t\tqb.from_(lh).delete().run()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef create_journal(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef test_debit_credit_mismatch(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 85,
      "code_text": "\tdef test_gl_and_pl_mismatch(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\unreconcile_payment\\unreconcile_payment.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class UnreconcilePayment(Document):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef validate(self):\n\t\tself.supported_types = [\"Payment Entry\", \"Journal Entry\"]\n\t\tif self.voucher_type not in self.supported_types:\n\t\t\tfrappe.throw(_(\"Only {0} are supported\").format(comma_and(self.supported_types)))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef get_allocations_from_payment(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef add_references(self):\n\t\tallocations = self.get_allocations_from_payment()\n\n\t\tfor alloc in allocations:\n\t\t\tself.append(\"allocations\", alloc)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 96,
      "code_text": "def doc_has_references(doctype: str | None = None, docname: str | None = None):",
      "args": [
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def get_linked_payments_for_doc(\n\tcompany: str | None = None, doctype: str | None = None, docname: str | None = None",
      "args": [
        "company",
        "doctype",
        "docname"
      ]
    },
    {
      "type": "function",
      "line_start": 166,
      "code_text": "def create_unreconcile_doc_for_selection(selections=None):",
      "args": [
        "selections"
      ]
    }
  ],
  "erpnext\\setup\\default_success_action.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def get_message(doctype):\n\t# Properly format the string with translated doctype\n\treturn _(\"{0} has been submitted successfully\").format(doctype)",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def get_first_success_message(doctype):\n\t# Reuse the get_message function for consistency\n\treturn get_message(doctype)",
      "args": [
        "doctype"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def get_default_success_action():",
      "args": []
    }
  ],
  "erpnext\\accounts\\report\\customer_ledger_summary\\test_customer_ledger_summary.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestCustomerLedgerSummary(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef create_sales_invoice(self, do_not_submit=False, **args):",
      "args": [
        "self",
        "do_not_submit",
        "**args"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef create_payment_entry(self, docname, do_not_submit=False):",
      "args": [
        "self",
        "docname",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef create_credit_note(self, docname, do_not_submit=False):",
      "args": [
        "self",
        "docname",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef test_ledger_summary_basic_output(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 89,
      "code_text": "\tdef test_summary_with_return_and_payment(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\support\\doctype\\warranty_claim\\warranty_claim.py": [
    {
      "type": "function",
      "line_start": 81,
      "code_text": "def make_maintenance_visit(source_name, target_doc=None):",
      "args": [
        "source_name",
        "target_doc"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class WarrantyClaim(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 76,
      "code_text": "\tdef on_update(self):\n\t\tpass",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\price_list\\price_list.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class PriceList(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tif not cint(self.buying) and not cint(self.selling):\n\t\t\tthrow(_(\"Price List must be applicable for Buying or Selling\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef on_update(self):\n\t\tself.set_default_if_missing()\n\t\tself.update_item_price()\n\t\tself.delete_price_list_details_key()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef set_default_if_missing(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef update_item_price(self):\n\t\tfrappe.db.sql(\n\t\t\t\"\"\"update `tabItem Price` set currency=%s,\n\t\t\tbuying=%s, selling=%s, modified=NOW() where price_list=%s\"\"\",\n\t\t\t(self.currency, cint(self.buying), cint(self.selling), self.name),\n\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef delete_price_list_details_key(self):\n\t\tfrappe.cache().hdel(\"price_list_details\", self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def get_price_list_details(price_list):",
      "args": [
        "price_list"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule_detail\\pricing_rule_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PricingRuleDetail(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_movement\\asset_movement.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class AssetMovement(Document):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef validate(self):\n\t\tself.validate_asset()\n\t\tself.validate_location()\n\t\tself.validate_employee()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate_asset(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef validate_location(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef validate_employee(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef on_submit(self):\n\t\tself.set_latest_location_and_custodian_in_asset()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 129,
      "code_text": "\tdef on_cancel(self):\n\t\tself.set_latest_location_and_custodian_in_asset()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 132,
      "code_text": "\tdef set_latest_location_and_custodian_in_asset(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_item_variant.py": [
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def make_item_variant():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestItemVariant(IntegrationTestCase):\n\tdef test_tables_in_template_copied_to_variant(self):\n\t\tfields = [{\"field_name\": \"quality_inspection_template\"}]\n\t\tset_item_variant_settings(fields)\n\t\tvariant = make_item_variant()\n\t\tself.assertEqual(variant.get(\"quality_inspection_template\"), \"_Test QC Template\")"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_tables_in_template_copied_to_variant(self):\n\t\tfields = [{\"field_name\": \"quality_inspection_template\"}]\n\t\tset_item_variant_settings(fields)\n\t\tvariant = make_item_variant()\n\t\tself.assertEqual(variant.get(\"quality_inspection_template\"), \"_Test QC Template\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def create_variant_with_tables(item, args):",
      "args": [
        "item",
        "args"
      ]
    },
    {
      "type": "function",
      "line_start": 54,
      "code_text": "def make_quality_inspection_template():",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\holiday_list\\test_holiday_list.py": [
    {
      "type": "function",
      "line_start": 115,
      "code_text": "def make_holiday_list(name, from_date=None, to_date=None, holiday_dates=None):",
      "args": [
        "name",
        "from_date",
        "to_date",
        "holiday_dates"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestHolidayList(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_holiday_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_weekly_off(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_local_holidays(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 104,
      "code_text": "\tdef test_localized_country_names(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 136,
      "code_text": "def set_holiday_list(holiday_list, company_name):",
      "args": [
        "holiday_list",
        "company_name"
      ]
    }
  ],
  "erpnext\\accounts\\report\\profit_and_loss_statement\\test_profit_and_loss_statement.py": [
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestProfitAndLossStatement(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef create_sales_invoice(self, qty=1, rate=150, no_payment_schedule=False, do_not_submit=False):",
      "args": [
        "self",
        "qty",
        "rate",
        "no_payment_schedule",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef get_fiscal_year(self):\n\t\tactive_fy = frappe.db.get_all(\n\t\t\t\"Fiscal Year\",\n\t\t\tfilters={\"disabled\": 0, \"year_start_date\": (\"<=\", today()), \"year_end_date\": (\">=\", today())},\n\t\t)[0]\n\t\treturn frappe.get_doc(\"Fiscal Year\", active_fy.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef get_report_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 64,
      "code_text": "\tdef test_profit_and_loss_output_and_summary(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 95,
      "code_text": "\tdef test_p_and_l_export(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_dimension_filter\\test_accounting_dimension_filter.py": [
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestAccountingDimensionFilter(unittest.TestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):\n\t\tcreate_dimension()\n\t\tcreate_accounting_dimension_filter()\n\t\tself.invoice_list = []",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_allowed_dimension_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_mandatory_dimension_validation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef tearDown(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def create_accounting_dimension_filter():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 101,
      "code_text": "def disable_dimension_filter():",
      "args": []
    }
  ],
  "erpnext\\manufacturing\\doctype\\operation\\test_operation.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def make_operation(*args, **kwargs):",
      "args": [
        "*args",
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestOperation(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_criteria\\test_supplier_scorecard_criteria.py": [
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def delete_test_scorecards():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UnitTestSupplierScorecardCriteria(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestSupplierScorecardCriteria(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_variables_exist(self):\n\t\tdelete_test_scorecards()\n\t\tfor d in test_good_criteria:\n\t\t\tfrappe.get_doc(d).insert()\n\n\t\tself.assertRaises(frappe.ValidationError, frappe.get_doc(test_bad_criteria[0]).insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_formula_validate(self):\n\t\tdelete_test_scorecards()\n\t\tself.assertRaises(frappe.ValidationError, frappe.get_doc(test_bad_criteria[1]).insert)\n\t\tself.assertRaises(frappe.ValidationError, frappe.get_doc(test_bad_criteria[2]).insert)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\erpnext_integrations\\doctype\\plaid_settings\\test_plaid_settings.py": [
    {
      "type": "class",
      "line_start": 19,
      "code_text": "class TestPlaidSettings(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef setUp(self):\n\t\tpass",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef tearDown(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_plaid_disabled(self):\n\t\tfrappe.db.set_single_value(\"Plaid Settings\", \"enabled\", 0)\n\t\tself.assertTrue(get_plaid_configuration() == \"disabled\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_add_account_type(self):\n\t\tadd_account_type(\"brokerage\")\n\t\tself.assertEqual(frappe.get_doc(\"Bank Account Type\", \"brokerage\").name, \"brokerage\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef test_add_account_subtype(self):\n\t\tadd_account_subtype(\"loan\")\n\t\tself.assertEqual(frappe.get_doc(\"Bank Account Subtype\", \"loan\").name, \"loan\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef test_new_transaction(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\shipping_rule\\test_shipping_rule.py": [
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def create_shipping_rule(shipping_rule_type, shipping_rule_name):",
      "args": [
        "shipping_rule_type",
        "shipping_rule_name"
      ]
    },
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestShippingRule(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef test_from_greater_than_to(self):\n\t\tshipping_rule = frappe.copy_doc(self.globalTestRecords[\"Shipping Rule\"][0])\n\t\tshipping_rule.name = self.globalTestRecords[\"Shipping Rule\"][0].get(\"name\")\n\t\tshipping_rule.get(\"conditions\")[0].from_value = 101\n\t\tself.assertRaises(FromGreaterThanToError, shipping_rule.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef test_many_zero_to_values(self):\n\t\tshipping_rule = frappe.copy_doc(self.globalTestRecords[\"Shipping Rule\"][0])\n\t\tshipping_rule.name = self.globalTestRecords[\"Shipping Rule\"][0].get(\"name\")\n\t\tshipping_rule.get(\"conditions\")[0].to_value = 0\n\t\tself.assertRaises(ManyBlankToValuesError, shipping_rule.insert)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_overlapping_conditions(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_dimension_filter\\accounting_dimension_filter.py": [
    {
      "type": "function",
      "line_start": 68,
      "code_text": "def get_dimension_filter_map():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class AccountingDimensionFilter(Document):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef before_save(self):\n\t\t# If restriction is not applied on values, then remove all the dimensions and set allow_or_restrict to Restrict\n\t\tif not self.apply_restriction_on_values:\n\t\t\tself.allow_or_restrict = \"Restrict\"\n\t\t\tself.set(\"dimensions\", [])",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate(self):\n\t\tself.validate_applicable_accounts()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef validate_applicable_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 104,
      "code_text": "def build_map(map_object, dimension, account, filter_value, allow_or_restrict, is_mandatory):",
      "args": [
        "map_object",
        "dimension",
        "account",
        "filter_value",
        "allow_or_restrict",
        "is_mandatory"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_goal\\test_quality_goal.py": [
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_quality_goal():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestQualityGoal(IntegrationTestCase):\n\tdef test_quality_goal(self):\n\t\t# no code, just a basic sanity check\n\t\tgoal = get_quality_goal()\n\t\tself.assertTrue(goal)\n\t\tgoal.delete()"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_quality_goal(self):\n\t\t# no code, just a basic sanity check\n\t\tgoal = get_quality_goal()\n\t\tself.assertTrue(goal)\n\t\tgoal.delete()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\currency_exchange_settings\\currency_exchange_settings.py": [
    {
      "type": "function",
      "line_start": 107,
      "code_text": "def get_api_endpoint(service_provider: str | None = None, use_http: bool = False):",
      "args": [
        "service_provider",
        "use_http: bool"
      ]
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class CurrencyExchangeSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tself.set_parameters_and_result()\n\t\tif frappe.flags.in_test or frappe.flags.in_install or frappe.flags.in_setup_wizard:\n\t\t\treturn\n\t\tresponse, value = self.validate_parameters()\n\t\tself.validate_result(response, value)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef set_parameters_and_result(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate_parameters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 92,
      "code_text": "\tdef validate_result(self, response, value):",
      "args": [
        "self",
        "response",
        "value"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_point_entry\\test_loyalty_point_entry.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestLoyaltyPointEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUpClass(cls):",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef tearDownClass(cls):\n\t\t# Delete all Loyalty Point Entries\n\t\tfrappe.db.sql(\"DELETE FROM `tabLoyalty Point Entry` WHERE customer = %s\", cls.customer_name)\n\t\tfrappe.db.sql(\"DELETE FROM `tabSales Invoice` WHERE customer = %s\", cls.customer_name)\n\t\tfrappe.db.commit()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef create_test_invoice(self, redeem=None):",
      "args": [
        "self",
        "redeem"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_add_loyalty_points(self):\n\t\tself.create_test_invoice()\n\t\tdoc = frappe.get_last_doc(\"Loyalty Point Entry\")\n\t\tself.assertEqual(doc.loyalty_points, 10)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef test_add_loyalty_points_with_discretionary_reason(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef test_redeem_loyalty_points(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_period\\test_accounting_period.py": [
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def create_accounting_period(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestAccountingPeriod(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef test_overlap(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_accounting_period(self):\n\t\tap1 = create_accounting_period(period_name=\"Test Accounting Period 2\")\n\t\tap1.save()\n\n\t\tdoc = create_sales_invoice(do_not_save=1, cost_center=\"_Test Company - _TC\", warehouse=\"Stores - _TC\")\n\t\tself.assertRaises(ClosedAccountingPeriod, doc.save)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef tearDown(self):\n\t\tfor d in frappe.get_all(\"Accounting Period\"):\n\t\t\tfrappe.delete_doc(\"Accounting Period\", d.name)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_plan\\subscription_plan.py": [
    {
      "type": "function",
      "line_start": 45,
      "code_text": "def get_plan_rate(\n\tplan, quantity=1, customer=None, start_date=None, end_date=None, prorate_factor=1, party=None\n):",
      "args": [
        "plan",
        "quantity",
        "customer",
        "start_date",
        "end_date",
        "prorate_factor",
        "party"
      ]
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class SubscriptionPlan(Document):"
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef validate(self):\n\t\tself.validate_interval_count()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef validate_interval_count(self):\n\t\tif self.billing_interval_count < 1:\n\t\t\tfrappe.throw(_(\"Billing Interval Count cannot be less than 1\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_prorate_factor(start_date, end_date):",
      "args": [
        "start_date",
        "end_date"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\party_specific_item\\test_party_specific_item.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def create_party_specific_item(**args):",
      "args": [
        "**args"
      ]
    },
    {
      "type": "class",
      "line_start": 21,
      "code_text": "class UnitTestPartySpecificItem(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 30,
      "code_text": "class TestPartySpecificItem(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef setUp(self):\n\t\tself.customer = frappe.get_last_doc(\"Customer\")\n\t\tself.supplier = frappe.get_last_doc(\"Supplier\")\n\t\tself.item = frappe.get_last_doc(\"Item\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_item_query_for_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef test_item_query_for_supplier(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\party_link\\party_link.py": [
    {
      "type": "function",
      "line_start": 70,
      "code_text": "def create_party_link(primary_role, primary_party, secondary_party):",
      "args": [
        "primary_role",
        "primary_party",
        "secondary_party"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PartyLink(Document):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\utils.py": [
    {
      "type": "function",
      "line_start": 92,
      "code_text": "def strip_number(number):",
      "args": [
        "number"
      ]
    },
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def get_last_interaction(contact=None, lead=None):",
      "args": [
        "contact",
        "lead"
      ]
    },
    {
      "type": "function",
      "line_start": 51,
      "code_text": "def get_last_issue_from_customer(customer_name):",
      "args": [
        "customer_name"
      ]
    },
    {
      "type": "function",
      "line_start": 63,
      "code_text": "def get_scheduled_employees_for_popup(communication_medium):",
      "args": [
        "communication_medium"
      ]
    }
  ],
  "erpnext\\support\\doctype\\issue_priority\\test_issue_priority.py": [
    {
      "type": "function",
      "line_start": 24,
      "code_text": "def insert_priority(name):\n\tif not frappe.db.exists(\"Issue Priority\", name):\n\t\tfrappe.get_doc({\"doctype\": \"Issue Priority\", \"name\": name}).insert(ignore_permissions=True)",
      "args": [
        "name"
      ]
    },
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def make_priorities():\n\tinsert_priority(\"Low\")\n\tinsert_priority(\"Medium\")\n\tinsert_priority(\"High\")",
      "args": []
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestIssuePriority(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_priorities(self):\n\t\tmake_priorities()\n\t\tpriorities = frappe.get_list(\"Issue Priority\")\n\n\t\tfor priority in priorities:\n\t\t\tself.assertIn(priority.name, [\"Low\", \"Medium\", \"High\"])",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\depreciation_schedule\\depreciation_schedule.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DepreciationSchedule(Document):"
    }
  ],
  "erpnext\\crm\\report\\opportunity_summary_by_sales_stage\\test_opportunity_summary_by_sales_stage.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestOpportunitySummaryBySalesStage(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcreate_company()\n\t\tcreate_customer()\n\t\tcreate_opportunity()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_opportunity_summary_by_sales_stage(self):\n\t\tself.check_for_opportunity_owner()\n\t\tself.check_for_source()\n\t\tself.check_for_opportunity_type()\n\t\tself.check_all_filters()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef check_for_opportunity_owner(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef check_for_source(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef check_for_opportunity_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef check_all_filters(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\custom\\address.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ERPNextAddress(Address):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef validate(self):\n\t\tself.validate_reference()\n\t\tself.update_compnay_address()\n\t\tsuper().validate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef link_address(self):\n\t\t\"\"\"Link address based on owner\"\"\"\n\t\tif self.is_your_company_address:\n\t\t\treturn\n\n\t\treturn super().link_address()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef update_compnay_address(self):\n\t\tfor link in self.get(\"links\"):\n\t\t\tif link.link_doctype == \"Company\":\n\t\t\t\tself.is_your_company_address = 1",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef validate_reference(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def get_shipping_address(company, address=None):",
      "args": [
        "company",
        "address"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\product_bundle\\product_bundle.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class ProductBundle(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef autoname(self):\n\t\tself.name = self.new_item_code",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef validate(self):\n\t\tself.validate_main_item()\n\t\tself.validate_child_items()\n\t\tfrom erpnext.utilities.transaction_base import validate_uom_is_integer\n\n\t\tvalidate_uom_is_integer(self, \"uom\", \"qty\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef on_trash(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef validate_main_item(self):\n\t\t\"\"\"Validates, main Item is not a stock item\"\"\"\n\t\tif frappe.db.get_value(\"Item\", self.new_item_code, \"is_stock_item\"):\n\t\t\tfrappe.throw(_(\"Parent Item {0} must not be a Stock Item\").format(self.new_item_code))\n\t\tif frappe.db.get_value(\"Item\", self.new_item_code, \"is_fixed_asset\"):\n\t\t\tfrappe.throw(_(\"Parent Item {0} must not be a Fixed Asset\").format(self.new_item_code))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef validate_child_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 94,
      "code_text": "def get_new_item_code(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\report\\sales_register\\test_sales_register.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestItemWiseSalesRegister(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tself.create_child_cost_center()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef create_child_cost_center(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef create_sales_invoice(self, rate=100, do_not_submit=False):",
      "args": [
        "self",
        "rate",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef test_basic_report_output(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 78,
      "code_text": "\tdef test_journal_with_cost_center_filter(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\appointment_booking_settings\\appointment_booking_settings.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class AppointmentBookingSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate(self):\n\t\tself.validate_availability_of_slots()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef save(self):\n\t\tself.number_of_agents = len(self.agent_list)\n\t\tsuper().save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef validate_availability_of_slots(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef validate_from_and_to_time(self, from_time, to_time, record):\n\t\tif from_time > to_time:\n\t\t\terr_msg = _(\"<b>From Time</b> cannot be later than <b>To Time</b> for {0}\").format(\n\t\t\t\trecord.day_of_week\n\t\t\t)\n\t\t\tfrappe.throw(_(err_msg))",
      "args": [
        "self",
        "from_time",
        "to_time",
        "record"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef duration_is_divisible(self, from_time, to_time):\n\t\ttimedelta = to_time - from_time\n\t\tif timedelta.total_seconds() % (self.appointment_duration * 60):\n\t\t\tfrappe.throw(_(\"The difference between from time and To Time must be a multiple of Appointment\"))",
      "args": [
        "self",
        "from_time",
        "to_time"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\appointment\\test_appointment.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def create_test_appointment():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class TestAppointment(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tfrappe.db.delete(\"Lead\", {\"email_id\": LEAD_EMAIL})",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef setUp(self):\n\t\tself.test_appointment = create_test_appointment()\n\t\tself.test_appointment.set_verified(self.test_appointment.customer_email)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef test_calendar_event_created(self):\n\t\tcal_event = frappe.get_doc(\"Event\", self.test_appointment.calendar_event)\n\t\tself.assertEqual(cal_event.starts_on, self.test_appointment.scheduled_time)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_lead_linked(self):\n\t\tself.assertTrue(self.test_appointment.party)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_goal\\quality_goal.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QualityGoal(Document):"
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef validate(self):\n\t\tpass",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\general_ledger\\test_general_ledger.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestGeneralLedger(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef setUp(self):\n\t\tself.company = \"_Test Company\"\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef clear_old_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_foreign_account_balance_after_exchange_rate_revaluation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 171,
      "code_text": "\tdef test_ignore_exchange_rate_journals_filter(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 271,
      "code_text": "\tdef test_ignore_cr_dr_notes_filter(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_invoice_reference\\pos_invoice_reference.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSInvoiceReference(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_order\\test_payment_order.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class UnitTestPaymentOrder(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class TestPaymentOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef test_payment_order_creation_against_payment_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def create_payment_order_against_payment_entry(ref_doc, order_type, bank_account):",
      "args": [
        "ref_doc",
        "order_type",
        "bank_account"
      ]
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_visit\\test_maintenance_visit.py": [
    {
      "type": "function",
      "line_start": 14,
      "code_text": "def make_maintenance_visit():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestMaintenanceVisit(IntegrationTestCase):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def make_sales_person(name):\n\tsales_person = frappe.get_doc({\"doctype\": \"Sales Person\", \"sales_person_name\": name})\n\tsales_person.insert(ignore_if_duplicate=True)\n\n\treturn sales_person",
      "args": [
        "name"
      ]
    }
  ],
  "erpnext\\regional\\address_template\\test_regional_address_template.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def ensure_country(country):",
      "args": [
        "country"
      ]
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestRegionalAddressTemplate(TestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef test_get_address_templates(self):\n\t\t\"\"\"Get the countries and paths from the templates directory.\"\"\"\n\t\ttemplates = get_address_templates()\n\t\tself.assertIsInstance(templates, list)\n\t\tself.assertIsInstance(templates[0], tuple)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_create_address_template(self):\n\t\t\"\"\"Create a new Address Template.\"\"\"\n\t\tcountry = ensure_country(\"Germany\")\n\t\tupdate_address_template(country.name, \"TEST\")\n\t\tdoc = frappe.get_doc(\"Address Template\", country.name)\n\t\tself.assertEqual(doc.template, \"TEST\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef test_update_address_template(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\telephony\\doctype\\incoming_call_settings\\incoming_call_settings.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class IncomingCallSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef validate_call_schedule_timeslot(self, schedule: list):",
      "args": [
        "self",
        "schedule: list"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef validate_call_schedule_overlaps(self, schedule: list):",
      "args": [
        "self",
        "schedule: list"
      ]
    },
    {
      "type": "method",
      "line_start": 75,
      "code_text": "\tdef check_timeslots_overlap(ts1: tuple[int, int], ts2: tuple[int, int]) -> bool:\n\t\tif (ts1[0] < ts2[0] and ts1[1] <= ts2[0]) or (ts1[0] >= ts2[1] and ts1[1] > ts2[1]):\n\t\t\treturn False\n\t\treturn True",
      "args": [
        "ts1",
        "ts2"
      ]
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef time_to_seconds(time: str) -> int:\n\t\t\"\"\"Convert time string of format HH:MM:SS into seconds\"\"\"\n\t\tdate_time = datetime.strptime(time, \"%H:%M:%S\")\n\t\treturn date_time - datetime(1900, 1, 1)",
      "args": [
        "time: str"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_analytics\\test_analytics.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestAnalytics(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_sales_analytics(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef compare_result_for_customer(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef compare_result_for_customer_group(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 123,
      "code_text": "\tdef compare_result_for_customer_based_on_quantity(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 193,
      "code_text": "def create_sales_orders():",
      "args": []
    }
  ],
  "erpnext\\selling\\doctype\\selling_settings\\selling_settings.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class SellingSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 47,
      "code_text": "\tdef on_update(self):\n\t\tself.toggle_hide_tax_id()\n\t\tself.toggle_editable_rate_for_bundle_items()\n\t\tself.toggle_discount_accounting_fields()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef toggle_hide_tax_id(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 84,
      "code_text": "\tdef toggle_editable_rate_for_bundle_items(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 96,
      "code_text": "\tdef toggle_discount_accounting_fields(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\account_closing_balance\\account_closing_balance.py": [
    {
      "type": "function",
      "line_start": 40,
      "code_text": "def make_closing_entries(closing_entries, voucher_name, company, closing_date):",
      "args": [
        "closing_entries",
        "voucher_name",
        "company",
        "closing_date"
      ]
    },
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class AccountClosingBalance(Document):"
    },
    {
      "type": "function",
      "line_start": 63,
      "code_text": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions):",
      "args": [
        "entries",
        "accounting_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def generate_key(entry, accounting_dimensions):",
      "args": [
        "entry",
        "accounting_dimensions"
      ]
    },
    {
      "type": "function",
      "line_start": 112,
      "code_text": "def get_previous_closing_entries(company, closing_date, accounting_dimensions):",
      "args": [
        "company",
        "closing_date",
        "accounting_dimensions"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\manufacturing_settings\\manufacturing_settings.py": [
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def get_mins_between_operations():\n\treturn relativedelta(\n\t\tminutes=cint(frappe.db.get_single_value(\"Manufacturing Settings\", \"mins_between_operations\")) or 10\n\t)",
      "args": []
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class ManufacturingSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef before_save(self):\n\t\tself.reset_values()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef reset_values(self):\n\t\tif self.backflush_raw_materials_based_on != \"BOM\" and self.validate_components_quantities_per_bom:\n\t\t\tself.validate_components_quantities_per_bom = 0",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 56,
      "code_text": "def is_material_consumption_enabled():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\item_alternative\\item_alternative.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemAlternative(Document):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef validate(self):\n\t\tself.has_alternative_item()\n\t\tself.validate_alternative_item()\n\t\tself.validate_duplicate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef has_alternative_item(self):\n\t\tif self.item_code and not frappe.db.get_value(\"Item\", self.item_code, \"allow_alternative_item\"):\n\t\t\tfrappe.throw(_(\"Not allow to set alternative item for the item {0}\").format(self.item_code))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef validate_alternative_item(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef validate_duplicate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 86,
      "code_text": "def get_alternative_items(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cashier_closing\\cashier_closing.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class CashierClosing(Document):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate(self):\n\t\tself.validate_time()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef before_save(self):\n\t\tself.get_outstanding()\n\t\tself.make_calculations()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef get_outstanding(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef make_calculations(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate_time(self):\n\t\tif self.from_time >= self.time:\n\t\t\tfrappe.throw(_(\"From Time Should Be Less Than To Time\"))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_opening_entry\\pos_opening_entry.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class POSOpeningEntry(StatusUpdater):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate(self):\n\t\tself.validate_pos_profile_and_cashier()\n\t\tself.validate_payment_method_account()\n\t\tself.set_status()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate_pos_profile_and_cashier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef validate_payment_method_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef on_submit(self):\n\t\tself.set_status(update=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 74,
      "code_text": "\tdef on_cancel(self):\n\t\tself.set_status(update=True)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_merge\\ledger_merge.py": [
    {
      "type": "function",
      "line_start": 62,
      "code_text": "def start_merge(docname):",
      "args": [
        "docname"
      ]
    },
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class LedgerMerge(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef start_merge(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 58,
      "code_text": "def form_start_merge(docname):\n\treturn frappe.get_doc(\"Ledger Merge\", docname).start_merge()",
      "args": [
        "docname"
      ]
    }
  ],
  "erpnext\\buying\\report\\requested_items_to_order_and_receive\\test_requested_items_to_order_and_receive.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestRequestedItemsToOrderAndReceive(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_date_range(self):\n\t\tdata = get_data(self.filters)\n\t\tself.assertEqual(len(data), 2)  # MRs today should be fetched\n\n\t\tdata = get_data(self.filters.update({\"from_date\": add_days(today(), 10)}))\n\t\tself.assertEqual(len(data), 0)  # MRs today should not be fetched as from date is in future",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_ordered_received_material_requests(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef setup_material_request(self, order=False, receive=False, days=0):",
      "args": [
        "self",
        "order",
        "receive",
        "days"
      ]
    }
  ],
  "erpnext\\accounts\\report\\supplier_ledger_summary\\test_supplier_ledger_summary.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestSupplierLedgerSummary(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_supplier()\n\t\tself.create_item()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef create_purchase_invoice(self, do_not_submit=False):",
      "args": [
        "self",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_basic_supplier_ledger_summary(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_supplier_ledger_summary_with_filters(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\data\\dashboard_charts.py": [
    {
      "type": "function",
      "line_start": 148,
      "code_text": "def get_account(account_type, company):\n\taccounts = frappe.get_list(\"Account\", filters={\"account_type\": account_type, \"company\": company})\n\tif accounts:\n\t\treturn accounts[0].name",
      "args": [
        "account_type",
        "company"
      ]
    },
    {
      "type": "function",
      "line_start": 6,
      "code_text": "def get_company_for_dashboards():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def get_default_dashboards():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\coupon_code\\test_coupon_code.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def test_create_test_data():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 113,
      "code_text": "class TestCouponCode(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef setUp(self):\n\t\ttest_create_test_data()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 117,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.set_user(\"Administrator\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 120,
      "code_text": "\tdef test_sales_order_with_coupon_code(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 146,
      "code_text": "\tdef test_coupon_without_max_use(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_alternative\\test_item_alternative.py": [
    {
      "type": "class",
      "line_start": 29,
      "code_text": "class UnitTestItemAlternative(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 38,
      "code_text": "class TestItemAlternative(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tmake_items()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_alternative_item_for_subcontract_rm(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 130,
      "code_text": "\tdef test_alternative_item_for_production_rm(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 179,
      "code_text": "def make_items():",
      "args": []
    }
  ],
  "erpnext\\assets\\doctype\\asset_shift_allocation\\test_asset_shift_allocation.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class UnitTestAssetShiftAllocation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class TestAssetShiftAllocation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef setUpClass(cls):\n\t\tsuper().setUpClass()\n\t\tcreate_asset_shift_factors()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef tearDownClass(cls):\n\t\tfrappe.db.rollback()",
      "args": [
        "cls"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_asset_shift_allocation(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 114,
      "code_text": "def create_asset_shift_factors():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\item_manufacturer\\item_manufacturer.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemManufacturer(Document):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef validate(self):\n\t\tself.validate_duplicate_entry()\n\t\tself.manage_default_item_manufacturer()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef on_trash(self):\n\t\tself.manage_default_item_manufacturer(delete=True)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate_duplicate_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef manage_default_item_manufacturer(self, delete=False):",
      "args": [
        "self",
        "delete"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_item_manufacturer_part_no(item_code, manufacturer):\n\treturn frappe.db.get_value(\n\t\t\"Item Manufacturer\",\n\t\t{\"item_code\": item_code, \"manufacturer\": manufacturer},\n\t\t\"manufacturer_part_no\",\n\t)",
      "args": [
        "item_code",
        "manufacturer"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounts_settings\\accounts_settings.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class AccountsSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 71,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 100,
      "code_text": "\tdef validate_stale_days(self):\n\t\tif not self.allow_stale and cint(self.stale_days) <= 0:\n\t\t\tfrappe.msgprint(\n\t\t\t\t_(\"Stale Days should start from 1.\"), title=\"Error\", indicator=\"red\", raise_exception=1\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 106,
      "code_text": "\tdef enable_payment_schedule_in_print(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 121,
      "code_text": "\tdef validate_pending_reposts(self):\n\t\tif self.acc_frozen_upto:\n\t\t\tcheck_pending_reposting(self.acc_frozen_upto)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 125,
      "code_text": "\tdef validate_and_sync_auto_reconcile_config(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\authorization_control\\authorization_control.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class AuthorizationControl(TransactionBase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef get_appr_user_role(self, det, doctype_name, total, based_on, condition, master_name, company):",
      "args": [
        "self",
        "det",
        "doctype_name",
        "total",
        "based_on",
        "condition",
        "master_name",
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef validate_auth_rule(self, doctype_name, total, based_on, cond, company, master_name=\"\"):",
      "args": [
        "self",
        "doctype_name",
        "total",
        "based_on",
        "cond",
        "company",
        "master_name"
      ]
    },
    {
      "type": "method",
      "line_start": 116,
      "code_text": "\tdef bifurcate_based_on_type(self, doctype_name, total, av_dis, based_on, doc_obj, val, company):",
      "args": [
        "self",
        "doctype_name",
        "total",
        "av_dis",
        "based_on",
        "doc_obj",
        "val",
        "company"
      ]
    },
    {
      "type": "method",
      "line_start": 151,
      "code_text": "\tdef validate_approving_authority(self, doctype_name, company, total, doc_obj=\"\"):",
      "args": [
        "self",
        "doctype_name",
        "company",
        "total",
        "doc_obj"
      ]
    },
    {
      "type": "method",
      "line_start": 232,
      "code_text": "\tdef get_value_based_rule(self, doctype_name, employee, total_claimed_amount, company):",
      "args": [
        "self",
        "doctype_name",
        "employee",
        "total_claimed_amount",
        "company"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\sales_team\\sales_team.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesTeam(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_reconciliation_tool\\test_bank_reconciliation_tool.py": [
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestBankReconciliationTool(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef create_bank_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 52,
      "code_text": "\tdef test_auto_reconcile(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\general_and_payment_ledger_comparison\\test_general_and_payment_ledger_comparison.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestGeneralAndPaymentLedger(IntegrationTestCase, AccountsTestMixin):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.cleanup()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef cleanup(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_01_basic_report_functionality(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_reactivity.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestReactivity(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef disable_dimensions(self):\n\t\tres = frappe.db.get_all(\"Accounting Dimension\", filters={\"disabled\": False})\n\t\tfor x in res:\n\t\t\tdim = frappe.get_doc(\"Accounting Dimension\", x.name)\n\t\t\tdim.disabled = True\n\t\t\tdim.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef test_01_basic_item_details(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\monthly_distribution\\monthly_distribution.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class MonthlyDistribution(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef get_months(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate(self):\n\t\ttotal = sum(flt(d.percentage_allocation) for d in self.get(\"percentages\"))\n\n\t\tif flt(total, 2) != 100.0:\n\t\t\tfrappe.throw(_(\"Percentage Allocation should be equal to 100%\") + f\" ({flt(total, 2)!s}%)\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 60,
      "code_text": "def get_periodwise_distribution_data(distribution_id, period_list, periodicity):",
      "args": [
        "distribution_id",
        "period_list",
        "periodicity"
      ]
    },
    {
      "type": "function",
      "line_start": 73,
      "code_text": "def get_percentage(doc, start_date, period):",
      "args": [
        "doc",
        "start_date",
        "period"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\sales_partner\\sales_partner.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class SalesPartner(WebsiteGenerator):"
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef autoname(self):\n\t\tself.name = self.partner_name",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef validate(self):\n\t\tif not self.route:\n\t\t\tself.route = \"partners/\" + self.scrub(self.partner_name)\n\t\tsuper().validate()\n\t\tif self.partner_website and not self.partner_website.startswith(\"http\"):\n\t\t\tself.partner_website = \"http://\" + self.partner_website",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef get_context(self, context):",
      "args": [
        "self",
        "context"
      ]
    }
  ],
  "erpnext\\utilities\\naming.py": [
    {
      "type": "function",
      "line_start": 9,
      "code_text": "def set_by_naming_series(doctype, fieldname, naming_series, hide_name_field=True, make_mandatory=1):",
      "args": [
        "doctype",
        "fieldname",
        "naming_series",
        "hide_name_field",
        "make_mandatory"
      ]
    },
    {
      "type": "class",
      "line_start": 5,
      "code_text": "class NamingSeriesNotSetError(frappe.ValidationError):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_tool\\test_bom_update_tool.py": [
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class UnitTestBomUpdateTool(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestBOMUpdateTool(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_replace_bom(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef test_bom_cost(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_taxes_and_charges\\purchase_taxes_and_charges.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseTaxesandCharges(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_schedule\\payment_schedule.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentSchedule(Document):"
    }
  ],
  "erpnext\\portal\\utils.py": [
    {
      "type": "function",
      "line_start": 85,
      "code_text": "def party_exists(doctype, user):",
      "args": [
        "doctype",
        "user"
      ]
    },
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def set_default_role(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 22,
      "code_text": "def create_customer_or_supplier():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def create_party_contact(doctype, fullname, user, party_name):",
      "args": [
        "doctype",
        "fullname",
        "user",
        "party_name"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\workstation_type\\workstation_type.py": [
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def get_workstations(workstation_type):\n\tworkstations = frappe.get_all(\n\t\t\"Workstation\", filters={\"workstation_type\": workstation_type}, order_by=\"creation\"\n\t)\n\n\treturn [workstation.name for workstation in workstations]",
      "args": [
        "workstation_type"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class WorkstationType(Document):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef before_save(self):\n\t\tself.set_hour_rate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef set_hour_rate(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\plant_floor\\plant_floor.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class PlantFloor(Document):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef make_stock_entry(self, kwargs):",
      "args": [
        "self",
        "kwargs"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef get_item_details(self, kwargs) -> list[dict]:",
      "args": [
        "self",
        "kwargs"
      ]
    },
    {
      "type": "function",
      "line_start": 69,
      "code_text": "def get_stock_summary(warehouse, start=0, item_code=None, item_group=None):",
      "args": [
        "warehouse",
        "start",
        "item_code",
        "item_group"
      ]
    },
    {
      "type": "function",
      "line_start": 89,
      "code_text": "def get_stock_details(warehouse, start=0, item_code=None, item_group=None):",
      "args": [
        "warehouse",
        "start",
        "item_code",
        "item_group"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_deferred_accounting\\test_process_deferred_accounting.py": [
    {
      "type": "function",
      "line_start": 82,
      "code_text": "def change_acc_settings(acc_frozen_upto=\"\", book_deferred_entries_based_on=\"Days\"):\n\tacc_settings = frappe.get_doc(\"Accounts Settings\", \"Accounts Settings\")\n\tacc_settings.acc_frozen_upto = acc_frozen_upto\n\tacc_settings.book_deferred_entries_based_on = book_deferred_entries_based_on\n\tacc_settings.save()",
      "args": [
        "acc_frozen_upto",
        "book_deferred_entries_based_on"
      ]
    },
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestProcessDeferredAccounting(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef test_creation_of_ledger_entry_on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 68,
      "code_text": "\tdef test_pda_submission_and_cancellation(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\global_defaults\\global_defaults.py": [
    {
      "type": "class",
      "line_start": 25,
      "code_text": "class GlobalDefaults(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef on_update(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 59,
      "code_text": "\tdef get_defaults(self):\n\t\treturn frappe.defaults.get_defaults()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 62,
      "code_text": "\tdef toggle_rounded_total(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 114,
      "code_text": "\tdef toggle_in_words(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_gateway_account\\payment_gateway_account.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PaymentGatewayAccount(Document):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef autoname(self):\n\t\tself.name = self.payment_gateway + \" - \" + self.currency",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef validate(self):\n\t\tself.currency = frappe.get_cached_value(\"Account\", self.payment_account, \"account_currency\")\n\n\t\tself.update_default_payment_gateway()\n\t\tself.set_as_default_if_not_set()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef update_default_payment_gateway(self):\n\t\tif self.is_default:\n\t\t\tfrappe.db.sql(\n\t\t\t\t\"\"\"update `tabPayment Gateway Account` set is_default = 0\n\t\t\t\twhere is_default = 1 \"\"\"\n\t\t\t)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef set_as_default_if_not_set(self):\n\t\tif not frappe.db.get_value(\n\t\t\t\"Payment Gateway Account\", {\"is_default\": 1, \"name\": (\"!=\", self.name)}, \"name\"\n\t\t):\n\t\t\tself.is_default = 1",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\sales_taxes_and_charges\\sales_taxes_and_charges.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesTaxesandCharges(Document):"
    }
  ],
  "erpnext\\manufacturing\\report\\test_reports.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestManufacturingReports(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef setUp(self):\n\t\tself.setup_default_filters()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef setup_default_filters(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_execute_all_manufacturing_reports(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\supplier_group\\supplier_group.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class SupplierGroup(NestedSet):"
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef validate(self):\n\t\tif not self.parent_supplier_group:\n\t\t\tself.parent_supplier_group = get_root_of(\"Supplier Group\")\n\t\tself.validate_currency_for_payable_and_advance_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate_currency_for_payable_and_advance_account(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 66,
      "code_text": "\tdef on_update(self):\n\t\tNestedSet.on_update(self)\n\t\tself.validate_one_root()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 70,
      "code_text": "\tdef on_trash(self):\n\t\tNestedSet.validate_if_child_exists(self)\n\t\tfrappe.utils.nestedset.update_nsm(self)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\payment_ledger\\test_payment_ledger.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestPaymentLedger(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.cleanup()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef cleanup(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef create_company(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_unpaid_invoice_outstanding(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\gl_entry\\test_gl_entry.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestGLEntry(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_round_off_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_rename_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 82,
      "code_text": "\tdef test_validate_account_party_type(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 127,
      "code_text": "\tdef test_validate_account_party_type_shareholder(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\item_wise_purchase_register\\test_item_wise_purchase_register.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestItemWisePurchaseRegister(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_supplier()\n\t\tself.create_item()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef create_purchase_invoice(self, do_not_submit=False):",
      "args": [
        "self",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_basic_report_output(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_terms_template\\test_payment_terms_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestPaymentTermsTemplate(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.delete_doc(\"Payment Terms Template\", \"_Test Payment Terms Template For Test\", force=1)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_create_template(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef test_credit_days(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 61,
      "code_text": "\tdef test_duplicate_terms(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\accounts_receivable_summary\\test_accounts_receivable_summary.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestAccountsReceivable(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef setUp(self):\n\t\tself.maxDiff = None\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tself.clear_old_entries()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 22,
      "code_text": "\tdef test_01_receivable_summary_output(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 116,
      "code_text": "\tdef test_02_various_filters_and_output(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\item_wise_sales_register\\test_item_wise_sales_register.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestItemWiseSalesRegister(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef create_sales_invoice(self, do_not_submit=False):",
      "args": [
        "self",
        "do_not_submit"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef test_basic_report_output(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\regional\\doctype\\lower_deduction_certificate\\lower_deduction_certificate.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class LowerDeductionCertificate(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tself.validate_dates()\n\t\tself.validate_supplier_against_tax_category()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef validate_dates(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 50,
      "code_text": "\tdef validate_supplier_against_tax_category(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 72,
      "code_text": "\tdef are_dates_overlapping(self, duplicate_certificate):",
      "args": [
        "self",
        "duplicate_certificate"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\mode_of_payment\\mode_of_payment.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ModeofPayment(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef validate(self):\n\t\tself.validate_accounts()\n\t\tself.validate_repeating_companies()\n\t\tself.validate_pos_mode_of_payment()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate_repeating_companies(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef validate_accounts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 53,
      "code_text": "\tdef validate_pos_mode_of_payment(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_settings\\test_stock_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UnitTestStockSettings(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 18,
      "code_text": "class TestStockSettings(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 19,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tfrappe.db.set_single_value(\"Stock Settings\", \"clean_description_html\", 0)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_settings(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef test_clean_html(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\accounts_payable\\test_accounts_payable.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestAccountsPayable(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef setUp(self):\n\t\tself.create_company()\n\t\tself.create_customer()\n\t\tself.create_item()\n\t\tself.create_supplier(currency=\"USD\", supplier_name=\"Test Supplier2\")\n\t\tself.create_usd_payable_account()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_accounts_payable_for_foreign_currency_supplier(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef create_purchase_invoice(self, do_not_submit=False):",
      "args": [
        "self",
        "do_not_submit"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\landed_cost_taxes_and_charges\\landed_cost_taxes_and_charges.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LandedCostTaxesandCharges(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_variable\\test_supplier_scorecard_variable.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class UnitTestSupplierScorecardVariable(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 22,
      "code_text": "class TestSupplierScorecardVariable(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_variable_exist(self):\n\t\tfor d in test_existing_variables:\n\t\t\tmy_doc = frappe.get_doc(\"Supplier Scorecard Variable\", d.get(\"name\"))\n\t\t\tself.assertEqual(my_doc.param_name, d.get(\"param_name\"))\n\t\t\tself.assertEqual(my_doc.variable_label, d.get(\"variable_label\"))\n\t\t\tself.assertEqual(my_doc.path, d.get(\"path\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_path_exists(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_default\\item_default.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemDefault(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction\\bank_transaction_upload.py": [
    {
      "type": "function",
      "line_start": 13,
      "code_text": "def upload_bank_statement():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def create_bank_entries(columns, data, bank_account):",
      "args": [
        "columns",
        "data",
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 65,
      "code_text": "def get_header_mapping(columns, bank_account):",
      "args": [
        "columns",
        "bank_account"
      ]
    },
    {
      "type": "function",
      "line_start": 76,
      "code_text": "def get_bank_mapping(bank_account):",
      "args": [
        "bank_account"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_clearance\\bank_clearance.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class BankClearance(Document):"
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef get_payment_entries(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 91,
      "code_text": "\tdef update_clearance_date(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 134,
      "code_text": "def get_payment_entries_for_bank_clearance(\n\tfrom_date, to_date, account, bank_account, include_reconciled_entries, include_pos_transactions\n):",
      "args": [
        "from_date",
        "to_date",
        "account",
        "bank_account",
        "include_reconciled_entries",
        "include_pos_transactions"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\buying_settings\\buying_settings.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class BuyingSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 57,
      "code_text": "\tdef before_save(self):\n\t\tself.check_maintain_same_rate()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 60,
      "code_text": "\tdef check_maintain_same_rate(self):\n\t\tif self.maintain_same_rate:\n\t\t\tself.set_landed_cost_based_on_purchase_invoice_rate = 0",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_mapper.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestMapper(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef test_map_docs(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef make_quotation(self, item_list, customer):",
      "args": [
        "self",
        "item_list",
        "customer"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef make_sales_order(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\bin\\test_bin.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class UnitTestBin(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestBin(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_concurrent_inserts(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_index_exists(self):\n\t\tindexes = frappe.db.sql(\"show index from tabBin where Non_unique = 0\", as_dict=1)\n\t\tif not any(index.get(\"Key_name\") == \"unique_item_warehouse\" for index in indexes):\n\t\t\tself.fail(\"Expected unique index on item-warehouse\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\utilities\\__init__.py": [
    {
      "type": "function",
      "line_start": 44,
      "code_text": "def payment_app_import_guard():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def update_doctypes():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 28,
      "code_text": "def get_site_info(site_info):",
      "args": [
        "site_info"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bank_guarantee\\bank_guarantee.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class BankGuarantee(Document):"
    },
    {
      "type": "method",
      "line_start": 45,
      "code_text": "\tdef validate(self):\n\t\tif not (self.customer or self.supplier):\n\t\t\tfrappe.throw(_(\"Select the customer or supplier.\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef on_submit(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 59,
      "code_text": "def get_voucher_details(bank_guarantee_type: str, reference_name: str):",
      "args": [
        "bank_guarantee_type: str",
        "reference_name: str"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\sms_center\\sms_center.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class SMSCenter(Document):"
    },
    {
      "type": "method",
      "line_start": 43,
      "code_text": "\tdef create_receiver_list(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 111,
      "code_text": "\tdef get_receiver_nos(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 126,
      "code_text": "\tdef send_sms(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_terms_template\\payment_terms_template.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class PaymentTermsTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef validate(self):\n\t\tself.validate_invoice_portion()\n\t\tself.validate_terms()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef validate_invoice_portion(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 41,
      "code_text": "\tdef validate_terms(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_variant_settings\\item_variant_settings.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemVariantSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef set_default_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef remove_invalid_fields_for_copy_fields_in_variants(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 65,
      "code_text": "\tdef validate(self):\n\t\tfor d in self.fields:\n\t\t\tif d.field_name in self.invalid_fields_for_copy_fields_in_variants:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\"Cannot set the field <b>{0}</b> for copying in variants\").format(d.field_name)\n\t\t\t\t)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\tests\\test_init.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestInit(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_encode_company_abbr(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef test_translation_files(self):\n\t\tfrom frappe.tests.test_translate import verify_translation_files\n\n\t\tverify_translation_files(\"erpnext\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 49,
      "code_text": "\tdef test_patches(self):\n\t\tfrom frappe.tests.test_patches import check_patch_files\n\n\t\tcheck_patch_files(\"erpnext\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_invoice_item\\purchase_invoice_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseInvoiceItem(Document):"
    }
  ],
  "erpnext\\tests\\test_zform_loads.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestFormLoads(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef test_load(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef assertFormLoad(self, doctype, docname):",
      "args": [
        "self",
        "doctype",
        "docname"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef assertDocPrint(self, doctype, docname):",
      "args": [
        "self",
        "doctype",
        "docname"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\item_attribute\\test_item_attribute.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class UnitTestItemAttribute(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestItemAttribute(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef setUp(self):\n\t\tsuper().setUp()\n\t\tif frappe.db.exists(\"Item Attribute\", \"_Test_Length\"):\n\t\t\tfrappe.delete_doc(\"Item Attribute\", \"_Test_Length\")",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_numeric_item_attribute(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_deferred_accounting\\process_deferred_accounting.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class ProcessDeferredAccounting(Document):"
    },
    {
      "type": "method",
      "line_start": 35,
      "code_text": "\tdef validate(self):\n\t\tif self.end_date < self.start_date:\n\t\t\tfrappe.throw(_(\"End date cannot be before start date\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef on_submit(self):\n\t\tconditions = build_conditions(self.type, self.account, self.company)\n\t\tif self.type == \"Income\":\n\t\t\tconvert_deferred_revenue_to_income(self.name, self.start_date, self.end_date, conditions)\n\t\telse:\n\t\t\tconvert_deferred_expense_to_expense(self.name, self.start_date, self.end_date, conditions)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 46,
      "code_text": "\tdef on_cancel(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_review\\test_quality_review.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestQualityReview(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_review_creation(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\shareholder\\shareholder.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class Shareholder(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef on_trash(self):\n\t\tdelete_contact_and_address(\"Shareholder\", self.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 39,
      "code_text": "\tdef before_save(self):\n\t\tfor entry in self.share_balance:\n\t\t\tentry.amount = entry.no_of_shares * entry.rate",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\authorization_rule\\authorization_rule.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class AuthorizationRule(Document):"
    },
    {
      "type": "method",
      "line_start": 51,
      "code_text": "\tdef check_duplicate_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 73,
      "code_text": "\tdef validate_rule(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 97,
      "code_text": "\tdef validate(self):\n\t\tself.check_duplicate_entry()\n\t\tself.validate_rule()\n\t\tif not self.value:\n\t\t\tself.value = 0.0",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\report\\available_serial_no\\test_available_serial_no.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestStockLedgerReeport(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_available_serial_no(self):",
      "args": [
        "self"
      ]
    }
  ],
  ".github\\helper\\documentation.py": [
    {
      "type": "function",
      "line_start": 18,
      "code_text": "def is_valid_url(url: str) -> bool:\n\tparts = urlparse(url)\n\treturn all((parts.scheme, parts.netloc, parts.path))",
      "args": [
        "url: str"
      ]
    },
    {
      "type": "function",
      "line_start": 23,
      "code_text": "def is_documentation_link(word: str) -> bool:",
      "args": [
        "word: str"
      ]
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def contains_documentation_link(body: str) -> bool:\n\treturn any(is_documentation_link(word) for line in body.splitlines() for word in line.split())",
      "args": [
        "body: str"
      ]
    },
    {
      "type": "function",
      "line_start": 43,
      "code_text": "def check_pull_request(number: str) -> \"tuple[int, str]\":",
      "args": [
        "number: str"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_reposting_settings\\test_stock_reposting_settings.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestStockRepostingSettings(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_notify_reposting_error_to_role(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 42,
      "code_text": "\tdef test_do_reposting_for_each_stock_transaction(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 67,
      "code_text": "\tdef test_do_not_reposting_for_each_stock_transaction(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_quotation\\test_supplier_quotation.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class UnitTestSupplierQuotation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestPurchaseOrder(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_supplier_quotation_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_make_purchase_order(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_bom\\test_subcontracting_bom.py": [
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def create_subcontracting_bom(**kwargs):",
      "args": [
        "**kwargs"
      ]
    },
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestSubcontractingBom(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestSubcontractingBOM(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_merge\\test_ledger_merge.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestLedgerMerge(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_merge_success(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 56,
      "code_text": "\tdef test_partial_merge_success(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 105,
      "code_text": "\tdef tearDown(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_transaction_base.py": [
    {
      "type": "class",
      "line_start": 7,
      "code_text": "class TestUtils(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 8,
      "code_text": "\tdef test_reset_default_field_value(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef test_reset_default_field_value_in_mfg_stock_entry(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 63,
      "code_text": "\tdef test_reset_default_field_value_in_transfer_stock_entry(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\party_account\\party_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PartyAccount(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\item_tax_template\\item_tax_template.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemTaxTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef validate(self):\n\t\tself.validate_tax_accounts()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef autoname(self):\n\t\tif self.company and self.title:\n\t\t\tabbr = frappe.get_cached_value(\"Company\", self.company, \"abbr\")\n\t\t\tself.name = f\"{self.title} - {abbr}\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate_tax_accounts(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\selling\\report\\sales_partner_target_variance_based_on_item_group\\test_sales_partner_target_variance_based_on_item_group.py": [
    {
      "type": "class",
      "line_start": 16,
      "code_text": "class TestSalesPartnerTargetVarianceBasedOnItemGroup(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 17,
      "code_text": "\tdef setUp(self):\n\t\tself.fiscal_year = get_fiscal_year(nowdate())[0]",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 20,
      "code_text": "\tdef tearDown(self):\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef test_achieved_target_and_variance_for_partner(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\report\\reserved_stock\\test_reserved_stock.py": [
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestReservedStock(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 18,
      "code_text": "\tdef setUp(self) -> None:\n\t\tsuper().setUp()\n\t\tself.stock_qty = 100\n\t\tself.warehouse = \"_Test Warehouse - _TC\"",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tcancel_all_stock_reservation_entries()\n\t\treturn super().tearDown()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef test_reserved_stock_report(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\setup_wizard\\operations\\company_setup.py": [
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_fy_details(fy_start_date, fy_end_date):",
      "args": [
        "fy_start_date",
        "fy_end_date"
      ]
    },
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def create_fiscal_year_and_company(args):",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\finance_book\\test_finance_book.py": [
    {
      "type": "function",
      "line_start": 34,
      "code_text": "def create_finance_book():",
      "args": []
    },
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestFinanceBook(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_finance_book(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\regional\\united_states\\test_united_states.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestUnitedStates(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_irs_1099_custom_field(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_irs_1099_report(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 39,
      "code_text": "def make_payment_entry_to_irs_1099_supplier():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\bank\\bank.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class Bank(Document):"
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 36,
      "code_text": "\tdef on_trash(self):\n\t\tdelete_contact_and_address(\"Bank\", self.name)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\fiscal_year\\test_fiscal_year.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestFiscalYear(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_extra_year(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def test_record_generator():",
      "args": []
    }
  ],
  "erpnext\\utilities\\doctype\\video_settings\\video_settings.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class VideoSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef validate(self):\n\t\tself.validate_youtube_api_key()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef validate_youtube_api_key(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\currency_exchange\\currency_exchange.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class CurrencyExchange(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 48,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry_type\\test_stock_entry_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestStockEntryType(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_stock_entry_type_non_standard(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef test_stock_entry_type_is_standard(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_subscription\\process_subscription.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class ProcessSubscription(Document):"
    },
    {
      "type": "method",
      "line_start": 25,
      "code_text": "\tdef on_submit(self):\n\t\tprocess_all(subscription=self.subscription, posting_date=self.posting_date)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def create_subscription_process(\n\tsubscription: str | None = None, posting_date: DateTimeLikeObject | None = None",
      "args": [
        "subscription",
        "posting_date"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_shift_factor\\asset_shift_factor.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AssetShiftFactor(Document):"
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef validate(self):\n\t\tself.validate_default()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef validate_default(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\contract_template\\contract_template.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class ContractTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tif self.contract_terms:\n\t\t\tvalidate_template(self.contract_terms)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def get_contract_template(template_name, doc):",
      "args": [
        "template_name",
        "doc"
      ]
    }
  ],
  "erpnext\\edi\\doctype\\code_list\\code_list_import.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def import_genericode():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 85,
      "code_text": "def process_genericode_import(\n\tcode_list_name: str,",
      "args": [
        "code_list_name: str",
        "file_name: str",
        "code_column: str",
        "title_column",
        "description_column",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 100,
      "code_text": "def get_genericode_columns_and_examples(root):",
      "args": [
        "root"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback\\quality_feedback.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityFeedback(Document):"
    },
    {
      "type": "method",
      "line_start": 29,
      "code_text": "\tdef set_parameters(self):\n\t\tif self.template and not getattr(self, \"parameters\", []):\n\t\t\tfor d in frappe.get_doc(\"Quality Feedback Template\", self.template).parameters:\n\t\t\t\tself.append(\"parameters\", dict(parameter=d.parameter, rating=1))",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tif not self.document_name:\n\t\t\tself.document_type = \"User\"\n\t\t\tself.document_name = frappe.session.user\n\t\tself.set_parameters()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\tests\\test_regional.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def test_method():\n\treturn \"original\"",
      "args": []
    },
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestInit(IntegrationTestCase):\n\tdef test_regional_overrides(self):\n\t\tfrappe.flags.country = \"Maldives\"\n\t\tself.assertEqual(test_method(), \"original\")"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_regional_overrides(self):\n\t\tfrappe.flags.country = \"Maldives\"\n\t\tself.assertEqual(test_method(), \"original\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\employee_group\\test_employee_group.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestEmployeeGroup(IntegrationTestCase):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 15,
      "code_text": "def make_employee_group():",
      "args": []
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def get_employee_group():\n\temployee_group = frappe.db.exists(\"Employee Group\", \"_Test Employee Group\")\n\treturn employee_group",
      "args": []
    }
  ],
  "erpnext\\controllers\\tests\\test_distributed_discount.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestTaxesAndTotals(AccountsTestMixin, IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 9,
      "code_text": "\tdef test_distributed_discount_amount(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef test_distributed_discount_amount_with_taxes(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\report\\subcontracted_item_to_be_received\\test_subcontracted_item_to_be_received.py": [
    {
      "type": "class",
      "line_start": 27,
      "code_text": "class TestSubcontractedItemToBeReceived(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_pending_and_received_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 77,
      "code_text": "def make_subcontracting_receipt_against_sco(sco, quantity=5):\n\tscr = make_subcontracting_receipt(sco)\n\tscr.items[0].qty = quantity\n\tscr.insert()\n\tscr.submit()",
      "args": [
        "sco",
        "quantity"
      ]
    }
  ],
  "erpnext\\stock\\report\\stock_ledger\\test_stock_ledger_report.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestStockLedgerReeport(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self) -> None:",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 23,
      "code_text": "\tdef tearDown(self) -> None:\n\t\tfrappe.db.rollback()",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\accounts_settings\\test_accounts_settings.py": [
    {
      "type": "class",
      "line_start": 7,
      "code_text": "class TestAccountsSettings(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 8,
      "code_text": "\tdef tearDown(self):\n\t\t# Just in case `save` method succeeds, we need to take things back to default so that other tests\n\t\t# don't break\n\t\tcur_settings = frappe.get_doc(\"Accounts Settings\", \"Accounts Settings\")\n\t\tcur_settings.allow_stale = 1\n\t\tcur_settings.save()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_stale_days(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\selling\\report\\pending_so_items_for_purchase_request\\test_pending_so_items_for_purchase_request.py": [
    {
      "type": "class",
      "line_start": 15,
      "code_text": "class TestPendingSOItemsForPurchaseRequest(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 16,
      "code_text": "\tdef test_result_for_partial_material_request(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef test_result_for_so_item(self):\n\t\tso = make_sales_order()\n\t\treport = execute()\n\t\tl = len(report[1])\n\t\tself.assertEqual(so.items[0].qty, report[1][l - 1][\"pending_qty\"])",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\pos_settings\\pos_settings.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class POSSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 27,
      "code_text": "\tdef validate(self):\n\t\tself.validate_invoice_fields()",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate_invoice_fields(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_standing\\supplier_scorecard_standing.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class SupplierScorecardStanding(Document):"
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_scoring_standing(standing_name):\n\tstanding = frappe.get_doc(\"Supplier Scorecard Standing\", standing_name)\n\n\treturn standing",
      "args": [
        "standing_name"
      ]
    },
    {
      "type": "function",
      "line_start": 42,
      "code_text": "def get_standings_list():",
      "args": []
    }
  ],
  "erpnext\\buying\\report\\subcontracted_raw_materials_to_be_transferred\\test_subcontracted_raw_materials_to_be_transferred.py": [
    {
      "type": "class",
      "line_start": 20,
      "code_text": "class TestSubcontractedItemToBeTransferred(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 21,
      "code_text": "\tdef test_pending_and_transferred_qty(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 75,
      "code_text": "def transfer_subcontracted_raw_materials(sco):",
      "args": [
        "sco"
      ]
    }
  ],
  "erpnext\\stock\\tests\\test_get_item_details.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestGetItemDetail(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_get_item_detail_purchase_order(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_fetch_price_from_list_rate_on_doc_save(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\department\\test_department.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class TestDepartment(IntegrationTestCase):\n\tdef test_remove_department_data(self):\n\t\tdoc = create_department(\"Test Department\")\n\t\tfrappe.delete_doc(\"Department\", doc.name)"
    },
    {
      "type": "method",
      "line_start": 12,
      "code_text": "\tdef test_remove_department_data(self):\n\t\tdoc = create_department(\"Test Department\")\n\t\tfrappe.delete_doc(\"Department\", doc.name)",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def create_department(department_name, parent_department=None):",
      "args": [
        "department_name",
        "parent_department"
      ]
    }
  ],
  "erpnext\\erpnext_integrations\\utils.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def validate_webhooks_request(doctype, hmac_key, secret_key=\"secret\"):",
      "args": [
        "doctype",
        "hmac_key",
        "secret_key"
      ]
    },
    {
      "type": "function",
      "line_start": 30,
      "code_text": "def get_webhook_address(connector_name, method, exclude_uri=False, force_https=False):",
      "args": [
        "connector_name",
        "method",
        "exclude_uri",
        "force_https"
      ]
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def get_tracking_url(carrier, tracking_number):",
      "args": [
        "carrier",
        "tracking_number"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\coupon_code\\coupon_code.py": [
    {
      "type": "class",
      "line_start": 11,
      "code_text": "class CouponCode(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef autoname(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 44,
      "code_text": "\tdef validate(self):\n\t\tif self.coupon_type == \"Gift Card\":\n\t\t\tself.maximum_use = 1\n\t\t\tif not self.customer:\n\t\t\t\tfrappe.throw(_(\"Please select the customer.\"))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_taxes_and_charges_template\\purchase_taxes_and_charges_template.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class PurchaseTaxesandChargesTemplate(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tvaldiate_taxes_and_charges_template(self)",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef autoname(self):\n\t\tif self.company and self.title:\n\t\t\tabbr = frappe.get_cached_value(\"Company\", self.company, \"abbr\")\n\t\t\tself.name = f\"{self.title} - {abbr}\"",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\utilities\\doctype\\rename_tool\\rename_tool.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class RenameTool(Document):"
    },
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_doctypes():\n\treturn frappe.db.sql_list(\n\t\t\"\"\"select name from tabDocType\n\t\twhere allow_rename=1 and module!='Core' order by name\"\"\"\n\t)",
      "args": []
    },
    {
      "type": "function",
      "line_start": 37,
      "code_text": "def upload(select_doctype=None, rows=None):",
      "args": [
        "select_doctype",
        "rows"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\workstation_type\\test_workstation_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestWorkstationType(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestWorkstationType(IntegrationTestCase):\n\tpass"
    },
    {
      "type": "function",
      "line_start": 21,
      "code_text": "def create_workstation_type(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\terms_and_conditions\\terms_and_conditions.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TermsandConditions(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef validate(self):\n\t\tif self.terms:\n\t\t\tvalidate_template(self.terms)\n\t\tif not cint(self.buying) and not cint(self.selling) and not cint(self.hr) and not cint(self.disabled):\n\t\t\tthrow(_(\"At least one of the Applicable Modules should be selected\"))",
      "args": [
        "self"
      ]
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def get_terms_and_conditions(template_name, doc):",
      "args": [
        "template_name",
        "doc"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_point_entry\\loyalty_point_entry.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class LoyaltyPointEntry(Document):"
    },
    {
      "type": "function",
      "line_start": 38,
      "code_text": "def get_loyalty_point_entries(customer, loyalty_program, company, expiry_date=None):",
      "args": [
        "customer",
        "loyalty_program",
        "company",
        "expiry_date"
      ]
    },
    {
      "type": "function",
      "line_start": 55,
      "code_text": "def get_redemption_details(customer, loyalty_program, company):",
      "args": [
        "customer",
        "loyalty_program",
        "company"
      ]
    }
  ],
  "erpnext\\assets\\doctype\\asset_category\\test_asset_category.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestAssetCategory(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_mandatory_fields(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 33,
      "code_text": "\tdef test_cwip_accounting(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\report\\non_billed_report.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get_ordered_to_be_billed_data(args, filters=None):",
      "args": [
        "args",
        "filters"
      ]
    },
    {
      "type": "function",
      "line_start": 72,
      "code_text": "def get_project_field(doctype, child_doctype, party):\n\tif party == \"supplier\":\n\t\treturn child_doctype.project\n\treturn doctype.project",
      "args": [
        "doctype",
        "child_doctype",
        "party"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\vehicle\\test_vehicle.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestVehicle(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef test_make_vehicle(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 28,
      "code_text": "\tdef test_renaming_vehicle(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\tests\\test_item_wise_tax_details.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestTaxesAndTotals(FrappeTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 32,
      "code_text": "\tdef test_item_wise_tax_detail(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\controllers\\print_settings.py": [
    {
      "type": "function",
      "line_start": 5,
      "code_text": "def set_print_templates_for_item_table(doc, settings):",
      "args": [
        "doc",
        "settings"
      ]
    },
    {
      "type": "function",
      "line_start": 32,
      "code_text": "def set_print_templates_for_taxes(doc, settings):",
      "args": [
        "doc",
        "settings"
      ]
    },
    {
      "type": "function",
      "line_start": 48,
      "code_text": "def format_columns(display_columns, compact_fields):",
      "args": [
        "display_columns",
        "compact_fields"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\share_transfer\\test_share_transfer.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestShareTransfer(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 14,
      "code_text": "\tdef setUp(self):",
      "args": [
        "self"
      ]
    },
    {
      "type": "method",
      "line_start": 93,
      "code_text": "\tdef test_invalid_share_transfer(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_template\\quality_inspection_template.py": [
    {
      "type": "function",
      "line_start": 29,
      "code_text": "def get_template_details(template):",
      "args": [
        "template"
      ]
    },
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityInspectionTemplate(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\stock_closing_balance\\test_stock_closing_balance.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class UnitTestStockClosingBalance(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class IntegrationTestStockClosingBalance(IntegrationTestCase):"
    }
  ],
  "erpnext\\stock\\report\\test_reports.py": [
    {
      "type": "class",
      "line_start": 80,
      "code_text": "class TestReports(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 81,
      "code_text": "\tdef test_execute_all_stock_reports(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\regional\\__init__.py": [
    {
      "type": "function",
      "line_start": 11,
      "code_text": "def check_deletion_permission(doc, method):\n\tregion = get_region(doc.company)\n\tif region in [\"Nepal\"] and doc.docstatus != 0:\n\t\tfrappe.throw(_(\"Deletion is not permitted for country {0}\").format(region))",
      "args": [
        "doc",
        "method"
      ]
    },
    {
      "type": "function",
      "line_start": 17,
      "code_text": "def create_transaction_log(doc, method):",
      "args": [
        "doc",
        "method"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\customer_credit_limit\\customer_credit_limit.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class CustomerCreditLimit(Document):"
    }
  ],
  "erpnext\\accounts\\report\\bank_reconciliation_statement\\test_bank_reconciliation_statement.py": [
    {
      "type": "class",
      "line_start": 13,
      "code_text": "class TestBankReconciliationStatement(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_loan_entries_in_bank_reco_statement(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\tests\\test_activation.py": [
    {
      "type": "class",
      "line_start": 6,
      "code_text": "class TestActivation(IntegrationTestCase):\n\tdef test_activation(self):\n\t\tlevels = get_level()\n\t\tself.assertTrue(levels)"
    },
    {
      "type": "method",
      "line_start": 7,
      "code_text": "\tdef test_activation(self):\n\t\tlevels = get_level()\n\t\tself.assertTrue(levels)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\crm_settings\\crm_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CRMSettings(Document):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef validate(self):\n\t\tfrappe.db.set_default(\"campaign_naming_by\", self.get(\"campaign_naming_by\", \"\"))",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\serial_and_batch_entry\\serial_and_batch_entry.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SerialandBatchEntry(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule_item_group\\pricing_rule_item_group.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PricingRuleItemGroup(Document):"
    }
  ],
  "erpnext\\accounts\\test\\test_reports.py": [
    {
      "type": "class",
      "line_start": 39,
      "code_text": "class TestReports(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef test_execute_all_accounts_reports(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_reconciliation_invoice\\payment_reconciliation_invoice.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentReconciliationInvoice(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef get_list(args):\n\t\tpass",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\driver\\driver.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class Driver(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef validate(self):\n\t\tif self.employee:\n\t\t\tself.user = frappe.get_value(\"Employee\", self.employee, \"user_id\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation\\test_process_payment_reconciliation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestProcessPaymentReconciliation(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestProcessPaymentReconciliation(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\allowed_to_transact_with\\allowed_to_transact_with.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AllowedToTransactWith(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_reconciliation_payment\\payment_reconciliation_payment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentReconciliationPayment(Document):"
    },
    {
      "type": "method",
      "line_start": 34,
      "code_text": "\tdef get_list(args):\n\t\tpass",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\selling_settings\\test_selling_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestSellingSettings(IntegrationTestCase):\n\tdef test_defaults_populated(self):\n\t\t# Setup default values are not populated on migrate, this test checks\n\t\t# if setup was completed correctly\n\t\tdefault = frappe.db.get_single_value(\"Selling Settings\", \"maintain_same_rate_action\")\n\t\tself.assertEqual(\"Stop\", default)"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_defaults_populated(self):\n\t\t# Setup default values are not populated on migrate, this test checks\n\t\t# if setup was completed correctly\n\t\tdefault = frappe.db.get_single_value(\"Selling Settings\", \"maintain_same_rate_action\")\n\t\tself.assertEqual(\"Stop\", default)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\plant_floor\\test_plant_floor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestPlantFloor(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestPlantFloor(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice_payment\\sales_invoice_payment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesInvoicePayment(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_activity\\test_asset_activity.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestAssetActivity(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestAssetActivity(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\utilities\\product.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def get_price(item_code, price_list, customer_group, company, qty=1, party=None):",
      "args": [
        "item_code",
        "price_list",
        "customer_group",
        "company",
        "qty",
        "party"
      ]
    },
    {
      "type": "function",
      "line_start": 110,
      "code_text": "def get_item_codes_by_attributes(attribute_filters, template_item_code=None):",
      "args": [
        "attribute_filters",
        "template_item_code"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation_log\\test_process_payment_reconciliation_log.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestProcessPaymentReconciliationLog(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestProcessPaymentReconciliationLog(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_payment_ledger\\test_repost_payment_ledger.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestRepostPaymentLedger(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestRepostPaymentLedger(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\incoterm\\test_incoterm.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestIncoterm(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestIncoterm(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_health_monitor\\test_ledger_health_monitor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestLedgerHealthMonitor(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestLedgerHealthMonitor(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\item_tax\\item_tax.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemTax(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\location\\test_location.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestLocation(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef runTest(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\stock_closing_entry\\test_stock_closing_entry.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class UnitTestStockClosingEntry(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 23,
      "code_text": "class IntegrationTestStockClosingEntry(IntegrationTestCase):"
    }
  ],
  "erpnext\\crm\\doctype\\crm_note\\crm_note.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CRMNote(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_plan_detail\\subscription_plan_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubscriptionPlanDetail(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_scoring_criteria\\supplier_scorecard_scoring_criteria.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierScorecardScoringCriteria(Document):"
    }
  ],
  "erpnext\\bulk_transaction\\doctype\\bulk_transaction_log\\test_bulk_transaction_log.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestBulkTransactionLog(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestBulkTransactionLog(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\buying\\doctype\\purchase_receipt_item_supplied\\purchase_receipt_item_supplied.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseReceiptItemSupplied(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_accounting_ledger_settings\\test_repost_accounting_ledger_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestRepostAccountingLedgerSettings(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestRepostAccountingLedgerSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\quick_stock_balance\\quick_stock_balance.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class QuickStockBalance(Document):"
    },
    {
      "type": "function",
      "line_start": 35,
      "code_text": "def get_stock_item_details(warehouse, date, item=None, barcode=None):",
      "args": [
        "warehouse",
        "date",
        "item",
        "barcode"
      ]
    }
  ],
  "erpnext\\selling\\doctype\\party_specific_item\\party_specific_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PartySpecificItem(Document):"
    },
    {
      "type": "method",
      "line_start": 24,
      "code_text": "\tdef validate(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\setup\\doctype\\target_detail\\target_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TargetDetail(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_shift_factor\\test_asset_shift_factor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestAssetShiftFactor(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestAssetShiftFactor(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card_time_log\\job_card_time_log.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class JobCardTimeLog(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\dunning_type\\dunning_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class DunningType(Document):"
    },
    {
      "type": "method",
      "line_start": 30,
      "code_text": "\tdef autoname(self):\n\t\tcompany_abbr = frappe.get_value(\"Company\", self.company, \"abbr\")\n\t\tself.name = f\"{self.dunning_type} - {company_abbr}\"",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\test_party.py": [
    {
      "type": "class",
      "line_start": 7,
      "code_text": "class PartyTestCase(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 8,
      "code_text": "\tdef test_get_default_price_list_should_return_none_for_invalid_group(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\tests\\test_notifications.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestNotifications(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef test_get_notifications_for_targets(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bisect_accounting_statements\\test_bisect_accounting_statements.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestBisectAccountingStatements(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestBisectAccountingStatements(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\utilities\\doctype\\portal_user\\portal_user.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PortalUser(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account\\test_bank_account.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestBankAccount(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 11,
      "code_text": "\tdef test_validate_iban(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\cheque_print_template\\cheque_print_template.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ChequePrintTemplate(Document):"
    },
    {
      "type": "function",
      "line_start": 50,
      "code_text": "def create_or_update_cheque_print_format(template_name):",
      "args": [
        "template_name"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\account_closing_balance\\test_account_closing_balance.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestAccountClosingBalance(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestAccountClosingBalance(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule_item_code\\pricing_rule_item_code.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PricingRuleItemCode(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\downtime_entry\\downtime_entry.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class DowntimeEntry(Document):"
    },
    {
      "type": "method",
      "line_start": 37,
      "code_text": "\tdef validate(self):\n\t\tif self.from_time and self.to_time:\n\t\t\tself.downtime = time_diff_in_hours(self.to_time, self.from_time) * 60",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry_template\\journal_entry_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class JournalEntryTemplate(Document):"
    },
    {
      "type": "function",
      "line_start": 49,
      "code_text": "def get_naming_series():\n\treturn frappe.get_meta(\"Journal Entry\").get_field(\"naming_series\").options",
      "args": []
    }
  ],
  "erpnext\\setup\\doctype\\party_type\\party_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PartyType(Document):"
    },
    {
      "type": "function",
      "line_start": 27,
      "code_text": "def get_party_type(doctype, txt, searchfield, start, page_len, filters):",
      "args": [
        "doctype",
        "txt",
        "searchfield",
        "start",
        "page_len",
        "filters"
      ]
    }
  ],
  "erpnext\\tests\\test_perf.py": [
    {
      "type": "class",
      "line_start": 12,
      "code_text": "class TestPerformance(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 13,
      "code_text": "\tdef test_ensure_indexes(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\payment_entry_reference\\payment_entry_reference.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentEntryReference(Document):"
    },
    {
      "type": "method",
      "line_start": 40,
      "code_text": "\tdef payment_request_outstanding(self):\n\t\tif not self.payment_request:\n\t\t\treturn\n\n\t\treturn frappe.db.get_value(\"Payment Request\", self.payment_request, \"outstanding_amount\")",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\manufacturer\\manufacturer.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class Manufacturer(Document):"
    },
    {
      "type": "method",
      "line_start": 26,
      "code_text": "\tdef onload(self):\n\t\t\"\"\"Load address and contacts in `__onload`\"\"\"\n\t\tload_address_and_contact(self)",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice_timesheet\\sales_invoice_timesheet.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesInvoiceTimesheet(Document):"
    }
  ],
  "erpnext\\stock\\report\\item_shortage_report\\test_item_shortage_report.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestItemShortageReport(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_item_shortage_report(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_action\\quality_action.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QualityAction(Document):"
    },
    {
      "type": "method",
      "line_start": 31,
      "code_text": "\tdef validate(self):\n\t\tself.status = \"Open\" if any([d.status == \"Open\" for d in self.resolutions]) else \"Completed\"",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback\\test_quality_feedback.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestQualityFeedback(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 10,
      "code_text": "\tdef test_quality_feedback(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\bulk_transaction\\doctype\\bulk_transaction_log_detail\\test_bulk_transaction_log_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestBulkTransactionLogDetail(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestBulkTransactionLogDetail(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\process_subscription\\test_process_subscription.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestProcessSubscription(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestProcessSubscription(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\sales_invoice_advance\\sales_invoice_advance.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesInvoiceAdvance(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pricing_rule_brand\\pricing_rule_brand.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PricingRuleBrand(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_reconciliation_allocation\\payment_reconciliation_allocation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentReconciliationAllocation(Document):"
    },
    {
      "type": "method",
      "line_start": 38,
      "code_text": "\tdef get_list(args):\n\t\tpass",
      "args": [
        "args"
      ]
    }
  ],
  "erpnext\\tests\\test_point_of_sale.py": [
    {
      "type": "class",
      "line_start": 14,
      "code_text": "class TestPointOfSale(IntegrationTestCase):"
    },
    {
      "type": "method",
      "line_start": 15,
      "code_text": "\tdef test_item_search(self):",
      "args": [
        "self"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\bisect_nodes\\test_bisect_nodes.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnitTestBisectNodes(UnitTestCase):"
    },
    {
      "type": "class",
      "line_start": 17,
      "code_text": "class TestBisectNodes(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_creator_item\\bom_creator_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMCreatorItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\warehouse_type\\warehouse_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class WarehouseType(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\packing_slip_item\\packing_slip_item.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class PackingSlipItem(Document):"
    }
  ],
  "erpnext\\edi\\doctype\\code_list\\test_code_list.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestCodeList(FrappeTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_invoice_advance\\purchase_invoice_advance.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseInvoiceAdvance(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\appointment_booking_settings\\test_appointment_booking_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestAppointmentBookingSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\account\\chart_of_accounts\\verified\\standard_chart_of_accounts_with_account_number.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def get():",
      "args": []
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_template\\test_quality_inspection_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestQualityInspectionTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\assets\\doctype\\asset_category_account\\asset_category_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetCategoryAccount(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\variant_field\\variant_field.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class VariantField(Document):"
    }
  ],
  "erpnext\\support\\doctype\\issue_type\\test_issue_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestIssueType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order_supplied_item\\subcontracting_order_supplied_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubcontractingOrderSuppliedItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction_payments\\bank_transaction_payments.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BankTransactionPayments(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\opportunity_type\\test_opportunity_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestOpportunityType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\telephony\\doctype\\telephony_call_type\\test_telephony_call_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestTelephonyCallType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_program_collection\\loyalty_program_collection.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LoyaltyProgramCollection(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card_item\\job_card_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class JobCardItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_statement_import\\test_bank_statement_import.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestBankStatementImport(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\assets\\doctype\\maintenance_team_member\\test_maintenance_team_member.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestMaintenanceTeamMember(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\campaign\\test_campaign.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCampaign(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_guarantee\\test_bank_guarantee.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestBankGuarantee(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\regional\\doctype\\lower_deduction_certificate\\test_lower_deduction_certificate.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestLowerDeductionCertificate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_parameter_group\\quality_inspection_parameter_group.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityInspectionParameterGroup(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\uom_conversion_factor\\uom_conversion_factor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UOMConversionFactor(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\employee_external_work_history\\employee_external_work_history.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class EmployeeExternalWorkHistory(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\material_request_plan_item\\test_material_request_plan_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestMaterialRequestPlanItem(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\variant_field\\test_variant_field.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestVariantField(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\shipping_rule_condition\\shipping_rule_condition.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ShippingRuleCondition(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\purchase_order_item_supplied\\purchase_order_item_supplied.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseOrderItemSupplied(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\market_segment\\test_market_segment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestMarketSegment(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\dunning_letter_text\\dunning_letter_text.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class DunningLetterText(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_parameter\\quality_inspection_parameter.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityInspectionParameter(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\uom_category\\uom_category.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UOMCategory(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_parameter\\test_quality_inspection_parameter.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestQualityInspectionParameter(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\item_tax_template_detail\\item_tax_template_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemTaxTemplateDetail(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance_team\\asset_maintenance_team.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetMaintenanceTeam(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\advance_payment_ledger_entry\\advance_payment_ledger_entry.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AdvancePaymentLedgerEntry(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\prospect_lead\\prospect_lead.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProspectLead(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withholding_account\\tax_withholding_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TaxWithholdingAccount(Document):"
    }
  ],
  "erpnext\\support\\doctype\\support_settings\\test_support_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSupportSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\downtime_entry\\test_downtime_entry.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestDowntimeEntry(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\regional\\doctype\\uae_vat_settings\\uae_vat_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UAEVATSettings(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\party_type\\test_party_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestPartyType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\stock_entry_detail\\stock_entry_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class StockEntryDetail(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\availability_of_slots\\availability_of_slots.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AvailabilityOfSlots(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\promotional_scheme_price_discount\\promotional_scheme_price_discount.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PromotionalSchemePriceDiscount(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\supplier_group_item\\supplier_group_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierGroupItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\campaign_item\\campaign_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CampaignItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_allowed_types\\repost_allowed_types.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RepostAllowedTypes(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\opening_invoice_creation_tool_item\\opening_invoice_creation_tool_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class OpeningInvoiceCreationToolItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account_type\\test_bank_account_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestBankAccountType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_explosion_item\\bom_explosion_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMExplosionItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\stock_reconciliation_item\\stock_reconciliation_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class StockReconciliationItem(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\workstation_working_hour\\workstation_working_hour.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class WorkstationWorkingHour(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\employee_group_table\\employee_group_table.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class EmployeeGroupTable(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\sub_operation\\test_sub_operation.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestSubOperation(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\driving_license_category\\driving_license_category.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DrivingLicenseCategory(Document):"
    }
  ],
  "erpnext\\telephony\\doctype\\voice_call_settings\\test_voice_call_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestVoiceCallSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\telephony\\doctype\\call_log\\test_call_log.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCallLog(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\shareholder\\test_shareholder.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestShareholder(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_item_group\\pos_item_group.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class POSItemGroup(Document):"
    }
  ],
  "erpnext\\telephony\\doctype\\incoming_call_handling_schedule\\incoming_call_handling_schedule.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class IncomingCallHandlingSchedule(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\non_conformance\\non_conformance.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class NonConformance(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_clearance_detail\\bank_clearance_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BankClearanceDetail(Document):"
    }
  ],
  "erpnext\\commands\\__init__.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def call_command(cmd, context):\n\treturn click.Context(cmd, obj=context).forward(cmd)",
      "args": [
        "cmd",
        "context"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\unreconcile_payment_entries\\unreconcile_payment_entries.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UnreconcilePaymentEntries(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_attribute_value\\item_attribute_value.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemAttributeValue(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\process_statement_of_accounts_cc\\process_statement_of_accounts_cc.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProcessStatementOfAccountsCC(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_manufacturer\\test_item_manufacturer.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestItemManufacturer(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\item_tax_template\\test_item_tax_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestItemTaxTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_schedule_item\\maintenance_schedule_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MaintenanceScheduleItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_term\\test_payment_term.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestPaymentTerm(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account_type\\bank_account_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class BankAccountType(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\share_type\\share_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ShareType(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_meeting_agenda\\test_quality_meeting_agenda.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestQualityMeetingAgenda(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\bank\\test_bank.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestBank(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\loyalty_point_entry_redemption\\loyalty_point_entry_redemption.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LoyaltyPointEntryRedemption(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\website_item_group\\website_item_group.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class WebsiteItemGroup(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\branch\\branch.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class Branch(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback_template\\test_quality_feedback_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestQualityFeedbackTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\opportunity_lost_reason\\opportunity_lost_reason.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class OpportunityLostReason(Document):"
    }
  ],
  "erpnext\\utilities\\doctype\\video_settings\\test_video_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestVideoSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_website_operation\\bom_website_operation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMWebsiteOperation(Document):"
    }
  ],
  "erpnext\\regional\\doctype\\uae_vat_settings\\test_uae_vat_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestUAEVATSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\regional\\doctype\\south_africa_vat_settings\\south_africa_vat_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SouthAfricaVATSettings(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_payment_ledger_items\\repost_payment_ledger_items.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RepostPaymentLedgerItems(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\psoa_project\\psoa_project.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PSOAProject(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\landed_cost_purchase_receipt\\landed_cost_purchase_receipt.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LandedCostPurchaseReceipt(Document):"
    }
  ],
  "erpnext\\selling\\doctype\\installation_note_item\\installation_note_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class InstallationNoteItem(Document):"
    }
  ],
  "erpnext\\selling\\doctype\\product_bundle_item\\product_bundle_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProductBundleItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\dunning_type\\test_dunning_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestDunningType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\price_list_country\\price_list_country.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PriceListCountry(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\appointment_booking_slots\\appointment_booking_slots.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AppointmentBookingSlots(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withholding_rate\\tax_withholding_rate.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TaxWithholdingRate(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\authorization_rule\\test_authorization_rule.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestAuthorizationRule(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\driver\\test_driver.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestDriver(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\exchange_rate_revaluation_account\\exchange_rate_revaluation_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ExchangeRateRevaluationAccount(Document):"
    }
  ],
  "erpnext\\telephony\\doctype\\telephony_call_type\\telephony_call_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TelephonyCallType(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\tax_category\\tax_category.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TaxCategory(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_meeting\\quality_meeting.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QualityMeeting(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\currency_exchange_settings_result\\currency_exchange_settings_result.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CurrencyExchangeSettingsResult(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\psoa_cost_center\\psoa_cost_center.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PSOACostCenter(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\advance_taxes_and_charges\\advance_taxes_and_charges.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AdvanceTaxesandCharges(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation_log\\process_payment_reconciliation_log.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProcessPaymentReconciliationLog(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card_operation\\job_card_operation.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class JobCardOperation(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\promotional_scheme_product_discount\\promotional_scheme_product_discount.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PromotionalSchemeProductDiscount(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_plan\\test_subscription_plan.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSubscriptionPlan(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_item\\bom_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMItem(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\crm_settings\\test_crm_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCRMSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\shipment_parcel_template\\shipment_parcel_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ShipmentParcelTemplate(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\delivery_note_item\\delivery_note_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DeliveryNoteItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_settings\\test_subscription_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSubscriptionSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\quotation_lost_reason\\quotation_lost_reason.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QuotationLostReason(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_scoring_standing\\supplier_scorecard_scoring_standing.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierScorecardScoringStanding(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\allowed_dimension\\allowed_dimension.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AllowedDimension(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_parameter_group\\test_quality_inspection_parameter_group.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestQualityInspectionParameterGroup(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\lost_reason_detail\\lost_reason_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LostReasonDetail(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\request_for_quotation_supplier\\request_for_quotation_supplier.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RequestforQuotationSupplier(Document):"
    }
  ],
  "erpnext\\portal\\doctype\\website_attribute\\website_attribute.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class WebsiteAttribute(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\contract_fulfilment_checklist\\test_contract_fulfilment_checklist.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestContractFulfilmentChecklist(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\selling\\doctype\\installation_note\\test_installation_note.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestInstallationNote(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\selling\\doctype\\quotation_item\\quotation_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QuotationItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_closing_entry_detail\\pos_closing_entry_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class POSClosingEntryDetail(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\cashier_closing_payments\\cashier_closing_payments.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CashierClosingPayments(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_action_resolution\\quality_action_resolution.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityActionResolution(Document):"
    }
  ],
  "erpnext\\support\\doctype\\sla_fulfilled_on_status\\sla_fulfilled_on_status.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SLAFulfilledOnStatus(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_item\\production_plan_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProductionPlanItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\shipment_parcel\\shipment_parcel.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ShipmentParcel(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_website_item\\bom_website_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMWebsiteItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_settings\\test_pos_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestPOSSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\item_website_specification\\item_website_specification.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemWebsiteSpecification(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\blanket_order_item\\blanket_order_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BlanketOrderItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_customer_group\\pos_customer_group.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class POSCustomerGroup(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\shipment_delivery_note\\shipment_delivery_note.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ShipmentDeliveryNote(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_transaction_mapping\\bank_transaction_mapping.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BankTransactionMapping(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\opportunity_item\\opportunity_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class OpportunityItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_variant_settings\\test_item_variant_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestItemVariantSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\startup\\notifications.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def get_notification_config():",
      "args": []
    }
  ],
  "erpnext\\assets\\doctype\\asset_finance_book\\asset_finance_book.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetFinanceBook(Document):"
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order_service_item\\subcontracting_order_service_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubcontractingOrderServiceItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\advance_tax\\advance_tax.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AdvanceTax(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_capitalization_service_item\\asset_capitalization_service_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetCapitalizationServiceItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_profile_user\\pos_profile_user.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class POSProfileUser(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\delivery_stop\\delivery_stop.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DeliveryStop(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_accounting_ledger_settings\\repost_accounting_ledger_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RepostAccountingLedgerSettings(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_procedure_process\\quality_procedure_process.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityProcedureProcess(Document):"
    }
  ],
  "erpnext\\support\\doctype\\service_level_priority\\service_level_priority.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ServiceLevelPriority(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\designation\\designation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class Designation(Document):"
    }
  ],
  "erpnext\\gettext\\extractors\\lines_from_txt_file.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def extract(fileobj, *args, **kwargs):\n\t\"\"\"Split file into lines and yield one translation unit per line.\"\"\"\n\tfor line_no, line in enumerate(fileobj.readlines()):\n\t\tyield line_no + 1, \"_\", line.decode().strip(), []",
      "args": [
        "fileobj",
        "*args",
        "**kwargs"
      ]
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_material_request_warehouse\\production_plan_material_request_warehouse.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProductionPlanMaterialRequestWarehouse(Document):"
    }
  ],
  "erpnext\\support\\doctype\\pause_sla_on_status\\pause_sla_on_status.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PauseSLAOnStatus(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\sales_taxes_and_charges_template\\test_sales_taxes_and_charges_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestSalesTaxesandChargesTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\support\\doctype\\warranty_claim\\test_warranty_claim.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestWarrantyClaim(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_visit_purpose\\maintenance_visit_purpose.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MaintenanceVisitPurpose(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\chart_of_accounts_importer\\test_chart_of_accounts_importer.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestChartofAccountsImporter(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\portal\\doctype\\website_filter_field\\website_filter_field.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class WebsiteFilterField(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\customs_tariff_number\\test_customs_tariff_number.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestCustomsTariffNumber(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\email_digest_recipient\\email_digest_recipient.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class EmailDigestRecipient(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\process_payment_reconciliation_log_allocations\\process_payment_reconciliation_log_allocations.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProcessPaymentReconciliationLogAllocations(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_capitalization_asset_item\\asset_capitalization_asset_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetCapitalizationAssetItem(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\transaction_deletion_record_item\\transaction_deletion_record_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TransactionDeletionRecordItem(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance_team\\test_asset_maintenance_team.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestAssetMaintenanceTeam(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\monthly_distribution_percentage\\monthly_distribution_percentage.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MonthlyDistributionPercentage(Document):"
    }
  ],
  "erpnext\\selling\\doctype\\industry_type\\industry_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class IndustryType(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_opening_entry_detail\\pos_opening_entry_detail.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSOpeningEntryDetail(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\supplier_item\\supplier_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_merge_accounts\\ledger_merge_accounts.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LedgerMergeAccounts(Document):"
    }
  ],
  "erpnext\\edi\\doctype\\common_code\\test_common_code.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestCommonCode(FrappeTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\customer_group_item\\customer_group_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CustomerGroupItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account_subtype\\test_bank_account_subtype.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestBankAccountSubtype(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_operation\\bom_operation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMOperation(Document):"
    }
  ],
  "erpnext\\telephony\\doctype\\incoming_call_settings\\test_incoming_call_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestIncomingCallSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\quality_management\\doctype\\non_conformance\\test_non_conformance.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestNonConformance(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\customs_tariff_number\\customs_tariff_number.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CustomsTariffNumber(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\sales_stage\\test_sales_stage.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSalesStage(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\item_reorder\\item_reorder.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class ItemReorder(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\south_africa_vat_account\\south_africa_vat_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SouthAfricaVATAccount(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\market_segment\\market_segment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MarketSegment(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\finance_book\\finance_book.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class FinanceBook(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\account\\chart_of_accounts\\verified\\standard_chart_of_accounts.py": [
    {
      "type": "function",
      "line_start": 8,
      "code_text": "def get():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\share_balance\\share_balance.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ShareBalance(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\purchase_taxes_and_charges_template\\test_purchase_taxes_and_charges_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestPurchaseTaxesandChargesTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\delivery_settings\\delivery_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class DeliverySettings(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry_account\\journal_entry_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class JournalEntryAccount(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_invoice\\subscription_invoice.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubscriptionInvoice(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\party_link\\test_party_link.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestPartyLink(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback_template_parameter\\quality_feedback_template_parameter.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityFeedbackTemplateParameter(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_term\\payment_term.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentTerm(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\share_type\\test_share_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestShareType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\buying\\doctype\\buying_settings\\test_buying_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestBuyingSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\cheque_print_template\\test_cheque_print_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestChequePrintTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\competitor\\test_competitor.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCompetitor(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\designation\\test_designation.py": [
    {
      "type": "function",
      "line_start": 7,
      "code_text": "def create_designation(**args):",
      "args": [
        "**args"
      ]
    }
  ],
  "erpnext\\crm\\doctype\\opportunity_type\\opportunity_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class OpportunityType(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\closed_document\\closed_document.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ClosedDocument(Document):"
    }
  ],
  "erpnext\\telephony\\doctype\\voice_call_settings\\voice_call_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class VoiceCallSettings(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\applicable_on_account\\applicable_on_account.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ApplicableOnAccount(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_review_objective\\quality_review_objective.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityReviewObjective(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback_parameter\\quality_feedback_parameter.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityFeedbackParameter(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\uom_conversion_factor\\test_uom_conversion_factor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestUOMConversionFactor(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\regional\\doctype\\import_supplier_invoice\\test_import_supplier_invoice.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestImportSupplierInvoice(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\assets\\doctype\\asset_capitalization_stock_item\\asset_capitalization_stock_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetCapitalizationStockItem(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_scrap_item\\bom_scrap_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMScrapItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_quality_inspection_parameter\\item_quality_inspection_parameter.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemQualityInspectionParameter(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\print_heading\\print_heading.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PrintHeading(Document):"
    }
  ],
  "erpnext\\selling\\doctype\\sales_partner_type\\test_sales_partner_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSalesPartnerType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_period\\test_supplier_scorecard_period.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSupplierScorecardPeriod(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\employee_group\\employee_group.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class EmployeeGroup(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\pick_list_item\\pick_list_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class PickListItem(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\sales_stage\\sales_stage.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesStage(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\monthly_distribution\\test_monthly_distribution.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestMonthlyDistribution(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\accounting_dimension_detail\\accounting_dimension_detail.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AccountingDimensionDetail(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_profile_user\\test_pos_profile_user.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestPOSProfileUser(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\mode_of_payment_account\\mode_of_payment_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ModeofPaymentAccount(Document):"
    }
  ],
  "erpnext\\maintenance\\doctype\\maintenance_schedule_detail\\maintenance_schedule_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MaintenanceScheduleDetail(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\maintenance_team_member\\maintenance_team_member.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MaintenanceTeamMember(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\opportunity_lost_reason_detail\\opportunity_lost_reason_detail.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class OpportunityLostReasonDetail(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance_log\\test_asset_maintenance_log.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestAssetMaintenanceLog(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\communication\\doctype\\communication_medium\\communication_medium.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class CommunicationMedium(Document):"
    }
  ],
  "erpnext\\buying\\report\\procurement_tracker\\test_procurement_tracker.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestProcurementTracker(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\overdue_payment\\overdue_payment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class OverduePayment(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_settings\\subscription_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubscriptionSettings(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\bom_update_batch\\bom_update_batch.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BOMUpdateBatch(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_standing\\test_supplier_scorecard_standing.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSupplierScorecardStanding(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\quotation_lost_reason_detail\\quotation_lost_reason_detail.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QuotationLostReasonDetail(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_action\\test_quality_action.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestQualityAction(IntegrationTestCase):\n\t# quality action has no code\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\item_customer_detail\\item_customer_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemCustomerDetail(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\currency_exchange_settings\\test_currency_exchange_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestCurrencyExchangeSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_field\\pos_field.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSField(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_maintenance_task\\asset_maintenance_task.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetMaintenanceTask(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_barcode\\item_barcode.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemBarcode(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry_template_account\\journal_entry_template_account.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class JournalEntryTemplateAccount(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\competitor_detail\\competitor_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CompetitorDetail(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\uom_conversion_detail\\uom_conversion_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class UOMConversionDetail(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\manufacturing_settings\\test_manufacturing_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestManufacturingSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\sales_partner_item\\sales_partner_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesPartnerItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\currency_exchange_settings_details\\currency_exchange_settings_details.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CurrencyExchangeSettingsDetails(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\email_campaign\\test_email_campaign.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestEmailCampaign(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_sub_assembly_item\\production_plan_sub_assembly_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProductionPlanSubAssemblyItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_order_reference\\payment_order_reference.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentOrderReference(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\holiday\\holiday.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class Holiday(Document):"
    }
  ],
  "erpnext\\stock\\dashboard_chart_source\\warehouse_wise_stock_value\\warehouse_wise_stock_value.py": [
    {
      "type": "function",
      "line_start": 12,
      "code_text": "def get(\n\tchart_name=None,\n\tchart=None,\n\tno_cache=None,\n\tfilters=None,\n\tfrom_date=None,\n\tto_date=None,\n\ttimespan=None,\n\ttime_interval=None,\n\theatmap_year=None,\n):",
      "args": [
        "chart_name",
        "chart",
        "no_cache",
        "filters",
        "from_date",
        "to_date",
        "timespan",
        "time_interval",
        "heatmap_year"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\tax_category\\test_tax_category.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestTaxCategory(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\bank_account_subtype\\bank_account_subtype.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BankAccountSubtype(Document):"
    }
  ],
  "erpnext\\selling\\doctype\\sales_partner_type\\sales_partner_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SalesPartnerType(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\quality_inspection_reading\\quality_inspection_reading.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class QualityInspectionReading(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\customer_item\\customer_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CustomerItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\subscription_invoice\\test_subscription_invoice.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestSubscriptionInvoice(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\bisect_nodes\\bisect_nodes.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BisectNodes(Document):"
    }
  ],
  "erpnext\\support\\doctype\\support_settings\\support_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupportSettings(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_variant\\item_variant.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemVariant(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_supplier\\item_supplier.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemSupplier(Document):"
    }
  ],
  "erpnext\\communication\\doctype\\communication_medium_timeslot\\communication_medium_timeslot.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class CommunicationMediumTimeslot(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_quotation_item\\supplier_quotation_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierQuotationItem(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card_scrap_item\\job_card_scrap_item.py": [
    {
      "type": "class",
      "line_start": 7,
      "code_text": "class JobCardScrapItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\uom_category\\test_uom_category.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestUOMCategory(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\transaction_deletion_record_details\\transaction_deletion_record_details.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TransactionDeletionRecordDetails(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\sub_operation\\sub_operation.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class SubOperation(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_payment_method\\pos_payment_method.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSPaymentMethod(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_item_reference\\production_plan_item_reference.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProductionPlanItemReference(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\item_variant_attribute\\item_variant_attribute.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ItemVariantAttribute(Document):"
    }
  ],
  "erpnext\\regional\\doctype\\south_africa_vat_settings\\test_south_africa_vat_settings.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestSouthAfricaVATSettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\templates\\utils.py": [
    {
      "type": "function",
      "line_start": 10,
      "code_text": "def send_message(sender, message, subject=\"Website Query\"):",
      "args": [
        "sender",
        "message",
        "subject"
      ]
    }
  ],
  "erpnext\\stock\\doctype\\warehouse_type\\test_warehouse_type.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestWarehouseType(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\contract_template_fulfilment_terms\\contract_template_fulfilment_terms.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ContractTemplateFulfilmentTerms(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\mode_of_payment\\test_mode_of_payment.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestModeofPayment(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_meeting\\test_quality_meeting.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestQualityMeeting(IntegrationTestCase):\n\t# nothing to test\n\tpass"
    }
  ],
  "erpnext\\buying\\doctype\\request_for_quotation_item\\request_for_quotation_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RequestforQuotationItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_health\\ledger_health.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LedgerHealth(Document):"
    }
  ],
  "erpnext\\support\\doctype\\issue_type\\issue_type.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class IssueType(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\campaign_email_schedule\\campaign_email_schedule.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class CampaignEmailSchedule(Document):"
    }
  ],
  "erpnext\\buying\\doctype\\supplier_scorecard_scoring_variable\\supplier_scorecard_scoring_variable.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupplierScorecardScoringVariable(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\manufacturer\\test_manufacturer.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestManufacturer(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_health_monitor_company\\ledger_health_monitor_company.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LedgerHealthMonitorCompany(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\ledger_health_monitor\\ledger_health_monitor.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LedgerHealthMonitor(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\fiscal_year_company\\fiscal_year_company.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class FiscalYearCompany(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_material_request_warehouse\\test_production_plan_material_request_warehouse.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestProductionPlanMaterialRequestWarehouse(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\stock\\doctype\\landed_cost_item\\landed_cost_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LandedCostItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\territory_item\\territory_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TerritoryItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\delivery_settings\\test_delivery_settings.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestDeliverySettings(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\email_digest\\test_email_digest.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestEmailDigest(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\crm\\doctype\\contract_template\\test_contract_template.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestContractTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_gateway_account\\test_payment_gateway_account.py": [
    {
      "type": "class",
      "line_start": 10,
      "code_text": "class TestPaymentGatewayAccount(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\default_energy_point_rules.py": [
    {
      "type": "function",
      "line_start": 36,
      "code_text": "def get_default_energy_point_rules():",
      "args": []
    }
  ],
  "erpnext\\accounts\\doctype\\budget_account\\budget_account.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BudgetAccount(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\tax_withheld_vouchers\\tax_withheld_vouchers.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TaxWithheldVouchers(Document):"
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_receipt_supplied_item\\subcontracting_receipt_supplied_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubcontractingReceiptSuppliedItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_terms_template_detail\\payment_terms_template_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentTermsTemplateDetail(Document):"
    }
  ],
  "erpnext\\regional\\doctype\\uae_vat_account\\uae_vat_account.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class UAEVATAccount(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\contract_fulfilment_checklist\\contract_fulfilment_checklist.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ContractFulfilmentChecklist(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_search_fields\\pos_search_fields.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class POSSearchFields(Document):"
    }
  ],
  "erpnext\\support\\doctype\\issue_priority\\issue_priority.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class IssuePriority(Document):"
    }
  ],
  "erpnext\\startup\\filters.py": [
    {
      "type": "function",
      "line_start": 1,
      "code_text": "def get_filters_config():",
      "args": []
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_order_item\\subcontracting_order_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubcontractingOrderItem(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_sales_order\\production_plan_sales_order.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProductionPlanSalesOrder(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\journal_entry_template\\test_journal_entry_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestJournalEntryTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\subcontracting\\doctype\\subcontracting_receipt_item\\subcontracting_receipt_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SubcontractingReceiptItem(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\shipment_parcel_template\\test_shipment_parcel_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestShipmentParcelTemplate(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\assets\\doctype\\asset_repair_purchase_invoice\\asset_repair_purchase_invoice.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetRepairPurchaseInvoice(Document):"
    }
  ],
  "erpnext\\gettext\\extractors\\uom_data.py": [
    {
      "type": "function",
      "line_start": 4,
      "code_text": "def extract(fileobj, *args, **kwargs):",
      "args": [
        "fileobj",
        "*args",
        "**kwargs"
      ]
    }
  ],
  "erpnext\\accounts\\doctype\\discounted_invoice\\discounted_invoice.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class DiscountedInvoice(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_repair_consumed_item\\asset_repair_consumed_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class AssetRepairConsumedItem(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_meeting_minutes\\quality_meeting_minutes.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityMeetingMinutes(Document):"
    }
  ],
  "erpnext\\support\\doctype\\support_search_source\\support_search_source.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class SupportSearchSource(Document):"
    }
  ],
  "erpnext\\utilities\\doctype\\video\\test_video.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class TestVideo(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\setup\\doctype\\employee_education\\employee_education.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class EmployeeEducation(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\production_plan_material_request\\production_plan_material_request.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProductionPlanMaterialRequest(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\linked_location\\linked_location.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class LinkedLocation(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\repost_accounting_ledger_items\\repost_accounting_ledger_items.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class RepostAccountingLedgerItems(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\stock_closing_balance\\stock_closing_balance.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class StockClosingBalance(Document):"
    }
  ],
  "erpnext\\crm\\doctype\\prospect_opportunity\\prospect_opportunity.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ProspectOpportunity(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\job_card_scheduled_time\\job_card_scheduled_time.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class JobCardScheduledTime(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_meeting_agenda\\quality_meeting_agenda.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityMeetingAgenda(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\employee_internal_work_history\\employee_internal_work_history.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class EmployeeInternalWorkHistory(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_feedback_template\\quality_feedback_template.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityFeedbackTemplate(Document):"
    }
  ],
  "erpnext\\stock\\doctype\\purchase_receipt_item\\purchase_receipt_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PurchaseReceiptItem(Document):"
    }
  ],
  "erpnext\\assets\\doctype\\asset_movement_item\\asset_movement_item.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class AssetMovementItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\cashier_closing\\test_cashier_closing.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestCashierClosing(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\manufacturing\\doctype\\work_order_operation\\work_order_operation.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class WorkOrderOperation(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\shipping_rule_country\\shipping_rule_country.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class ShippingRuleCountry(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\pos_closing_entry_taxes\\pos_closing_entry_taxes.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class POSClosingEntryTaxes(Document):"
    }
  ],
  "erpnext\\bulk_transaction\\doctype\\bulk_transaction_log_detail\\bulk_transaction_log_detail.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class BulkTransactionLogDetail(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\cost_center_allocation_percentage\\cost_center_allocation_percentage.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class CostCenterAllocationPercentage(Document):"
    }
  ],
  "erpnext\\manufacturing\\doctype\\material_request_plan_item\\material_request_plan_item.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class MaterialRequestPlanItem(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\payment_entry_deduction\\payment_entry_deduction.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class PaymentEntryDeduction(Document):"
    }
  ],
  "erpnext\\quality_management\\doctype\\quality_goal_objective\\quality_goal_objective.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class QualityGoalObjective(Document):"
    }
  ],
  "erpnext\\accounts\\doctype\\process_statement_of_accounts_customer\\process_statement_of_accounts_customer.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ProcessStatementOfAccountsCustomer(Document):"
    }
  ],
  "erpnext\\setup\\doctype\\global_defaults\\test_global_defaults.py": [
    {
      "type": "class",
      "line_start": 8,
      "code_text": "class TestGlobalDefaults(IntegrationTestCase):\n\tpass"
    }
  ],
  "erpnext\\support\\doctype\\service_day\\service_day.py": [
    {
      "type": "class",
      "line_start": 9,
      "code_text": "class ServiceDay(Document):"
    }
  ]
}