// background.js

// Database setup
const dbName = "webpageDB";
const dbVersion = 1;
const storeName = "webpages";

// Initialize IndexedDB
async function initDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(dbName, dbVersion);

    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);

    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains(storeName)) {
        db.createObjectStore(storeName);
      }
    };
  });
}

// Handle messages from content script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'saveWebpage') {
    handleSaveWebpage(message.data)
      .then(() => sendResponse({ status: 'success' }))
      .catch(error => sendResponse({ status: 'error', error: error.message }));
    return true; // Will respond asynchronously
  }
  
  if (message.action === 'getAllKeys') {
    getAllKeys()
      .then(keys => sendResponse({ status: 'success', keys }))
      .catch(error => sendResponse({ status: 'error', error: error.message }));
    return true; // Will respond asynchronously
  }

  if (message.action === 'deleteKey') {
    deleteKey(message.key)
      .then(() => sendResponse({ status: 'success' }))
      .catch(error => sendResponse({ status: 'error', error: error.message }));
    return true; // Will respond asynchronously
  }
});

// Save webpage data
async function handleSaveWebpage(data) {
  const db = await initDB();
  const transaction = db.transaction([storeName], 'readwrite');
  const store = transaction.objectStore(storeName);
  
  return new Promise((resolve, reject) => {
    const request = store.put(data.html, data.key);
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// Get all keys
async function getAllKeys() {
  const db = await initDB();
  const transaction = db.transaction([storeName], 'readonly');
  const store = transaction.objectStore(storeName);
  
  return new Promise((resolve, reject) => {
    const request = store.getAllKeys();
    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
}

// Delete a key
async function deleteKey(key) {
  const db = await initDB();
  const transaction = db.transaction([storeName], 'readwrite');
  const store = transaction.objectStore(storeName);
  
  return new Promise((resolve, reject) => {
    const request = store.delete(key);
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// content.js
// content.js
(function() {
    // Function to get text starting content from a cloned document
    function getTextStarting(documentClone) {
      const buttons = documentClone.querySelectorAll('button');
      buttons.forEach(button => button.remove());
      
      const headers = documentClone.querySelectorAll('header');
      headers.forEach(header => header.remove());
  
      return documentClone.body.innerText.substring(0, 900);
    }
  
    async function saveWebpage() {
      try {
        // Create a clone of the document
        const documentClone = document.cloneNode(true);
        
        // Get text starting from the clone
        //const textStarting = getTextStarting(documentClone); this added trim()
        const textStarting = document.body.innerText.trim().substring(0, 900);
        // Create the key
        const key = `${window.location.href} ${document.title} ${textStarting}`;
        
        // Get the original HTML
        const html = document.documentElement.outerHTML;
  
        // Send message to background script
        chrome.runtime.sendMessage({
          action: 'saveWebpage',
          data: {
            key: key,
            html: html
          }
        }, response => {
          console.log('Save response:', response);
        });
  
      } catch (error) {
        console.error('Error processing webpage:', error);
      }
    }
  
    // Wait 5 seconds after page load, then save
    window.addEventListener('load', () => {
      setTimeout(saveWebpage, 5000);
    });
  })();

// manifest.json
{
  "manifest_version": 3,
  "name": "Webpage HTML Saver",
  "version": "1.0",
  "description": "Saves webpage HTML using background script",
  "permissions": [
    "activeTab",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"]
    }
  ],
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'"
  }
}

// popup.html
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="imported/jquery.dataTables.css">
    <link rel="stylesheet" type="text/css" href="imported/dataTables.bootstrap5.min.css">
    <style>
        body {
            width: 800px;
            height: 500px;
            margin: 0;
            padding: 16px;
            font-family: Arial, sans-serif;
        }

        .container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        h2 {
            margin-top: 0;
            margin-bottom: 16px;
        }

        .table-container {
            flex: 1;
            overflow: auto;
        }

        #table-keys {
            width: 100% !important;
            font-size: 13px;
        }

        #table-keys td {
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* First column - title & preview */
        #table-keys td:first-child {
            max-width: 400px;
        }

        /* Second column - link */
        #table-keys td:nth-child(2) {
            max-width: 100px;
        }

        /* Make the DataTables search box smaller and fit better */
        .dataTables_filter {
            margin-bottom: 10px;
            font-size: 13px;
        }

        .dataTables_filter input {
            width: 200px !important;
            height: 24px !important;
        }

        /* Style the pagination to be more compact */
        .dataTables_paginate {
            font-size: 13px;
            padding-top: 0.5em !important;
        }

        /* Style buttons */
        button {
            padding: 4px 8px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #e0e0e0;
        }

        /* Links */
        a {
            color: #0066cc;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        /* Make sure horizontal scroll shows when needed */
        .dataTables_wrapper {
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Saved Webpages</h2>
        <div class="table-container">
            <table id="table-keys" class="display">
                <thead>
                    <tr>
                        <th>Title & Preview</th>
                        <th>Link</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <script src="imported/jquery-3.7.1.min.js"></script>
    <script src="imported/jquery.dataTables.min.js"></script>
    <script src="popup.js"></script>
</body>
</html>


// popup.js
// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', displayKeys);

async function displayKeys() {
    try {
        // Request keys from background script
        chrome.runtime.sendMessage({ action: 'getAllKeys' }, response => {
            if (response.status === 'error') {
                console.error('Error:', response.error);
                return;
            }

            const keys = response.keys;
            
            // Destroy existing DataTable if it exists
            if ($.fn.DataTable.isDataTable('#table-keys')) {
                $('#table-keys').DataTable().destroy();
            }

            // Clear the table body
            const tableBody = $('#table-keys tbody');
            tableBody.empty();

            // Add rows
            keys.forEach((key, index) => {
                try {
                    // Extract URL - everything before the first space
                    const urlEndIndex = key.indexOf(' ');
                    const url = urlEndIndex !== -1 ? key.substring(0, urlEndIndex) : key;
                    
                    // Create a unique ID using index
                    const buttonId = `delete-${index}`;
                    
                    // Create the row
                    const row = document.createElement('tr');
                    
                    // First column - key content
                    const keyCell = document.createElement('td');
                    keyCell.textContent = key;
                    row.appendChild(keyCell);
                    
                    // Second column - link
                    const linkCell = document.createElement('td');
                    const link = document.createElement('a');
                    link.href = url;
                    link.target = '_blank';
                    link.textContent = 'Visit Page';
                    linkCell.appendChild(link);
                    row.appendChild(linkCell);
                    
                    // Third column - delete button
                    const buttonCell = document.createElement('td');
                    const deleteButton = document.createElement('button');
                    deleteButton.id = buttonId;
                    deleteButton.textContent = 'Delete';
                    deleteButton.addEventListener('click', () => deleteKey(key));
                    buttonCell.appendChild(deleteButton);
                    row.appendChild(buttonCell);
                    
                    // Add the complete row
                    tableBody[0].appendChild(row);
                    
                } catch (err) {
                    console.error('Error processing key:', err);
                }
            });

            // Initialize DataTable with improved configuration
            $('#table-keys').DataTable({
                //pageLength: 5,  // Show fewer rows per page
                order: [[0, 'desc']],
                columnDefs: [
                    {
                        targets: 0,
                        width: '60%',
                        render: function(data, type, row) {
                            if (type === 'display') {
                                // Add tooltip for full text on hover
                                return `<div title="${data.replace(/"/g, '&quot;')}">${data}</div>`;
                            }
                            return data;
                        }
                    },
                    {
                        targets: 1,
                        width: '20%'
                    },
                    {
                        targets: 2,
                        width: '20%',
                        orderable: false
                    }
                ],
                dom: '<"top"f>rt<"bottom"ip>', // Customize the DataTables layout
                language: {
                    search: "Search:",
                    paginate: {
                        first: "«",
                        previous: "‹",
                        next: "›",
                        last: "»"
                    },
                    info: "_START_ - _END_ of _TOTAL_",
                    infoEmpty: "No entries to show",
                    infoFiltered: "(filtered from _MAX_ total entries)"
                },
                scrollY: '400px',  // Enable vertical scrolling
                scrollCollapse: true,  // Enable scroll collapse
                responsive: true,  // Make the table responsive
                initComplete: function(settings, json) {
                    // Add any post-initialization customization here
                    $('.dataTables_filter input').attr('placeholder', 'Type to search...');
                }
            });

            // Add window resize handler to adjust the table layout
            $(window).on('resize', function() {
                if ($.fn.DataTable.isDataTable('#table-keys')) {
                    $('#table-keys').DataTable().columns.adjust();
                }
            });

        });
    } catch (error) {
        console.error('Error in displayKeys:', error);
        // Display error message to user
        const tableBody = $('#table-keys tbody');
        tableBody.html('<tr><td colspan="3">Error loading saved pages. Please try again.</td></tr>');
    }
}

function deleteKey(key) {
    if (!key) {
        console.error('No key provided for deletion');
        return;
    }

    // Add confirmation dialog
    if (confirm('Are you sure you want to delete this saved page?')) {
        chrome.runtime.sendMessage({ 
            action: 'deleteKey', 
            key: key 
        }, response => {
            if (response.status === 'success') {
                displayKeys(); // Refresh the table
            } else {
                console.error('Error deleting key:', response.error);
                alert('Error deleting the saved page. Please try again.');
            }
        });
    }
}

// Handle errors that might occur during script loading
window.onerror = function(msg, url, lineNo, columnNo, error) {
    console.error('Error: ' + msg + '\nURL: ' + url + '\nLine: ' + lineNo + '\nColumn: ' + columnNo + '\nError object: ' + JSON.stringify(error));
    return false;
};

// README.md
# scripts

1. Added DataTables:
- Included jQuery and DataTables CDN links
- Initialized DataTable with configuration
- Added proper table structure

2. Table Structure:
- Three columns: content, link, and actions
- URL extracted from the key for the link column
- Delete button in actions column

3. Features:
- Search functionality (built into DataTables)
- Pagination
- Sorting (except for actions column)
- Column width definitions
- Links open in new tab

4. Improvements:
- Wider popup (800px) to accommodate table
- Better organization of data
- More professional look

The rest of your extension files (manifest.json, content.js, background.js) remain the same. Would you like me to add any additional DataTables features or modify the current setup?

# Challenges - not able to load js scripts



