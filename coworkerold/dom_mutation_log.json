[
    {
        "time": "2025-05-23T16:14:13.150Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,798",
        "newValue": "#page=1&zoom=auto,-21,797",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,797\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.165Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,797",
        "newValue": "#page=1&zoom=auto,-21,792",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,792\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.182Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,792",
        "newValue": "#page=1&zoom=auto,-21,783",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,783\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.197Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,783",
        "newValue": "#page=1&zoom=auto,-21,773",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,773\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.216Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,773",
        "newValue": "#page=1&zoom=auto,-21,759",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,759\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.233Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,759",
        "newValue": "#page=1&zoom=auto,-21,744",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,744\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.250Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,744",
        "newValue": "#page=1&zoom=auto,-21,729",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,729\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.264Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,729",
        "newValue": "#page=1&zoom=auto,-21,717",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,717\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.282Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,717",
        "newValue": "#page=1&zoom=auto,-21,707",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,707\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.298Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,707",
        "newValue": "#page=1&zoom=auto,-21,701",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,701\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.315Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,701",
        "newValue": "#page=1&zoom=auto,-21,699",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,699\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:13.425Z",
        "type": "attribute-changed",
        "tag": "A",
        "attribute": "href",
        "oldValue": "#page=1&zoom=auto,-21,699",
        "newValue": "#page=1&zoom=auto,-21,699",
        "outerHTML": "<a href=\"#page=1&amp;zoom=auto,-21,699\" id=\"viewBookmark\" class=\"toolbarButton labeled\" tabindex=\"0\" data-l10n-id=\"pdfjs-bookmark-button\" title=\"Current Page (View URL from Current Page)\">\n                        <span data-l10n-id=\"pdfjs-bookmark-button-label\">Current Page</span>\n                      </a>"
    },
    {
        "time": "2025-05-23T16:14:26.436Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.437Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.437Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:26.438Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.439Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.440Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:26.446Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "0",
        "newValue": "0",
        "outerHTML": "<div class=\"annotationEditorLayer\" hidden=\"\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.447Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled",
        "newValue": "annotationEditorLayer",
        "outerHTML": "<div class=\"annotationEditorLayer\" hidden=\"\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.449Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "0",
        "newValue": "0",
        "outerHTML": "<div class=\"annotationEditorLayer\" hidden=\"\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.450Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled",
        "newValue": "annotationEditorLayer",
        "outerHTML": "<div class=\"annotationEditorLayer\" hidden=\"\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.452Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "0",
        "newValue": "-1",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.455Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:26.457Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer",
        "newValue": "annotationEditorLayer disabled highlightEditing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.459Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled",
        "newValue": "annotationEditorLayer disabled highlightEditing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.460Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "hidden",
        "oldValue": "",
        "newValue": null,
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.462Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "0",
        "newValue": "-1",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.464Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:26.467Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer",
        "newValue": "annotationEditorLayer disabled highlightEditing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.471Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled",
        "newValue": "annotationEditorLayer disabled highlightEditing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.474Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "hidden",
        "oldValue": "",
        "newValue": null,
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:26.478Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-checked",
        "oldValue": "true",
        "newValue": "true",
        "outerHTML": "<button id=\"cursorSelectTool\" class=\"toolbarButton labeled toggled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-text-select-tool-button\" role=\"radio\" aria-checked=\"true\" title=\"Enable Text Selection Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-text-select-tool-button-label\">Text Selection Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:26.481Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-checked",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"cursorHandTool\" class=\"toolbarButton labeled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-hand-tool-button\" role=\"radio\" aria-checked=\"false\" title=\"Enable Hand Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-hand-tool-button-label\">Hand Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:26.483Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "disabled",
        "oldValue": null,
        "newValue": "",
        "outerHTML": "<button id=\"cursorSelectTool\" class=\"toolbarButton labeled toggled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-text-select-tool-button\" role=\"radio\" aria-checked=\"true\" title=\"Enable Text Selection Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-text-select-tool-button-label\">Text Selection Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:26.486Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "disabled",
        "oldValue": null,
        "newValue": "",
        "outerHTML": "<button id=\"cursorHandTool\" class=\"toolbarButton labeled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-hand-tool-button\" role=\"radio\" aria-checked=\"false\" title=\"Enable Hand Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-hand-tool-button-label\">Hand Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:26.490Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorFreeTextButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorFreeTextParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-free-text-button\" title=\"Text\">\n                      <span data-l10n-id=\"pdfjs-editor-free-text-button-label\">Text</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:26.492Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "class",
        "oldValue": "toolbarButton",
        "newValue": "toolbarButton toggled",
        "outerHTML": "<button id=\"editorHighlightButton\" class=\"toolbarButton toggled\" type=\"button\" role=\"radio\" aria-expanded=\"true\" aria-haspopup=\"true\" aria-controls=\"editorHighlightParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-highlight-button\" title=\"Highlight\">\n                      <span data-l10n-id=\"pdfjs-editor-highlight-button-label\">Highlight</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:26.495Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "true",
        "outerHTML": "<button id=\"editorHighlightButton\" class=\"toolbarButton toggled\" type=\"button\" role=\"radio\" aria-expanded=\"true\" aria-haspopup=\"true\" aria-controls=\"editorHighlightParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-highlight-button\" title=\"Highlight\">\n                      <span data-l10n-id=\"pdfjs-editor-highlight-button-label\">Highlight</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:26.497Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editorParamsToolbar hidden doorHangerRight",
        "newValue": "editorParamsToolbar doorHangerRight",
        "outerHTML": "<div class=\"editorParamsToolbar doorHangerRight\" id=\"editorHighlightParamsToolbar\">\n                      <div id=\"highlightParamsToolbarContainer\" class=\"editorParamsToolbarContainer\">\n                        <div id=\"editorHighlightColorPicker\" class=\"colorPicker\">\n                          <span id=\"highlightColorPickerLabel\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-highlight-colorpicker-label\">Highlight color</span>\n                        <div class=\"dropdown\" role=\"listbox\" aria-multiselectable=\"false\" aria-orientation=\"horizontal\" data-l10n-id=\"pdfjs-editor-colorpicker-dropdown\" aria-labelledby=\"highlightColorPickerLabel\" aria-label=\"Color choices\"><button tabindex=\"0\" role=\"option\" data-color=\"#FFFF98\" title=\"Yellow\" data-l10n-id=\"pdfjs-editor-colorpicker-yellow\" aria-selected=\"true\"><span class=\"swatch\" style=\"background-color: rgb(255, 255, 152);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#53FFBC\" title=\"Green\" data-l10n-id=\"pdfjs-editor-colorpicker-green\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(83, 255, 188);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#80EBFF\" title=\"Blue\" data-l10n-id=\"pdfjs-editor-colorpicker-blue\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(128, 235, 255);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#FFCBE6\" title=\"Pink\" data-l10n-id=\"pdfjs-editor-colorpicker-pink\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(255, 203, 230);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#FF4F5F\" title=\"Red\" data-l10n-id=\"pdfjs-editor-colorpicker-red\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(255, 79, 95);\"></span></button></div></div>\n                        <div id=\"editorHighlightThickness\">\n                          <label for=\"editorFreeHighlightThickness\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-free-highlight-thickness-input\">Thickness</label>\n                          <div class=\"thicknessPicker\">\n                            <input type=\"range\" id=\"editorFreeHighlightThickness\" class=\"editorParamsSlider\" data-l10n-id=\"pdfjs-editor-free-highlight-thickness-title\" value=\"12\" min=\"8\" max=\"24\" step=\"1\" tabindex=\"0\" title=\"Change thickness when highlighting items other than text\">\n                          </div>\n                        </div>\n                        <div id=\"editorHighlightVisibility\">\n                          <div class=\"divider\"></div>\n                          <div class=\"toggler\">\n                            <label for=\"editorHighlightShowAll\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-highlight-show-all-button-label\">Show all</label>\n                            <button id=\"editorHighlightShowAll\" class=\"toggle-button\" type=\"button\" data-l10n-id=\"pdfjs-editor-highlight-show-all-button\" aria-pressed=\"true\" tabindex=\"0\" title=\"Show all\"></button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>"
    },
    {
        "time": "2025-05-23T16:14:26.501Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorInkButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorInkParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-ink-button\" title=\"Draw\">\n                      <span data-l10n-id=\"pdfjs-editor-ink-button-label\">Draw</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:26.504Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorStampButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorStampParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-stamp-button\" title=\"Add or edit images\">\n                      <span data-l10n-id=\"pdfjs-editor-stamp-button-label\">Add or edit images</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:26.507Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorSignatureButton\" class=\"toolbarButton\" type=\"button\" tabindex=\"0\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorSignatureParamsToolbar\" data-l10n-id=\"pdfjs-editor-signature-button\" title=\"Add signature\">\n                      <span data-l10n-id=\"pdfjs-editor-signature-button-label\">Add signature</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:28.780Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:28.796Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:28.800Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.806Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.812Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:28.823Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": null,
        "newValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "outerHTML": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.834Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x));",
        "newValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "outerHTML": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.840Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.846Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.943Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled highlightEditing",
        "newValue": "annotationEditorLayer disabled highlightEditing drawing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing drawing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.956Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:28.965Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.971Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.978Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:28.989Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:28.998Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.027Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:29.035Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.043Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.051Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:29.061Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.067Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.160Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:29.171Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.182Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.196Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:29.210Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.222Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.258Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:29.270Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.283Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.303Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:29.315Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.327Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.954Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.965Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.979Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "newValue": "",
        "outerHTML": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:29.995Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "newValue": "",
        "outerHTML": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:30.011Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting selecting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.024Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:30.038Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:30.056Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.092Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled highlightEditing drawing",
        "newValue": "annotationEditorLayer disabled highlightEditing",
        "outerHTML": "<div class=\"annotationEditorLayer disabled highlightEditing\" dir=\"ltr\" tabindex=\"-1\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor selectedEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Brendan Eich∗, Mike Shaver∗, David Anderson∗, David Mandelin∗,\nMohammad R. Haghighat$, Blake Kaplan∗, Graydon Hoare∗, Boris Zbarsky∗, Jason Orendorff∗,\nJesse Ruderman∗, Edwin Smith#, Rick Reitm\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.106Z",
        "type": "added",
        "html": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.120Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "aria-hidden",
        "oldValue": null,
        "newValue": "true",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.135Z",
        "type": "added",
        "html": "<defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs>"
    },
    {
        "time": "2025-05-23T16:14:30.151Z",
        "type": "added",
        "html": "<path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.169Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "id",
        "oldValue": null,
        "newValue": "path_p1_0",
        "outerHTML": "<path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.185Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "vector-effect",
        "oldValue": null,
        "newValue": "non-scaling-stroke",
        "outerHTML": "<path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.203Z",
        "type": "added",
        "html": "<clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath>"
    },
    {
        "time": "2025-05-23T16:14:30.221Z",
        "type": "attribute-changed",
        "tag": "clipPath",
        "attribute": "id",
        "oldValue": null,
        "newValue": "clip_path_p1_0",
        "outerHTML": "<clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath>"
    },
    {
        "time": "2025-05-23T16:14:30.238Z",
        "type": "attribute-changed",
        "tag": "clipPath",
        "attribute": "clipPathUnits",
        "oldValue": null,
        "newValue": "objectBoundingBox",
        "outerHTML": "<clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath>"
    },
    {
        "time": "2025-05-23T16:14:30.255Z",
        "type": "added",
        "html": "<use href=\"#path_p1_0\" class=\"clip\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.269Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "href",
        "oldValue": null,
        "newValue": "#path_p1_0",
        "outerHTML": "<use href=\"#path_p1_0\" class=\"clip\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.284Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "class",
        "oldValue": null,
        "newValue": "clip",
        "outerHTML": "<use href=\"#path_p1_0\" class=\"clip\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.299Z",
        "type": "added",
        "html": "<use href=\"#path_p1_0\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.318Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "href",
        "oldValue": null,
        "newValue": "#path_p1_0",
        "outerHTML": "<use href=\"#path_p1_0\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.335Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "viewBox",
        "oldValue": "0 0 1 1",
        "newValue": "0 0 1 1",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.354Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "fill",
        "oldValue": null,
        "newValue": "#FFFF98",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.370Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "fill-opacity",
        "oldValue": null,
        "newValue": "1",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.384Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": null,
        "newValue": "top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.400Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 17.1%;",
        "newValue": "top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.415Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 17.1%; left: 11.05%;",
        "newValue": "top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.432Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 17.1%; left: 11.05%; width: 73.51%;",
        "newValue": "top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.450Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": null,
        "newValue": "highlight",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.467Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "d",
        "oldValue": null,
        "newValue": "M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z",
        "outerHTML": "<path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.481Z",
        "type": "added",
        "html": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.497Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "aria-hidden",
        "oldValue": null,
        "newValue": "true",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.515Z",
        "type": "added",
        "html": "<defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs>"
    },
    {
        "time": "2025-05-23T16:14:30.533Z",
        "type": "added",
        "html": "<path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.548Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "id",
        "oldValue": null,
        "newValue": "path_p1_1",
        "outerHTML": "<path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.558Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "vector-effect",
        "oldValue": null,
        "newValue": "non-scaling-stroke",
        "outerHTML": "<path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.570Z",
        "type": "added",
        "html": "<use href=\"#path_p1_1\" class=\"mainOutline\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.581Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "href",
        "oldValue": null,
        "newValue": "#path_p1_1",
        "outerHTML": "<use href=\"#path_p1_1\" class=\"mainOutline\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.597Z",
        "type": "added",
        "html": "<use href=\"#path_p1_1\" class=\"secondaryOutline\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.612Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "class",
        "oldValue": null,
        "newValue": "mainOutline",
        "outerHTML": "<use href=\"#path_p1_1\" class=\"mainOutline\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.624Z",
        "type": "attribute-changed",
        "tag": "use",
        "attribute": "class",
        "oldValue": null,
        "newValue": "secondaryOutline",
        "outerHTML": "<use href=\"#path_p1_1\" class=\"secondaryOutline\"></use>"
    },
    {
        "time": "2025-05-23T16:14:30.635Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": null,
        "newValue": "top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.647Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 16.85%;",
        "newValue": "top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.659Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 16.85%; left: 10.8%;",
        "newValue": "top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.672Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "style",
        "oldValue": "top: 16.85%; left: 10.8%; width: 74.01%;",
        "newValue": "top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.707Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": null,
        "newValue": "highlightOutline selected",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.724Z",
        "type": "attribute-changed",
        "tag": "path",
        "attribute": "d",
        "oldValue": null,
        "newValue": "M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z",
        "outerHTML": "<path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path>"
    },
    {
        "time": "2025-05-23T16:14:30.738Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "data-main-rotation",
        "oldValue": null,
        "newValue": "0",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" fill=\"#FFFF98\" fill-opacity=\"1\" style=\"top: 17.1%; left: 11.05%; width: 73.51%; height: 5.13%;\" class=\"highlight\" data-main-rotation=\"0\"><defs><path id=\"path_p1_0\" vector-effect=\"non-scaling-stroke\" d=\"M0.40974017140525104 0.013645224171540085 V0 H0.4214392599646307 V0.013645224171540085 H0.5565229220514217 V0 H0.5682220106108012 V0.013645224171540085 H0.739083117943137 V0 H0.7507822065025166 V0.013645224171540085 H0.9202829547000408 V0 H0.9319820432594206 V0.013645224171540085 H0.9404162698952524 V0.33333333333333354 H0.9798666848047886 V0.3196881091617934 H0.9915657733641682 V0.33333333333333354 H1 V0.6822612085769983 H0.9903414501428377 V0.58869395711501 H0.9829955108148551 V0.6822612085769983 H0.8106380084342266 V0.58869395711501 H0.8032920691062441 V0.6822612085769983 H0.6495714868725345 V0.58869395711501 H0.642361583458033 V0.6822612085769983 H0.4761256971840567 V0.58869395711501 H0.46877975785607406 V0.6822612085769983 H0.4505509454495988 V1 H0.324989797306489 V0.6822612085769983 H0.3209087199020542 V0.8986354775828463 H0.3113862059583731 V1 H0.16814038906271256 V0.9064327485380117 H0.16079444973473 V1 H0 V0.6510721247563352 H0.056046796354237524 V0.33333333333333354 H0.2766970480206775 V0.013645224171540085 Z M0.41286899741531774 0.33333333333333354 V0.2690058479532166 H0.42035097265678145 V0.33333333333333354 Z M0.5597877839749694 0.33333333333333354 V0.2690058479532166 H0.5669976873894709 V0.33333333333333354 Z M0.7409876207318732 0.33333333333333354 V0.2690058479532166 H0.7495578832811862 V0.33333333333333354 Z M0.9234117807101074 0.33333333333333354 V0.2690058479532166 H0.9307577200380901 V0.33333333333333354 Z M0.31315467283362813 0.6296296296296298 V0.5808966861598441 H0.3203645762481296 V0.6296296296296298 Z\"></path><clipPath id=\"clip_path_p1_0\" clipPathUnits=\"objectBoundingBox\"><use href=\"#path_p1_0\" class=\"clip\"></use></clipPath></defs><use href=\"#path_p1_0\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.754Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "data-main-rotation",
        "oldValue": null,
        "newValue": "0",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.767Z",
        "type": "added",
        "html": "<div data-editor-rotation=\"0\" class=\"highlightEditor selectedEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Brendan Eich∗, Mike Shaver∗, David Anderson∗, David Mandelin∗,\nMohammad R. Haghighat$, Blake Kaplan∗, Graydon Hoare∗, Boris Zbarsky∗, Jason Orendorff∗,\nJesse Ruderman∗, Edwin Smith#, Rick Reitm\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.784Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "highlightEditor",
        "newValue": "highlightEditor selectedEditor",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"highlightEditor selectedEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Brendan Eich∗, Mike Shaver∗, David Anderson∗, David Mandelin∗,\nMohammad R. Haghighat$, Blake Kaplan∗, Graydon Hoare∗, Boris Zbarsky∗, Jason Orendorff∗,\nJesse Ruderman∗, Edwin Smith#, Rick Reitm\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.804Z",
        "type": "added",
        "html": "<div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\"></button></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.821Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline",
        "newValue": "highlightOutline selected",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline selected\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:30.839Z",
        "type": "attribute-changed",
        "tag": "INPUT",
        "attribute": "disabled",
        "oldValue": null,
        "newValue": "",
        "outerHTML": "<input type=\"range\" id=\"editorFreeHighlightThickness\" class=\"editorParamsSlider\" data-l10n-id=\"pdfjs-editor-free-highlight-thickness-title\" value=\"12\" min=\"8\" max=\"24\" step=\"1\" tabindex=\"0\" title=\"Change thickness when highlighting items other than text\" disabled=\"\">"
    },
    {
        "time": "2025-05-23T16:14:30.861Z",
        "type": "added",
        "html": "<button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button>"
    },
    {
        "time": "2025-05-23T16:14:30.883Z",
        "type": "added",
        "html": "<div class=\"divider\"></div>"
    },
    {
        "time": "2025-05-23T16:14:30.904Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editToolbar hidden",
        "newValue": "editToolbar",
        "outerHTML": "<div class=\"editToolbar\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\"></button></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.924Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "title",
        "oldValue": null,
        "newValue": "Remove highlight",
        "outerHTML": "<button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button>"
    },
    {
        "time": "2025-05-23T16:14:30.942Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "aria-label",
        "oldValue": "Brendan Eich∗, Mike Shaver∗, David Anderson∗, David Mandelin∗,\nMohammad R. Haghighat$, Blake Kaplan∗, Graydon Hoare∗, Boris Zbarsky∗, Jason Orendorff∗,\nJesse Ruderman∗, Edwin Smith#, Rick Reitm",
        "newValue": "Highlight editor",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"highlightEditor selectedEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:30.958Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "title",
        "oldValue": null,
        "newValue": "Change color",
        "outerHTML": "<button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button>"
    },
    {
        "time": "2025-05-23T16:14:31.004Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:31.018Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:31.033Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:31.051Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:31.067Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:31.081Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:31.107Z",
        "type": "attribute-changed",
        "tag": "SPAN",
        "attribute": "aria-owns",
        "oldValue": null,
        "newValue": "pdfjs_internal_editor_0",
        "outerHTML": "<span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span>"
    },
    {
        "time": "2025-05-23T16:14:31.123Z",
        "type": "attribute-changed",
        "tag": "SPAN",
        "attribute": "role",
        "oldValue": "presentation",
        "newValue": null,
        "outerHTML": "<span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span>"
    },
    {
        "time": "2025-05-23T16:14:44.338Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.357Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.382Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.402Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.421Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.439Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer highlighting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer highlighting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.467Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "highlightEditor selectedEditor",
        "newValue": "highlightEditor",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.483Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editToolbar",
        "newValue": "editToolbar hidden",
        "outerHTML": "<div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.500Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline selected",
        "newValue": "highlightOutline",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:14:44.516Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "-1",
        "newValue": "0",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.536Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.561Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled highlightEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.579Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer highlightEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.598Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer highlightEditing stampEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.620Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "tabindex",
        "oldValue": "-1",
        "newValue": "0",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.640Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer highlighting",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:44.660Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer disabled highlightEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.682Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer highlightEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.703Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer highlightEditing stampEditing",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:44.725Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-checked",
        "oldValue": "true",
        "newValue": "true",
        "outerHTML": "<button id=\"cursorSelectTool\" class=\"toolbarButton labeled toggled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-text-select-tool-button\" role=\"radio\" aria-checked=\"true\" title=\"Enable Text Selection Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-text-select-tool-button-label\">Text Selection Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:44.748Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-checked",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"cursorHandTool\" class=\"toolbarButton labeled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-hand-tool-button\" role=\"radio\" aria-checked=\"false\" title=\"Enable Hand Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-hand-tool-button-label\">Hand Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:44.771Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "disabled",
        "oldValue": "",
        "newValue": "",
        "outerHTML": "<button id=\"cursorSelectTool\" class=\"toolbarButton labeled toggled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-text-select-tool-button\" role=\"radio\" aria-checked=\"true\" title=\"Enable Text Selection Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-text-select-tool-button-label\">Text Selection Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:44.798Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "disabled",
        "oldValue": "",
        "newValue": "",
        "outerHTML": "<button id=\"cursorHandTool\" class=\"toolbarButton labeled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-cursor-hand-tool-button\" role=\"radio\" aria-checked=\"false\" title=\"Enable Hand Tool\" disabled=\"\">\n                          <span data-l10n-id=\"pdfjs-cursor-hand-tool-button-label\">Hand Tool</span>\n                        </button>"
    },
    {
        "time": "2025-05-23T16:14:44.822Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorFreeTextButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorFreeTextParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-free-text-button\" title=\"Text\">\n                      <span data-l10n-id=\"pdfjs-editor-free-text-button-label\">Text</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:44.846Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "class",
        "oldValue": "toolbarButton toggled",
        "newValue": "toolbarButton",
        "outerHTML": "<button id=\"editorHighlightButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorHighlightParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-highlight-button\" title=\"Highlight\">\n                      <span data-l10n-id=\"pdfjs-editor-highlight-button-label\">Highlight</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:44.868Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "true",
        "newValue": "false",
        "outerHTML": "<button id=\"editorHighlightButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorHighlightParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-highlight-button\" title=\"Highlight\">\n                      <span data-l10n-id=\"pdfjs-editor-highlight-button-label\">Highlight</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:44.895Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editorParamsToolbar doorHangerRight",
        "newValue": "editorParamsToolbar doorHangerRight hidden",
        "outerHTML": "<div class=\"editorParamsToolbar doorHangerRight hidden\" id=\"editorHighlightParamsToolbar\">\n                      <div id=\"highlightParamsToolbarContainer\" class=\"editorParamsToolbarContainer\">\n                        <div id=\"editorHighlightColorPicker\" class=\"colorPicker\">\n                          <span id=\"highlightColorPickerLabel\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-highlight-colorpicker-label\">Highlight color</span>\n                        <div class=\"dropdown\" role=\"listbox\" aria-multiselectable=\"false\" aria-orientation=\"horizontal\" data-l10n-id=\"pdfjs-editor-colorpicker-dropdown\" aria-labelledby=\"highlightColorPickerLabel\" aria-label=\"Color choices\"><button tabindex=\"0\" role=\"option\" data-color=\"#FFFF98\" title=\"Yellow\" data-l10n-id=\"pdfjs-editor-colorpicker-yellow\" aria-selected=\"true\"><span class=\"swatch\" style=\"background-color: rgb(255, 255, 152);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#53FFBC\" title=\"Green\" data-l10n-id=\"pdfjs-editor-colorpicker-green\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(83, 255, 188);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#80EBFF\" title=\"Blue\" data-l10n-id=\"pdfjs-editor-colorpicker-blue\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(128, 235, 255);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#FFCBE6\" title=\"Pink\" data-l10n-id=\"pdfjs-editor-colorpicker-pink\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(255, 203, 230);\"></span></button><button tabindex=\"0\" role=\"option\" data-color=\"#FF4F5F\" title=\"Red\" data-l10n-id=\"pdfjs-editor-colorpicker-red\" aria-selected=\"false\"><span class=\"swatch\" style=\"background-color: rgb(255, 79, 95);\"></span></button></div></div>\n                        <div id=\"editorHighlightThickness\">\n                          <label for=\"editorFreeHighlightThickness\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-free-highlight-thickness-input\">Thickness</label>\n                          <div class=\"thicknessPicker\">\n                            <input type=\"range\" id=\"editorFreeHighlightThickness\" class=\"editorParamsSlider\" data-l10n-id=\"pdfjs-editor-free-highlight-thickness-title\" value=\"12\" min=\"8\" max=\"24\" step=\"1\" tabindex=\"0\" title=\"Change thickness when highlighting items other than text\" disabled=\"\">\n                          </div>\n                        </div>\n                        <div id=\"editorHighlightVisibility\">\n                          <div class=\"divider\"></div>\n                          <div class=\"toggler\">\n                            <label for=\"editorHighlightShowAll\" class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-highlight-show-all-button-label\">Show all</label>\n                            <button id=\"editorHighlightShowAll\" class=\"toggle-button\" type=\"button\" data-l10n-id=\"pdfjs-editor-highlight-show-all-button\" aria-pressed=\"true\" tabindex=\"0\" title=\"Show all\"></button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>"
    },
    {
        "time": "2025-05-23T16:14:44.922Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorInkButton\" class=\"toolbarButton\" type=\"button\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorInkParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-ink-button\" title=\"Draw\">\n                      <span data-l10n-id=\"pdfjs-editor-ink-button-label\">Draw</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:44.952Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "class",
        "oldValue": "toolbarButton",
        "newValue": "toolbarButton toggled",
        "outerHTML": "<button id=\"editorStampButton\" class=\"toolbarButton toggled\" type=\"button\" role=\"radio\" aria-expanded=\"true\" aria-haspopup=\"true\" aria-controls=\"editorStampParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-stamp-button\" title=\"Add or edit images\">\n                      <span data-l10n-id=\"pdfjs-editor-stamp-button-label\">Add or edit images</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:44.984Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "true",
        "outerHTML": "<button id=\"editorStampButton\" class=\"toolbarButton toggled\" type=\"button\" role=\"radio\" aria-expanded=\"true\" aria-haspopup=\"true\" aria-controls=\"editorStampParamsToolbar\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-stamp-button\" title=\"Add or edit images\">\n                      <span data-l10n-id=\"pdfjs-editor-stamp-button-label\">Add or edit images</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:45.018Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editorParamsToolbar hidden doorHangerRight menu",
        "newValue": "editorParamsToolbar doorHangerRight menu",
        "outerHTML": "<div class=\"editorParamsToolbar doorHangerRight menu\" id=\"editorStampParamsToolbar\">\n                      <div class=\"menuContainer\">\n                        <button id=\"editorStampAddImage\" class=\"toolbarButton labeled\" type=\"button\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-stamp-add-image-button\" title=\"Add image\">\n                          <span class=\"editorParamsLabel\" data-l10n-id=\"pdfjs-editor-stamp-add-image-button-label\">Add image</span>\n                        </button>\n                      </div>\n                    </div>"
    },
    {
        "time": "2025-05-23T16:14:45.046Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-expanded",
        "oldValue": "false",
        "newValue": "false",
        "outerHTML": "<button id=\"editorSignatureButton\" class=\"toolbarButton\" type=\"button\" tabindex=\"0\" role=\"radio\" aria-expanded=\"false\" aria-haspopup=\"true\" aria-controls=\"editorSignatureParamsToolbar\" data-l10n-id=\"pdfjs-editor-signature-button\" title=\"Add signature\">\n                      <span data-l10n-id=\"pdfjs-editor-signature-button-label\">Add signature</span>\n                    </button>"
    },
    {
        "time": "2025-05-23T16:14:45.129Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer selecting",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer selecting\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span></div>"
    },
    {
        "time": "2025-05-23T16:14:45.156Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:45.182Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:45.203Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:45.223Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "",
        "newValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "outerHTML": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:45.242Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x));",
        "newValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "outerHTML": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:45.262Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:45.282Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.617Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.643Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.677Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "newValue": "",
        "outerHTML": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.704Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));",
        "newValue": "",
        "outerHTML": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.729Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer selecting",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:50.759Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.790Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.815Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:50.852Z",
        "type": "added",
        "html": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:50.885Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "stampEditor",
        "newValue": "stampEditor draggable",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:50.918Z",
        "type": "added",
        "html": "<button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\"></span></button>"
    },
    {
        "time": "2025-05-23T16:14:50.948Z",
        "type": "added",
        "html": "<div class=\"divider\"></div>"
    },
    {
        "time": "2025-05-23T16:14:50.979Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "title",
        "oldValue": null,
        "newValue": "Remove image",
        "outerHTML": "<button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button>"
    },
    {
        "time": "2025-05-23T16:14:51.010Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "aria-label",
        "oldValue": null,
        "newValue": "Image editor",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\" aria-label=\"Image editor\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:51.038Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-label",
        "oldValue": null,
        "newValue": "Alt text",
        "outerHTML": "<button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button>"
    },
    {
        "time": "2025-05-23T16:14:51.099Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:51.128Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:14:51.153Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:51.182Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:51.211Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:14:51.240Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:14:51.294Z",
        "type": "removed",
        "html": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\" aria-label=\"Image editor\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:14:51.325Z",
        "type": "added",
        "html": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\" aria-label=\"Image editor\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.043Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer stampEditing",
        "newValue": "annotationEditorLayer stampEditing waiting",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing waiting\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div><div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" hidden=\"\" style=\"z-index: 2; left: 49.59%; top: 47.07%;\" aria-label=\"Image editor\"><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.087Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer stampEditing",
        "newValue": "annotationEditorLayer stampEditing waiting",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing waiting\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:15:16.164Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "z-index: 2; left: 49.59%; top: 47.07%;",
        "newValue": "z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.209Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "z-index: 2; left: 49.59%; top: 47.07%; width: 75%;",
        "newValue": "z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.251Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer stampEditing waiting",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><div data-editor-rotation=\"0\" class=\"highlightEditor\" id=\"pdfjs_internal_editor_0\" tabindex=\"0\" role=\"mark\" data-l10n-id=\"pdfjs-editor-highlight-editor\" aria-label=\"Highlight editor\" style=\"z-index: 1; left: 11.05%; top: 17.1%; width: 73.51%; height: 5.13%;\"><div aria-hidden=\"true\" class=\"internal\" style=\"clip-path: url(&quot;#clip_path_p1_0&quot;);\"></div><div class=\"editToolbar hidden\" role=\"toolbar\" style=\"inset-inline-end: 54.7408%; top: calc(102.92396837090587% + var(--editor-toolbar-vert-offset));\"><div class=\"buttons\"><button class=\"colorPicker\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-colorpicker-button\" aria-haspopup=\"true\" title=\"Change color\"><span class=\"swatch\" aria-hidden=\"true\" style=\"background-color: rgb(255, 255, 152);\"></span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-highlight-button\" title=\"Remove highlight\"></button></div></div></div><div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.288Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "annotationEditorLayer stampEditing waiting",
        "newValue": "annotationEditorLayer stampEditing",
        "outerHTML": "<div class=\"annotationEditorLayer stampEditing\" dir=\"ltr\" tabindex=\"0\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"></div>"
    },
    {
        "time": "2025-05-23T16:15:16.334Z",
        "type": "added",
        "html": "<canvas role=\"img\" width=\"695\" height=\"275\"></canvas>"
    },
    {
        "time": "2025-05-23T16:15:16.368Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "z-index: 2; left: 49.59%; top: 47.07%; width: 75%; height: 22.96%;",
        "newValue": "z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.406Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "style",
        "oldValue": "z-index: 2; left: 12.09%; top: 47.07%; width: 75%; height: 22.96%;",
        "newValue": "z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.450Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "hidden",
        "oldValue": "",
        "newValue": null,
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.484Z",
        "type": "attribute-changed",
        "tag": "CANVAS",
        "attribute": "width",
        "oldValue": null,
        "newValue": "695",
        "outerHTML": "<canvas role=\"img\" width=\"695\" height=\"275\"></canvas>"
    },
    {
        "time": "2025-05-23T16:15:16.519Z",
        "type": "attribute-changed",
        "tag": "CANVAS",
        "attribute": "height",
        "oldValue": null,
        "newValue": "275",
        "outerHTML": "<canvas role=\"img\" width=\"695\" height=\"275\"></canvas>"
    },
    {
        "time": "2025-05-23T16:15:16.557Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "aria-description",
        "oldValue": null,
        "newValue": "rect.png",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar hidden\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.602Z",
        "type": "added",
        "html": "<div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.644Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "resizers",
        "newValue": "resizers",
        "outerHTML": "<div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.682Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "stampEditor draggable",
        "newValue": "stampEditor draggable selectedEditor",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable selectedEditor\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.717Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "editToolbar hidden",
        "newValue": "editToolbar",
        "outerHTML": "<div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.757Z",
        "type": "attribute-changed",
        "tag": "SPAN",
        "attribute": "aria-owns",
        "oldValue": null,
        "newValue": "pdfjs_internal_editor_1",
        "outerHTML": "<span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span>"
    },
    {
        "time": "2025-05-23T16:15:16.789Z",
        "type": "attribute-changed",
        "tag": "SPAN",
        "attribute": "role",
        "oldValue": "presentation",
        "newValue": null,
        "outerHTML": "<span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span>"
    },
    {
        "time": "2025-05-23T16:15:16.822Z",
        "type": "removed",
        "html": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable selectedEditor\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.850Z",
        "type": "added",
        "html": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable selectedEditor\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-description=\"rect.png\"><div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:16.880Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "aria-description",
        "oldValue": "rect.png",
        "newValue": null,
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable selectedEditor\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\"><div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:18.468Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:18.500Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:18.534Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:18.567Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:18.607Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:18.640Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:18.715Z",
        "type": "added",
        "html": "<svg width=\"0\" height=\"0\"><defs><mask id=\"alttext-manager-mask\" maskContentUnits=\"objectBoundingBox\"><rect fill=\"white\" width=\"1\" height=\"1\" x=\"0\" y=\"0\"></rect><rect fill=\"black\"></rect></mask></defs></svg>"
    },
    {
        "time": "2025-05-23T16:15:18.748Z",
        "type": "attribute-changed",
        "tag": "DIALOG",
        "attribute": "open",
        "oldValue": null,
        "newValue": "",
        "outerHTML": "<dialog class=\"dialog altText\" id=\"altTextDialog\" aria-labelledby=\"dialogLabel\" aria-describedby=\"dialogDescription\" open=\"\">\n          <div id=\"altTextContainer\" class=\"mainContainer\">\n            <div id=\"overallDescription\">\n              <span id=\"dialogLabel\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-label\" class=\"title\">Choose an option</span>\n              <span id=\"dialogDescription\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-description\">Alt text (alternative text) helps when people can’t see the image or when it doesn’t load.</span>\n            </div>\n            <div id=\"addDescription\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"descriptionButton\" name=\"altTextOption\" tabindex=\"0\" aria-describedby=\"descriptionAreaLabel\" checked=\"\">\n                  <label for=\"descriptionButton\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-label\">Add a description</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-description\">Aim for 1-2 sentences that describe the subject, setting, or actions.</span>\n                </div>\n              </div>\n              <div class=\"descriptionArea\">\n                <textarea id=\"descriptionTextarea\" aria-labelledby=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-textarea\" tabindex=\"0\" placeholder=\"For example, “A young man sits down at a table to eat a meal”\"></textarea>\n              </div>\n            </div>\n            <div id=\"markAsDecorative\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"decorativeButton\" name=\"altTextOption\" aria-describedby=\"decorativeLabel\">\n                  <label for=\"decorativeButton\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-label\">Mark as decorative</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"decorativeLabel\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-description\">This is used for ornamental images, like borders or watermarks.</span>\n                </div>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button id=\"altTextCancel\" class=\"secondaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-cancel-button\">Cancel</span></button>\n              <button id=\"altTextSave\" class=\"primaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-save-button\">Save</span></button>\n            </div>\n          </div>\n        <svg width=\"0\" height=\"0\"><defs><mask id=\"alttext-manager-mask\" maskContentUnits=\"objectBoundingBox\"><rect fill=\"white\" width=\"1\" height=\"1\" x=\"0\" y=\"0\"></rect><rect fill=\"black\"></rect></mask></defs></svg></dialog>"
    },
    {
        "time": "2025-05-23T16:15:18.785Z",
        "type": "attribute-changed",
        "tag": "rect",
        "attribute": "width",
        "oldValue": null,
        "newValue": "0.6934523809523809",
        "outerHTML": "<rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect>"
    },
    {
        "time": "2025-05-23T16:15:18.823Z",
        "type": "attribute-changed",
        "tag": "rect",
        "attribute": "height",
        "oldValue": null,
        "newValue": "0.2967016640253566",
        "outerHTML": "<rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect>"
    },
    {
        "time": "2025-05-23T16:15:18.853Z",
        "type": "attribute-changed",
        "tag": "rect",
        "attribute": "x",
        "oldValue": null,
        "newValue": "0.14107453255426317",
        "outerHTML": "<rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect>"
    },
    {
        "time": "2025-05-23T16:15:18.888Z",
        "type": "attribute-changed",
        "tag": "rect",
        "attribute": "y",
        "oldValue": null,
        "newValue": "0.3512942500046429",
        "outerHTML": "<rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect>"
    },
    {
        "time": "2025-05-23T16:15:18.928Z",
        "type": "attribute-changed",
        "tag": "DIALOG",
        "attribute": "class",
        "oldValue": "dialog altText",
        "newValue": "dialog altText",
        "outerHTML": "<dialog class=\"dialog altText\" id=\"altTextDialog\" aria-labelledby=\"dialogLabel\" aria-describedby=\"dialogDescription\" open=\"\">\n          <div id=\"altTextContainer\" class=\"mainContainer\">\n            <div id=\"overallDescription\">\n              <span id=\"dialogLabel\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-label\" class=\"title\">Choose an option</span>\n              <span id=\"dialogDescription\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-description\">Alt text (alternative text) helps when people can’t see the image or when it doesn’t load.</span>\n            </div>\n            <div id=\"addDescription\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"descriptionButton\" name=\"altTextOption\" tabindex=\"0\" aria-describedby=\"descriptionAreaLabel\" checked=\"\">\n                  <label for=\"descriptionButton\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-label\">Add a description</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-description\">Aim for 1-2 sentences that describe the subject, setting, or actions.</span>\n                </div>\n              </div>\n              <div class=\"descriptionArea\">\n                <textarea id=\"descriptionTextarea\" aria-labelledby=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-textarea\" tabindex=\"0\" placeholder=\"For example, “A young man sits down at a table to eat a meal”\"></textarea>\n              </div>\n            </div>\n            <div id=\"markAsDecorative\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"decorativeButton\" name=\"altTextOption\" aria-describedby=\"decorativeLabel\">\n                  <label for=\"decorativeButton\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-label\">Mark as decorative</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"decorativeLabel\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-description\">This is used for ornamental images, like borders or watermarks.</span>\n                </div>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button id=\"altTextCancel\" class=\"secondaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-cancel-button\">Cancel</span></button>\n              <button id=\"altTextSave\" class=\"primaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-save-button\">Save</span></button>\n            </div>\n          </div>\n        <svg width=\"0\" height=\"0\"><defs><mask id=\"alttext-manager-mask\" maskContentUnits=\"objectBoundingBox\"><rect fill=\"white\" width=\"1\" height=\"1\" x=\"0\" y=\"0\"></rect><rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect></mask></defs></svg></dialog>"
    },
    {
        "time": "2025-05-23T16:15:20.964Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.001Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.037Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:21.073Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.107Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.141Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:21.187Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.225Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.257Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:21.294Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.322Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:21.355Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.333Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.375Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.417Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.470Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.519Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.567Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.614Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.646Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.690Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.738Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.772Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.813Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.851Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.887Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.923Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:23.954Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:23.988Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.020Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.094Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.120Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.146Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.174Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.199Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.234Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.413Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.444Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.474Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.498Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.531Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.564Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.642Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.709Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.740Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:24.779Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.809Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:24.841Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.068Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.101Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.128Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.162Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.193Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.224Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.602Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.638Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.670Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.708Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.744Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.776Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.811Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.865Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.899Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:25.939Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:25.979Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.011Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.048Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.077Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.120Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.152Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.189Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.223Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.266Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.306Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.342Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.383Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.418Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.458Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.510Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.552Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.603Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.644Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.710Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.756Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.804Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.849Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:26.903Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:26.960Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.006Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.065Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:27.336Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.378Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.424Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:27.469Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.509Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:27.557Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.135Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.190Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.257Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.307Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.344Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.388Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.438Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.480Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.518Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.555Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.596Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:15:29.641Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.712Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "class",
        "oldValue": "altText",
        "newValue": "altText done",
        "outerHTML": "<button class=\"altText done\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-edit-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span><span class=\"tooltip\" role=\"tooltip\" id=\"alt-text-tooltip-pdfjs_internal_editor_1\">Added</span></button>"
    },
    {
        "time": "2025-05-23T16:15:29.752Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "data-l10n-id",
        "oldValue": "pdfjs-editor-alt-text-button",
        "newValue": "pdfjs-editor-alt-text-edit-button",
        "outerHTML": "<button class=\"altText done\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-edit-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span><span class=\"tooltip\" role=\"tooltip\" id=\"alt-text-tooltip-pdfjs_internal_editor_1\">Added</span></button>"
    },
    {
        "time": "2025-05-23T16:15:29.793Z",
        "type": "added",
        "html": "<span class=\"tooltip\" role=\"tooltip\" id=\"alt-text-tooltip-pdfjs_internal_editor_1\">Added</span>"
    },
    {
        "time": "2025-05-23T16:15:29.842Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "aria-describedby",
        "oldValue": null,
        "newValue": "alt-text-tooltip-pdfjs_internal_editor_1",
        "outerHTML": "<div data-editor-rotation=\"0\" class=\"stampEditor draggable selectedEditor\" id=\"pdfjs_internal_editor_1\" tabindex=\"0\" role=\"application\" data-l10n-id=\"pdfjs-editor-stamp-editor\" style=\"z-index: 2; left: 12.09%; top: 35.59%; width: 75%; height: 22.96%;\" aria-label=\"Image editor\" aria-describedby=\"alt-text-tooltip-pdfjs_internal_editor_1\"><div class=\"resizers\"><div class=\"resizer topLeft\" data-resizer-name=\"topLeft\" tabindex=\"-1\"></div><div class=\"resizer topMiddle\" data-resizer-name=\"topMiddle\" tabindex=\"-1\"></div><div class=\"resizer topRight\" data-resizer-name=\"topRight\" tabindex=\"-1\"></div><div class=\"resizer middleRight\" data-resizer-name=\"middleRight\" tabindex=\"-1\"></div><div class=\"resizer bottomRight\" data-resizer-name=\"bottomRight\" tabindex=\"-1\"></div><div class=\"resizer bottomMiddle\" data-resizer-name=\"bottomMiddle\" tabindex=\"-1\"></div><div class=\"resizer bottomLeft\" data-resizer-name=\"bottomLeft\" tabindex=\"-1\"></div><div class=\"resizer middleLeft\" data-resizer-name=\"middleLeft\" tabindex=\"-1\"></div></div><canvas role=\"img\" width=\"695\" height=\"275\"></canvas><div class=\"editToolbar\" role=\"toolbar\"><div class=\"buttons\"><button class=\"altText done\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-edit-button\" aria-label=\"Alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span><span class=\"tooltip\" role=\"tooltip\" id=\"alt-text-tooltip-pdfjs_internal_editor_1\">Added</span></button><div class=\"divider\"></div><button class=\"delete\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-remove-stamp-button\" title=\"Remove image\"></button></div></div></div>"
    },
    {
        "time": "2025-05-23T16:15:29.890Z",
        "type": "attribute-changed",
        "tag": "DIALOG",
        "attribute": "open",
        "oldValue": "",
        "newValue": null,
        "outerHTML": "<dialog class=\"dialog altText\" id=\"altTextDialog\" aria-labelledby=\"dialogLabel\" aria-describedby=\"dialogDescription\">\n          <div id=\"altTextContainer\" class=\"mainContainer\">\n            <div id=\"overallDescription\">\n              <span id=\"dialogLabel\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-label\" class=\"title\">Choose an option</span>\n              <span id=\"dialogDescription\" data-l10n-id=\"pdfjs-editor-alt-text-dialog-description\">Alt text (alternative text) helps when people can’t see the image or when it doesn’t load.</span>\n            </div>\n            <div id=\"addDescription\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"descriptionButton\" name=\"altTextOption\" tabindex=\"0\" aria-describedby=\"descriptionAreaLabel\" checked=\"\">\n                  <label for=\"descriptionButton\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-label\">Add a description</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-add-description-description\">Aim for 1-2 sentences that describe the subject, setting, or actions.</span>\n                </div>\n              </div>\n              <div class=\"descriptionArea\">\n                <textarea id=\"descriptionTextarea\" aria-labelledby=\"descriptionAreaLabel\" data-l10n-id=\"pdfjs-editor-alt-text-textarea\" tabindex=\"0\" placeholder=\"For example, “A young man sits down at a table to eat a meal”\"></textarea>\n              </div>\n            </div>\n            <div id=\"markAsDecorative\">\n              <div class=\"radio\">\n                <div class=\"radioButton\">\n                  <input type=\"radio\" id=\"decorativeButton\" name=\"altTextOption\" aria-describedby=\"decorativeLabel\">\n                  <label for=\"decorativeButton\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-label\">Mark as decorative</label>\n                </div>\n                <div class=\"radioLabel\">\n                  <span id=\"decorativeLabel\" data-l10n-id=\"pdfjs-editor-alt-text-mark-decorative-description\">This is used for ornamental images, like borders or watermarks.</span>\n                </div>\n              </div>\n            </div>\n            <div id=\"buttons\">\n              <button id=\"altTextCancel\" class=\"secondaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-cancel-button\">Cancel</span></button>\n              <button id=\"altTextSave\" class=\"primaryButton\" type=\"button\" tabindex=\"0\"><span data-l10n-id=\"pdfjs-editor-alt-text-save-button\">Save</span></button>\n            </div>\n          </div>\n        <svg width=\"0\" height=\"0\"><defs><mask id=\"alttext-manager-mask\" maskContentUnits=\"objectBoundingBox\"><rect fill=\"white\" width=\"1\" height=\"1\" x=\"0\" y=\"0\"></rect><rect fill=\"black\" width=\"0.6934523809523809\" height=\"0.2967016640253566\" x=\"0.14107453255426317\" y=\"0.3512942500046429\"></rect></mask></defs></svg></dialog>"
    },
    {
        "time": "2025-05-23T16:15:29.941Z",
        "type": "attribute-changed",
        "tag": "BUTTON",
        "attribute": "aria-label",
        "oldValue": "Alt text",
        "newValue": "Edit alt text",
        "outerHTML": "<button class=\"altText done\" tabindex=\"0\" data-l10n-id=\"pdfjs-editor-alt-text-edit-button\" aria-label=\"Edit alt text\"><span data-l10n-id=\"pdfjs-editor-alt-text-button-label\">Alt text</span><span class=\"tooltip\" role=\"tooltip\" id=\"alt-text-tooltip-pdfjs_internal_editor_1\">Added</span></button>"
    },
    {
        "time": "2025-05-23T16:17:06.762Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:17:06.851Z",
        "type": "added",
        "html": "<div class=\"endOfContent\" style=\"\"></div>"
    },
    {
        "time": "2025-05-23T16:17:06.929Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 9.68%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.97007);\">Trace-based Just-in-Time Type Specialization for Dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.09%; top: 12.19%; font-size: calc(var(--total-scale-factor) *17.93px); font-family: sans-serif; transform: scaleX(0.932173);\">Languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.66%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.904331);\">Andreas Gal</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 28.66%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 29.43%; top: 17.25%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.59%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91042);\">, Brendan Eich</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.28%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span dir=\"ltr\" style=\"left: 42.06%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.915041);\" aria-owns=\"pdfjs_internal_editor_0\">, Mike Shaver</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.07%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.84%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.92077);\">, David Anderson</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.49%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.26%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94091);\">, David Mandelin</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 78.81%; top: 17.29%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 17.44%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.28%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.91427);\">Mohammad R. Haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.94%; top: 18.89%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">$</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 34.71%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.924517);\">, Blake Kaplan</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 45.38%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.16%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.905378);\">, Graydon Hoare</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.14%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.91%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.926818);\">, Boris Zbarsky</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.98%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.75%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.901156);\">, Jason Orendorff</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.19%; top: 18.93%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.96%; top: 19.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\">,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.16%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.856194);\">Jesse Ruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.74%; top: 20.56%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">∗</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 23.52%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.94089);\">, Edwin Smith</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.81%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 35.05%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.93303);\">, Rick Reitmaier</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46.84%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 48.07%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.921742);\">, Michael Bebenita</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.65%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.81%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.897112);\">, Mason Chang</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.7%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif; transform: scaleX(1.55632);\">+#</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.09%; top: 20.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.922399);\">, Michael Franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 87.38%; top: 20.52%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.49%; top: 22.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951826);\">Mozilla Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.5%; top: 22.67%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: monospace;\">∗</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.87%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.62%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.95553);\">gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.84%; top: 24.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.6%; top: 24.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@mozilla.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.64%; top: 26.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923748);\">Adobe Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.99%; top: 25.94%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">#</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.71%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.46%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">edwsmith,rreitmai</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.54%; top: 27.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.29%; top: 27.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@adobe.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.44%; top: 29.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936127);\">Intel Corporation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.57%; top: 29.28%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">$</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.56%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.31%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mohammad.r.haghighat</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.69%; top: 30.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.44%; top: 30.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@intel.com</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.22%; top: 32.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958655);\">University of California, Irvine</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.47%; top: 32.54%; font-size: calc(var(--total-scale-factor) *5.98px); font-family: sans-serif;\">+</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.94%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">{</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.69%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">mbebenit,changm,franz</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.85%; top: 33.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">}</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.6%; top: 34.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">@uci.edu</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 42.32%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.01462);\">Abstract</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.28%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928702);\">Dynamic languages such as JavaScript are more difﬁcult to com-</span><br role=\"presentation\"><span dir=\"ltr\" style=\"left: 8.82%; top: 45.54%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91967);\" aria-owns=\"pdfjs_internal_editor_1\">pile than statically typed ones. Since no concrete type information</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.8%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.889031);\">is available, traditional compilers need to emit generic code that can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897897);\">handle all possible type combinations at runtime. We present an al-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 49.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939462);\">ternative compilation technique for dynamically-typed languages</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.57%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910917);\">that identiﬁes frequently executed loop traces at run-time and then</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945018);\">generates machine code on the ﬂy that is specialized for the ac-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.937609);\">tual dynamic types occurring on each path through the loop. Our</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897292);\">method provides cheap inter-procedural type specialization, and an</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928655);\">elegant and efﬁcient way of incrementally compiling lazily discov-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897838);\">ered alternative paths through nested loops. We have implemented</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.12%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912697);\">a dynamic compiler for JavaScript based on our technique and we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.38%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921437);\">have measured speedups of 10x and more for certain benchmark</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 60.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895224);\">programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.947772);\">Categories and Subject Descriptors</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 30.65%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.12%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(1.00111);\">D.3.4 [</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 36.43%; top: 62.6%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.945205);\">Programming Lan-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858024);\">guages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.94%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898729);\">]: Processors —</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.3%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 22.67%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910155);\">Incremental compilers, code generation</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 46%; top: 63.86%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943076);\">General Terms</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 17.88%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 19.34%; top: 65.83%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920894);\">Design, Experimentation, Measurement, Perfor-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 67.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.872749);\">mance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902554);\">Keywords</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.63%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 16.09%; top: 69.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912083);\">JavaScript, just-in-time compilation, trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">1.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.17%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.96%; top: 71.71%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(1.03871);\">Introduction</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902745);\">Dynamic languages</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.43%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.76%; top: 73.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.878268);\">such as JavaScript, Python, and Ruby, are pop-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 74.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">ular since they are expressive, accessible to non-experts, and make</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 76.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907544);\">deployment as easy as distributing a source ﬁle. They are used for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 77.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.948956);\">small scripts as well as for complex applications. JavaScript, for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 78.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912743);\">example, is the de facto standard for client-side web programming</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.955475);\">Permission to make digital or hard copies of all or part of this work for personal or</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.16%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.910279);\">classroom use is granted without fee provided that copies are not made or distributed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.17%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.904932);\">for proﬁt or commercial advantage and that copies bear this notice and the full citation</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.915712);\">on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 88.18%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.909319);\">to lists, requires prior speciﬁc permission and/or a fee.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.992643);\">PLDI’09,</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.16%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.32%; top: 89.44%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.912494);\">June 15–20, 2009, Dublin, Ireland.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(1.00649);\">Copyright c</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.72%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\">©</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.02%; top: 90.48%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 15.3%; top: 90.45%; font-size: calc(var(--total-scale-factor) *6.97px); font-family: sans-serif; transform: scaleX(0.906052);\">2009 ACM 978-1-60558-392-1/09/06. . . $5.00</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 42.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921453);\">and is used for the application logic of browser-based productivity</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 43.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939559);\">applications such as Google Mail, Google Docs and Zimbra Col-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 45.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.969838);\">laboration Suite. In this domain, in order to provide a ﬂuid user</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 46.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89061);\">experience and enable a new generation of applications, virtual ma-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 47.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906924);\">chines must provide a low startup time and high performance.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 48.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.936562);\">Compilers for statically typed languages rely on type informa-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899005);\">tion to generate efﬁcient machine code. In a dynamically typed pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925024);\">gramming language such as JavaScript, the types of expressions</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 52.58%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935923);\">may vary at runtime. This means that the compiler can no longer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923258);\">easily transform operations into machine instructions that operate</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.925056);\">on one speciﬁc type. Without exact type information, the compiler</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926828);\">must emit slower generalized machine code that can deal with all</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 57.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.93777);\">potential type combinations. While compile-time static type infer-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.87%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965878);\">ence might be able to gather type information to generate opti-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 60.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935907);\">mized machine code, traditional static analysis is very expensive</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 61.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919654);\">and hence not well suited for the highly interactive environment of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 62.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.892889);\">a web browser.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 63.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942941);\">We present a trace-based compilation technique for dynamic</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 65.16%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916155);\">languages that reconciles speed of compilation with excellent per-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 66.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.877709);\">formance of the generated machine code. Our system uses a mixed-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887414);\">mode execution approach: the system starts running JavaScript in a</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 68.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909326);\">fast-starting bytecode interpreter. As the program runs, the system</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.929763);\">identiﬁes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.17%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.79%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 59.67%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 60.31%; top: 70.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917937);\">(frequently executed) bytecode sequences, records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.45%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943859);\">them, and compiles them to fast native code. We call such a se-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902544);\">quence of instructions a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.76%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.12%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 72.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\">.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 73.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956262);\">Unlike method-based dynamic compilers, our dynamic com-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.963987);\">piler operates at the granularity of individual loops. This design</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 76.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941291);\">choice is based on the expectation that programs spend most of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.74%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">their time in hot loops. Even in dynamically typed languages, we</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89557);\">expect hot loops to be mostly</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.78%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.11%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897676);\">type-stable</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 75.53%; top: 79%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.888689);\">, meaning that the types of</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">values are invariant. (12) For example, we would expect loop coun-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">ters that start as integers to remain integers for all iterations. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914407);\">both of these expectations hold, a trace-based compiler can cover</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907589);\">the program execution with a small number of type-specialized, ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926191);\">ﬁciently compiled traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 86.55%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910305);\">Each compiled trace covers one path through the program with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">one mapping of values to types. When the VM executes a compiled</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 89.06%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.991839);\">trace, it cannot guarantee that the same path will be followed</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.32%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.967914);\">or that the same types will occur in subsequent loop iterations.</span><div class=\"endOfContent\" style=\"\"></div></div>"
    },
    {
        "time": "2025-05-23T16:17:07.019Z",
        "type": "removed",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:17:07.102Z",
        "type": "added",
        "html": "<div class=\"endOfContent\"></div>"
    },
    {
        "time": "2025-05-23T16:17:07.189Z",
        "type": "attribute-changed",
        "tag": "DIV",
        "attribute": "class",
        "oldValue": "textLayer",
        "newValue": "textLayer",
        "outerHTML": "<div tabindex=\"0\" class=\"textLayer\" data-main-rotation=\"0\" style=\"width: round(down, var(--total-scale-factor) * 612px, var(--scale-round-x)); height: round(down, var(--total-scale-factor) * 792px, var(--scale-round-y));\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89542);\">Hence, recording and compiling a trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.63%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 31.94%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.87202);\">speculates</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.04%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 38.35%; top: 9.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.86854);\">that the path and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 10.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905814);\">typing will be exactly as they were during recording for subsequent</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 11.69%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922154);\">iterations of the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.922808);\">Every compiled trace contains all the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 32.78%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 33.2%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897078);\">guards</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.21%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 37.63%; top: 12.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90729);\">(checks) required</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 14.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.981719);\">to validate the speculation. If one of the guards fails (if control</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 15.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.965264);\">ﬂow is different, or a value of a different type is generated), the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.961253);\">trace exits. If an exit becomes hot, the VM can record a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.24%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.79%; top: 16.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.917369);\">branch</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918262);\">trace</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.81%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 12.17%; top: 17.98%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915101);\">starting at the exit to cover the new path. In this way, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.873116);\">records a</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.15%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 14.52%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902121);\">trace tree</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.1%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 20.46%; top: 19.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.910125);\">covering all the hot paths through the loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 20.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.974571);\">Nested loops can be difﬁcult to optimize for tracing VMs. In</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89931);\">a na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.38%; top: 21.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946629);\">ıve implementation, inner loops would become hot ﬁrst, and</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 23.01%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.956362);\">the VM would start tracing there. When the inner loop exits, the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 24.27%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916769);\">VM would detect that a different branch was taken. The VM would</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 25.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907499);\">try to record a branch trace, and ﬁnd that the trace reaches not the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 26.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.923103);\">inner loop header, but the outer loop header. At this point, the VM</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 28.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.914331);\">could continue tracing until it reaches the inner loop header again,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 29.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.95819);\">thus tracing the outer loop inside a trace tree for the inner loop.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 30.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">But this requires tracing a copy of the outer loop for every side exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 31.81%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.935811);\">and type combination in the inner loop. In essence, this is a form</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 33.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932124);\">of unintended tail duplication, which can easily overﬂow the code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 34.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911585);\">cache. Alternatively, the VM could simply stop tracing, and give up</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 35.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902584);\">on ever tracing outer loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.955304);\">We solve the nested loop problem by recording</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 39.98%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 40.57%; top: 36.84%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908617);\">nested trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.858395);\">trees</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 11.62%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885032);\">. Our system traces the inner loop exactly as the na¨</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 41.13%; top: 38.1%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.90338);\">ıve version.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 39.36%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89399);\">The system stops extending the inner tree when it reaches an outer</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 40.62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919623);\">loop, but then it starts a new trace at the outer loop header. When</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 41.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">the outer loop reaches the inner loop header, the system tries to call</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 43.13%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887429);\">the trace tree for the inner loop. If the call succeeds, the VM records</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 44.39%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.979713);\">the call to the inner tree as part of the outer trace and ﬁnishes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 45.65%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.951385);\">the outer trace as normal. In this way, our system can trace any</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 46.91%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900664);\">number of loops nested to any depth without causing excessive tail</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 48.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.939563);\">duplication.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 49.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.950189);\">These techniques allow a VM to dynamically translate a pro-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 50.68%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928624);\">gram to nested, type-specialized trace trees. Because traces can</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 51.94%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.912666);\">cross function call boundaries, our techniques also achieve the ef-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 53.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.905829);\">fects of inlining. Because traces have no internal control-ﬂow joins,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 54.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.973899);\">they can be optimized in linear time by a simple compiler (10).</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 55.71%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.977889);\">Thus, our tracing VM efﬁciently performs the same kind of op-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 56.97%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94324);\">timizations that would require interprocedural analysis in a static</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 58.23%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.915065);\">optimization setting. This makes tracing an attractive and effective</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 59.49%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918433);\">tool to type specialize even complex function call-rich code.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 60.75%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900157);\">We implemented these techniques for an existing JavaScript in-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.943538);\">terpreter, SpiderMonkey. We call the resulting tracing VM</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 43.63%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 44.09%; top: 62%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.91086);\">Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.893109);\">Monkey</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 13.4%; top: 63.26%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.918778);\">. TraceMonkey supports all the JavaScript features of Spi-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 64.52%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.908649);\">derMonkey, with a 2x-20x speedup for traceable programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 65.78%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.920973);\">This paper makes the following contributions:</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 68.2%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 68.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921751);\">We explain an algorithm for dynamically forming trace trees to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 69.42%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.863241);\">cover a program, representing nested loops as nested trace trees.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 71.22%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 71.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.894456);\">We explain how to speculatively generate efﬁcient type-specialized</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 72.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.902974);\">code for traces from dynamic language programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 9.68%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\">•</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.37%; top: 74.24%; font-size: calc(var(--total-scale-factor) *7.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 74.2%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.906873);\">We validate our tracing techniques in an implementation based</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 75.46%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.926675);\">on the SpiderMonkey JavaScript interpreter, achieving 2x-20x</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.94%; top: 76.72%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.881225);\">speedups on many programs.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 10.78%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89428);\">The remainder of this paper is organized as follows. Section 3 is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916185);\">a general overview of trace tree based compilation we use to cap-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944969);\">ture and compile frequently executed code regions. In Section 4</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.930347);\">we describe our approach of covering nested loops using a num-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.952579);\">ber of individual trace trees. In Section 5 we describe our trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898975);\">compilation based speculative type specialization approach we use</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907514);\">to generate efﬁcient machine code from recorded bytecode traces.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.958358);\">Our implementation of a dynamic type-specializing compiler for</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92153);\">JavaScript is described in Section 6. Related work is discussed in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 8.82%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.895645);\">Section 8. In Section 7 we evaluate our dynamic compiler based on</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 9%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">1 for (var i = 2; i &lt; 100; ++i) {</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">2</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 10.25%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">if (!primes[i])</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">3</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 11.51%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">continue;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">4</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.88%; top: 12.77%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">for (var k = i + i; i &lt; 100; k += i)</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\">5</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 52.57%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.41%; top: 14.03%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes[k] = false;</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 15.29%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">6 }</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.999186);\">Figure 1. Sample program: sieve of Eratosthenes.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.08%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.68%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">primes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.29%; top: 18.09%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 89.89%; top: 18.04%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.924255);\">is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971612);\">initialized to an array of 100</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.2%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.71%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace; transform: scaleX(0.955554);\">false</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.56%; top: 19.35%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: monospace;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.08%; top: 19.3%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.942106);\">values on entry to this code</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 20.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.89686);\">snippet.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.24%; top: 26.75%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.09025);\">Interpret</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.98%; top: 27.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00095);\">Bytecodes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 66.41%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.10057);\">Monitor</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 55.17%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06978);\">Record</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.35%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.06247);\">Execute</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.89%; top: 34.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07051);\">Enter</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 35.4%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.96%; top: 39.64%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07665);\">Compile</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.79%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">LIR</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.1%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.32%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 56.81%; top: 40.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 77.77%; top: 44.65%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0416);\">Leave</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 76.01%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00078);\">Compiled</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.58%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 79.8%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">T</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 80.29%; top: 45.41%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">race</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.75%; top: 29.25%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00071);\">loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 65.61%; top: 30.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00077);\">edge</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.72%; top: 34.26%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">hot</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 61.74%; top: 35.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.78%; top: 32.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00091);\">abort</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.98%; top: 33.06%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">recording</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.77%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif;\">ﬁ</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.19%; top: 36.71%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">nish at</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 57%; top: 37.47%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00081);\">loop header</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.13%; top: 29.91%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">cold/blacklisted</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 73.42%; top: 30.67%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00088);\">loop/exit</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 72.6%; top: 32.57%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">compiled trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 74.29%; top: 33.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00086);\">ready</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.46%; top: 37.33%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00085);\">loop edge with</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 70.02%; top: 38.09%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00099);\">same types</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.73%; top: 43.29%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00098);\">side exit to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 84.26%; top: 44.05%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.84%; top: 43.02%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00097);\">side exit,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 68.43%; top: 43.78%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00094);\">no existing trace</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.85%; top: 27.3%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.0009);\">Overhead</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.57%; top: 28.93%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00092);\">Interpreting</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 83.51%; top: 30.51%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.00087);\">Native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 82.5%; top: 25.88%; font-size: calc(var(--total-scale-factor) *5.17px); font-family: sans-serif; transform: scaleX(1.07394);\">Symbol Key</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.98313);\">Figure 2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 57.48%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 58.21%; top: 49.41%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928245);\">State machine describing the major activities of Trace-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 50.67%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.941323);\">Monkey and the conditions that cause transitions to a new activ-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 51.93%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.970613);\">ity. In the dark box, TM executes JS as compiled traces. In the</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 53.19%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904166);\">light gray boxes, TM executes JS in the standard interpreter. White</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 54.44%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92504);\">boxes are overhead. Thus, to maximize performance, we need to</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 55.7%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.907634);\">maximize time spent in the darkest box and minimize time spent in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 56.96%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887342);\">the white boxes. The best case is a loop where the types at the loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 58.22%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.885731);\">edge are the same as the types on entry–then TM can stay in native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 59.48%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.911168);\">code until the loop is done.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 63.07%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.921484);\">a set of industry benchmarks. The paper ends with conclusions in</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 64.33%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.898945);\">Section 9 and an outlook on future work is presented in Section 10.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.899442);\">2.</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.14%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.93%; top: 67.08%; font-size: calc(var(--total-scale-factor) *10.96px); font-family: sans-serif; transform: scaleX(0.986085);\">Overview: Example Tracing Run</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 69.05%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.971924);\">This section provides an overview of our system by describing</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 70.31%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.946343);\">how TraceMonkey executes an example program. The example</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 71.56%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.904195);\">program, shown in Figure 1, computes the ﬁrst 100 prime numbers</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 72.82%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.887356);\">with nested loops. The narrative should be read along with Figure 2,</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 74.08%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.92631);\">which describes the activities TraceMonkey performs and when it</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 75.34%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.899162);\">transitions between the loops.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 76.59%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.932056);\">TraceMonkey always begins executing a program in the byte-</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 77.85%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.944985);\">code interpreter. Every loop back edge is a potential trace point.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 79.11%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.933445);\">When the interpreter crosses a loop edge, TraceMonkey invokes</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879666);\">the</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.59%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 54.01%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94249);\">trace monitor</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 62.06%; top: 80.37%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.916954);\">, which may decide to record or execute a native</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 81.63%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.897381);\">trace. At the start of execution, there are no compiled traces yet, so</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 82.88%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.879262);\">the trace monitor counts the number of times each loop back edge is</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.88597);\">executed until a loop becomes</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.32%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif;\"> </span><span role=\"presentation\" dir=\"ltr\" style=\"left: 69.64%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.919978);\">hot</span><span role=\"presentation\" dir=\"ltr\" style=\"left: 71.52%; top: 84.14%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.900895);\">, currently after 2 crossings. Note</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 85.4%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.880835);\">that the way our loops are compiled, the loop edge is crossed before</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 86.66%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.909265);\">entering the loop, so the second crossing occurs immediately after</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 87.92%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.928805);\">the ﬁrst iteration.</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 53.75%; top: 89.17%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.980701);\">Here is the sequence of events broken down by outer loop</span><br role=\"presentation\"><span role=\"presentation\" dir=\"ltr\" style=\"left: 51.8%; top: 90.43%; font-size: calc(var(--total-scale-factor) *8.97px); font-family: sans-serif; transform: scaleX(0.94214);\">iteration:</span><div class=\"endOfContent\"></div></div>"
    },
    {
        "time": "2025-05-23T16:17:35.546Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline",
        "newValue": "highlightOutline hovered",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline hovered\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:17:35.613Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline hovered",
        "newValue": "highlightOutline",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:19:06.632Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline",
        "newValue": "highlightOutline hovered",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline hovered\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:19:06.709Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline hovered",
        "newValue": "highlightOutline",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:19:17.192Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline",
        "newValue": "highlightOutline hovered",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline hovered\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:19:17.273Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline hovered",
        "newValue": "highlightOutline",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:20:52.067Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline",
        "newValue": "highlightOutline hovered",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline hovered\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    },
    {
        "time": "2025-05-23T16:20:52.146Z",
        "type": "attribute-changed",
        "tag": "svg:svg",
        "attribute": "class",
        "oldValue": "highlightOutline hovered",
        "newValue": "highlightOutline",
        "outerHTML": "<svg:svg version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\" aria-hidden=\"true\" style=\"top: 16.85%; left: 10.8%; width: 74.01%; height: 5.63%;\" class=\"highlightOutline\" data-main-rotation=\"0\"><defs><path id=\"path_p1_1\" vector-effect=\"non-scaling-stroke\" d=\"M0.40832319956762597 0.030195381882771002 V0.017761989342806414 H0.42399675719497365 V0.030195381882771002 H0.5541143088771787 V0.017761989342806414 H0.5697878665045264 V0.030195381882771002 H0.7354411566004593 V0.017761989342806414 H0.7511147142278071 V0.030195381882771002 H0.9154168355627618 V0.017761989342806414 H0.9310903931901094 V0.030195381882771002 H0.9394676395081745 V0.32149200710479586 H0.9745980272936089 V0.3090586145648313 H0.9902715849209567 V0.32149200710479586 H0.9986488312390217 V0.6927175843694496 H0.9850020267531415 V0.607460035523979 H0.9817592217267936 V0.6927175843694496 H0.8065126334279151 V0.607460035523979 H0.8032698284015672 V0.6927175843694496 H0.6465342521280908 V0.607460035523979 H0.6434265639778408 V0.6927175843694496 H0.4742602351033644 V0.607460035523979 H0.4710174300770166 V0.6927175843694496 H0.4529117686799081 V0.9822380106571936 H0.3241453857586813 V0.8898756660746007 H0.31468720443183357 V0.9822380106571936 H0.16835562761788947 V0.8969804618117229 H0.1651128225915417 V0.9822380106571936 H0.0013511687609782472 V0.6110124333925399 H0.05701932171328199 V0.32149200710479586 H0.2761788947439535 V0.030195381882771002 Z M0.4154843940008107 0.32149200710479586 V0.31616341030195405 H0.41886231590325634 V0.32149200710479586 Z M0.5614106201864614 0.32149200710479586 V0.31616341030195405 H0.5645183083367112 V0.32149200710479586 Z M0.7413862991487636 0.32149200710479586 V0.31616341030195405 H0.7458451560599919 V0.32149200710479586 Z M0.9225780299959465 0.32149200710479586 V0.31616341030195405 H0.9258208350222942 V0.32149200710479586 Z\"></path></defs><use href=\"#path_p1_1\" class=\"mainOutline\"></use><use href=\"#path_p1_1\" class=\"secondaryOutline\"></use></svg:svg>"
    }
]